// ta_Dump File v3.0 -- code v5.1.0.0
LeabraProject .projects[0] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [3] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserData_DocLink @[0] { };
   };

      EditMbrItem_Group @.mbrs = [9] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem_Group @.gp[0] = [3] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	};
	EditMbrItem_Group @.gp[1] { 
	};
      };

      EditMthItem_Group @.mths = [5] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
    DataTable_Group @.gp[1] = [1] { 
      DataTable @[0] { 
    UserDataItem_List @*(.user_data_) {
	  UserData_DocLink @[0] { };
    };

	DataTableCols @.data = [7] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	};
      };
    };
    DataTable_Group @.gp[2] { 
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [5] {
    Program @[0] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [0] {
      };

      ProgVar_List @.vars = [12] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [10] {
	MemberAssign @[0] { };
	MemberAssign @[1] { };
	MemberAssign @[2] { };
	MemberAssign @[3] { };
	MemberAssign @[4] { };
	MemberAssign @[5] { };
	MethodCall @[6] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[7] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[8] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[9] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
      };

      ProgEl_List @.prog_code = [0] {
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [1] {
	DataTable @[0] { 
	  DataTableCols @.data = [10] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [0] {
      };

      ProgVar_List @.vars = [42] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
	ProgVar @[17] { };
	ProgVar @[18] { };
	ProgVar @[19] { };
	ProgVar @[20] { };
	ProgVar @[21] { };
	ProgVar @[22] { };
	ProgVar @[23] { };
	ProgVar @[24] { };
	ProgVar @[25] { };
	ProgVar @[26] { };
	ProgVar @[27] { };
	ProgVar @[28] { };
	ProgVar @[29] { };
	ProgVar @[30] { };
	ProgVar @[31] { };
	ProgVar @[32] { };
	ProgVar @[33] { };
	ProgVar @[34] { };
	ProgVar @[35] { };
	ProgVar @[36] { };
	ProgVar @[37] { };
	ProgVar @[38] { };
	ProgVar @[39] { };
	ProgVar @[40] { };
	ProgVar @[41] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [10] {
	ResetDataRows @[0] { };
	AssignExpr @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	AssignExpr @[4] { };
	AssignExpr @[5] { };
	AssignExpr @[6] { };
	AssignExpr @[7] { };
	AssignExpr @[8] { };
	ForLoop @[9] { 
	  ProgEl_List @.loop_code = [16] {
	    AssignExpr @[0] { };
	    AssignExpr @[1] { };
	    AssignExpr @[2] { };
	    AssignExpr @[3] { };
	    AssignExpr @[4] { };
	    IfElse @[5] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    AssignExpr @[6] { };
	    AssignExpr @[7] { };
	    AssignExpr @[8] { };
	    If @[9] { 
	      ProgEl_List @.true_code = [2] {
		VarIncr @[0] { };
		AssignExpr @[1] { };
	      };
	    };
	    AssignExpr @[10] { };
	    AddNewDataRow @[11] { };
	    DataVarProg @[12] { };
	    DataVarProg @[13] { };
	    DataVarProg @[14] { };
	    DoneWritingDataRow @[15] { };
	  };
	};
      };
    };
    Program @[2] { 
      ProgObjList @.objs = [1] {
	DataTable @[0] { 
	  DataTableCols @.data = [10] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [0] {
      };

      ProgVar_List @.vars = [42] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
	ProgVar @[17] { };
	ProgVar @[18] { };
	ProgVar @[19] { };
	ProgVar @[20] { };
	ProgVar @[21] { };
	ProgVar @[22] { };
	ProgVar @[23] { };
	ProgVar @[24] { };
	ProgVar @[25] { };
	ProgVar @[26] { };
	ProgVar @[27] { };
	ProgVar @[28] { };
	ProgVar @[29] { };
	ProgVar @[30] { };
	ProgVar @[31] { };
	ProgVar @[32] { };
	ProgVar @[33] { };
	ProgVar @[34] { };
	ProgVar @[35] { };
	ProgVar @[36] { };
	ProgVar @[37] { };
	ProgVar @[38] { };
	ProgVar @[39] { };
	ProgVar @[40] { };
	ProgVar @[41] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [10] {
	ResetDataRows @[0] { };
	AssignExpr @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	AssignExpr @[4] { };
	AssignExpr @[5] { };
	AssignExpr @[6] { };
	AssignExpr @[7] { };
	AssignExpr @[8] { };
	ForLoop @[9] { 
	  ProgEl_List @.loop_code = [16] {
	    AssignExpr @[0] { };
	    AssignExpr @[1] { };
	    AssignExpr @[2] { };
	    AssignExpr @[3] { };
	    AssignExpr @[4] { };
	    IfElse @[5] { 
	      ProgEl_List @.true_code = [1] {
		AssignExpr @[0] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    AssignExpr @[6] { };
	    AssignExpr @[7] { };
	    AssignExpr @[8] { };
	    If @[9] { 
	      ProgEl_List @.true_code = [2] {
		VarIncr @[0] { };
		AssignExpr @[1] { };
	      };
	    };
	    AssignExpr @[10] { };
	    AddNewDataRow @[11] { };
	    DataVarProg @[12] { };
	    DataVarProg @[13] { };
	    DataVarProg @[14] { };
	    DoneWritingDataRow @[15] { };
	  };
	};
      };
    };
    Program @[3] { 
      ProgObjList @.objs = [2] {
	DataTable @[0] { 
	  DataTableCols @.data = [10] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    int_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
       };
};
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [11] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    int_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	    float_Data @[10] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [31] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
	ProgVar @[17] { };
	ProgVar @[18] { };
	ProgVar @[19] { };
	ProgVar @[20] { };
	ProgVar @[21] { };
	ProgVar @[22] { };
	ProgVar @[23] { };
	ProgVar @[24] { };
	ProgVar @[25] { };
	ProgVar @[26] { };
	ProgVar @[27] { };
	ProgVar @[28] { };
	ProgVar @[29] { };
	ProgVar @[30] { };
      };

      Function_List @.functions = [1] {
	Function @[0] { 
	  ProgVar_List @.args = [2] {
	    ProgVar @[0] { };
	    ProgVar @[1] { };
	  };

	  ProgEl_List @.fun_code = [9] {
	    ProgVars @[0] { 
	      ProgVar_List @.local_vars = [3] {
		ProgVar @[0] { };
		ProgVar @[1] { };
		ProgVar @[2] { };
	      };
	    };
	    AssignExpr @[1] { };
	    NetCounterInit @[2] { };
	    MethodCall @[3] { 
	      ProgArg_List @.meth_args = [0] {
	      };
	    };
	    MethodCall @[4] { 
	      ProgArg_List @.meth_args = [0] {
	      };
	    };
	    If @[5] { 
	      ProgEl_List @.true_code = [2] {
		ResetDataRows @[0] { };
		MethodCall @[1] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
	      };
	    };
	    ForLoop @[6] { 
	      ProgEl_List @.loop_code = [6] {
		MemberAssign @[0] { };
		MemberAssign @[1] { };
		MethodCall @[2] { 
		  ProgArg_List @.meth_args = [0] {
		  };
		};
		If @[3] { 
		  ProgEl_List @.true_code = [1] {
		    ProgramCall @[0] { 
		      ProgArg_List @.prog_args = [1] {
			ProgArg @[0] { };
		      };
		    };
		  };
		};
		If @[4] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
		NetCounterIncr @[5] { };
	      };
	    };
	    If @[7] { 
	      ProgEl_List @.true_code = [2] {
		MethodCall @[0] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
		MiscCall @[1] { 
		  ProgArg_List @.meth_args = [0] {
		  };
		};
	      };
	    };
	    ReturnExpr @[8] { };
	  };
	};
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [7] {
	ResetDataRows @[0] { };
	MemberAssign @[1] { };
	MemberAssign @[2] { };
	MemberAssign @[3] { };
	MemberAssign @[4] { };
	ForLoop @[5] { 
	  ProgEl_List @.loop_code = [7] {
	    MemberAssign @[0] { };
	    MemberAssign @[1] { };
	    MethodCall @[2] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    AssignExpr @[3] { };
	    AssignExpr @[4] { };
	    MemberAssign @[5] { };
	    ForLoop @[6] { 
	      ProgEl_List @.loop_code = [7] {
		MemberAssign @[0] { };
		MemberAssign @[1] { };
		MethodCall @[2] { 
		  ProgArg_List @.meth_args = [1] {
		    ProgArg @[0] { };
		  };
		};
		MemberAssign @[3] { };
		MethodCall @[4] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
		MemberAssign @[5] { };
		ForLoop @[6] { 
		  ProgEl_List @.loop_code = [9] {
		    FunctionCall @[0] { 
		      ProgArg_List @.fun_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    AssignExpr @[1] { };
		    AssignExpr @[2] { };
		    AssignExpr @[3] { };
		    AddNewDataRow @[4] { };
		    DataVarProg @[5] { };
		    DataVarProg @[6] { };
		    DataVarProg @[7] { };
		    DoneWritingDataRow @[8] { };
		  };
		};
	      };
	    };
	  };
	};
	DataGroupProg @[6] { 
	  DataOpList @.ops = [11] {
	    DataGroupEl @[0] { };
	    DataGroupEl @[1] { };
	    DataGroupEl @[2] { };
	    DataGroupEl @[3] { };
	    DataGroupEl @[4] { };
	    DataGroupEl @[5] { };
	    DataGroupEl @[6] { };
	    DataGroupEl @[7] { };
	    DataGroupEl @[8] { };
	    DataGroupEl @[9] { };
	    DataGroupEl @[10] { };
	  };
	};
      };
    };
    Program @[4] { 
      ProgObjList @.objs = [1] {
	DataTable @[0] { 
	  DataTableCols @.data = [10] {
	    float_Data @[0] { };
	    float_Data @[1] { };
	    int_Data @[2] { };
	    float_Data @[3] { };
	    float_Data @[4] { };
	    float_Data @[5] { };
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [11] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [6] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	AssignExpr @[2] { };
	DataCalcLoop @[3] { 
	  DataOpList @.src_cols = [10] {
	    DataOpEl @[0] { };
	    DataOpEl @[1] { };
	    DataOpEl @[2] { };
	    DataOpEl @[3] { };
	    DataOpEl @[4] { };
	    DataOpEl @[5] { };
	    DataOpEl @[6] { };
	    DataOpEl @[7] { };
	    DataOpEl @[8] { };
	    DataOpEl @[9] { };
	  };

	  DataOpList @.dest_cols = [0] {
	  };

	  ProgEl_List @.loop_code = [4] {
	    AssignExpr @[0] { };
	    IfElse @[1] { 
	      ProgEl_List @.true_code = [5] {
		AssignExpr @[0] { };
		AssignExpr @[1] { };
		AssignExpr @[2] { };
		AssignExpr @[3] { };
		AssignExpr @[4] { };
	      };

	      ProgEl_List @.false_code = [1] {
		AssignExpr @[0] { };
	      };
	    };
	    VarIncr @[2] { };
	    DataCalcSetSrcRow @[3] { };
	  };

	  ProgVar_List @.src_col_vars = [10] {
	    ProgVar @[0] { };
	    ProgVar @[1] { };
	    ProgVar @[2] { };
	    ProgVar @[3] { };
	    ProgVar @[4] { };
	    ProgVar @[5] { };
	    ProgVar @[6] { };
	    ProgVar @[7] { };
	    ProgVar @[8] { };
	    ProgVar @[9] { };
	  };

	  ProgVar_List @.dest_col_vars = [0] {
	  };
	};
	AssignExpr @[4] { };
	PrintVar @[5] { };
      };
    };
    Program_Group @.gp[0] = [3] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [11] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	  ProgVar @[8] { };
	  ProgVar @[9] { };
	  ProgVar @[10] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [12] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetCounterInit @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[6] { 
	    ProgEl_List @.loop_code = [10] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};

		ProgEl_List @.false_code = [2] {
		  AssignExpr @[0] { };
		  AssignExpr @[1] { };
		};
	      };
	      MemberAssign @[1] { };
	      MemberAssign @[2] { };
	      ProgramCall @[3] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      MemberAssign @[4] { };
	      MemberAssign @[5] { };
	      NetUpdateView @[6] { };
	      NetCounterIncr @[7] { };
	      IfContinue @[8] { };
	      IfBreak @[9] { };
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  IfElse @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[10] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetUpdateView @[11] { };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [4] {
	  PrintExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[2] { };
	  ProgramCall @[3] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [7] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };

	  T3DataViewFrame_List @.frames = [6] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [5] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [2] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [7] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [7] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [2] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [10] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [10] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [2] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [10] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [10] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[5] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [10] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
	UserDataItem @[19] { };
	UserDataItem @[20] { };
	UserDataItem @[21] { };
	UserDataItem @[22] { };
   };

      BaseSpec_Group @.specs = [5] {
	LeabraUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [2] {
	    LeabraBiasSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraLayerSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	FullPrjnSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
	LeabraUnitSpec @[4] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
      };

      Layer_Group @.layers = [3] {
	LeabraLayer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [1] {
	    LeabraUnit @[0] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [1]		};
	      };
	    };
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [1] {
	    LeabraUnit @[0] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [1]		};
	      };
	    };
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [1] {
	    LeabraUnit @[0] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [1]		};
		LeabraRecvCons @[1] { 
	  [1]		};
	      };

	      SendCons_List @.send = [0] {
	      };
	    };
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>

= Single Unit (Neuron) =

This simulation illustrates the basic properties of neural unit activation, reflecting a balance of excitatory and inhibitory influences (including leak and synaptic inhibition).

* To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.

== Orientation to the Software (ControlPanel and Views) ==

As this is the first simulation project in the textbook, we begin with some introductory orientation.  All of the major controls and parameters for the simulation are contained within the [[.edits.ControlPanel]] object located in the middle of the 3 panels visible in the main project window (you can access it from the tab at the top of this middle panel).  The right panel contains various 3D graphical displays of simulation data, including the network (NetView or Network View) and various graphs and grid-like displays (Graph view, Grid view).

In this simulation, there are two different ways to view the results, selectable by the tabs at the top of the right side of the window:
* The [[.T3Tab.Network]] tab shows the (very simple) network that is being simulated, with a single sending (input) unit (at the bottom) that sends activation to the receiving unit (at the top).  We are primarily concerned with how the receiving unit responds to the activation input from the sending unit.
* The [[.T3Tab.CycleOutputData]] tab shows a graph of the receiving unit's main variables (see below for details) over time, in response to the sending activation.

We will see this single input being turned on and then off again, and observe the response of the receiving unit.  To see this, we can run
the simulation.

At the bottom of the [[.edits.ControlPanel]] are 4 buttons: Init, Run, Step, Stop:
# [[.programs.LeabraSettle.Init()|Init]] -- initializes the graph display and starts the simulation over from wherever it might have left off.
# [[.programs.LeabraSettle.Run()|Run]] -- runs the full set of cycles of activation updating (updating of the equations that govern the behavior of the neural unit), displaying the results in the Network and CycleOutputData frames on the right hand side of the window.
# [[.programs.LeabraSettle.Step()|Step]] -- runs one single cycle of activation updating.
# [[.programs.LeabraSettle.Stop()|Stop]] -- if running, this will stop running.

* Text like this that is indented with a bullet all by itself (not part of a list) indicates actions to take.  In this case, hit [[.programs.LeabraSettle.Init()|Init]] and [[.programs.LeabraSettle.Run()|Run]], and look at the [[.T3Tab.Network]] display.

You should see that very shortly after the input unit comes on (indicated by the yellow color), the receiving unit is activated by this input.  To get a better idea of the precise trajectory of this activation, it is much more convenient to use the '''Graph View''', which displays the information graphically over time, allows multiple variables to be viewed at the same time, and even allows multiple runs (e.g., with different parameters) to be compared with each other.

== The Graph View ==

* Press the [[.T3Tab.CycleOutputData]] tab in the right panel to display the graph view display.

The plots produced by this simulation are much like that shown in Figure 2.9 in the textbook. Only the excitatory and leak currents are
operating here, with their conductances (<code>g_bar.e, g_bar.l</code>) and reversal potentials (<code>e_rev.e, e_rev.l</code>) as shown in the control panel.

* Press the [[.programs.LeabraSettle.Init()|Init]] button and then the [[.programs.LeabraSettle.Run()|Run]] button on the control panel to display a new graph.

This produces a plot using the current parameters (figure 2.17 in textbook).  You should see various lines plotted over 200 time steps (''cycles'') on the X axis.  Note that the standard 0-1 normalized parameters are used by default.

Here is a quick overview of each of the variables -- we'll go through them individually next
(see [[.docs.GraphHelp]] for more details on how to determine what is being graphed, and how to configure it):
* '''net''' (red line) = net input, which is the total excitatory input to the neuron (net = g_e(t) * g_bar_e).  g_e(t) is the proportion of excitatory ion channels open, and it goes from 0 prior to cycle 10, to 1 from 10-160, and back to 0 thereafter.  Because g_bar_e = .4, the net value goes up to .4 from cycle 10-160.  The timing of when the input comes on and goes off is in the ControlPanel, on_cycle and off_cycle.
* '''I_net''' (orange line) = net current (sum of individual excitation and leak currents), which is excitatory (upward) when the excitatory input comes on, and then returns to zero with constant input.  When the excitatation goes off, the net current is negative as the constant leak current takes over and pushes the membrane potential down back to rest.
* '''v_m''' (yellow line) = membrane potential.  This starts out at the resting potential of .15 (-70mV in biological units), and then increases with the excitatory input. As you can see, the net current (I_net) shows the <i>rate of change</i> of the membrane potential.
* '''act''' (green line) = activation.  This shows the amount of activation sent to other units -- by default it is a rate code using the NOISY_XX1 function -- to see discrete spiking, switch the act_fun in the control panel to SPIKE instead of NOISY_XX1.
* '''act_eq''' (blue line) = rate-code equivalent activation -- this always shows a rate code equivalent for whatever activation function is being used (if a rate code like NOISY_XX1 is being used, then it is the same as act).

First, let's focus on the <code>net</code> line (it's the red one, displayed as a solid line in figure 2.17 in text).  This shows the ''net input'' to the unit, which starts out at 0, and then rapidly jumps to .4, remaining there until around 160 time steps, where it goes back to 0 again.  Recall that this net input is just another name for the total excitatory input to the neuron (i.e., net = g_e * g_bar_e).  In this simulation, the sending unit always sends a g_e value of 1 when it's on, and a 0 when off.  Later, we will manipulate the value of g_bar_e in the control panel to control the magnitude of the net input (it is .4 because the default value of g_bar.e is .4).  The timing of the input is controlled by the parameters <code>on_cycle</code> and <code>off_cycle</code> (the total number of cycles is controlled by <code>n_cycles</code>).

The second line, <code>I_net</code> (in orange/dashed), shows the ''net current'' in the unit, reflecting the overall balance between the excitatory net input and the constant leak current (plus inhibition in general, but this is not present in this simulation).  As expected, this shows an excitatory (upward) current when the input comes on, and an inhibitory (downward) one when the input goes off.  Because it reflects ''changes'' in the unit, it goes back to zero after the unit adapts to the steady excitatory input.

The third line, <code>v_m</code> (in yellow/dotted), shows the ''membrane potential'', which starts at the resting potential of .15, then increases with the excitation, and decreases back to rest when the input goes off.  This integrates the changes reflected in the I_net variable, and represents the overall integration of all the information coming into the unit.

The fourth line, <code>act</code> (in green/dash-dot), shows the ''activation'' value (using the NOISY_XX1 rate-coded activation function) that results from the membrane potential.  It goes from 0 up to roughly .72 and back down again.  Note that the activation rise trails the net input by several cycles -- this is due to the time it takes for the membrane potential to reach the firing threshold for the neuron.

'''Software Tip:''' You can click on any line in the graph log display using the red-arrow tool (click on the red arrow button in the upper-right corner of the 3d view window to see the exact values at the point where you clicked (as displayed in the graph caption at the bottom).  You can also click on the light green outer frame, and then do the context menu (right mouse button or Ctrl + left mouse on mac) and select DataTable/Edit Dialog to obtain a spreadsheet view of all the data being plotted in the graph.   You can then scroll through this data to find any value you might want to find.

* Click with the mouse on the v_m line on the graph to verify that the activation rise does indeed occur right around the threshold value for the membrane potential (.25).

The fifth line, <code>act_eq</code> (blue) is not turned on to begin with.  To turn it on, click the on! button next to it on the graph view control panel that shows up in the middle panel when you click on the [[.T3Tab.CycleOutputData]] tab (see the wiki [[.Wiki.Graph_View]] and local docs [[.docs.GraphHelp]] for more info).  You will initially see just  the label key turn on,  but won't actually see the blue line because it is superimposed perfectly on the act value (green line). (You can reveal it by toggling the on! button off for the act variable.) This value shows the rate-code equivalent activation value for discrete spiking units.  When an actual rate-code activation function (noisy XX1) is used, act_eq is just equivalent to act.  We will see the value of this variable later when we switch to spiking units.

== Manipulating Parameters ==

Now we will use some of the parameters in the control panel to explore the properties of the point neuron activation function.  

* Click on the [[.PanelTab.ControlPanel]] and take a moment to familiarize yourself with the parameters (you can hover the mouse over the label for each parameter to view a brief description of what it is).

'''Software Tip:'' All ''edit dialogs'' like the control panel have at least two buttons across the bottom: <code>Apply</code> (which applies any changes you have made to actually set the parameters) and <code>Revert</code> (which reverts to the previously applied values, which is useful if you have accidentally typed in a value that you didn't want).  See the wiki [[.Wiki.Edit_dialog]] for more information.

=== Excitatory ===

First, we will focus on <code>g_bar.e</code>, which controls the amount of excitatory conductance as described earlier.  In general, we are interested in seeing how the unit membrane potential reflects a balance of the different inputs coming into it (here just excitation and leak), and how the output activation responds to the resulting membrane potential.

* Increase g_bar.e from .4 to .5 (and press the Apply and Run buttons to see the effects).  Then observe the effects of decreasing g_bar.e to .3.

<hr>

'''Question 2.1 (a)''' ''Describe the effects on the neural response of increasing g_bar.e to .5, and of decreasing it to .3.'' '''(b)''' ''Is there a qualitative difference in the unit activation (act) between these two changes of magnitude .1 away from the initial .4 value?'' '''(c)''' ''What important aspect of the point neuron activation function does this reveal?''

<hr>

'''Software tip:''' It is often useful to overlay different Runs on top of each other in the graph log, which will happen naturally.  When you want to clear the log, press the Init button in the [[.PanelTab.ControlPanel]]. 

By systematically searching the parameter range for g_bar.e between .3 and .4, you should be able to locate the point at which the membrane potential just reaches threshold (recall that this is at V_m= .25 in the normalized units).  To make it easier to locate the threshold, we will switch from the noisy XX1 activation function (which has a ''soft'' threshold due to the effects of the convolved noise) to the XX1 activation function (which has a hard threshold due to the absence of noise).

* In the [[.PanelTab.ControlPanel]], switch the act_fun setting from NOISY_XX1 to XX1 (and press Apply).

<hr>

'''Question 2.2 (a)''' ''To 3 decimal places, what value of g_bar.e puts the unit just over threshold?  Can you think of a better way of finding this value (Hint: Do you remember an equation for the equilibrium membrane potential given a particular set of inputs?)''  '''(b)''' ''Compute the exact value of excitatory input required to just reach threshold, showing your math (note that: g_l is always 1 because the leak channels are always open; g_e is 1 when the input is on; inhibition is not present here and can be ignored).  Does this agree with your empirically determined value?  (Hint: It should!)''

<hr>

=== Leak ===

You can also play around with the value of the leak conductance, g_bar.l, which controls the size of the leak current.  

* Press the <code>Defaults</code> button on the control panel to restore the default parameters, and then see what happens when you increase or decrease the leak.

<hr>

'''Question 2.3 (a)''' ''How does the response of the unit change when you change g_bar.l?  Why?'' '''(b)''' ''How does this differ from changes to g_bar.e?'' '''(c)''' ''Use the same technique you used in the previous question to compute the exact amount of leak current necessary to put the membrane potential exactly at threshold when the g_bar.e value is at the default of .4 (show your math).''

<hr>

* Press Defaults to restore the default parameters.

Now that we have a sense of how the unit responds to different currents, and computes a resulting membrane potential that reflects the balance of these currents, we can explore the role of the reversal potentials (e_rev.e and e_rev.l).

<hr>

'''Question 2.4 (a)''' ''What happens to the unit's activity if you change the leak reversal potential e_rev.l from .15 to 0?'' '''(b)''' ''What about when you increase it to .2?  For both questions, explain the results, taking note of what happens before the input goes on as well as what happens while it is on.'' '''(c)''' ''What can you conclude about the relationship between the resting potential and the leak reversal potential?''

<hr>

* Press Defaults to restore the default parameters.

<hr>

'''Question 2.5 (a)''' ''What happens to the unit's activity if you change the excitatory reversal potential e_rev.e from 1 to .5?  Why does this happen?'' '''(b)''' ''Can you compensate for this by changing the value of g_bar.e?  To two decimal places, use the simulator to find the value of g_bar.e that gives essentially the same activation value as the default parameters.'' '''(c)''' ''Then use the same approach as in question 2.2 to solve for the exact value of g_bar.e that will compensate for this change in e_rev.e (use .256 for the membrane potential under the default parameters, and show your math).''

<hr>

== The Activation Output ==

In this section, we explore the way in which the unit computes its activation output.  The main objective is to understand the relationship between the spiking and rate-code activation functions.
We will use the same project as the previous section. 

* Press Defaults to start out with default parameters.

From the previous section, we know that changing the level of excitatory input will affect the membrane potential, and the resulting rate coded activation value.  Now let's explore this relationship in the spiking activation function.  

* Set act_fun to SPIKE, and press Apply and then Run.

Instead of the steady values during the input presentation period, you now see the oscillations caused by the spiking mechanism (as we saw previously in figure 2.12 in the textbook).  Thus, as soon as the membrane potential crosses the threshold, the activation spikes, and the membrane potential is reset (to a sub-resting potential of 0, reflecting the overshoot of the spiking mechanism).  Then, the potential climbs back up, and the process repeats itself.

The spacing between the spikes is inversely proportional to the firing rate, but it can be hard to eyeball this from the graph.  Let's look at act_eq, the rate-code equivalent spike-rate value as a function of the spike train (see equation 2.18 in the textbook).

* If it is not already toggled on, in the [[.PanelTab.CycleOutputData]] graph control panel, click the <code>on!</code> button for the Y5 act_eq value, which will now show up in blue in your graph.

* Next, observe the effects of changing g_bar.e from .4, first to .38 and then to .42.

<hr>

'''Question 2.6'''  ''Describe and explain the effects on the spike rate of decreasing g_bar.e  to .38, and of increasing it to .42.''

<hr>

The empirically-measured rate-code equivalent for the spiking activation function (act_eq) compares fairly closely with the rate-code value computed directly as a function of the membrane potential (act for NOISY_XX1), as we saw in figure 2.15 in the textbook.

* To explore this relationship in the simulation, you can switch between SPIKE and NOISY_XX1 for different values of g_bar.e.

You should observe a reasonably close fit between the final values of act_eq for SPIKE with that of NOISY_XX1.  However, with smaller g_bar.e values (e.g., .38), the NOISY_XX1 is somewhat below the spiking act_eq.  Achieving a much closer fit between spiking and rate coded activations such as that displayed in figure 2.15 requires different parameter values that are not otherwise appropriate for this
exploration.  This is due to the ''aliasing'' effects of discrete-time updating (i.e., coarse-grained digitization effects, like when trying to display a photograph on a low-resolution display), which the spiking model is very sensitive to.

* Change g_bar.e back to its default value of .4., and make sure act_fun is set to SPIKE.

An important aspect of spiking in real neurons is that the timing and intervals between spikes can be quite random, although the overall rate of firing remains predictable.  This is obviously not evident with the single constant input used so far, which results in regular firing.  However, if we introduce noise by adding small randomly generated values to the membrane potential, then we can see some of
this kind of effect, although it is still not as dramatic as it would be with multiple spiking inputs coming into the cell.  Note that this additional noise plays a similar role as the convolution of noise with the XX1 function in the noisy XX1 function, but in the case of the noisy XX1 we have a deterministic function that incorporates the averaged effects of noise, while here we are actually adding in the random values themselves, making the behavior stochastic.

* Change the variance of the noise generator (<code>noise_var</code>) in the control panel) from 0 to .005, and press Apply and then Run.

It can be difficult to tell from a single run whether the spike timing is random -- the unit still fires with some regularity.

* Do many Runs on top of each other in the graph view.

Now you should see that the spike timing was actually so random that there is essentially a uniform distribution of spike times across these different runs (i.e., a spike could occur at any time step), but the rate code equivalent activation (act_eq) nevertheless remained relatively constant (i.e., it had only a few different values at the end of a run).  This happens because the precise time at which a spike fires depends greatly on whether the noise happens to move the membrane potential up or down when it approaches the threshold, which can delay or advance the spike timing in a random fashion.  Thus, the threshold greatly magnifies small differences in membrane potential by making a large distinction between subthreshold and superthreshold potentials.  On average, however, the spikes are equally likely to be early or late, so these random timing differences end up canceling out in the rate code average.  This ''robustness'' of the rate code in the face of random noise (relative to the detailed spike timing) is one important argument for why it is reasonable to think that neurons rely primarily on rate code information (see section 2.8 in the textbook for more discussion).

Now, let's explore some of the properties of the noisy XX1 rate-code activation function, compared to other possible such functions.  We will compare XX1 (equation 2.20 in the text), which is the non-noisy version of noisy XX1, and LINEAR, which is just a threshold-linear function of the difference between the membrane potential and the threshold:
*  y_j = \\gamma [V_m - \\Theta]_+  

where [x]_+ is again the positive component of x or 0 if x is negative (i.e., if the membrane potential is below threshold).

* Press Defaults.  Then, change the excitatory input g_bar.e from .4 to .375, and press Apply and then Run.  Then, run XX1 with the same parameters (under act_fun, select XX1, press Apply and then
Run).  Next run LINEAR in the same way.

Notice that NOISY_XX1 starts earlier than XX1 or LINEAR, because it has a soft threshold.  This results from convolving the XX1 function with noise, such that even at sub-threshold values, there is a certain chance of getting above threshold, as reflected in a small positive activation value in the rate code.

* Change the excitatory input g_bar.e from .375 to .42, and press Apply and then Run.  Then, as in the
previous procedure, run the other two activation functions with the same parameters.

Notice that LINEAR goes up to ceiling (where it is clipped at a maximum of 1), while XX1 and NOISY_XX1 increase but stay below their maximum values.  Thus, the two XX1 based functions have a saturating nonlinearity that allows them to gradually approach a maximal value, instead of just being clipped off at this maximum. However, these XX1 functions approximate the threshold-linear function
for lower levels of excitation.

You should also notice that XX1 and NOISY_XX1 get closer to each other as g_e gets larger.  The noise convolution has much less of an effect when the function gets flatter, as it does in the saturating nonlinearity region.  Convolving noise with a linear function gives you back the linear function itself, so wherever the function is approximately linear, noise has much less of an effect.

When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.

</body>
</html>";
   html_text="<html><head></head><body>
<p>
</p><h1> Single Unit (Neuron) </h1>
<p>
This simulation illustrates the basic properties of neural unit activation, reflecting a balance of excitatory and inhibitory influences (including leak and synaptic inhibition).
</p><p>
</p><ul><li> To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.
</li></ul>
<h2> Orientation to the Software (ControlPanel and Views) </h2>
<p>
As this is the first simulation project in the textbook, we begin with some introductory orientation.  All of the major controls and parameters for the simulation are contained within the <a href=\"ta:.edits.ControlPanel\">ControlPanel</a> object located in the middle of the 3 panels visible in the main project window (you can access it from the tab at the top of this middle panel).  The right panel contains various 3D graphical displays of simulation data, including the network (NetView or Network View) and various graphs and grid-like displays (Graph view, Grid view).
</p><p>
In this simulation, there are two different ways to view the results, selectable by the tabs at the top of the right side of the window:
</p><ul><li> The <a href=\"ta:.T3Tab.Network\">Network</a> tab shows the (very simple) network that is being simulated, with a single sending (input) unit (at the bottom) that sends activation to the receiving unit (at the top).  We are primarily concerned with how the receiving unit responds to the activation input from the sending unit.
</li><li> The <a href=\"ta:.T3Tab.CycleOutputData\">CycleOutputData</a> tab shows a graph of the receiving unit's main variables (see below for details) over time, in response to the sending activation.
</li></ul>
We will see this single input being turned on and then off again, and observe the response of the receiving unit.  To see this, we can run
the simulation.
<p>
At the bottom of the <a href=\"ta:.edits.ControlPanel\">ControlPanel</a> are 4 buttons: Init, Run, Step, Stop:
</p><ol><li> <a href=\"ta:.programs.LeabraSettle.Init()\">Init</a> -- initializes the graph display and starts the simulation over from wherever it might have left off.
</li><li> <a href=\"ta:.programs.LeabraSettle.Run()\">Run</a> -- runs the full set of cycles of activation updating (updating of the equations that govern the behavior of the neural unit), displaying the results in the Network and CycleOutputData frames on the right hand side of the window.
</li><li> <a href=\"ta:.programs.LeabraSettle.Step()\">Step</a> -- runs one single cycle of activation updating.
</li><li> <a href=\"ta:.programs.LeabraSettle.Stop()\">Stop</a> -- if running, this will stop running.
</li></ol>
<ul><li> Text like this that is indented with a bullet all by itself (not part of a list) indicates actions to take.  In this case, hit <a href=\"ta:.programs.LeabraSettle.Init()\">Init</a> and <a href=\"ta:.programs.LeabraSettle.Run()\">Run</a>, and look at the <a href=\"ta:.T3Tab.Network\">Network</a> display.
</li></ul>
You should see that very shortly after the input unit comes on (indicated by the yellow color), the receiving unit is activated by this input.  To get a better idea of the precise trajectory of this activation, it is much more convenient to use the  <b>Graph View</b> , which displays the information graphically over time, allows multiple variables to be viewed at the same time, and even allows multiple runs (e.g., with different parameters) to be compared with each other.
<p>
</p><h2> The Graph View </h2>
<p>
</p><ul><li> Press the <a href=\"ta:.T3Tab.CycleOutputData\">CycleOutputData</a> tab in the right panel to display the graph view display.
</li></ul>
The plots produced by this simulation are much like that shown in Figure 2.9 in the textbook. Only the excitatory and leak currents are
operating here, with their conductances (<code>g_bar.e, g_bar.l</code>) and reversal potentials (<code>e_rev.e, e_rev.l</code>) as shown in the control panel.
<p>
</p><ul><li> Press the <a href=\"ta:.programs.LeabraSettle.Init()\">Init</a> button and then the <a href=\"ta:.programs.LeabraSettle.Run()\">Run</a> button on the control panel to display a new graph.
</li></ul>
This produces a plot using the current parameters (figure 2.17 in textbook).  You should see various lines plotted over 200 time steps ( <i>cycles</i> ) on the X axis.  Note that the standard 0-1 normalized parameters are used by default.
<p>
Here is a quick overview of each of the variables -- we'll go through them individually next
(see <a href=\"ta:.docs.GraphHelp\">GraphHelp</a> for more details on how to determine what is being graphed, and how to configure it):
</p><ul><li>  <b>net</b>  (red line) = net input, which is the total excitatory input to the neuron (net = g_e(t) * g_bar_e).  g_e(t) is the proportion of excitatory ion channels open, and it goes from 0 prior to cycle 10, to 1 from 10-160, and back to 0 thereafter.  Because g_bar_e = .4, the net value goes up to .4 from cycle 10-160.  The timing of when the input comes on and goes off is in the ControlPanel, on_cycle and off_cycle.
</li><li>  <b>I_net</b>  (orange line) = net current (sum of individual excitation and leak currents), which is excitatory (upward) when the excitatory input comes on, and then returns to zero with constant input.  When the excitatation goes off, the net current is negative as the constant leak current takes over and pushes the membrane potential down back to rest.
</li><li>  <b>v_m</b>  (yellow line) = membrane potential.  This starts out at the resting potential of .15 (-70mV in biological units), and then increases with the excitatory input. As you can see, the net current (I_net) shows the <i>rate of change</i> of the membrane potential.
</li><li>  <b>act</b>  (green line) = activation.  This shows the amount of activation sent to other units -- by default it is a rate code using the NOISY_XX1 function -- to see discrete spiking, switch the act_fun in the control panel to SPIKE instead of NOISY_XX1.
</li><li>  <b>act_eq</b>  (blue line) = rate-code equivalent activation -- this always shows a rate code equivalent for whatever activation function is being used (if a rate code like NOISY_XX1 is being used, then it is the same as act).
</li></ul>
First, let's focus on the <code>net</code> line (it's the red one, displayed as a solid line in figure 2.17 in text).  This shows the  <i>net input</i>  to the unit, which starts out at 0, and then rapidly jumps to .4, remaining there until around 160 time steps, where it goes back to 0 again.  Recall that this net input is just another name for the total excitatory input to the neuron (i.e., net = g_e * g_bar_e).  In this simulation, the sending unit always sends a g_e value of 1 when it's on, and a 0 when off.  Later, we will manipulate the value of g_bar_e in the control panel to control the magnitude of the net input (it is .4 because the default value of g_bar.e is .4).  The timing of the input is controlled by the parameters <code>on_cycle</code> and <code>off_cycle</code> (the total number of cycles is controlled by <code>n_cycles</code>).
<p>
The second line, <code>I_net</code> (in orange/dashed), shows the  <i>net current</i>  in the unit, reflecting the overall balance between the excitatory net input and the constant leak current (plus inhibition in general, but this is not present in this simulation).  As expected, this shows an excitatory (upward) current when the input comes on, and an inhibitory (downward) one when the input goes off.  Because it reflects  <i>changes</i>  in the unit, it goes back to zero after the unit adapts to the steady excitatory input.
</p><p>
The third line, <code>v_m</code> (in yellow/dotted), shows the  <i>membrane potential</i> , which starts at the resting potential of .15, then increases with the excitation, and decreases back to rest when the input goes off.  This integrates the changes reflected in the I_net variable, and represents the overall integration of all the information coming into the unit.
</p><p>
The fourth line, <code>act</code> (in green/dash-dot), shows the  <i>activation</i>  value (using the NOISY_XX1 rate-coded activation function) that results from the membrane potential.  It goes from 0 up to roughly .72 and back down again.  Note that the activation rise trails the net input by several cycles -- this is due to the time it takes for the membrane potential to reach the firing threshold for the neuron.
</p><p>
 <b>Software Tip:</b>  You can click on any line in the graph log display using the red-arrow tool (click on the red arrow button in the upper-right corner of the 3d view window to see the exact values at the point where you clicked (as displayed in the graph caption at the bottom).  You can also click on the light green outer frame, and then do the context menu (right mouse button or Ctrl + left mouse on mac) and select DataTable/Edit Dialog to obtain a spreadsheet view of all the data being plotted in the graph.   You can then scroll through this data to find any value you might want to find.
</p><p>
</p><ul><li> Click with the mouse on the v_m line on the graph to verify that the activation rise does indeed occur right around the threshold value for the membrane potential (.25).
</li></ul>
The fifth line, <code>act_eq</code> (blue) is not turned on to begin with.  To turn it on, click the on! button next to it on the graph view control panel that shows up in the middle panel when you click on the <a href=\"ta:.T3Tab.CycleOutputData\">CycleOutputData</a> tab (see the wiki <a href=\"ta:.Wiki.Graph_View\">Graph_View</a> and local docs <a href=\"ta:.docs.GraphHelp\">GraphHelp</a> for more info).  You will initially see just  the label key turn on,  but won't actually see the blue line because it is superimposed perfectly on the act value (green line). (You can reveal it by toggling the on! button off for the act variable.) This value shows the rate-code equivalent activation value for discrete spiking units.  When an actual rate-code activation function (noisy XX1) is used, act_eq is just equivalent to act.  We will see the value of this variable later when we switch to spiking units.
<p>
</p><h2> Manipulating Parameters </h2>
<p>
Now we will use some of the parameters in the control panel to explore the properties of the point neuron activation function.  
</p><p>
</p><ul><li> Click on the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> and take a moment to familiarize yourself with the parameters (you can hover the mouse over the label for each parameter to view a brief description of what it is).
</li></ul>
 <i>'Software Tip:</i>  All  <i>edit dialogs</i>  like the control panel have at least two buttons across the bottom: <code>Apply</code> (which applies any changes you have made to actually set the parameters) and <code>Revert</code> (which reverts to the previously applied values, which is useful if you have accidentally typed in a value that you didn't want).  See the wiki <a href=\"ta:.Wiki.Edit_dialog\">Edit_dialog</a> for more information.
<p>
</p><h3> Excitatory </h3>
<p>
First, we will focus on <code>g_bar.e</code>, which controls the amount of excitatory conductance as described earlier.  In general, we are interested in seeing how the unit membrane potential reflects a balance of the different inputs coming into it (here just excitation and leak), and how the output activation responds to the resulting membrane potential.
</p><p>
</p><ul><li> Increase g_bar.e from .4 to .5 (and press the Apply and Run buttons to see the effects).  Then observe the effects of decreasing g_bar.e to .3.
</li></ul>
<hr>
<p>
 <b>Question 2.1 (a)</b>   <i>Describe the effects on the neural response of increasing g_bar.e to .5, and of decreasing it to .3.</i>   <b>(b)</b>   <i>Is there a qualitative difference in the unit activation (act) between these two changes of magnitude .1 away from the initial .4 value?</i>   <b>(c)</b>   <i>What important aspect of the point neuron activation function does this reveal?</i> 
</p><p>
</p><hr>
<p>
 <b>Software tip:</b>  It is often useful to overlay different Runs on top of each other in the graph log, which will happen naturally.  When you want to clear the log, press the Init button in the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a>. 
</p><p>
By systematically searching the parameter range for g_bar.e between .3 and .4, you should be able to locate the point at which the membrane potential just reaches threshold (recall that this is at V_m= .25 in the normalized units).  To make it easier to locate the threshold, we will switch from the noisy XX1 activation function (which has a  <i>soft</i>  threshold due to the effects of the convolved noise) to the XX1 activation function (which has a hard threshold due to the absence of noise).
</p><p>
</p><ul><li> In the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a>, switch the act_fun setting from NOISY_XX1 to XX1 (and press Apply).
</li></ul>
<hr>
<p>
 <b>Question 2.2 (a)</b>   <i>To 3 decimal places, what value of g_bar.e puts the unit just over threshold?  Can you think of a better way of finding this value (Hint: Do you remember an equation for the equilibrium membrane potential given a particular set of inputs?)</i>    <b>(b)</b>   <i>Compute the exact value of excitatory input required to just reach threshold, showing your math (note that: g_l is always 1 because the leak channels are always open; g_e is 1 when the input is on; inhibition is not present here and can be ignored).  Does this agree with your empirically determined value?  (Hint: It should!)</i> 
</p><p>
</p><hr>
<p>
</p><h3> Leak </h3>
<p>
You can also play around with the value of the leak conductance, g_bar.l, which controls the size of the leak current.  
</p><p>
</p><ul><li> Press the <code>Defaults</code> button on the control panel to restore the default parameters, and then see what happens when you increase or decrease the leak.
</li></ul>
<hr>
<p>
 <b>Question 2.3 (a)</b>   <i>How does the response of the unit change when you change g_bar.l?  Why?</i>   <b>(b)</b>   <i>How does this differ from changes to g_bar.e?</i>   <b>(c)</b>   <i>Use the same technique you used in the previous question to compute the exact amount of leak current necessary to put the membrane potential exactly at threshold when the g_bar.e value is at the default of .4 (show your math).</i> 
</p><p>
</p><hr>
<p>
</p><ul><li> Press Defaults to restore the default parameters.
</li></ul>
Now that we have a sense of how the unit responds to different currents, and computes a resulting membrane potential that reflects the balance of these currents, we can explore the role of the reversal potentials (e_rev.e and e_rev.l).
<p>
</p><hr>
<p>
 <b>Question 2.4 (a)</b>   <i>What happens to the unit's activity if you change the leak reversal potential e_rev.l from .15 to 0?</i>   <b>(b)</b>   <i>What about when you increase it to .2?  For both questions, explain the results, taking note of what happens before the input goes on as well as what happens while it is on.</i>   <b>(c)</b>   <i>What can you conclude about the relationship between the resting potential and the leak reversal potential?</i> 
</p><p>
</p><hr>
<p>
</p><ul><li> Press Defaults to restore the default parameters.
</li></ul>
<hr>
<p>
 <b>Question 2.5 (a)</b>   <i>What happens to the unit's activity if you change the excitatory reversal potential e_rev.e from 1 to .5?  Why does this happen?</i>   <b>(b)</b>   <i>Can you compensate for this by changing the value of g_bar.e?  To two decimal places, use the simulator to find the value of g_bar.e that gives essentially the same activation value as the default parameters.</i>   <b>(c)</b>   <i>Then use the same approach as in question 2.2 to solve for the exact value of g_bar.e that will compensate for this change in e_rev.e (use .256 for the membrane potential under the default parameters, and show your math).</i> 
</p><p>
</p><hr>
<p>
</p><h2> The Activation Output </h2>
<p>
In this section, we explore the way in which the unit computes its activation output.  The main objective is to understand the relationship between the spiking and rate-code activation functions.
We will use the same project as the previous section. 
</p><p>
</p><ul><li> Press Defaults to start out with default parameters.
</li></ul>
From the previous section, we know that changing the level of excitatory input will affect the membrane potential, and the resulting rate coded activation value.  Now let's explore this relationship in the spiking activation function.  
<p>
</p><ul><li> Set act_fun to SPIKE, and press Apply and then Run.
</li></ul>
Instead of the steady values during the input presentation period, you now see the oscillations caused by the spiking mechanism (as we saw previously in figure 2.12 in the textbook).  Thus, as soon as the membrane potential crosses the threshold, the activation spikes, and the membrane potential is reset (to a sub-resting potential of 0, reflecting the overshoot of the spiking mechanism).  Then, the potential climbs back up, and the process repeats itself.
<p>
The spacing between the spikes is inversely proportional to the firing rate, but it can be hard to eyeball this from the graph.  Let's look at act_eq, the rate-code equivalent spike-rate value as a function of the spike train (see equation 2.18 in the textbook).
</p><p>
</p><ul><li> If it is not already toggled on, in the <a href=\"ta:.PanelTab.CycleOutputData\">CycleOutputData</a> graph control panel, click the <code>on!</code> button for the Y5 act_eq value, which will now show up in blue in your graph.
</li></ul>
<ul><li> Next, observe the effects of changing g_bar.e from .4, first to .38 and then to .42.
</li></ul>
<hr>
<p>
 <b>Question 2.6</b>    <i>Describe and explain the effects on the spike rate of decreasing g_bar.e  to .38, and of increasing it to .42.</i> 
</p><p>
</p><hr>
<p>
The empirically-measured rate-code equivalent for the spiking activation function (act_eq) compares fairly closely with the rate-code value computed directly as a function of the membrane potential (act for NOISY_XX1), as we saw in figure 2.15 in the textbook.
</p><p>
</p><ul><li> To explore this relationship in the simulation, you can switch between SPIKE and NOISY_XX1 for different values of g_bar.e.
</li></ul>
You should observe a reasonably close fit between the final values of act_eq for SPIKE with that of NOISY_XX1.  However, with smaller g_bar.e values (e.g., .38), the NOISY_XX1 is somewhat below the spiking act_eq.  Achieving a much closer fit between spiking and rate coded activations such as that displayed in figure 2.15 requires different parameter values that are not otherwise appropriate for this
exploration.  This is due to the  <i>aliasing</i>  effects of discrete-time updating (i.e., coarse-grained digitization effects, like when trying to display a photograph on a low-resolution display), which the spiking model is very sensitive to.
<p>
</p><ul><li> Change g_bar.e back to its default value of .4., and make sure act_fun is set to SPIKE.
</li></ul>
An important aspect of spiking in real neurons is that the timing and intervals between spikes can be quite random, although the overall rate of firing remains predictable.  This is obviously not evident with the single constant input used so far, which results in regular firing.  However, if we introduce noise by adding small randomly generated values to the membrane potential, then we can see some of
this kind of effect, although it is still not as dramatic as it would be with multiple spiking inputs coming into the cell.  Note that this additional noise plays a similar role as the convolution of noise with the XX1 function in the noisy XX1 function, but in the case of the noisy XX1 we have a deterministic function that incorporates the averaged effects of noise, while here we are actually adding in the random values themselves, making the behavior stochastic.
<p>
</p><ul><li> Change the variance of the noise generator (<code>noise_var</code>) in the control panel) from 0 to .005, and press Apply and then Run.
</li></ul>
It can be difficult to tell from a single run whether the spike timing is random -- the unit still fires with some regularity.
<p>
</p><ul><li> Do many Runs on top of each other in the graph view.
</li></ul>
Now you should see that the spike timing was actually so random that there is essentially a uniform distribution of spike times across these different runs (i.e., a spike could occur at any time step), but the rate code equivalent activation (act_eq) nevertheless remained relatively constant (i.e., it had only a few different values at the end of a run).  This happens because the precise time at which a spike fires depends greatly on whether the noise happens to move the membrane potential up or down when it approaches the threshold, which can delay or advance the spike timing in a random fashion.  Thus, the threshold greatly magnifies small differences in membrane potential by making a large distinction between subthreshold and superthreshold potentials.  On average, however, the spikes are equally likely to be early or late, so these random timing differences end up canceling out in the rate code average.  This  <i>robustness</i>  of the rate code in the face of random noise (relative to the detailed spike timing) is one important argument for why it is reasonable to think that neurons rely primarily on rate code information (see section 2.8 in the textbook for more discussion).
<p>
Now, let's explore some of the properties of the noisy XX1 rate-code activation function, compared to other possible such functions.  We will compare XX1 (equation 2.20 in the text), which is the non-noisy version of noisy XX1, and LINEAR, which is just a threshold-linear function of the difference between the membrane potential and the threshold:
</p><ul><li>  y_j = \\gamma [V_m - \\Theta]_+  
</li></ul>
where [x]_+ is again the positive component of x or 0 if x is negative (i.e., if the membrane potential is below threshold).
<p>
</p><ul><li> Press Defaults.  Then, change the excitatory input g_bar.e from .4 to .375, and press Apply and then Run.  Then, run XX1 with the same parameters (under act_fun, select XX1, press Apply and then
Run).  Next run LINEAR in the same way.</li></ul>
<p>
Notice that NOISY_XX1 starts earlier than XX1 or LINEAR, because it has a soft threshold.  This results from convolving the XX1 function with noise, such that even at sub-threshold values, there is a certain chance of getting above threshold, as reflected in a small positive activation value in the rate code.
</p><p>
</p><ul><li> Change the excitatory input g_bar.e from .375 to .42, and press Apply and then Run.  Then, as in the
previous procedure, run the other two activation functions with the same parameters.</li></ul>
<p>
Notice that LINEAR goes up to ceiling (where it is clipped at a maximum of 1), while XX1 and NOISY_XX1 increase but stay below their maximum values.  Thus, the two XX1 based functions have a saturating nonlinearity that allows them to gradually approach a maximal value, instead of just being clipped off at this maximum. However, these XX1 functions approximate the threshold-linear function
for lower levels of excitation.
</p><p>
You should also notice that XX1 and NOISY_XX1 get closer to each other as g_e gets larger.  The noise convolution has much less of an effect when the function gets flatter, as it does in the saturating nonlinearity region.  Convolving noise with a linear function gives you back the linear function itself, so wherever the function is approximately linear, noise has much less of an effect.
</p><p>
When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</p><p>

</p></body></html>";
  };
  taDoc @[1] {
   name="GraphHelp";
   desc=;
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>

= Graph Help =

The parameters that control what is graphed (and how) are in the [[.T3Tab.CycleOutputData]] tab in the middle panel of the window.  This tab is only visible when you have clicked to view the graph in the right panel, by clicking on the CycleOutputData tab.

The different variables to view (each of which gets its own colored line in the graph) are listed by row, with labels Y1, Y2, etc.  By default:
* Y1 = the net input (net excitatory synaptic input, or g_e)
* Y2 = I_net (net current, reflecting the balance of the excitatory and inhibitory inputs, and driving changes in the membrane potential V_m).  Mathematically, and according to Ohm's Law, this is equivalent to the time derivative of the membrane potential.
* Y3 = V_m (membrane potential) -- this is the current internal state of the neuron reflecting prior and current inputs -- it is fully graded, without a threshold, and forms the internal basis for the thresholded activation output.
* Y4 = act (raw activation output) -- when V_m goes over threshold, the neuron sends activation.  If the activation function is a rate code (e.g., NOISY_XX1), then this continuously-varying activation value reflects the average rate of spiking that would otherwise occur for the given membrane potential.  If the activation function is SPIKE, it is 1 when the neuron has spiked, and quickly decays back to 0.
* Y5= act_eq (rate-code equivalent activation) -- when using SPIKE activations, this value represents the equivalent rate code for the rate of spiking that is occurring.  Otherwise, it is the same as act.

Sometimes, it can be useful to not plot some of the variables.  The little \"on\" button next to the variable name will toggle on or off the display of that variable.

</body>
</html>";
   html_text="<html>
<head></head>
<body>
<P>
<h1> Graph Help </h1>
<P>
The parameters that control what is graphed (and how) are in the <a href=\"ta:.T3Tab.CycleOutputData\">CycleOutputData</a> tab in the middle panel of the window.  This tab is only visible when you have clicked to view the graph in the right panel, by clicking on the CycleOutputData tab.
<P>
The different variables to view (each of which gets its own colored line in the graph) are listed by row, with labels Y1, Y2, etc.  By default:
<ul><li> Y1 = the net input (net excitatory synaptic input, or g_e)
<li> Y2 = I_net (net current, reflecting the balance of the excitatory and inhibitory inputs, and driving changes in the membrane potential V_m).  Mathematically, and according to Ohm's Law, this is equivalent to the time derivative of the membrane potential.
<li> Y3 = V_m (membrane potential) -- this is the current internal state of the neuron reflecting prior and current inputs -- it is fully graded, without a threshold, and forms the internal basis for the thresholded activation output.
<li> Y4 = act (raw activation output) -- when V_m goes over threshold, the neuron sends activation.  If the activation function is a rate code (e.g., NOISY_XX1), then this continuously-varying activation value reflects the average rate of spiking that would otherwise occur for the given membrane potential.  If the activation function is SPIKE, it is 1 when the neuron has spiked, and quickly decays back to 0.
<li> Y5= act_eq (rate-code equivalent activation) -- when using SPIKE activations, this value represents the equivalent rate code for the rate of spiking that is occurring.  Otherwise, it is the same as act.
</ul>
Sometimes, it can be useful to not plot some of the variables.  The little \"on\" button next to the variable name will toggle on or off the display of that variable.
<P>
</body>
";
  };
  taDoc @[2] {
   name="WikiDoc";
   desc=;
   auto_open=0;
   web_doc=1;
   wiki="CCN";
   url="CECN1_Units";
   full_url="http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Units";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\"><head>
		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
		<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
		<meta name=\"generator\" content=\"MediaWiki 1.16alpha-wmf\">
		<meta name=\"keywords\" content=\"CECN1 Units,CECN1 Projects,Emergent,.edits.ControlPanel,.T3Tab.Network,.T3Tab.CycleOutputData,.programs.LeabraSettle.Init(),.programs.LeabraSettle.Run(),.programs.LeabraSettle.Step(),.programs.LeabraSettle.Stop(),.docs.GraphHelp\">
		<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
		<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
		<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Computational Cognitive Neuroscience Wiki RSS Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=rss\">
		<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
		<title>CECN1 Units - Computational Cognitive Neuroscience Wiki</title>
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/shared.css?233z\" type=\"text/css\" media=\"screen\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/commonPrint.css?233z\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/main.css?233z\" type=\"text/css\" media=\"screen\">
		<!--[if lt IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE50Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE55Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 6]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE60Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 7]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE70Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css\" type=\"text/css\">
		<!--[if lt IE 7]><script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/IEFixes.js?233z\"></script>
		<meta http-equiv=\"imagetoolbar\" content=\"no\" /><![endif]-->

		<script type=\"text/javascript\">/*<![CDATA[*/
		var skin = \"monobook\";
		var stylepath = \"/CompCogNeuro/skins\";
		var wgArticlePath = \"/CompCogNeuro/index.php/$1\";
		var wgScriptPath = \"/CompCogNeuro\";
		var wgScript = \"/CompCogNeuro/index.php\";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = \"http://grey.colorado.edu\";
		var wgCanonicalNamespace = \"\";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = \"CECN1_Units\";
		var wgTitle = \"CECN1 Units\";
		var wgAction = \"view\";
		var wgArticleId = \"9\";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = \"en\";
		var wgContentLanguage = \"en\";
		var wgBreakFrames = false;
		var wgCurRevisionId = 520;
		var wgVersion = \"1.16alpha-wmf\";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = [\"\", \"\"];
		var wgDigitTransformTable = [\"\", \"\"];
		var wgMainPageTitle = \"Main Page\";
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgFCKEditorDir = \"extensions/FCKeditor/fckeditor/\";
		var wgFCKEditorExtDir = \"extensions/FCKeditor\";
		var wgFCKEditorToolbarSet = \"Wiki\";
		var wgFCKEditorHeight = \"0\";
		/*]]>*/</script>

		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/wikibits.js?233z\"><!-- wikibits js --></script><style type=\"text/css\">@import \"/CompCogNeuro/skins/monobook/KHTMLFixes.css\";</style>
		<!-- Head Scripts -->
		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/ajax.js?233z\"></script>
		<script type=\"text/javascript\" src=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook\"><!-- site js --></script>
	<style type=\"text/css\">@import \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";</style></head><body class=\"mediawiki ltr ns-0 ns-subject page-CECN1_Units skin-monobook\">
	<div id=\"globalWrapper\">
		<div id=\"column-content\">
	<div id=\"content\">
		<a name=\"top\" id=\"top\"></a>
				<h1 id=\"firstHeading\" class=\"firstHeading\">CECN1 Units</h1>
		<div id=\"bodyContent\">
			<h3 id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</h3>
			<div id=\"contentSub\"></div>
									<div id=\"jump-to-nav\">Jump to: <a href=\"#column-one\">navigation</a>, <a href=\"#searchInput\">search</a></div>			<!-- start content -->
			<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>
<ul>
<li class=\"toclevel-1\"><a href=\"#Exploration_of_the_Individual_Neuron_.28Unit.29\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Exploration of the Individual Neuron (Unit)</span></a></li>
<li class=\"toclevel-1\"><a href=\"#Project_Documentation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Project Documentation</span></a>
<ul>
<li class=\"toclevel-2\"><a href=\"#Orientation_to_the_Software_.28ControlPanel_and_Views.29\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Orientation to the Software (ControlPanel and Views)</span></a></li>
<li class=\"toclevel-2\"><a href=\"#The_Graph_View\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">The Graph View</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Manipulating_Parameters\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Manipulating Parameters</span></a>
<ul>
<li class=\"toclevel-3\"><a href=\"#Excitatory\"><span class=\"tocnumber\">2.3.1</span> <span class=\"toctext\">Excitatory</span></a></li>
<li class=\"toclevel-3\"><a href=\"#Leak\"><span class=\"tocnumber\">2.3.2</span> <span class=\"toctext\">Leak</span></a></li>
</ul>
</li>
<li class=\"toclevel-2\"><a href=\"#The_Activation_Output\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">The Activation Output</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>
<a name=\"Exploration_of_the_Individual_Neuron_.28Unit.29\" id=\"Exploration_of_the_Individual_Neuron_.28Unit.29\"></a><h1> <span class=\"mw-headline\"> Exploration of the Individual Neuron (Unit) </span></h1>
<ul><li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/c/c1/unit.proj\" class=\"internal\" title=\"unit.proj\">unit.proj</a> (click and Save As to download, then open in <a href=\"/CompCogNeuro/index.php/Emergent\" title=\"Emergent\">Emergent</a>)
</li></ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CECN1_Projects\" title=\"CECN1 Projects\">CECN1 Projects</a>
</p>
<a name=\"Project_Documentation\" id=\"Project_Documentation\"></a><h1> <span class=\"mw-headline\"> Project Documentation </span></h1>
<p>(note: this is a literal copy from the simulation documentation -- it contains links that will not work within the wiki)
</p><p>This simulation illustrates the basic properties of neural unit activation, reflecting a balance of excitatory and inhibitory influences (including leak and synaptic inhibition).
</p>
<ul><li> To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.
</li></ul>
<a name=\"Orientation_to_the_Software_.28ControlPanel_and_Views.29\" id=\"Orientation_to_the_Software_.28ControlPanel_and_Views.29\"></a><h2> <span class=\"mw-headline\"> Orientation to the Software (ControlPanel and Views) </span></h2>
<p>As this is the first simulation project in the textbook, we begin with some introductory orientation.  All of the major controls and parameters for the simulation are contained within the <a href=\"/CompCogNeuro/index.php?title=.edits.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".edits.ControlPanel (page does not exist)\">.edits.ControlPanel</a> object located in the middle of the 3 panels visible in the main project window (clicking the link will take you there, and you can also access it from the tab at the top of this middle panel).  The right panel contains various 3D graphical displays of simulation data, including the network (NetView or Network View) and various graphs and grid-like displays (Graph view, Grid view).
</p><p>In this simulation, there are two different ways to view the results, selectable by the tabs at the top of the right side of the window:
</p>
<ul><li> The <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Network&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Network (page does not exist)\">.T3Tab.Network</a> tab shows the (very simple) network that is being simulated, with a single sending (input) unit (at the bottom) that sends activation to the receiving unit (at the top).  We are primarily concerned with how the receiving unit responds to the activation input from the sending unit.
</li><li> The <a href=\"/CompCogNeuro/index.php?title=.T3Tab.CycleOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.CycleOutputData (page does not exist)\">.T3Tab.CycleOutputData</a> tab shows a graph of the receiving unit's main variables (see below for details) over time, in response to the sending activation.
</li></ul>
<p>We will see this single input being turned on and then off again, and observe the response of the receiving unit.  To see this, we can run
the simulation.
</p><p>At the bottom of the <a href=\"/CompCogNeuro/index.php?title=.edits.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".edits.ControlPanel (page does not exist)\">.edits.ControlPanel</a> are 4 buttons: Init, Run, Step, Stop:
</p>
<ol><li> <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Init() (page does not exist)\">Init</a> -- initializes the graph display and starts the simulation over from wherever it might have left off.
</li><li> <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Run() (page does not exist)\">Run</a> -- runs the full set of cycles of activation updating (updating of the equations that govern the behavior of the neural unit), displaying the results in the Network and CycleOutputData frames on the right hand side of the window.
</li><li> <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Step()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Step() (page does not exist)\">Step</a> -- runs one single cycle of activation updating.
</li><li> <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Stop()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Stop() (page does not exist)\">Stop</a> -- if running, this will stop running.
</li></ol>
<ul><li> Text like this that is indented with a bullet all by itself (not part of a list) indicates actions to take.  In this case, hit <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Init() (page does not exist)\">Init</a> and <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Run() (page does not exist)\">Run</a>, and look at the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.Network&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.Network (page does not exist)\">.T3Tab.Network</a> display.
</li></ul>
<p>You should see that very shortly after the input unit comes on (indicated by the yellow color), the receiving unit is activated by this input.  To get a better idea of the precise trajectory of this activation, it is much more convenient to use the <b>Graph View</b>, which displays the information graphically over time, allows multiple variables to be viewed at the same time, and even allows multiple runs (e.g., with different parameters) to be compared with each other.
</p>
<a name=\"The_Graph_View\" id=\"The_Graph_View\"></a><h2> <span class=\"mw-headline\"> The Graph View </span></h2>
<ul><li> Press the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.CycleOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.CycleOutputData (page does not exist)\">.T3Tab.CycleOutputData</a> tab in the right panel to display the graph view display.
</li></ul>
<p>The plots produced by this simulation are much like that shown in Figure 2.9 in the textbook. Only the excitatory and leak currents are
operating here, with their conductances (<code>g_bar.e, g_bar.l</code>) and reversal potentials (<code>e_rev.e, e_rev.l</code>) as shown in the control panel.
</p>
<ul><li> Press the <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraSettle.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraSettle.Run() (page does not exist)\">Run</a> button on the control panel to display a new graph.
</li></ul>
<p>This produces a plot using the current parameters (figure 2.17 in textbook).  You should see various lines plotted over 200 time steps (<i>cycles</i>) on the X axis.  Note that the standard 0-1 normalized parameters are used by default.
</p><p>Here is a quick overview of each of the variables -- we'll go through them individually next
(see <a href=\"/CompCogNeuro/index.php?title=.docs.GraphHelp&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.GraphHelp (page does not exist)\">.docs.GraphHelp</a> for more details on how to determine what is being graphed, and how to configure it):
</p>
<ul><li> <b>net</b> (red line) = net input, which is the total excitatory input to the neuron (net = g_e(t) * g_bar_e).  g_e(t) is the proportion of excitatory ion channels open, and it goes from 0 prior to cycle 10, to 1 from 10-160, and back to 0 thereafter.  Because g_bar_e = .4, the net value goes up to .4 from cycle 10-160.  The timing of when the input comes on and goes off is in the ControlPanel, on_cycle and off_cycle.
</li><li> <b>I_net</b> (orange line) = net current (sum of individual excitation and leak currents), which is excitatory (upward) when the excitatory input comes on, and then returns to zero with constant input.  When the excitatation goes off, the net current is negative as the constant leak current takes over and pushes the membrane potential down back to rest.
</li><li> <b>v_m</b> (yellow line) = membrane potential.  This starts out at the resting potential of .15 (-70mV in biological units), and then increases with the excitatory input. As you can see, the net current (I_net) shows the <i>rate of change</i> of the membrane potential.
</li><li> <b>act</b> (green line) = activation.  This shows the amount of activation sent to other units -- by default it is a rate code using the NOISY_XX1 function -- to see discrete spiking, switch the act_fun in the control panel to SPIKE instead of NOISY_XX1.
</li><li> <b>act_eq</b> (blue line) = rate-code equivalent activation -- this always shows a rate code equivalent for whatever activation function is being used (if a rate code like NOISY_XX1 is being used, then it is the same as act).
</li></ul>
<p>First, let's focus on the <code>net</code> line (it's the red one, displayed as a solid line in figure 2.17 in text).  This shows the <i>net input</i> to the unit, which starts out at 0, and then rapidly jumps to .4, remaining there until around 160 time steps, where it goes back to 0 again.  Recall that this net input is just another name for the total excitatory input to the neuron (i.e., net = g_e * g_bar_e).  In this simulation, the sending unit always sends a g_e value of 1 when it's on, and a 0 when off.  Later, we will manipulate the value of g_bar_e in the control panel to control the magnitude of the net input (it is .4 because the default value of g_bar.e is .4).  The timing of the input is controlled by the parameters <code>on_cycle</code> and <code>off_cycle</code> (the total number of cycles is controlled by <code>n_cycles</code>).
</p><p>The second line, <code>I_net</code> (in orange/dashed), shows the <i>net current</i> in the unit, reflecting the overall balance between the excitatory net input and the constant leak current (plus inhibition in general, but this is not present in this simulation).  As expected, this shows an excitatory (upward) current when the input comes on, and an inhibitory (downward) one when the input goes off.  Because it reflects <i>changes</i> in the unit, it goes back to zero after the unit adapts to the steady excitatory input.
</p><p>The third line, <code>v_m</code> (in yellow/dotted), shows the <i>membrane potential</i>, which starts at the resting potential of .15, then increases with the excitation, and decreases back to rest when the input goes off.  This integrates the changes reflected in the I_net variable, and represents the overall integration of all the information coming into the unit.
</p><p>The fourth line, <code>act</code> (in green/dash-dot), shows the <i>activation</i> value (using the NOISY_XX1 rate-coded activation function) that results from the membrane potential.  It goes from 0 up to roughly .72 and back down again.  Note that the activation rise trails the net input by several cycles -- this is due to the time it takes for the membrane potential to reach the firing threshold for the neuron.
</p><p><b>Software Tip:</b> You can click on any line in the graph log display using the red-arrow tool (click on the red arrow button in the upper-right corner of the 3d view window to see the exact values at the point where you clicked (as displayed in the graph caption at the bottom).  You can also click on the light green outer frame, and then do the context menu (right mouse button or Ctrl + left mouse on mac) and select DataTable/Edit Dialog to obtain a spreadsheet view of all the data being plotted in the graph.   You can then scroll through this data to find any value you might want to find.
</p>
<ul><li> Click with the mouse on the v_m line on the graph to verify that the activation rise does indeed occur right around the threshold value for the membrane potential (.25).
</li></ul>
<p>The fifth line, <code>act_eq</code> (blue) is not turned on to begin with.  To turn it on, click the on! button next to it on the graph view control panel that shows up in the middle panel when you click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.CycleOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.CycleOutputData (page does not exist)\">.T3Tab.CycleOutputData</a> tab (see the wiki <a href=\"/CompCogNeuro/index.php?title=.Wiki.Graph_View&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".Wiki.Graph View (page does not exist)\">.Wiki.Graph_View</a> and local docs <a href=\"/CompCogNeuro/index.php?title=.docs.GraphHelp&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.GraphHelp (page does not exist)\">.docs.GraphHelp</a> for more info).  This value shows the rate-code equivalent activation value for discrete spiking units.  When an actual rate-code
activation function (noisy XX1) is used, act_eq is just equivalent to act.  We will see the value of this variable later when we switch to spiking units.
</p>
<a name=\"Manipulating_Parameters\" id=\"Manipulating_Parameters\"></a><h2> <span class=\"mw-headline\"> Manipulating Parameters </span></h2>
<p>Now we will use some of the parameters in the control panel to explore the properties of the point neuron activation function.  
</p>
<ul><li> Click on the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> and take a moment to familiarize yourself with the parameters (you can hover the mouse over the label for each parameter to view a brief description of what it is).
</li></ul>
<p>'<i>Software Tip:</i> All <i>edit dialogs</i> like the control panel have at least two buttons across the bottom: <code>Apply</code> (which applies any changes you have made to actually set the parameters) and <code>Revert</code> (which reverts to the previously applied values, which is useful if you have accidentally typed in a value that you didn't want).  See the wiki <a href=\"/CompCogNeuro/index.php?title=.Wiki.Edit_dialog&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".Wiki.Edit dialog (page does not exist)\">.Wiki.Edit_dialog</a> for more information.
</p>
<a name=\"Excitatory\" id=\"Excitatory\"></a><h3> <span class=\"mw-headline\"> Excitatory </span></h3>
<p>First, we will focus on <code>g_bar.e</code>, which controls the amount of excitatory conductance as described earlier.  In general, we are interested in seeing how the unit membrane potential reflects a balance of the different inputs coming into it (here just excitation and leak), and how the output activation responds to the resulting membrane potential.
</p>
<ul><li> Increase g_bar.e from .4 to .5 (and press the Apply and Run buttons to see the effects).  Then observe the effects of decreasing g_bar.e to .3.
</li></ul>
<hr>
<p><b>Question 2.1 (a)</b> <i>Describe the effects on the neural response of increasing g_bar.e to .5, and of decreasing it to .3.</i> <b>(b)</b> <i>Is there a qualitative difference in the unit activation (act) between these two changes of magnitude .1 away from the initial .4 value?</i> <b>(c)</b> <i>What important aspect of the point neuron activation function does this reveal?</i>
</p>
<hr>
<p><b>Software tip:</b> It is often useful to overlay different Runs on top of each other in the graph log, which will happen naturally.  When you want to clear the log, press the Init button in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a>. 
</p><p>By systematically searching the parameter range for g_bar.e between .3 and .4, you should be able to locate the point at which the membrane potential just reaches threshold (recall that this is at V_m= .25 in the normalized units).  To make it easier to locate the threshold, we will switch from the noisy XX1 activation function (which has a <i>soft</i> threshold due to the effects of the convolved noise) to the XX1 activation function (which has a hard threshold due to the absence of noise).
</p>
<ul><li> In the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a>, switch the act_fun setting from NOISY_XX1 to XX1 (and press Apply).
</li></ul>
<hr>
<p><b>Question 2.2 (a)</b> <i>To 3 decimal places, what value of g_bar.e puts the unit just over threshold?  Can you think of a better way of finding this value (Hint: Do you remember an equation for the equilibrium membrane potential given a particular set of inputs?)</i>  <b>(b)</b> <i>Compute the exact value of excitatory input required to just reach threshold, showing your math (note that: g_l is always 1 because the leak channels are always open; g_e is 1 when the input is on; inhibition is not present here and can be ignored).  Does this agree with your empirically determined value?  (Hint: It should!)</i>
</p>
<hr>
<a name=\"Leak\" id=\"Leak\"></a><h3> <span class=\"mw-headline\"> Leak </span></h3>
<p>You can also play around with the value of the leak conductance, g_bar.l, which controls the size of the leak current.  
</p>
<ul><li> Press the <code>Defaults</code> button on the control panel to restore the default parameters, and then see what happens when you increase or decrease the leak.
</li></ul>
<hr>
<p><b>Question 2.3 (a)</b> <i>How does the response of the unit change when you change g_bar.l?  Why?</i> <b>(b)</b> <i>How does this differ from changes to g_bar.e?</i> <b>(c)</b> <i>Use the same technique you used in the previous question to compute the exact amount of leak current necessary to put the membrane potential exactly at threshold when the g_bar.e value is at the default of .4 (show your math).</i>
</p>
<hr>
<ul><li> Press Defaults to restore the default parameters.
</li></ul>
<p>Now that we have a sense of how the unit responds to different currents, and computes a resulting membrane potential that reflects the balance of these currents, we can explore the role of the reversal potentials (e_rev.e and e_rev.l).
</p>
<hr>
<p><b>Question 2.4 (a)</b> <i>What happens to the unit's activity if you change the leak reversal potential e_rev.l from .15 to 0?</i> <b>(b)</b> <i>What about when you increase it to .2?  For both questions, explain the results, taking note of what happens before the input goes on as well as what happens while it is on.</i> <b>(c)</b> <i>What can you conclude about the relationship between the resting potential and the leak reversal potential?</i>
</p>
<hr>
<ul><li> Press Defaults to restore the default parameters.
</li></ul>
<hr>
<p><b>Question 2.5 (a)</b> <i>What happens to the unit's activity if you change the excitatory reversal potential e_rev.e from 1 to .5?  Why does this happen?</i> <b>(b)</b> <i>Can you compensate for this by changing the value of g_bar.e?  To two decimal places, use the simulator to find the value of g_bar.e that gives essentially the same activation value as the default parameters.</i> <b>(c)</b> <i>Then use the same approach as in question 2.2 to solve for the exact value of g_bar.e that will compensate for this change in e_rev.e (use .256 for the membrane potential under the default parameters, and show your math).</i>
</p>
<hr>
<a name=\"The_Activation_Output\" id=\"The_Activation_Output\"></a><h2> <span class=\"mw-headline\"> The Activation Output </span></h2>
<p>In this section, we explore the way in which the unit computes its activation output.  The main objective is to understand the relationship between the spiking and rate-code activation functions.
We will use the same project as the previous section. 
</p>
<ul><li> Press Defaults to start out with default parameters.
</li></ul>
<p>From the previous section, we know that changing the level of excitatory input will affect the membrane potential, and the resulting rate coded activation value.  Now let's explore this relationship in the spiking activation function.  
</p>
<ul><li> Set act_fun to SPIKE, and press Apply and then Run.
</li></ul>
<p>Instead of the steady values during the input presentation period, you now see the oscillations caused by the spiking mechanism (as we saw previously in figure 2.12 in the textbook).  Thus, as soon as the membrane potential crosses the threshold, the activation spikes, and the membrane potential is reset (to a sub-resting potential of 0, reflecting the overshoot of the spiking mechanism).  Then, the potential climbs back up, and the process repeats itself.
</p><p>The spacing between the spikes is inversely proportional to the firing rate, but it can be hard to eyeball this from the graph.  Let's look at act_eq, the rate-code equivalent spike-rate value as a function of the spike train (see equation 2.18 in the textbook).
</p>
<ul><li> in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.CycleOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.CycleOutputData (page does not exist)\">.PanelTab.CycleOutputData</a> graph control panel, click the <code>on!</code> button for the Y5 act_eq value, which will now show up in blue in your graph.
</li></ul>
<ul><li> Next, observe the effects of changing g_bar.e from .4, first to .38 and then to .42.
</li></ul>
<hr>
<p><b>Question 2.6</b>  <i>Describe and explain the effects on the spike rate of decreasing g_bar.e  to .38, and of increasing it to .42.</i>
</p>
<hr>
<p>The empirically-measured rate-code equivalent for the spiking activation function (act_eq) compares fairly closely with the rate-code value computed directly as a function of the membrane potential (act for NOISY_XX1), as we saw in figure 2.15 in the textbook.
</p>
<ul><li> To explore this relationship in the simulation, you can switch between SPIKE and NOISY_XX1 for different values of g_bar.e.
</li></ul>
<p>You should observe a reasonably close fit between the final values of act_eq for SPIKE with that of NOISY_XX1.  However, with smaller g_bar.e values (e.g., .38), the NOISY_XX1 is somewhat below the spiking act_eq.  Achieving a much closer fit between spiking and rate coded activations such as that displayed in figure 2.15 requires different parameter values that are not otherwise appropriate for this
exploration.  This is due to the <i>aliasing</i> effects of discrete-time updating (i.e., coarse-grained digitization effects, like when trying to display a photograph on a low-resolution display), which the spiking model is very sensitive to.
</p>
<ul><li> Change g_bar.e back to its default value of .4., and make sure act_fun is set to SPIKE.
</li></ul>
<p>An important aspect of spiking in real neurons is that the timing and intervals between spikes can be quite random, although the overall rate of firing remains predictable.  This is obviously not evident with the single constant input used so far, which results in regular firing.  However, if we introduce noise by adding small randomly generated values to the membrane potential, then we can see some of
this kind of effect, although it is still not as dramatic as it would be with multiple spiking inputs coming into the cell.  Note that this additional noise plays a similar role as the convolution of noise with the XX1 function in the noisy XX1 function, but in the case of the noisy XX1 we have a deterministic function that incorporates the averaged effects of noise, while here we are actually adding in the random values themselves, making the behavior stochastic.
</p>
<ul><li> Change the variance of the noise generator (<code>noise_var</code>) in the control panel) from 0 to .005, and press Apply and then Run.
</li></ul>
<p>It can be difficult to tell from a single run whether the spike timing is random -- the unit still fires with some regularity.
</p>
<ul><li> Do many Runs on top of each other in the graph view.
</li></ul>
<p>Now you should see that the spike timing was actually so random that there is essentially a uniform distribution of spike times across these different runs (i.e., a spike could occur at any time step), but the rate code equivalent activation (act_eq) nevertheless remained relatively constant (i.e., it had only a few different values at the end of a run).  This happens because the precise time at which a spike fires depends greatly on whether the noise happens to move the membrane potential up or down when it approaches the threshold, which can delay or advance the spike timing in a random fashion.  Thus, the threshold greatly magnifies small differences in membrane potential by making a large distinction between subthreshold and superthreshold potentials.  On average, however, the spikes are equally likely to be early or late, so these random timing differences end up canceling out in the rate code average.  This <i>robustness</i> of the rate code in the face of random noise (relative to the detailed spike timing) is one important argument for why it is reasonable to think that neurons rely primarily on rate code information (see section 2.8 in the textbook for more discussion).
</p><p>Now, let's explore some of the properties of the noisy XX1 rate-code activation function, compared to other possible such functions.  We will compare XX1 (equation 2.20 in the text), which is the non-noisy version of noisy XX1, and LINEAR, which is just a threshold-linear function of the difference between the membrane potential and the threshold:
</p>
<ul><li>  y_j = \\gamma [V_m - \\Theta]_+  
</li></ul>
<p>where [x]_+ is again the positive component of x or 0 if x is negative (i.e., if the membrane potential is below threshold).
</p>
<ul><li> Press Defaults.  Then, change the excitatory input g_bar.e from .4 to .375, and press Apply and then Run.  Then, run XX1 with the same parameters (under act_fun, select XX1, press Apply and then
</li></ul>
<p>Run).  Next run LINEAR in the same way.
</p><p>Notice that NOISY_XX1 starts earlier than XX1 or LINEAR, because it has a soft threshold.  This results from convolving the XX1 function with noise, such that even at sub-threshold values, there is a certain chance of getting above threshold, as reflected in a small positive activation value in the rate code.
</p>
<ul><li> Change the excitatory input g_bar.e from .375 to .42, and press Apply and then Run.  Then, as in the
</li></ul>
<p>previous procedure, run the other two activation functions with the same parameters.
</p><p>Notice that LINEAR goes up to ceiling (where it is clipped at a maximum of 1), while XX1 and NOISY_XX1 increase but stay below their maximum values.  Thus, the two XX1 based functions have a saturating nonlinearity that allows them to gradually approach a maximal value, instead of just being clipped off at this maximum. However, these XX1 functions approximate the threshold-linear function
for lower levels of excitation.
</p><p>You should also notice that XX1 and NOISY_XX1 get closer to each other as g_e gets larger.  The noise convolution has much less of an effect when the function gets flatter, as it does in the saturating nonlinearity region.  Convolving noise with a linear function gives you back the linear function itself, so wherever the function is approximately linear, noise has much less of an effect.
</p><p>When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 9/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:9-0!1!0!!en!2!edit=0 and timestamp 20090903112423 -->
<div class=\"printfooter\">
Retrieved from \"<a href=\"http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Units\">http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Units</a>\"</div>
						<!-- end content -->
						<div class=\"visualClear\"></div>
		</div>
	</div>
		</div>
		<div id=\"column-one\">
	<div id=\"p-cactions\" class=\"portlet\">
		<h5>Views</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
	
				 <li id=\"ca-nstab-main\" class=\"selected\"><a href=\"/CompCogNeuro/index.php/CECN1_Units\" title=\"View the content page [ctrl-alt-c]\" accesskey=\"c\">Page</a></li>
				 <li id=\"ca-talk\" class=\"new\"><a href=\"/CompCogNeuro/index.php?title=Talk:CECN1_Units&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [ctrl-alt-t]\" accesskey=\"t\">Discussion</a></li>
				 <li id=\"ca-viewsource\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Units&amp;action=edit\" title=\"This page is protected.
You can view its source [ctrl-alt-e]\" accesskey=\"e\">View source</a></li>
				 <li id=\"ca-history\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Units&amp;action=history\" title=\"Past revisions of this page [ctrl-alt-h]\" accesskey=\"h\">History</a></li>			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-personal\">
		<h5>Personal tools</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
				<li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CECN1_Units\" title=\"You are encouraged to log in; however, it is not mandatory [ctrl-alt-o]\" accesskey=\"o\">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-logo\">
		<a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [ctrl-alt-z]\" accesskey=\"z\"></a>
	</div>
	<script type=\"text/javascript\"> if (window.isMSIE55) fixalpha(); </script>
	<div class=\"generated-sidebar portlet\" id=\"p-navigation\">
		<h5 lang=\"en\" xml:lang=\"en\">Navigation</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li>
				<li id=\"n-portal\"><a href=\"/CompCogNeuro/index.php/Project:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li>
				<li id=\"n-currentevents\"><a href=\"/CompCogNeuro/index.php/Project:Current_events\" title=\"Find background information on current events\">Current events</a></li>
				<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"The list of recent changes in the wiki [ctrl-alt-r]\" accesskey=\"r\">Recent changes</a></li>
				<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [ctrl-alt-x]\" accesskey=\"x\">Random page</a></li>
				<li id=\"n-help\"><a href=\"/CompCogNeuro/index.php/Help:Contents\" title=\"The place to find out\">Help</a></li>
			</ul>
		</div>
	</div>
	<div id=\"p-search\" class=\"portlet\">
		<h5 lang=\"en\" xml:lang=\"en\"><label for=\"searchInput\">Search</label></h5>
		<div id=\"searchBody\" class=\"pBody\">
			<form action=\"/CompCogNeuro/index.php\" id=\"searchform\"><div>
				<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
				<input id=\"searchInput\" name=\"search\" type=\"text\" title=\"Search Computational Cognitive Neuroscience Wiki [ctrl-alt-f]\" accesskey=\"f\" value=\"\">
				<input type=\"submit\" name=\"go\" class=\"searchButton\" id=\"searchGoButton\" value=\"Go\" title=\"Go to a page with this exact name if exists\">&nbsp;
				<input type=\"submit\" name=\"fulltext\" class=\"searchButton\" id=\"mw-searchButton\" value=\"Search\" title=\"Search the pages for this text\">
			</div></form>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-tb\">
		<h5 lang=\"en\" xml:lang=\"en\">Toolbox</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CECN1_Units\" title=\"List of all wiki pages that link here [ctrl-alt-j]\" accesskey=\"j\">What links here</a></li>
				<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CECN1_Units\" title=\"Recent changes in pages linked from this page [ctrl-alt-k]\" accesskey=\"k\">Related changes</a></li>
<li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [ctrl-alt-u]\" accesskey=\"u\">Upload file</a></li>
<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"List of all special pages [ctrl-alt-q]\" accesskey=\"q\">Special pages</a></li>
				<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Units&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [ctrl-alt-p]\" accesskey=\"p\">Printable version</a></li>				<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Units&amp;oldid=520\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-download-as-pdf\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/render_article/&amp;arttitle=CECN1+Units&amp;oldid=520&amp;writer=rl\" rel=\"nofollow\">PDF version</a></li>			</ul>
		</div>
	</div>
	<div class=\"generated-sidebar portlet\" id=\"p-coll-create_a_book\">
		<h5 lang=\"en\" xml:lang=\"en\">Create a book</h5>
		<div class=\"pBody\">
<ul id=\"collectionPortletList\"><li id=\"coll-add_page\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/add_article/&amp;arttitle=CECN1+Units&amp;oldid=0\" title=\"Add the current wiki page to your book\" onclick=\"collectionCall('AddArticle', ['removepage', wgNamespaceNumber, wgTitle, 0]); return false;\" rel=\"nofollow\">Add page to book</a></li><li id=\"coll-help_collections\"><a href=\"/CompCogNeuro/index.php/Help:Books\" title=\"Show help about the book tool\">Books help</a></li></ul><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionAddRemoveSate = \"addpage\";
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/portlet.js?2\"></script><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionNavPopupJSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\";
		var wgCollectionNavPopupCSSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";
		var wgCollectionAddPageText = \"Add linked wiki page to your book\";
		var wgCollectionAddCategoryText = \"Add wiki pages in linked category to your book\";
		var wgCollectionRemovePageText = \"Remove linked wiki page from your book\";
		var wgCollectionPopupHelpText = \"To deactivate this feature click \\\"Clear book\\\" in the \\\"Create a book\\\" box\";
		var wgCollectionArticleNamespaces = [0, 1, 2, 3, 4, 5, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111];
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/json2.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popupcheck.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popup.js\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\"></script>		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class=\"visualClear\"></div>
			<div id=\"footer\">
				<div id=\"f-poweredbyico\"><a href=\"http://www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\"></a></div>
			<ul id=\"f-list\">
					<li id=\"lastmod\"> This page was last modified on 3 September 2009, at 09:02.</li>
					<li id=\"viewcount\">This page has been accessed 2,887 times.</li>
					<li id=\"privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
					<li id=\"about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
					<li id=\"disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type=\"text/javascript\">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.166 secs. -->
</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="LayerWizEl";
     n_units=25;
     io_type=190578;
    };
    LayerWizEl @[1] {
     name="LayerWizEl";
     n_units=25;
     io_type=131072;
    };
    LayerWizEl @[2] {
     name="LayerWizEl";
     n_units=25;
     io_type=131073;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {
     name="DocLink";
     doc=.projects[0].docs[0]$$;
    };
   };
   name="ControlPanel";
   auto_edit=1;
   desc="The master control panel for the simulation -- see the Doc panel for more info";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="act_fun";
     desc=" activation function to use<br>  GELIN:  linear in the excitatory conductance (g_e), compared to excitatory current required to get to firing threshold (based on current currents..)<br>  NOISY XX1:  x over x plus 1 convolved with Gaussian noise (noise is nvar)<br>  XX1:  x over x plus 1, hard threshold, no noise convolution<br>  NOISY LINEAR:  simple linear output function (still thesholded) convolved with Gaussian noise (noise is nvar)<br>  LINEAR:  simple linear output function (still thesholded)<br>  SPIKE:  discrete spiking activations (spike when > thr)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0]$$;
     mbr=LeabraUnitSpec::act_fun;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="g_bar";
     desc=" [Defaults: 1, .1, 1, .1, .5] maximal conductances for channels<br>  e:  Excitatory (glutamatergic synaptic sodium (Na) channel)<br>  l:  Constant leak (potassium, K+) channel <br>  i:  inhibitory<br>  h:  hysteresis (Ca)<br>  a:  accomodation (k)";
     cust_desc=0;
     base=$.projects[0].networks[0].specs[0]$;
     mbr=LeabraUnitSpec::g_bar;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="e_rev";
     desc=" [Defaults: 1, .15, .15, 1, 0] reversal potentials for each channel<br>  e:  Excitatory (glutamatergic synaptic sodium (Na) channel)<br>  l:  Constant leak (potassium, K+) channel <br>  i:  inhibitory<br>  h:  hysteresis (Ca)<br>  a:  accomodation (k)";
     cust_desc=0;
     base=$.projects[0].networks[0].specs[0]$;
     mbr=LeabraUnitSpec::e_rev;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[3] {
     label="noise var";
     desc=" 'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].noise$$;
     mbr=Random::var;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[4] {
     label="BioUnitSpec_0 g bar";
     desc=" [Defaults: 1, .1, 1, .1, .5] maximal conductances for channels<br>  e:  Excitatory (glutamatergic synaptic sodium (Na) channel)<br>  l:  Constant leak (potassium, K+) channel <br>  i:  inhibitory<br>  h:  hysteresis (Ca)<br>  a:  accomodation (k)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[4]$$;
     mbr=LeabraUnitSpec::g_bar;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[5] {
     label="BioUnitSpec_0 e rev";
     desc=" [Defaults: 1, .15, .15, 1, 0] reversal potentials for each channel<br>  e:  Excitatory (glutamatergic synaptic sodium (Na) channel)<br>  l:  Constant leak (potassium, K+) channel <br>  i:  inhibitory<br>  h:  hysteresis (Ca)<br>  a:  accomodation (k)";
     cust_desc=0;
     base=$.projects[0].networks[0].specs[4]$;
     mbr=LeabraUnitSpec::e_rev;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[6] {
     label="var";
     desc=" 'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[4].noise$$;
     mbr=Random::var;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[7] {
     label="LeabraSettle excite_act";
     desc=" real value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][0].vars[5]$$;
     mbr=ProgVar::real_val;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem @[8] {
     label="LeabraSettle inhib_act";
     desc=" real value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][0].vars[6]$$;
     mbr=ProgVar::real_val;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1;
     };
    };
    EditMbrItem_Group @.gp[0] {
     name="Sending Unit Activation Timing";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="n_cycles";
      desc=" integer value (also for enum types)";
      cust_desc=0;
      base=.projects[0].programs.gp[0][0].vars[0]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
     EditMbrItem @[1] {
      label="on_cycle";
      desc=" integer value (also for enum types)";
      cust_desc=0;
      base=.projects[0].programs.gp[0][0].vars[1]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="off_cycle";
      desc=" integer value (also for enum types)";
      cust_desc=0;
      base=.projects[0].programs.gp[0][0].vars[2]$$;
      mbr=ProgVar::int_val;
      is_numeric=1;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1;
      };
     };
    };
    EditMbrItem_Group @.gp[1] {
     name="Net Data";
     el_typ=EditMbrItem;
     el_def=0;
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[0][0]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Defaults";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs[0]$$;
     mth=Program::Init;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="Environment_0";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.4579606354236603;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] "Event_0";      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1788908839225769;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [1 1 1] 0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {
      name="DocLink";
      doc=$.projects[0].docs[0]$;
     };
    };
    name="CycleOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="cycle";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[1] {
      name="net";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="I_net";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="v_m";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="act_eq";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="adapt";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @[0] {
   name="SetDefaults";
   short_nm="SDflts";
   tags=;
   desc="restores default initial parameters in the simulation";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="act_fun";
     var_type=T_HardEnum;
     int_val=0;
     hard_enum_type=LeabraUnitSpec::ActFun;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="g_bar_e";
     var_type=T_Real;
     real_val=0.4;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default g_bar.e value";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="g_bar_l";
     var_type=T_Real;
     real_val=2.8;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default g_bar.l value";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="e_rev_e";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default g_rev_e value";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="e_rev_l";
     var_type=T_Real;
     real_val=0.15;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default e_rev_l value";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="noise_var";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default noise val";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="n_cycles";
     var_type=T_Int;
     int_val=200;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default number of cycles";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="on_cycle";
     var_type=T_Int;
     int_val=10;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default input on cycle";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="off_cycle";
     var_type=T_Int;
     int_val=160;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="default input off cycle";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="unit_spec";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.projects[0].networks[0].specs[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="settle";
     var_type=T_Object;
     object_type=Program;
     object_val=$.projects[0].programs.gp[0][0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="ControlPanel";
     var_type=T_Object;
     object_type=SelectEdit;
     object_val=.projects[0].edits[0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MemberAssign @[0] {
     desc=;
     flags=;
     obj=.projects[0].programs[0].vars[9]$$;
     path="g_bar.e";
     expr {
      expr="g_bar_e";
     };
     update_after=0;
    };
    MemberAssign @[1] {
     desc=;
     flags=;
     obj=$.projects[0].programs[0].vars[9]$;
     path="g_bar.l";
     expr {
      expr="g_bar_l";
     };
     update_after=0;
    };
    MemberAssign @[2] {
     desc=;
     flags=;
     obj=$.projects[0].programs[0].vars[9]$;
     path="e_rev.e";
     expr {
      expr="e_rev_e";
     };
     update_after=0;
    };
    MemberAssign @[3] {
     desc=;
     flags=;
     obj=$.projects[0].programs[0].vars[9]$;
     path="e_rev.l";
     expr {
      expr="e_rev_l";
     };
     update_after=0;
    };
    MemberAssign @[4] {
     desc=;
     flags=;
     obj=$.projects[0].programs[0].vars[9]$;
     path="noise.var";
     expr {
      expr="noise_var";
     };
     update_after=0;
    };
    MemberAssign @[5] {
     desc=;
     flags=;
     obj=$.projects[0].programs[0].vars[9]$;
     path="act_fun";
     expr {
      expr="act_fun";
     };
     update_after=1;
    };
    MethodCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[10]$$;
     method=Program::SetVar;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"n_cycles\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="value";
       required=1;
       def_val=;
       expr {
	expr="n_cycles";
       };
      };
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[0].vars[10]$;
     method=Program::SetVar;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"on_cycle\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="value";
       required=1;
       def_val=;
       expr {
	expr="on_cycle";
       };
      };
     };
    };
    MethodCall @[8] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[0].vars[10]$;
     method=Program::SetVar;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"off_cycle\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="value";
       required=1;
       def_val=;
       expr {
	expr="off_cycle";
       };
      };
     };
    };
    MethodCall @[9] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[11]$$;
     method=SelectEdit::UpdateAfterEdit;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[1] {
   name="BretteGerstner05";
   short_nm="BrtGrs";
   tags=;
   desc="offline sim";
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="BG05Data";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="time";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
       };
      };
      float_Data @[1] {
       name="v_m";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] -0.070599988;-0.070599981;-0.070599973;-0.070599973;-0.070599966;-0.070599958;-0.070599958;-0.070599951;-0.070599951;-0.070599943;
-0.070599943;-0.070599936;-0.070599936;-0.070599936;-0.070599936;-0.070599928;-0.070599928;-0.070599928;-0.070599928;-0.070599928;
-0.070599928;-0.067041203;-0.063862376;-0.061023075;-0.058486767;-0.056219485;-0.054187559;-0.05235346;-0.0506685;-0.049058892;
-0.047392234;-0.045362413;-0.041861586;-0.026128082;-0.070600003;-0.067351215;-0.06444709;-0.061851047;-0.059530139;-0.057454243;
-0.055594906;-0.053923652;-0.052409448;-0.051014945;-0.049690213;-0.048359279;-0.046882555;-0.044916458;-0.041087337;-0.018506991;
-0.070600003;-0.067632362;-0.064977415;-0.062602028;-0.060476415;-0.058573592;-0.056868713;-0.055338234;-0.053958878;-0.052706398;
-0.051553987;-0.050469946;-0.049413349;-0.048324153;-0.047096312;-0.04548689;-0.042670976;-0.032464206;-0.070600003;-0.067877628;
-0.065440066;-0.063257158;-0.061301857;-0.059549768;-0.057978708;-0.05656822;-0.055299021;-0.054152489;-0.053110071;-0.052152686;
-0.05125995;-0.050408881;-0.049571481;-0.048709538;-0.047762237;-0.046611659;-0.044959955;-0.041659515;-0.025068363;-0.070600003;
-0.068084151;-0.065829635;-0.063808814;-0.061996892;-0.060371604;-0.058912821;-0.057602212;-0.056422915;-0.055359196;-0.054396175;
-0.053519558;-0.052715395;-0.051969782;-0.051268488;-0.050596293;-0.049935848;-0.049265511;-0.048554949;-0.047755163;-0.046772297;
-0.045381594;-0.042819701;-0.033701468;-0.070600003;-0.06824711;-0.066137016;-0.064244069;-0.06254527;-0.061019976;-0.059649605;
-0.058417346;-0.057307892;-0.056307208;-0.055402335;-0.054581199;-0.053832479;-0.053145472;-0.05250996;-0.051916048;-0.051353928;
-0.050813548;-0.050284039;-0.049752809;-0.049203936;-0.048615031;-0.047950707;-0.047146704;-0.046063852;-0.044311225;-0.04012394;
-0.0044823801;-0.070600003;-0.068366341;-0.066361934;-0.064562552;-0.062946513;-0.061494365;-0.060188618;-0.059013508;-0.057954758;
-0.056999393;-0.056135543;-0.055352319;-0.054639693;-0.05398839;-0.053389795;-0.052835874;-0.052319072;-0.051832184;-0.051368188;
-0.050920043;-0.050480332;-0.050040822;-0.049591638;-0.049119972;-0.04860758;-0.048025731;-0.047323503;-0.046396125;-0.044975597;
-0.042065863;-0.028899847;-0.070600003;-0.068443254;-0.066507012;-0.064767994;-0.063205339;-0.061800364;-0.06053628;-0.059397977;
-0.058371805;-0.057445407;-0.056607544;-0.055847969;-0.055157311;-0.054526992;-0.053949136;-0.053416505;-0.05292242;-0.052460667;
-0.052025426;-0.051611152;-0.051212415;-0.050823741;-0.050439335;-0.050052736;-0.04965622;-0.049239881;-0.048789941;-0.048285533;
-0.04769177;-0.046942849;-0.045892227;-0.044116832;-0.039617952;0.0063180341;-0.070600003;-0.068490177;-0.066595525;-0.064893328;
-0.063363239;-0.061987039;-0.060748361;-0.059632491;-0.058626156;-0.057717353;-0.0568952;-0.056149807;-0.055472165;-0.054854065;
-0.054288;-0.053767126;-0.05328517;-0.052836362;-0.052415378;-0.052017238;-0.051637229;-0.051270761;-0.050913256;-0.050559931;
-0.05020554;-0.049843989;-0.049467709;-0.049066618;-0.048626237;-0.048123982;-0.047521017;-0.046741705;-0.045610245;-0.043581806;
-0.037649222;-0.070600003;-0.068515196;-0.066642717;-0.064960144;-0.063447423;-0.062086567;-0.060861435;-0.05975752;-0.058761749;
-0.057862304;-0.057048492;-0.056310598;-0.055639796;-0.055028055;-0.054468058;-0.053953141;-0.05347722;-0.05303473;-0.052620556;
-0.052229971;-0.051858526;-0.051501993;-0.051156227;-0.050817024;-0.050479963;-0.050140113;-0.049791679;-0.049427375;-0.04903743;
-0.048607733;-0.048116226;-0.047524992;-0.046760451;-0.045652706;-0.043682143;-0.038067877;-0.070600003;-0.068528078;-0.066667028;
-0.064994566;-0.063490793;-0.062137835;-0.06091968;-0.059821922;-0.058831591;-0.057936963;-0.057127435;-0.056393389;-0.055726085;
-0.055117585;-0.054560661;-0.054048736;-0.053575821;-0.053136446;-0.052725594;-0.052338652;-0.051971298;-0.051619451;-0.051279157;
-0.050946459;-0.050617259;-0.05028709;-0.049950831;-0.049602229;-0.04923315;-0.048832275;-0.048382636;-0.047856569;-0.047204062;
-0.046321042;-0.044940215;-0.042068381;-0.029010309;-0.070600003;-0.068532884;-0.06667608;-0.065007389;-0.063506946;-0.062156931;
-0.060941376;-0.059845909;-0.058857601;-0.057964768;-0.057156835;-0.056424215;-0.055758212;-0.055150915;-0.054595124;-0.054084301;
-0.053612489;-0.05317425;-0.052764609;-0.052378982;-0.052013099;-0.051662933;-0.051324584;-0.050994188;-0.050667752;-0.050340965;
-0.050008923;-0.049665701;-0.049303684;-0.048912402;-0.048476402;-0.047970939;-0.04735231;-0.04653259;-0.0452976;-0.042926922;
-0.034583412;-0.070600003;-0.068535775;-0.066681534;-0.065015107;-0.063516669;-0.062168431;-0.06095444;-0.059860356;-0.058873266;
-0.057981513;-0.057174537;-0.056442782;-0.055777561;-0.055170983;-0.054615874;-0.054105714;-0.053634558;-0.053197;-0.052788079;
-0.052403234;-0.052038226;-0.051689051;-0.051351853;-0.051022813;-0.050698001;-0.050373197;-0.050043616;-0.049703524;-0.04934559;
-0.048959821;-0.048531588;-0.048037726;-0.047437858;-0.046652284;-0.045492504;-0.043357436;-0.036704943;-0.070600003;-0.068537645;
-0.066685066;-0.065020122;-0.06352298;-0.062175892;-0.060962915;-0.059869729;-0.058883429;-0.057992373;-0.057186022;-0.056454826;
-0.055790108;-0.055183999;-0.054629333;-0.054119598;-0.05364887;-0.053211749;-0.052803293;-0.052418951;-0.052054506;-0.051705968;
-0.051369507;-0.051041335;-0.050717562;-0.050394021;-0.050066005;-0.049727898;-0.04937255;-0.048990257;-0.0485669;-0.048080262;
-0.047491957;-0.046727121;-0.045611873;-0.043609384;-0.037786316;-0.070600003;-0.068538897;-0.066687427;-0.065023459;-0.063527189;
-0.062180862;-0.060968563;-0.059875973;-0.058890201;-0.057999611;-0.057193674;-0.05646285;-0.055798471;-0.055192672;-0.054638296;
-0.054128848;-0.053658403;-0.053221576;-0.052813426;-0.052429419;-0.052065343;-0.051717229;-0.051381256;-0.051053658;-0.050730567;
-0.05040786;-0.050080877;-0.049744077;-0.04939042;-0.0490104;-0.048590221;-0.048108269;-0.047527425;-0.04677584;-0.045688588;
-0.043766908;-0.038410272;-0.070600003;-0.068539739;-0.066689014;-0.06502571;-0.063530028;-0.062184218;-0.060972374;-0.05988019;
-0.058894772;-0.058004498;-0.057198845;-0.056468267;-0.055804119;-0.055198528;-0.054644354;-0.054135095;-0.053664841;-0.053228207;
-0.052820265;-0.052436486;-0.052072659;-0.051724829;-0.051389184;-0.051061969;-0.05073934;-0.050417189;-0.050090898;-0.04975497;
-0.049402446;-0.049023941;-0.048605874;-0.048127037;-0.047551122;-0.046808235;-0.045739181;-0.043868985;-0.038794953;-0.070600003;
-0.068540312;-0.066690102;-0.065027244;-0.063531958;-0.062186502;-0.06097497;-0.059883058;-0.058897886;-0.058007825;-0.057202358;
-0.056471955;-0.055807959;-0.05520251;-0.05464847;-0.054139342;-0.053669222;-0.053232718;-0.052824918;-0.052441292;-0.052077632;
-0.051729996;-0.051394574;-0.051067621;-0.050745301;-0.050423529;-0.050097704;-0.049762364;-0.049410608;-0.049033128;-0.048616484;
-0.048139736;-0.047567129;-0.046830051;-0.045773067;-0.043936569;-0.039041582;-0.070600003;-0.068540707;-0.06669084;-0.065028295;
       };
      };
      float_Data @[2] {
       name="g_e";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0.99701005;0.99447751;0.99307221;0.99229169;0.99496192;0.9951722;0.99081451;0.99625742;0.99058968;0.98938262;
0.98965436;0.99122113;0.99071252;0.99407172;0.99791867;1.0017347;0.9979831;1.0032605;1.0013821;1.0007056;
1.0011446;1.0031012;0.99913752;0.99501026;0.99952888;1.0055343;1.009248;1.0093585;1.0117749;1.0139513;
1.015534;1.0101404;1.0099167;1.0121868;1.0145383;1.0175396;1.0197084;1.0186033;1.020159;1.0287939;
1.0272493;1.0249398;1.0274791;1.0304781;1.0328585;1.0292745;1.0300007;1.026006;1.0256424;1.0217359;
1.0222037;1.0260798;1.0221705;1.0223234;1.020265;1.0189327;1.0199815;1.02219;1.0295856;1.030032;
1.0243047;1.0271525;1.0264919;1.0209048;1.0180345;1.0157727;1.0154549;1.0161541;1.0167959;1.0137579;
1.0103691;1.0142403;1.0132955;1.0154741;1.012863;1.0155365;1.0208232;1.016647;1.01823;1.0165117;
1.0201348;1.0201817;1.0169945;1.013482;1.0130459;1.0139952;1.0130497;1.0184861;1.0198618;1.0195118;
1.0204326;1.0181702;1.0174307;1.0195314;1.0200919;1.0169882;1.0089254;1.0116349;1.0074447;1.0046358;
1.0080512;1.0022914;0.99760979;0.99544084;1.0015912;1.004886;1.0079575;1.0097202;1.0072185;1.0089349;
1.0076886;1.0124011;1.0128453;1.0130187;1.0128863;1.0180783;1.0152663;1.0108846;1.0092306;1.0121148;
1.0058178;1.0053903;1.0068763;1.0119072;1.0101545;1.0122917;1.0083576;1.00554;1.0099944;1.0077865;
1.0061544;1.0067559;1.0089582;1.0093811;1.0073231;1.0067612;1.0072706;1.0014687;1.0032463;1.0047379;
1.0042844;1.0067246;1.0058659;1.0011258;1.0059183;1.0018569;1.0006237;1.0025846;1.0057181;1.0113728;
1.0178868;1.0184813;1.021521;1.0223234;1.0243598;1.0259107;1.0267684;1.0296518;1.0255349;1.0222028;
1.0197959;1.0140353;1.012658;1.0055101;1.0097554;1.0112903;1.0151685;1.0071713;1.0067606;1.0065233;
1.0097851;1.0089766;1.0158739;1.012609;1.0142214;1.0128217;1.0151281;1.0172402;1.0165972;1.0147831;
1.015444;1.0167691;1.0178546;1.015723;1.0191886;1.0184511;1.0212216;1.024444;1.0259933;1.0247598;
1.0241444;1.0256538;1.0235193;1.020873;1.0168806;1.0208005;1.0219021;1.0199153;1.0174996;1.0246537;
1.0243342;1.0231034;1.0125238;1.01239;1.0131602;1.0149565;1.0152707;1.0169113;1.0124204;1.008965;
1.0061467;1.0082185;1.0083457;1.0075116;1.0099317;1.0042824;1.0028623;1.0006503;1.001521;1.0055944;
1.0057133;1.0074257;1.0046809;1.0105749;1.0117736;1.0125252;1.011029;1.0084038;1.0078932;1.0074408;
1.0031898;1.001567;1.0029899;1.0021781;1.0017025;1.0007035;0.99599957;0.9949351;0.99351203;0.99113482;
0.99398082;0.99705273;0.9922933;0.99361467;0.99697518;0.9967503;0.9992547;0.9974106;0.99803787;0.99818206;
0.994748;0.99442774;0.99239248;0.99244666;0.99655646;1.0014721;1.0010136;0.99575776;0.99341035;0.99061847;
0.9898873;0.98518676;0.98663938;0.98603433;0.98565716;0.99255675;0.99435925;0.99286985;0.9969539;0.99745798;
0.99686301;1.0000865;1.0006456;0.99939024;1.0012103;1.0010864;0.99790001;1.0006748;1.0014104;1.007395;
1.0016592;0.99951643;1.0001193;0.99931359;0.99430728;0.99279618;0.99224091;0.99400479;0.99928647;0.99794501;
0.99493688;0.99516916;0.9966442;0.99483031;0.99882245;1.0066724;1.0010276;1.0019646;0.99819815;1.0014945;
1.0019927;0.99988872;0.99415731;0.99756032;0.99966574;0.99846011;0.99918133;0.99516195;0.99169308;0.98477685;
0.98557413;0.98549813;0.98678988;0.98840714;0.98986065;0.98525363;0.98470503;0.98350567;0.98247504;0.98316234;
0.98436868;0.98388171;0.98482984;0.98325419;0.98799843;0.98901534;0.99146342;0.99222803;0.99538499;0.99515206;
1.0003948;0.99796283;0.99323213;0.99015635;0.98848456;0.99165612;0.99159765;0.98955077;0.98746133;0.98652738;
0.98645943;0.98697501;0.99280179;0.99690515;0.9978258;0.99295032;0.99340886;0.99361116;0.99005198;0.99086279;
0.99020046;0.99016148;0.98895425;0.99164885;0.98716128;0.98898476;0.99145192;0.99281973;0.99759382;1.0045259;
1.0034524;1.0080658;1.0067229;1.0069636;1.0055262;1.0056993;1.004555;1.0033629;1.0030259;1.0072396;
1.0044312;1.0064012;1.0092671;1.0065948;1.0093572;1.0127213;1.012942;1.0153239;1.0125961;1.010301;
1.0076571;1.0100213;1.0097177;1.0116825;1.011704;1.0102302;1.0094261;1.0066882;1.0087739;1.0090584;
1.0051967;1.0097439;1.0102216;1.0084136;1.0085893;1.0112091;1.012201;1.012445;1.0097635;1.0048416;
1.0039024;1.0037537;1.0074376;1.0086344;1.0080799;1.0039235;1.0050341;1.0039259;1.0065805;1.007859;
1.0054392;0.99904096;1.0005345;0.99784195;1.0023143;1.0010694;0.99694049;0.99564427;1.0007043;0.99967253;
0.99963295;0.99556279;0.99319482;0.99411023;0.99489033;1.0002548;0.99293166;0.98929977;0.99035043;0.98771596;
0.98921889;0.98423988;0.97772568;0.97556466;0.98154408;0.98544252;0.98842978;0.98993635;0.99099541;0.98398036;
0.98087031;0.97848034;0.97950852;0.98054868;0.98332369;0.98346233;0.97669351;0.98362803;0.98016757;0.97802728;
0.97532481;0.97015858;0.97053629;0.97066939;0.97041923;0.96859342;0.97063339;0.97087389;0.97156912;0.97513103;
0.97756749;0.98012751;0.98262459;0.98580283;0.98713201;0.98696309;0.98628902;0.98582739;0.98118633;0.98143524;
0.9796325;0.97922146;0.98103493;0.97908574;0.97347885;0.96977824;0.96845955;0.96722627;0.96332562;0.96847194;
0.97014064;0.97380334;0.97333574;0.97733706;0.97618186;0.97007871;0.97559339;0.97382605;0.97190922;0.9716363;
0.97681838;0.98160851;0.98453277;0.9815222;0.98536628;0.98202974;0.98436886;0.9871344;0.98777682;0.98867542;
0.99340546;0.99001515;0.98899448;0.98963839;0.9880957;0.98496133;0.98251635;0.98577267;0.98368591;0.97889024;
0.98142648;0.98437917;0.98289657;0.98476934;0.98717541;0.98783225;0.98800617;0.98857939;0.98832965;0.98263943;
0.98215419;0.98518991;0.98690951;0.99012303;0.99318266;0.98843873;0.99360448;0.99603468;0.99781322;0.99955797;
0.99708909;1.0031852;1.0056808;1.0102215;1.0104995;1.0121429;1.015241;1.0158379;1.0206488;1.0170456;
       };
      };
      float_Data @[3] {
       name="g_i";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 1.0018027;1.0006945;1.0052768;1.008866;1.0078349;1.0069423;1.0089555;1.0110731;1.014768;1.0141492;
1.0135843;1.0156996;1.0177693;1.0174345;1.0080795;1.0076796;1.0033157;0.99880344;0.99567449;0.99636835;
0.99484676;0.9921537;1.001075;1.0051587;1.0125377;1.0158076;1.0169231;1.0053658;1.0040151;1.0022563;
1.0017655;1.0047555;0.99642003;0.9948771;0.99518877;0.99341387;0.99046725;0.98578119;0.98594898;0.9843232;
0.98650026;0.9836573;0.9845624;0.98217243;0.97851539;0.97352326;0.96734262;0.96682334;0.9640373;0.96297669;
0.96234709;0.96022564;0.95545477;0.95252913;0.95668232;0.95409352;0.95308322;0.94837701;0.94724101;0.95099711;
0.94806528;0.94228774;0.94458276;0.9407481;0.9390322;0.93754798;0.93214214;0.92862785;0.92605889;0.92866045;
0.93038493;0.93274051;0.93212008;0.93491447;0.93499035;0.93131995;0.93014663;0.92569321;0.92455095;0.91877735;
0.91788584;0.91933244;0.91863799;0.91731173;0.91794944;0.91242737;0.91163665;0.90403497;0.89715898;0.90093982;
0.89784449;0.89882112;0.89848381;0.8923136;0.89545238;0.88723493;0.88504249;0.88188016;0.88056314;0.88233095;
0.88306344;0.87889916;0.88399285;0.88541901;0.88256246;0.87626994;0.87852377;0.87806904;0.87435997;0.87417012;
0.87676603;0.87825406;0.87303257;0.87201935;0.8652631;0.86705589;0.87064779;0.86689854;0.86534399;0.8623606;
0.86224234;0.85680181;0.85586363;0.85489261;0.85683846;0.85552323;0.85766119;0.85823697;0.86281568;0.8610487;
0.86404395;0.86836368;0.865789;0.85992861;0.85915124;0.8625139;0.86220801;0.86194313;0.86462307;0.86478192;
0.87041926;0.86456007;0.86628532;0.86313254;0.86489558;0.86688048;0.86430705;0.86755008;0.86905289;0.86919796;
0.86345631;0.85880893;0.85737056;0.85155976;0.85209137;0.85198212;0.84637439;0.84856272;0.8435173;0.84046865;
0.84161377;0.84061956;0.8396492;0.8397001;0.83671051;0.83560973;0.83593661;0.84124321;0.84048206;0.83689493;
0.83605349;0.83893245;0.8378728;0.83368731;0.83581007;0.83234578;0.83402681;0.82731205;0.82192379;0.81746823;
0.81631976;0.81427181;0.81139487;0.81216717;0.81003565;0.81024027;0.80748194;0.80070603;0.79568452;0.79388642;
0.79326254;0.79363596;0.79347199;0.79405528;0.79739022;0.79534405;0.79705203;0.79525548;0.78821725;0.77908552;
0.78234881;0.78185761;0.77855206;0.77648324;0.77783126;0.77499574;0.77604425;0.77460444;0.77045548;0.77112544;
0.76987058;0.76628387;0.77091241;0.76575691;0.76223761;0.75865567;0.76052213;0.75828063;0.75831753;0.75974971;
0.75364375;0.75231868;0.75503492;0.755723;0.75547588;0.75640446;0.75168675;0.74804628;0.74612504;0.74761409;
0.745637;0.74495471;0.74195284;0.73462045;0.73308665;0.73581839;0.73446745;0.73128343;0.73267752;0.73743695;
0.74068534;0.73444051;0.73467708;0.73561692;0.73312098;0.73051566;0.72209996;0.72160298;0.72591686;0.72375929;
0.72942621;0.72338766;0.71968096;0.71868247;0.72223407;0.72272402;0.72214955;0.721928;0.72712624;0.72886521;
0.72981656;0.73622769;0.73976159;0.74032485;0.73859477;0.73638219;0.73875898;0.73922098;0.73824191;0.7379573;
0.73739505;0.73883647;0.73484671;0.73240674;0.72826076;0.7246834;0.72944969;0.72813654;0.73045325;0.73169053;
0.7300061;0.73102075;0.73295587;0.73498851;0.74247742;0.73742712;0.73886341;0.74292976;0.74197948;0.74196965;
0.74563128;0.74855053;0.74595314;0.74562806;0.7436167;0.74612111;0.7459749;0.7433359;0.74419671;0.74504137;
0.74631006;0.74799502;0.7472024;0.75172436;0.75226808;0.74998981;0.74859047;0.74537641;0.74729449;0.75030142;
0.75019526;0.75407749;0.76046002;0.76009464;0.76447147;0.75742888;0.75960439;0.75929773;0.76006132;0.76237744;
0.76333123;0.76109016;0.76782352;0.76592135;0.76108199;0.76647186;0.76808751;0.76752681;0.76739836;0.76479143;
0.77025634;0.77022034;0.76784873;0.76592296;0.76998252;0.77388823;0.77461904;0.77571332;0.77441573;0.7769016;
0.78050095;0.78082758;0.78438699;0.77984363;0.78201789;0.78347492;0.78098518;0.78406632;0.77896529;0.78106219;
0.78854007;0.79046679;0.78773928;0.78700936;0.78806591;0.78660107;0.79230922;0.79429924;0.80181092;0.79759216;
0.79349434;0.7893225;0.79012108;0.78986818;0.79245502;0.79192245;0.79738075;0.80251402;0.80415356;0.80783826;
0.80800885;0.80635625;0.80648702;0.79531306;0.79309863;0.79324096;0.7913751;0.79087925;0.79189789;0.78736949;
0.78090113;0.78145105;0.78137273;0.7779569;0.77394807;0.77199715;0.76948029;0.77195293;0.76829922;0.766065;
0.76714635;0.76630884;0.76419753;0.76487404;0.76566404;0.76278651;0.76086122;0.75305808;0.75673556;0.75465858;
0.75728118;0.76169777;0.76250523;0.76176703;0.76453561;0.75470668;0.75806361;0.76298517;0.76141119;0.75574988;
0.75208634;0.75582588;0.75646853;0.75276405;0.75003064;0.7535454;0.75541866;0.75672865;0.76069033;0.76253319;
0.76353288;0.76163948;0.76422083;0.76506186;0.76847637;0.76894522;0.76875716;0.77388728;0.77176869;0.77168417;
0.7729255;0.77529913;0.78261596;0.78503639;0.78225631;0.78965664;0.79217803;0.79617167;0.79323959;0.78725493;
0.79062152;0.79200578;0.79164577;0.79314774;0.79352778;0.79439819;0.79541141;0.79419959;0.79475099;0.79713267;
0.80183369;0.80096757;0.80084246;0.80274385;0.80054063;0.8106041;0.81373453;0.81696397;0.81537825;0.81828898;
0.82481337;0.82695544;0.83003354;0.83275688;0.8303206;0.83273584;0.83379591;0.8335377;0.83286321;0.83426756;
0.83107126;0.83507657;0.83302271;0.82946599;0.83588612;0.83841825;0.84440446;0.84530699;0.8421753;0.84166187;
0.85023957;0.85465097;0.8569836;0.86091226;0.86681902;0.86652756;0.86932689;0.86743337;0.87116253;0.87509835;
0.87463623;0.87523651;0.87303793;0.86972165;0.86636293;0.86794442;0.86948681;0.87630379;0.88218164;0.8762756;
0.87663138;0.8789441;0.87696201;0.87450266;0.87360585;0.86623561;0.87296504;0.87566811;0.8739717;0.87503821;
0.87792176;0.88101047;0.88836658;0.89077264;0.89203435;0.89260834;0.89456457;0.89453554;0.89419001;0.89845109;
0.90044904;0.90558088;0.90816939;0.90685147;0.90290469;0.905083;0.90318322;0.90906036;0.90937567;0.9141683;
0.9147746;0.91297233;0.91426337;0.91450113;0.91350508;0.91346115;0.90912241;0.91341943;0.91015226;0.90870249;
       };
      };
      float_Data @[4] {
       name="I_net";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 2.4647733e-15;2.2016411e-15;1.9663565e-15;1.7559742e-15;1.5678605e-15;1.3996603e-15;1.2492674e-15;1.1147984e-15;9.9456893e-16;8.870732e-16;
7.9096424e-16;7.0503767e-16;6.2821649e-16;5.5953763e-16;4.9813986e-16;4.4325292e-16;3.941882e-16;3.5032978e-16;3.1112693e-16;2.7608716e-16;
2.4477002e-16;1.0000002e-09;8.9325075e-10;7.9784407e-10;7.1270295e-10;6.3710587e-10;5.7097188e-10;5.1538146e-10;4.7347376e-10;4.5229995e-10;
4.6833043e-10;5.7037969e-10;9.8373254e-10;4.4211146e-09;1.1187112e-05;9.1290858e-10;8.1605989e-10;7.2948736e-10;6.5217459e-10;5.8332733e-10;
5.224734e-10;4.6962229e-10;4.2549209e-10;3.9185449e-10;3.722497e-10;3.7399275e-10;4.1495909e-10;5.524739e-10;1.0759833e-09;6.3450769e-09;
0.00050539343;8.3390655e-10;7.4603923e-10;6.6748407e-10;5.9729771e-10;5.3469301e-10;4.7907051e-10;4.3006476e-10;3.8759901e-10;3.519473e-10;
3.2382794e-10;3.0461539e-10;2.9690309e-10;3.0606451e-10;3.4502334e-10;4.5224793e-10;7.9127171e-10;2.8681022e-09;4.705264e-07;7.6498696e-10;
6.8495493e-10;6.1339611e-10;5.4943999e-10;4.9233739e-10;4.4146742e-10;3.9634773e-10;3.566441e-10;3.2217587e-10;2.9291994e-10;2.6902444e-10;
2.5085894e-10;2.3915042e-10;2.3530933e-10;2.4220595e-10;2.6619151e-10;3.2331318e-10;4.6412893e-10;9.2742319e-10;4.6621138e-09;1.9003477e-05;
7.0695289e-10;6.3351879e-10;5.6785249e-10;5.0914928e-10;4.5670584e-10;4.0991818e-10;3.682806e-10;3.3138298e-10;2.9890523e-10;2.7060892e-10;
2.4632893e-10;2.2597017e-10;2.0951674e-10;1.9706364e-10;1.8888713e-10;1.8558523e-10;1.8836413e-10;1.9966796e-10;2.2474045e-10;2.7618485e-10;
3.9078732e-10;7.1989231e-10;2.5622233e-09;2.5325852e-07;6.6116296e-10;5.9293476e-10;5.3191845e-10;4.7736315e-10;4.286074e-10;3.8507397e-10;
3.462651e-10;3.1175681e-10;2.8119154e-10;2.5426941e-10;2.3073921e-10;2.1039047e-10;1.9304922e-10;1.7857901e-10;1.6688954e-10;1.57955e-10;
1.5184713e-10;1.4879238e-10;1.4927477e-10;1.5423401e-10;1.6548175e-10;1.8667473e-10;2.2592581e-10;3.0428163e-10;4.9248788e-10;1.1766267e-09;
1.0015278e-08;0.56109416;6.2765809e-10;5.6323912e-10;5.0562554e-10;4.5410675e-10;4.0805409e-10;3.6691478e-10;3.3020595e-10;2.9750816e-10;
2.6845837e-10;2.4274205e-10;2.2008524e-10;2.0024753e-10;1.8301657e-10;1.6820523e-10;1.5565144e-10;1.4522139e-10;1.3681609e-10;1.3038229e-10;
1.2592959e-10;1.2355784e-10;1.2350324e-10;1.2622024e-10;1.3253799e-10;1.4398187e-10;1.6350063e-10;1.9732531e-10;2.6059316e-10;3.9916831e-10;
8.1763529e-10;3.6996508e-09;2.7974504e-06;6.0604527e-10;5.440835e-10;4.8866505e-10;4.391055e-10;3.9479825e-10;3.5520778e-10;3.1986358e-10;
2.8835365e-10;2.603176e-10;2.3543953e-10;2.1344104e-10;1.9407487e-10;1.7711979e-10;1.6237713e-10;1.4966907e-10;1.388388e-10;1.2975233e-10;
1.2230195e-10;1.1641159e-10;1.1204498e-10;1.0921787e-10;1.0801743e-10;1.0863461e-10;1.1142065e-10;1.1699143e-10;1.2643285e-10;1.4173897e-10;
1.6684736e-10;2.1044694e-10;2.9522493e-10;4.9888532e-10;1.2641854e-09;1.2908012e-08;124.25558;5.9286021e-10;5.3239751e-10;4.7831822e-10;
4.2995413e-10;3.8671222e-10;3.4806807e-10;3.1355957e-10;2.8278041e-10;2.5537364e-10;2.3102478e-10;2.0945537e-10;1.9041707e-10;1.7368687e-10;
1.5906354e-10;1.4636557e-10;1.3543042e-10;1.2611488e-10;1.1829664e-10;1.1187673e-10;1.0678328e-10;1.0297693e-10;1.0045906e-10;9.9284719e-11;
9.9583564e-11;1.0159563e-10;1.0573466e-10;1.1270664e-10;1.2374675e-10;1.4113363e-10;1.6943363e-10;2.1898609e-10;3.1794015e-10;5.6999139e-10;
1.6670568e-09;3.4909231e-08;5.8583027e-10;5.2616683e-10;4.7280158e-10;4.2507492e-10;3.8240119e-10;3.4426201e-10;3.1019989e-10;2.7981206e-10;
2.5274369e-10;2.286817e-10;2.0734819e-10;1.8849505e-10;1.7189912e-10;1.5735878e-10;1.4469177e-10;1.3373407e-10;1.2433986e-10;1.1638234e-10;
1.0975527e-10;1.0437536e-10;1.0018569e-10;9.7160939e-11;9.5315207e-11;9.471457e-11;9.5497658e-11;9.7910603e-11;1.0236914e-10;1.0957457e-10;
1.2074473e-10;1.3811383e-10;1.6613605e-10;2.1483618e-10;3.1127603e-10;5.5372895e-10;1.5776086e-09;2.8263692e-08;5.8220895e-10;5.2295723e-10;
4.6995985e-10;4.2256154e-10;3.8018055e-10;3.4230155e-10;3.0846964e-10;2.7828376e-10;2.5139046e-10;2.274774e-10;2.0626718e-10;1.8751194e-10;
1.7098865e-10;1.5649573e-10;1.4385076e-10;1.3288932e-10;1.234647e-10;1.1544842e-10;1.0873149e-10;1.0322613e-10;9.8868587e-11;9.5623114e-11;
9.3488078e-11;9.2505573e-11;9.2776918e-11;9.4488618e-11;9.7957281e-11;1.0371112e-10;1.1264625e-10;1.263489e-10;1.4782391e-10;1.8335521e-10;
2.4812863e-10;3.8801221e-10;8.0698559e-10;3.669318e-09;2.6470811e-06;5.8086025e-10;5.2176186e-10;4.6890142e-10;4.2162546e-10;3.7935347e-10;
3.4157144e-10;3.0782527e-10;2.7771468e-10;2.508867e-10;2.270293e-10;2.058653e-10;1.8714694e-10;1.7065127e-10;1.5617678e-10;1.4354103e-10;
1.3257946e-10;1.2314513e-10;1.1510905e-10;1.0836131e-10;1.028127e-10;9.8397207e-11;9.507569e-11;9.2841394e-11;9.1728659e-11;9.18269e-11;
9.3303816e-11;9.6445303e-11;1.0172708e-10;1.0995025e-10;1.2251625e-10;1.4203504e-10;1.7383456e-10;2.3034118e-10;3.4703238e-10;6.6615991e-10;
2.3445275e-09;1.6276361e-07;5.8004795e-10;5.2104193e-10;4.6826398e-10;4.2106169e-10;3.7885536e-10;3.4113171e-10;3.0743721e-10;2.7737199e-10;
2.5058339e-10;2.2675954e-10;2.0562345e-10;1.869274e-10;1.7044853e-10;1.5598534e-10;1.4335537e-10;1.3239405e-10;1.2295429e-10;1.1490681e-10;
1.0814118e-10;1.0256739e-10;9.8118132e-11;9.4752331e-11;9.2460331e-11;9.1272073e-11;9.1270262e-11;9.261205e-11;9.5566215e-11;1.0057948e-10;
1.0840106e-10;1.2033276e-10;1.3877555e-10;1.6856344e-10;2.2074635e-10;3.2589767e-10;5.9995381e-10;1.8693516e-09;5.6134848e-08;5.7952099e-10;
5.2057492e-10;4.6785048e-10;4.2069595e-10;3.7853226e-10;3.4084646e-10;3.071855e-10;2.7714972e-10;2.5038666e-10;2.265846e-10;2.0546664e-10;
1.8678512e-10;1.7031719e-10;1.5586139e-10;1.4323528e-10;1.3227426e-10;1.2283113e-10;1.1477647e-10;1.0799951e-10;1.0240971e-10;9.793899e-11;
9.4545059e-11;9.2216436e-11;9.098032e-11;9.0915234e-11;9.2171763e-11;9.5008133e-11;9.9853216e-11;1.074245e-10;1.1896344e-10;1.3674561e-10;
1.653131e-10;2.1491871e-10;3.1338482e-10;5.6269944e-10;1.6362817e-09;3.2572405e-08;5.7916988e-10;5.2026367e-10;4.6757498e-10;4.2045226e-10;
3.7831693e-10;3.4065639e-10;3.0701774e-10;2.7700159e-10;2.5025557e-10;2.2646805e-10;2.0536217e-10;1.8669034e-10;1.7022975e-10;1.557789e-10;
1.4315542e-10;1.3219464e-10;1.2274935e-10;1.1468998e-10;1.0790557e-10;1.0230526e-10;9.7820439e-11;9.4408016e-11;9.2055329e-11;9.0787808e-11;
9.068124e-11;9.1881988e-11;9.4641434e-11;9.9376972e-11;1.0678575e-10;1.1807073e-10;1.3542811e-10;1.6321677e-10;2.1119584e-10;3.0551756e-10;
5.3999272e-10;1.5052146e-09;2.3773991e-08;5.7893279e-10;5.2005356e-10;4.6738891e-10;4.2028769e-10;3.7817155e-10;3.4052805e-10;3.0690447e-10;
2.7690156e-10;2.5016703e-10;2.2638935e-10;2.0529164e-10;1.8662638e-10;1.7017072e-10;1.5572325e-10;1.4310156e-10;1.3214098e-10;1.2269426e-10;
1.1463174e-10;1.0784236e-10;1.0223501e-10;9.7740753e-11;9.4315958e-11;9.1947179e-11;9.0658668e-11;9.0524394e-11;9.1687935e-11;9.439613e-11;
9.905881e-11;1.0635974e-10;1.1747664e-10;1.3455391e-10;1.6183152e-10;2.0875103e-10;3.0040423e-10;5.2552529e-10;1.4258036e-09;1.9571685e-08;
5.7877148e-10;5.1991056e-10;4.6726228e-10;4.2017573e-10;3.7807263e-10;3.404407e-10;3.0682742e-10;2.7683353e-10;2.5010682e-10;2.2633581e-10;
2.0524368e-10;1.8658286e-10;1.7013059e-10;1.5568542e-10;1.4306495e-10;1.3210451e-10;1.2265682e-10;1.145922e-10;1.0779946e-10;1.0218736e-10;
9.7686706e-11;9.4253542e-11;9.187389e-11;9.0571189e-11;9.0418222e-11;9.1556644e-11;9.423029e-11;9.8843912e-11;1.0607232e-10;1.1707642e-10;
1.3396612e-10;1.6090269e-10;2.0711857e-10;2.9701322e-10;5.1605564e-10;1.3754909e-09;1.7273965e-08;5.7866123e-10;5.1981286e-10;4.671758e-10;
       };
      };
      float_Data @[5] {
       name="I_chan";
       desc="net current from channels";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;9.9999997e-10;
       };
      };
      float_Data @[6] {
       name="I_leak";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;-2.6314307e-16;-4.981937e-16;-7.08125e-16;-8.9559557e-16;-1.0629828e-15;-1.2124127e-15;-1.3457865e-15;-1.464804e-15;-1.5709858e-15;
-1.6656911e-15;-1.7501358e-15;-1.8254066e-15;-1.892476e-15;-1.9522132e-15;-2.0053954e-15;-2.0527176e-15;-2.0948018e-15;-2.1322036e-15;-2.16542e-15;
-2.1948955e-15;-2.2210275e-15;-1.0676381e-10;-2.0212866e-10;-2.8730773e-10;-3.6339703e-10;-4.3141543e-10;-4.9237331e-10;-5.4739624e-10;-5.9794503e-10;
-6.4623329e-10;-6.9623296e-10;-7.5712758e-10;-8.6215241e-10;-1.3341576e-09;0;-9.7463551e-11;-1.8458739e-10;-2.624686e-10;-3.3209577e-10;
-3.9437273e-10;-4.501528e-10;-5.0029042e-10;-5.4571658e-10;-5.8755162e-10;-6.2729355e-10;-6.6722161e-10;-7.1152328e-10;-7.7050627e-10;-8.8537994e-10;
-1.5627902e-09;0;-8.9029173e-11;-1.6867749e-10;-2.3993912e-10;-3.0370756e-10;-3.6079223e-10;-4.1193857e-10;-4.5785295e-10;-4.992336e-10;
-5.3680804e-10;-5.7138044e-10;-6.0390165e-10;-6.3559952e-10;-6.6827543e-10;-7.0511064e-10;-7.5339335e-10;-8.3787077e-10;-1.1440738e-09;0;
-8.1671205e-11;-1.5479806e-10;-2.2028519e-10;-2.7894426e-10;-3.3150699e-10;-3.7863873e-10;-4.2095344e-10;-4.5902931e-10;-4.934253e-10;-5.246979e-10;
-5.5341937e-10;-5.802015e-10;-6.0573357e-10;-6.3085553e-10;-6.5671385e-10;-6.8513284e-10;-7.1965028e-10;-7.6920142e-10;-8.6821456e-10;-1.3659491e-09;
0;-7.5475397e-11;-1.4311086e-10;-2.0373568e-10;-2.5809324e-10;-3.0685188e-10;-3.506154e-10;-3.8993361e-10;-4.2531256e-10;-4.5722415e-10;
-4.8611482e-10;-5.1241328e-10;-5.365382e-10;-5.5890653e-10;-5.7994531e-10;-6.0011124e-10;-6.1992461e-10;-6.4003464e-10;-6.6135153e-10;-6.8534517e-10;
-7.1483108e-10;-7.5655215e-10;-8.3340895e-10;-1.106956e-09;0;-7.0586793e-11;-1.3388944e-10;-1.9067788e-10;-2.4164193e-10;-2.8740071e-10;
-3.285118e-10;-3.6547962e-10;-3.9876327e-10;-4.287837e-10;-4.559299e-10;-4.8056398e-10;-5.0302562e-10;-5.2363586e-10;-5.4270122e-10;-5.6051863e-10;
-5.7738214e-10;-5.9359356e-10;-6.0947886e-10;-6.2541566e-10;-6.4188194e-10;-6.5954903e-10;-6.7947875e-10;-7.035989e-10;-7.3608453e-10;-7.886633e-10;
-9.1428182e-10;-1.9835287e-09;0;-6.7009766e-11;-1.2714206e-10;-1.8112344e-10;-2.2960459e-10;-2.7316907e-10;-3.1234146e-10;-3.4759479e-10;
-3.7935721e-10;-4.0801826e-10;-4.3393378e-10;-4.574304e-10;-4.7880916e-10;-4.9834831e-10;-5.1630616e-10;-5.3292371e-10;-5.484278e-10;-5.6303451e-10;
-5.7695432e-10;-5.9039873e-10;-6.0358996e-10;-6.1677535e-10;-6.3025085e-10;-6.4440081e-10;-6.5977251e-10;-6.7722811e-10;-6.9829487e-10;-7.2611622e-10;
-7.6873208e-10;-8.5602408e-10;-1.2510046e-09;0;-6.4702341e-11;-1.2278956e-10;-1.749602e-10;-2.2183978e-10;-2.6398908e-10;-3.0191161e-10;
-3.3606073e-10;-3.6684583e-10;-3.9463774e-10;-4.1977363e-10;-4.4256093e-10;-4.6328066e-10;-4.8219029e-10;-4.9952592e-10;-5.1550481e-10;-5.3032745e-10;
-5.4418003e-10;-5.5723715e-10;-5.6966543e-10;-5.8162752e-10;-5.9328781e-10;-6.0481992e-10;-6.1641792e-10;-6.2831335e-10;-6.4080358e-10;-6.5430172e-10;
-6.6943401e-10;-6.8724687e-10;-7.0971451e-10;-7.4123319e-10;-7.9449497e-10;-9.294614e-10;-2.307541e-09;0;-6.3294682e-11;-1.2013428e-10;
-1.7120028e-10;-2.1710285e-10;-2.5838887e-10;-2.9554914e-10;-3.2902525e-10;-3.5921535e-10;-3.8647943e-10;-4.1114401e-10;-4.3350579e-10;-4.53835e-10;
-4.7237808e-10;-4.8935994e-10;-5.0498616e-10;-5.1944493e-10;-5.3290916e-10;-5.4553873e-10;-5.5748284e-10;-5.6888316e-10;-5.7987715e-10;-5.9060234e-10;
-6.0120214e-10;-6.1183381e-10;-6.2268035e-10;-6.3396871e-10;-6.4600147e-10;-6.5921285e-10;-6.7428052e-10;-6.923695e-10;-7.1574879e-10;-7.4969259e-10;
-8.1054574e-10;-9.8852337e-10;0;-6.2544157e-11;-1.1871855e-10;-1.6919559e-10;-2.1457724e-10;-2.55403e-10;-2.9215697e-10;-3.2527439e-10;
-3.5514755e-10;-3.8213085e-10;-4.0654527e-10;-4.2868209e-10;-4.4880613e-10;-4.6715837e-10;-4.8395821e-10;-4.9940574e-10;-5.1368337e-10;-5.2695809e-10;
-5.3938326e-10;-5.5110094e-10;-5.622442e-10;-5.729402e-10;-5.8331323e-10;-5.9348926e-10;-6.0360111e-10;-6.1379657e-10;-6.2424965e-10;-6.3517874e-10;
-6.4687711e-10;-6.5976802e-10;-6.7451328e-10;-6.922502e-10;-7.1518647e-10;-7.4841877e-10;-8.0753576e-10;-9.7596375e-10;0;-6.2157543e-11;
-1.1798927e-10;-1.6816293e-10;-2.1327626e-10;-2.5386493e-10;-2.9040959e-10;-3.2334227e-10;-3.5305228e-10;-3.7989112e-10;-4.0417697e-10;-4.2619838e-10;
-4.4621745e-10;-4.6447246e-10;-4.8118021e-10;-4.9653792e-10;-5.1072541e-10;-5.239067e-10;-5.3623211e-10;-5.478405e-10;-5.5886107e-10;-5.694164e-10;
-5.7962529e-10;-5.8960625e-10;-5.994823e-10;-6.0938726e-10;-6.1947503e-10;-6.2993311e-10;-6.4100547e-10;-6.5303174e-10;-6.6652095e-10;-6.8230288e-10;
-7.0187817e-10;-7.2836875e-10;-7.6979356e-10;-8.5594859e-10;-1.2476907e-09;0;-6.2013547e-11;-1.1771766e-10;-1.6777831e-10;-2.127917e-10;
-2.5329208e-10;-2.8975877e-10;-3.2262268e-10;-3.5227193e-10;-3.7905698e-10;-4.0329501e-10;-4.2527348e-10;-4.4525358e-10;-4.6347259e-10;-4.8014626e-10;
-4.9547094e-10;-5.0962534e-10;-5.2277249e-10;-5.3506172e-10;-5.4663052e-10;-5.5760696e-10;-5.68112e-10;-5.7826244e-10;-5.8817434e-10;-5.9796745e-10;
-6.07771e-10;-6.1773231e-10;-6.2802896e-10;-6.388895e-10;-6.5062794e-10;-6.6370798e-10;-6.7887185e-10;-6.9743072e-10;-7.2202228e-10;-7.5907203e-10;
-8.301923e-10;-1.0804977e-09;0;-6.1926825e-11;-1.1755408e-10;-1.6754667e-10;-2.1249988e-10;-2.5294708e-10;-2.8936684e-10;-3.221893e-10;
-3.5180198e-10;-3.7855463e-10;-4.0276385e-10;-4.2471654e-10;-4.4467319e-10;-4.6287055e-10;-4.7952381e-10;-4.9482862e-10;-5.089632e-10;-5.2209004e-10;
-5.3435767e-10;-5.4590299e-10;-5.5685323e-10;-5.6732846e-10;-5.7744437e-10;-5.8731559e-10;-5.9705996e-10;-6.0680411e-10;-6.1669148e-10;-6.2689431e-10;
-6.3763234e-10;-6.4920541e-10;-6.620523e-10;-6.7686817e-10;-6.9486428e-10;-7.1843154e-10;-7.5322487e-10;-8.1727686e-10;-1.0168517e-09;0;
-6.1870571e-11;-1.1744797e-10;-1.6739642e-10;-2.1231057e-10;-2.5272326e-10;-2.8911257e-10;-3.2190817e-10;-3.5149711e-10;-3.7822878e-10;-4.0241932e-10;
-4.2435525e-10;-4.4429671e-10;-4.6248005e-10;-4.7912008e-10;-4.9441207e-10;-5.0853388e-10;-5.2164756e-10;-5.3390126e-10;-5.4543142e-10;-5.5636484e-10;
-5.6682098e-10;-5.7691474e-10;-5.8675992e-10;-5.9647315e-10;-6.0617938e-10;-6.1601979e-10;-6.2616301e-10;-6.3682348e-10;-6.4829231e-10;-6.6099304e-10;
-6.7559219e-10;-6.932413e-10;-7.1618633e-10;-7.4964379e-10;-8.0971846e-10;-9.8441044e-10;0;-6.183308e-11;-1.1737725e-10;-1.6729629e-10;
-2.1218442e-10;-2.5257413e-10;-2.8894315e-10;-3.2172084e-10;-3.5129397e-10;-3.7801165e-10;-4.0218973e-10;-4.2411452e-10;-4.4404586e-10;-4.6221985e-10;
-4.7885107e-10;-4.9413457e-10;-5.0824789e-10;-5.2135279e-10;-5.3359728e-10;-5.4511745e-10;-5.5603971e-10;-5.6648314e-10;-5.765623e-10;-5.8639027e-10;
-5.9608291e-10;-6.0576422e-10;-6.1557365e-10;-6.2567773e-10;-6.3628736e-10;-6.4768796e-10;-6.6029338e-10;-6.7475192e-10;-6.921772e-10;-7.1472478e-10;
-7.4734235e-10;-8.0499279e-10;-9.6569186e-10;0;-6.1807767e-11;-1.1732951e-10;-1.6722868e-10;-2.1209924e-10;-2.5247343e-10;-2.8882874e-10;
-3.2159433e-10;-3.5115677e-10;-3.7786502e-10;-4.0203468e-10;-4.2395196e-10;-4.4387646e-10;-4.6204415e-10;-4.7866944e-10;-4.9394716e-10;-5.0805476e-10;
-5.2115379e-10;-5.3339205e-10;-5.4490545e-10;-5.5582022e-10;-5.6625521e-10;-5.7632449e-10;-5.8614091e-10;-5.9581978e-10;-6.0548433e-10;-6.1527305e-10;
-6.2535094e-10;-6.3592664e-10;-6.4728173e-10;-6.5982375e-10;-6.7418893e-10;-6.9146633e-10;-7.1375289e-10;-7.4582451e-10;-8.0193041e-10;-9.5415142e-10;
0;-6.1790545e-11;-1.1729702e-10;-1.6718267e-10;-2.1204129e-10;-2.524049e-10;-2.8875091e-10;-3.2150826e-10;-3.5106346e-10;-3.7776526e-10;
-4.0192921e-10;-4.2384135e-10;-4.4376122e-10;-4.6192464e-10;-4.7854587e-10;-4.9381971e-10;-5.0792337e-10;-5.210184e-10;-5.3325244e-10;-5.4476129e-10;
-5.5567095e-10;-5.6610017e-10;-5.7616284e-10;-5.8597144e-10;-5.9564093e-10;-6.0529415e-10;-6.1506888e-10;-6.2512906e-10;-6.3568178e-10;-6.4700623e-10;
-6.5950545e-10;-6.738079e-10;-6.9098616e-10;-7.1309841e-10;-7.4480805e-10;-7.9990292e-10;-9.4675257e-10;0;-6.1778777e-11;-1.1727481e-10;
       };
      };
      float_Data @[7] {
       name="I_spike";
       desc="net current from spiking mech";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 2.4647733e-15;2.4647841e-15;2.4647939e-15;2.4648023e-15;2.4648102e-15;2.464817e-15;2.4648231e-15;2.4648286e-15;2.4648335e-15;2.4648379e-15;
2.4648417e-15;2.4648451e-15;2.4648483e-15;2.4648511e-15;2.4648536e-15;2.4648557e-15;2.4648576e-15;2.4648593e-15;2.464861e-15;2.4648623e-15;
2.4648635e-15;2.4648646e-15;1.4606939e-14;7.1586813e-14;2.9606e-13;1.0522825e-12;3.2693852e-12;9.0301247e-12;2.2592431e-11;5.2462309e-11;
1.1731929e-10;2.6994745e-10;7.4481649e-10;4.2878967e-09;1.1187451e-05;2.4647733e-15;1.250955e-14;5.3439824e-14;1.9569875e-13;6.2454881e-13;
1.7633637e-12;4.4677777e-12;1.0303853e-11;2.1968757e-11;4.411815e-11;8.5561662e-11;1.6645164e-10;3.4830069e-10;9.3086644e-10;6.314961e-09;
0.00050539407;2.4647733e-15;1.0869051e-14;4.099259e-14;1.3443561e-13;3.8912189e-13;1.0075771e-12;2.3631303e-12;5.0795713e-12;1.0123959e-11;
1.8937529e-11;3.3695081e-11;5.7937922e-11;9.8265146e-11;1.6940091e-10;3.1299546e-10;6.9987405e-10;2.8608016e-09;4.70825e-07;2.4647733e-15;
9.6146363e-15;3.2526905e-14;9.6884516e-14;2.5753894e-13;6.184499e-13;1.3566115e-12;2.7462468e-12;5.1801458e-12;9.1898529e-12;1.5476299e-11;
2.4978138e-11;3.9031507e-11;5.9734141e-11;9.0794941e-11;1.3971087e-10;2.2435405e-10;3.9882223e-10;9.1084063e-10;4.7437689e-09;1.9004056e-05;
2.4647733e-15;8.6713389e-15;2.6769971e-14;7.353007e-14;1.8193582e-13;4.1005768e-13;8.5038535e-13;1.6376101e-12;2.9531941e-12;5.0266171e-12;
8.1356666e-12;1.2610949e-11;1.8852539e-11;2.7370155e-11;3.8865237e-11;5.4390978e-11;7.5672975e-11;1.0580403e-10;1.5093808e-10;2.2514929e-10;
3.6804154e-10;7.3770712e-10;2.6557812e-09;2.5362459e-07;2.4647733e-15;7.9928418e-15;2.2956255e-14;5.9149286e-14;1.3830552e-13;2.9651913e-13;
5.8833515e-13;1.0894484e-12;1.8972378e-12;3.1290823e-12;4.9193505e-12;7.4167764e-12;1.0784444e-11;1.5204761e-11;2.089197e-11;2.811551e-11;
3.7239874e-11;4.8792213e-11;6.3581709e-11;8.2925229e-11;1.0911224e-10;1.4647117e-10;2.0417756e-10;3.0520791e-10;5.2448645e-10;1.2598307e-09;
1.0222786e-08;0.56109416;2.4647733e-15;7.5302576e-15;2.0514545e-14;5.0441978e-14;1.1316454e-13;2.3390564e-13;4.4934504e-13;8.0863376e-13;
1.3729542e-12;2.2136631e-12;3.4095285e-12;5.0439262e-12;7.202996e-12;9.9756722e-12;1.3456293e-11;1.7750378e-11;2.2984217e-11;2.9319498e-11;
3.6975284e-11;4.626213e-11;5.7637738e-11;7.180357e-11;8.9884489e-11;1.1379039e-10;1.4701779e-10;1.9666072e-10;2.7938551e-10;4.4420292e-10;
9.0374336e-10;3.8715586e-09;2.7980159e-06;2.4647733e-15;7.2461636e-15;1.9079078e-14;4.5517785e-14;9.9427594e-14;2.0072136e-13;3.7764702e-13;
6.6721493e-13;1.11454e-12;1.77117e-12;2.692774e-12;3.9367684e-12;5.560506e-12;7.6205526e-12;1.0173397e-11;1.327777e-11;1.6998675e-11;
2.1413283e-11;2.6619141e-11;3.2745601e-11;3.9970308e-11;4.85442e-11;5.8831447e-11;7.1377064e-11;8.7028357e-11;1.0716865e-10;1.3420565e-10;
1.7270377e-10;2.3239982e-10;3.3795744e-10;5.7148103e-10;1.3884282e-09;1.3165668e-08;124.25558;2.4647733e-15;7.0781406e-15;1.8253152e-14;
4.2752931e-14;9.1879758e-14;1.8283439e-13;3.3965113e-13;5.9339138e-13;9.8144127e-13;1.5459961e-12;2.3320425e-12;3.3852944e-12;4.7505546e-12;
6.4708837e-12;8.587811e-12;1.1142659e-11;1.4178976e-11;1.7746069e-11;2.1903713e-11;2.6728359e-11;3.2321444e-11;3.8821103e-11;4.6419365e-11;
5.538894e-11;6.6126854e-11;7.9229609e-11;9.5630323e-11;1.1686689e-10;1.4565278e-10;1.8723285e-10;2.5311309e-10;3.737142e-10;6.5801065e-10;
1.814274e-09;3.5232841e-08;2.4647733e-15;6.9901529e-15;1.7827502e-14;4.1348093e-14;8.8092497e-14;1.7395846e-13;3.2098114e-13;5.5743143e-13;
9.171084e-13;1.4379124e-12;2.1599807e-12;3.1237877e-12;4.3686179e-12;5.9317364e-12;7.8484406e-12;1.0153043e-11;1.2880757e-11;1.6070411e-11;
1.9768026e-11;2.4031365e-11;2.8935845e-11;3.458249e-11;4.1109192e-11;4.8707437e-11;5.7648428e-11;6.8325817e-11;8.1329256e-11;9.7578515e-11;
1.1858499e-10;1.470067e-10;1.8796059e-10;2.5261032e-10;3.7022793e-10;6.4418809e-10;1.7255025e-09;2.8578398e-08;2.4647733e-15;6.945256e-15;
1.7612129e-14;4.0642538e-14;8.6202923e-14;1.6955578e-13;3.1176803e-13;5.3976712e-13;8.8563477e-13;1.385226e-12;2.0763829e-12;2.9971171e-12;
4.1841435e-12;5.6720592e-12;7.4933384e-12;9.679175e-12;1.2261135e-11;1.527355e-11;1.8756621e-11;2.2760332e-11;2.7349428e-11;3.2609981e-11;
3.8658483e-11;4.5655091e-11;5.3823803e-11;6.3484724e-11;7.5108107e-11;8.940975e-11;1.0752992e-10;1.3139489e-10;1.6451922e-10;2.140178e-10;
2.9657912e-10;4.6119644e-10;9.1987445e-10;3.8666919e-09;2.6476687e-06;2.4647733e-15;6.9286084e-15;1.7532579e-14;4.0382841e-14;8.5509562e-14;
1.6794464e-13;3.0840464e-13;5.3333222e-13;8.7419086e-13;1.3661016e-12;2.0460842e-12;2.9512718e-12;4.1174655e-12;5.5783208e-12;7.3653193e-12;
9.5085701e-12;1.2038382e-11;1.4987544e-11;1.8394283e-11;2.2305952e-11;2.6783721e-11;3.1908687e-11;3.7790288e-11;4.4578442e-11;5.2481915e-11;
6.1797421e-11;7.2957911e-11;8.6616776e-11;1.038038e-10;1.2623479e-10;1.5698402e-10;2.0212279e-10;2.7539035e-10;4.1490489e-10;7.6934892e-10;
2.5171498e-09;1.6318494e-07;2.4647733e-15;6.9186011e-15;1.7484844e-14;4.0227241e-14;8.5094678e-14;1.6698172e-13;3.0639656e-13;5.2949387e-13;
8.6737036e-13;1.3547117e-12;2.0280513e-12;2.9240026e-12;4.0778279e-12;5.5226271e-12;7.2893011e-12;9.4073221e-12;1.1906268e-11;1.4818032e-11;
1.8179696e-11;2.20371e-11;2.6449351e-11;3.1494692e-11;3.7278527e-11;4.3944948e-11;5.1694093e-11;6.0809503e-11;7.1703261e-11;8.4994192e-11;
1.0165147e-10;1.2327707e-10;1.5271137e-10;1.9548453e-10;2.6385935e-10;3.9080286e-10;6.9791151e-10;2.0296647e-09;5.6493111e-08;2.4647733e-15;
6.9121175e-15;1.7453947e-14;4.0126624e-14;8.4826616e-14;1.6636004e-13;3.0510094e-13;5.2701875e-13;8.6297441e-13;1.3473741e-12;2.0164389e-12;
2.906449e-12;4.0523214e-12;5.4868011e-12;7.240417e-12;9.3422388e-12;1.1821375e-11;1.4709156e-11;1.8041934e-11;2.1864595e-11;2.6234945e-11;
3.1229432e-11;3.6950921e-11;4.3539859e-11;5.1190989e-11;6.017966e-11;7.0905011e-11;8.3964551e-11;1.0029035e-10;1.2141523e-10;1.5003895e-10;
1.9137111e-10;2.5681757e-10;3.764494e-10;6.5747574e-10;1.78943e-09;3.2898608e-08;2.4647733e-15;6.9078002e-15;1.743339e-14;4.0059715e-14;
8.4648461e-14;1.6594705e-13;3.0424063e-13;5.253758e-13;8.6005747e-13;1.3425067e-12;2.0087378e-12;2.8948107e-12;4.0354139e-12;5.4630588e-12;
7.2080289e-12;9.2991266e-12;1.1765156e-11;1.4637071e-11;1.7950755e-11;2.1750461e-11;2.6093148e-11;3.105409e-11;3.6734497e-11;4.3272434e-11;
5.0859147e-11;5.9764658e-11;7.0379751e-11;8.3288189e-11;9.9398205e-11;1.2019848e-10;1.4829961e-10;1.887097e-10;2.5230312e-10;3.673902e-10;
6.3273392e-10;1.6538997e-09;2.4081734e-08;2.4647733e-15;6.9048864e-15;1.7419522e-14;4.0014599e-14;8.4528372e-14;1.6566875e-13;3.0366104e-13;
5.2426932e-13;8.5809338e-13;1.3392298e-12;2.0035542e-12;2.8869782e-12;4.0240376e-12;5.4470855e-12;7.1862416e-12;9.2701298e-12;1.172735e-11;
1.4588606e-11;1.7889464e-11;2.167376e-11;2.5997883e-11;3.0936323e-11;3.6589197e-11;4.3092981e-11;5.0636592e-11;5.9486527e-11;7.0028039e-11;
8.2835801e-11;9.8802369e-11;1.1938742e-10;1.471433e-10;1.8694729e-10;2.4933144e-10;3.6148706e-10;6.1692862e-10;1.5716035e-09;1.9868061e-08;
2.4647733e-15;6.9029047e-15;1.7410093e-14;3.9983933e-14;8.4446766e-14;1.6547968e-13;3.0326737e-13;5.2351781e-13;8.5675965e-13;1.3370051e-12;
2.0000353e-12;2.8816617e-12;4.0163164e-12;5.4362452e-12;7.1714574e-12;9.2504563e-12;1.1701702e-11;1.4555732e-11;1.7847895e-11;2.1621744e-11;
2.5933292e-11;3.0856498e-11;3.6490731e-11;4.2971408e-11;5.0485876e-11;5.9298268e-11;6.9790111e-11;8.2530004e-11;9.839999e-11;1.1884041e-10;
1.4636485e-10;1.8576388e-10;2.4734401e-10;3.5756548e-10;6.0656491e-10;1.5193841e-09;1.756306e-08;2.4647733e-15;6.9015508e-15;1.7403652e-14;
       };
      };
      float_Data @[8] {
       name="adapt";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;2.4365099e-19;7.0324941e-19;1.3540371e-18;2.1738892e-18;3.1430361e-18;4.2438137e-18;5.4604413e-18;6.7788216e-18;8.1863633e-18;
9.6718201e-18;1.122515e-17;1.283739e-17;1.4500534e-17;1.6207439e-17;1.7951737e-17;1.9727736e-17;2.1530368e-17;2.3355115e-17;2.5197945e-17;
2.705527e-17;2.8923892e-17;9.8884103e-14;2.8535358e-13;5.4939766e-13;8.8206108e-13;1.2753944e-12;1.7224387e-12;2.2173257e-12;2.7555805e-12;
3.3348086e-12;3.9563105e-12;4.6298798e-12;5.3960174e-12;8.7093874e-11;8.6489059e-11;8.5978683e-11;8.5552523e-11;8.5201436e-11;8.4917254e-11;
8.4692711e-11;8.4521376e-11;8.4397656e-11;8.4316852e-11;8.4275351e-11;8.4270931e-11;8.4303509e-11;8.4376887e-11;8.4504369e-11;8.4737328e-11;
1.660959e-10;1.6494246e-10;1.6387947e-10;1.628976e-10;1.6198852e-10;1.6114482e-10;1.6035982e-10;1.5962763e-10;1.5894305e-10;1.5830152e-10;
1.5769926e-10;1.5713318e-10;1.5660115e-10;1.5610216e-10;1.5563689e-10;1.5520896e-10;1.5482871e-10;1.5452931e-10;2.3501551e-10;2.3338345e-10;
2.3183837e-10;2.3037171e-10;2.2897588e-10;2.2764404e-10;2.2637013e-10;2.2514872e-10;2.2397495e-10;2.228446e-10;2.2175393e-10;2.2069982e-10;
2.1967961e-10;2.1869127e-10;2.1773344e-10;2.1680553e-10;2.1590801e-10;2.1504303e-10;2.1421602e-10;2.1344063e-10;2.1276231e-10;2.9304956e-10;
2.9101449e-10;2.8906344e-10;2.8718858e-10;2.8538286e-10;2.8364e-10;2.819544e-10;2.8032102e-10;2.787354e-10;2.7719355e-10;2.7569194e-10;
2.7422753e-10;2.7279762e-10;2.7139999e-10;2.7003277e-10;2.6869454e-10;2.6738425e-10;2.6610142e-10;2.6484612e-10;2.6361927e-10;2.6242317e-10;
2.6126268e-10;2.6014885e-10;2.5911392e-10;3.3883948e-10;3.3648645e-10;3.342151e-10;3.3201814e-10;3.2988901e-10;3.2782185e-10;3.2581141e-10;
3.23853e-10;3.2194244e-10;3.2007597e-10;3.1825023e-10;3.164623e-10;3.1470962e-10;3.1298991e-10;3.1130121e-10;3.096419e-10;3.0801062e-10;
3.0640626e-10;3.0482805e-10;3.0327554e-10;3.0174854e-10;3.0024741e-10;2.9877303e-10;2.9732738e-10;2.9591407e-10;2.9454067e-10;2.932255e-10;
2.9203578e-10;3.7234435e-10;3.6975861e-10;3.6725289e-10;3.6482026e-10;3.6245448e-10;3.6015005e-10;3.5790193e-10;3.5570571e-10;3.5355738e-10;
3.5145337e-10;3.4939052e-10;3.47366e-10;3.4537728e-10;3.4342215e-10;3.4149872e-10;3.3960526e-10;3.3774034e-10;3.3590272e-10;3.3409139e-10;
3.3230554e-10;3.3054451e-10;3.2880795e-10;3.2709566e-10;3.2540773e-10;3.2374461e-10;3.2210729e-10;3.2049749e-10;3.1891839e-10;3.1737601e-10;
3.1588379e-10;3.1448277e-10;3.939572e-10;3.9122139e-10;3.8856449e-10;3.859798e-10;3.834614e-10;3.8100387e-10;3.7860245e-10;3.7625281e-10;
3.7395112e-10;3.716939e-10;3.6947809e-10;3.6730097e-10;3.6516004e-10;3.6305317e-10;3.6097844e-10;3.5893416e-10;3.5691888e-10;3.5493133e-10;
3.529704e-10;3.5103517e-10;3.491249e-10;3.4723896e-10;3.4537692e-10;3.435385e-10;3.4172357e-10;3.3993225e-10;3.3816494e-10;3.3642242e-10;
3.3470599e-10;3.33018e-10;3.3136252e-10;3.297477e-10;3.2819344e-10;3.2677491e-10;4.0714226e-10;4.0431489e-10;4.0156575e-10;3.9888834e-10;
3.9627679e-10;3.9372591e-10;3.9123094e-10;3.8878772e-10;3.8639245e-10;3.8404177e-10;3.8173267e-10;3.7946243e-10;3.7722869e-10;3.7502926e-10;
3.7286227e-10;3.7072606e-10;3.6861916e-10;3.6654027e-10;3.6448827e-10;3.6246225e-10;3.6046133e-10;3.5848488e-10;3.565323e-10;3.5460326e-10;
3.526974e-10;3.5081463e-10;3.4895498e-10;3.4711867e-10;3.4530628e-10;3.4351871e-10;3.4175748e-10;3.4002526e-10;3.383267e-10;3.3667136e-10;
3.3508388e-10;4.141722e-10;4.11296e-10;4.0849771e-10;4.0577083e-10;4.0310966e-10;4.0050896e-10;3.9796413e-10;3.9547099e-10;3.9302586e-10;
3.9062534e-10;3.882665e-10;3.8594664e-10;3.8366338e-10;3.8141462e-10;3.7919845e-10;3.7701323e-10;3.7485751e-10;3.7272996e-10;3.7062947e-10;
3.685551e-10;3.6650596e-10;3.6448139e-10;3.6248077e-10;3.6050363e-10;3.5854966e-10;3.5661862e-10;3.5471043e-10;3.5282519e-10;3.5096312e-10;
3.4912484e-10;3.4731126e-10;3.4552394e-10;3.4376543e-10;3.420404e-10;3.4035808e-10;3.387422e-10;4.1779349e-10;4.1489215e-10;4.1206852e-10;
4.0931616e-10;4.066294e-10;4.0400308e-10;4.0143255e-10;3.9891374e-10;3.9644288e-10;3.9401671e-10;3.9163223e-10;3.892868e-10;3.8697806e-10;
3.8470385e-10;3.8246237e-10;3.8025191e-10;3.7807105e-10;3.7591844e-10;3.73793e-10;3.7169373e-10;3.6961978e-10;3.6757045e-10;3.6554509e-10;
3.6354328e-10;3.6156461e-10;3.5960881e-10;3.5767578e-10;3.5576553e-10;3.538782e-10;3.5201422e-10;3.5017433e-10;3.4835973e-10;3.4657233e-10;
3.4481545e-10;3.4309533e-10;3.414255e-10;3.3984701e-10;4.1914225e-10;4.1623152e-10;4.1339845e-10;4.1063664e-10;4.0794035e-10;4.0530446e-10;
4.0272435e-10;4.0019596e-10;3.9771555e-10;3.9527981e-10;3.9288578e-10;3.9053083e-10;3.882126e-10;3.8592896e-10;3.8367803e-10;3.8145817e-10;
3.7926792e-10;3.7710599e-10;3.7497125e-10;3.7286271e-10;3.7077952e-10;3.6872097e-10;3.6668643e-10;3.6467543e-10;3.6268757e-10;3.6072259e-10;
3.5878031e-10;3.5686076e-10;3.5496406e-10;3.5309061e-10;3.5124101e-10;3.4941638e-10;3.4761846e-10;3.4585024e-10;3.4411704e-10;3.4243017e-10;
3.4082087e-10;4.1995452e-10;4.1703818e-10;4.1419942e-10;4.1143189e-10;4.0872986e-10;4.0608822e-10;4.0350237e-10;4.009682e-10;3.9848203e-10;
3.9604053e-10;3.9364076e-10;3.9128006e-10;3.8895609e-10;3.8666675e-10;3.8441014e-10;3.8218465e-10;3.7998876e-10;3.7782119e-10;3.7568088e-10;
3.7356673e-10;3.7147799e-10;3.6941389e-10;3.6737383e-10;3.6535727e-10;3.6336389e-10;3.6139336e-10;3.5944556e-10;3.575204e-10;3.5561809e-10;
3.537389e-10;3.5188352e-10;3.5005288e-10;3.4824868e-10;3.4647368e-10;3.4473283e-10;3.4303629e-10;3.4141084e-10;4.2048146e-10;4.1756143e-10;
4.1471901e-10;4.1194775e-10;4.09242e-10;4.0659662e-10;4.0400705e-10;4.0146914e-10;3.9897921e-10;3.96534e-10;3.9413051e-10;3.9176609e-10;
3.894384e-10;3.8714537e-10;3.8488507e-10;3.8265588e-10;3.8045636e-10;3.7828515e-10;3.7614117e-10;3.7402345e-10;3.719311e-10;3.6986339e-10;
3.6781972e-10;3.6579961e-10;3.6380263e-10;3.6182851e-10;3.5987707e-10;3.5794834e-10;3.5604236e-10;3.5415948e-10;3.5230033e-10;3.5046582e-10;
3.4865758e-10;3.4687822e-10;3.4513251e-10;3.4342984e-10;3.4179468e-10;4.2083259e-10;4.1791012e-10;4.1506523e-10;4.1229151e-10;4.0958328e-10;
4.0693543e-10;4.0434334e-10;4.0180295e-10;3.9931053e-10;3.9686282e-10;3.9445683e-10;3.9208994e-10;3.8975981e-10;3.8746428e-10;3.8520157e-10;
3.8296993e-10;3.8076794e-10;3.7859432e-10;3.7644793e-10;3.7432776e-10;3.7223302e-10;3.7016293e-10;3.6811687e-10;3.6609435e-10;3.6409498e-10;
3.6211847e-10;3.6016465e-10;3.582335e-10;3.5632508e-10;3.5443976e-10;3.5257808e-10;3.5074102e-10;3.4893008e-10;3.4714787e-10;3.4539888e-10;
3.4369227e-10;3.4205089e-10;4.2106968e-10;4.181456e-10;4.1529905e-10;4.1252365e-10;4.0981374e-10;4.0716419e-10;4.0457043e-10;4.0202836e-10;
3.9953427e-10;3.9708486e-10;3.9467721e-10;3.9230866e-10;3.8997683e-10;3.8767967e-10;3.8541526e-10;3.8318199e-10;3.8097836e-10;3.788031e-10;
3.7665507e-10;3.7453329e-10;3.7243689e-10;3.7036518e-10;3.6831752e-10;3.6629338e-10;3.642924e-10;3.6231429e-10;3.6035885e-10;3.5842604e-10;
3.5651601e-10;3.5462902e-10;3.5276565e-10;3.5092684e-10;3.491141e-10;3.4732994e-10;3.4557882e-10;3.4386954e-10;3.4222408e-10;4.2123099e-10;
4.1830578e-10;4.1545808e-10;4.1268158e-10;4.0997053e-10;4.0731984e-10;4.0472495e-10;4.021817e-10;3.9968648e-10;3.9723594e-10;3.9482714e-10;
3.9245746e-10;3.9012449e-10;3.8782619e-10;3.8556064e-10;3.8332623e-10;3.811215e-10;3.7894513e-10;3.7679598e-10;3.746731e-10;3.7257561e-10;
3.705028e-10;3.6845402e-10;3.664288e-10;3.6442671e-10;3.6244749e-10;3.6049094e-10;3.5855705e-10;3.5664591e-10;3.5475778e-10;3.5289327e-10;
3.5105327e-10;3.492393e-10;3.4745382e-10;3.4570122e-10;3.4399017e-10;3.4234199e-10;4.2134124e-10;4.1841527e-10;4.155668e-10;4.127895e-10;
       };
      };
      float_Data @[9] {
       name="d_adapt";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;3.5085742e-17;6.6182178e-17;9.3713416e-17;1.180587e-16;1.3955715e-16;1.58512e-16;1.7519438e-16;1.8984677e-16;2.0268596e-16;
2.1390578e-16;2.2367962e-16;2.3216241e-16;2.3949274e-16;2.4579456e-16;2.5117859e-16;2.5574397e-16;2.5957918e-16;2.6276344e-16;2.6536756e-16;
2.6745478e-16;2.6908175e-16;1.4235146e-11;2.6851604e-11;3.8022346e-11;4.7903539e-11;5.6639998e-11;6.4374381e-11;7.1263724e-11;7.750868e-11;
8.3408856e-11;8.9496251e-11;9.6994038e-11;1.1032378e-10;1.7249165e-10;-8.7093874e-11;-7.3493919e-11;-6.136703e-11;-5.0556712e-11;-4.0921998e-11;
-3.2334226e-11;-2.4672339e-11;-1.7815988e-11;-1.1635439e-11;-5.9766376e-12;-6.3620528e-13;4.691953e-12;1.0566261e-11;1.8357281e-11;3.3546287e-11;
1.236347e-10;-1.660959e-10;-1.530719e-10;-1.4138914e-10;-1.309057e-10;-1.2149418e-10;-1.1303918e-10;-1.0543468e-10;-9.8580574e-11;-9.2378563e-11;
-8.6727125e-11;-8.1515197e-11;-7.6612959e-11;-7.185455e-11;-6.6998768e-11;-6.1622131e-11;-5.4756508e-11;-4.31126e-11;-1.986132e-12;-2.3501551e-10;
-2.2249397e-10;-2.1119863e-10;-2.0100036e-10;-1.9178331e-10;-1.8344312e-10;-1.7588497e-10;-1.6902159e-10;-1.6277105e-10;-1.5705455e-10;-1.5179422e-10;
-1.4691057e-10;-1.4231941e-10;-1.3792679e-10;-1.3361938e-10;-1.2924369e-10;-1.2455696e-10;-1.1908965e-10;-1.1165583e-10;-9.7678692e-11;-3.0635761e-11;
-2.9304956e-10;-2.809511e-10;-2.6998201e-10;-2.6002381e-10;-2.5097041e-10;-2.4272642e-10;-2.3520569e-10;-2.2832988e-10;-2.2202706e-10;-2.1623033e-10;
-2.1087664e-10;-2.0590576e-10;-2.012592e-10;-1.9687912e-10;-1.9270673e-10;-1.886797e-10;-1.8472765e-10;-1.8076347e-10;-1.7666592e-10;-1.7223993e-10;
-1.6711235e-10;-1.6038905e-10;-1.4902765e-10;-1.1151981e-10;-3.3883948e-10;-3.2707487e-10;-3.1636316e-10;-3.0659442e-10;-2.9767008e-10;-2.8950176e-10;
-2.8200983e-10;-2.751224e-10;-2.68774e-10;-2.6290478e-10;-2.5745958e-10;-2.5238711e-10;-2.4763955e-10;-2.4317179e-10;-2.3894106e-10;-2.3490609e-10;
-2.3102632e-10;-2.2726045e-10;-2.2356421e-10;-2.1988678e-10;-2.1616428e-10;-2.1230752e-10;-2.0817588e-10;-2.0351418e-10;-1.9776948e-10;-1.8938558e-10;
-1.7132126e-10;-2.7565294e-11;-3.7234435e-10;-3.6082398e-10;-3.5030062e-10;-3.4067046e-10;-3.3184056e-10;-3.2372749e-10;-3.1625641e-10;-3.0935973e-10;
-3.0297642e-10;-2.9705094e-10;-2.9153269e-10;-2.8637526e-10;-2.8153604e-10;-2.7697572e-10;-2.726579e-10;-2.6854877e-10;-2.6461663e-10;-2.6083147e-10;
-2.5716415e-10;-2.5358571e-10;-2.5006586e-10;-2.4657124e-10;-2.4306221e-10;-2.394876e-10;-2.3577493e-10;-2.318102e-10;-2.2739151e-10;-2.2210289e-10;
-2.1487839e-10;-2.0174724e-10;-1.4768216e-10;-3.939572e-10;-3.825944e-10;-3.7219253e-10;-3.6265177e-10;-3.5388276e-10;-3.4580533e-10;-3.3834757e-10;
-3.3144471e-10;-3.2503833e-10;-3.1907554e-10;-3.1350827e-10;-3.0829284e-10;-3.0338929e-10;-2.9876113e-10;-2.94375e-10;-2.902002e-10;-2.8620856e-10;
-2.8237399e-10;-2.7867211e-10;-2.7507979e-10;-2.7157457e-10;-2.6813393e-10;-2.6473426e-10;-2.6134944e-10;-2.5794844e-10;-2.5449179e-10;-2.5092473e-10;
-2.4716454e-10;-2.4307309e-10;-2.3838939e-10;-2.3253141e-10;-2.2381504e-10;-2.0426524e-10;-1.9102789e-11;-4.0714226e-10;-3.9587561e-10;-3.8554784e-10;
-3.7606163e-10;-3.6732975e-10;-3.5927405e-10;-3.5182438e-10;-3.4491768e-10;-3.3849706e-10;-3.3251119e-10;-3.2691347e-10;-3.2166167e-10;-3.1671735e-10;
-3.120455e-10;-3.0761427e-10;-3.0339456e-10;-2.9935984e-10;-2.9548572e-10;-2.9174979e-10;-2.8813119e-10;-2.8461025e-10;-2.8116792e-10;-2.7778535e-10;
-2.7444297e-10;-2.7111954e-10;-2.6779057e-10;-2.6442581e-10;-2.6098515e-10;-2.5741123e-10;-2.5361463e-10;-2.4944155e-10;-2.4459207e-10;-2.3836769e-10;
-2.285986e-10;-2.0328077e-10;-4.141722e-10;-4.0295678e-10;-3.9266856e-10;-3.8321143e-10;-3.7449935e-10;-3.6645523e-10;-3.5900988e-10;-3.5210107e-10;
-3.4567285e-10;-3.3967457e-10;-3.3406047e-10;-3.2878902e-10;-3.2382255e-10;-3.1912684e-10;-3.1467068e-10;-3.104258e-10;-3.0636638e-10;-3.0246888e-10;
-2.9871172e-10;-2.9507496e-10;-2.9154007e-10;-2.8808936e-10;-2.8470565e-10;-2.8137173e-10;-2.7806951e-10;-2.7477909e-10;-2.7147715e-10;-2.6813468e-10;
-2.6471286e-10;-2.6115579e-10;-2.5737618e-10;-2.5322391e-10;-2.4840724e-10;-2.4225122e-10;-2.3268665e-10;-2.0861371e-10;-4.1779349e-10;-4.0660447e-10;
-3.963366e-10;-3.8689446e-10;-3.7819256e-10;-3.7015441e-10;-3.6271128e-10;-3.5580142e-10;-3.4936926e-10;-3.4336456e-10;-3.3774197e-10;-3.3246034e-10;
-3.2748237e-10;-3.227742e-10;-3.1830502e-10;-3.1404687e-10;-3.0997432e-10;-3.0606423e-10;-3.0229538e-10;-2.9864833e-10;-2.9510497e-10;-2.9164826e-10;
-2.8826172e-10;-2.8492911e-10;-2.8163363e-10;-2.7835717e-10;-2.7507913e-10;-2.7177444e-10;-2.6841079e-10;-2.6494332e-10;-2.6130489e-10;-2.57386e-10;
-2.5298857e-10;-2.4769961e-10;-2.4045618e-10;-2.2729901e-10;-1.7348827e-10;-4.1914225e-10;-4.0796305e-10;-3.9770276e-10;-3.882662e-10;-3.795681e-10;
-3.7153217e-10;-3.6408987e-10;-3.5717959e-10;-3.5074596e-10;-3.4473888e-10;-3.3911313e-10;-3.3382772e-10;-3.2884545e-10;-3.2413261e-10;-3.1965852e-10;
-3.1539538e-10;-3.1131789e-10;-3.0740299e-10;-3.036297e-10;-2.9997865e-10;-2.9643193e-10;-2.929727e-10;-2.8958477e-10;-2.8625219e-10;-2.8295857e-10;
-2.7968644e-10;-2.76416e-10;-2.7312358e-10;-2.6977881e-10;-2.663402e-10;-2.6274663e-10;-2.5890015e-10;-2.5462771e-10;-2.4958058e-10;-2.4290742e-10;
-2.3173787e-10;-1.9675452e-10;-4.1995452e-10;-4.0878126e-10;-3.9852555e-10;-3.8909231e-10;-3.8039652e-10;-3.7236192e-10;-3.6492012e-10;-3.5800962e-10;
-3.5157507e-10;-3.4556658e-10;-3.3993891e-10;-3.346512e-10;-3.2966635e-10;-3.2495068e-10;-3.2047365e-10;-3.1620748e-10;-3.1212699e-10;-3.0820921e-10;
-3.0443317e-10;-3.0077968e-10;-2.9723091e-10;-2.9377009e-10;-2.9038125e-10;-2.8704855e-10;-2.8375591e-10;-2.8048616e-10;-2.7722002e-10;-2.7393449e-10;
-2.7060043e-10;-2.671782e-10;-2.6360986e-10;-2.5980379e-10;-2.5560012e-10;-2.5068281e-10;-2.4430286e-10;-2.3406604e-10;-2.058306e-10;-4.2048146e-10;
-4.0931203e-10;-3.9905926e-10;-3.8962822e-10;-3.8093392e-10;-3.7290018e-10;-3.6545869e-10;-3.5854805e-10;-3.5211292e-10;-3.4610348e-10;-3.4047459e-10;
-3.3518538e-10;-3.3019884e-10;-3.2548136e-10;-3.2100239e-10;-3.1673428e-10;-3.1265182e-10;-3.0873215e-10;-3.0495434e-10;-3.0129926e-10;-2.977491e-10;
-2.9428726e-10;-2.9089775e-10;-2.8756494e-10;-2.8427288e-10;-2.8100458e-10;-2.7774111e-10;-2.7445993e-10;-2.7113256e-10;-2.6772051e-10;-2.6416791e-10;
-2.6038685e-10;-2.562254e-10;-2.5138672e-10;-2.4517999e-10;-2.354674e-10;-2.1053993e-10;-4.2083259e-10;-4.0966572e-10;-3.9941492e-10;-3.8998535e-10;
-3.8129203e-10;-3.7325887e-10;-3.658176e-10;-3.5890685e-10;-3.5247136e-10;-3.4646128e-10;-3.4083156e-10;-3.3554134e-10;-3.305537e-10;-3.2583497e-10;
-3.2135475e-10;-3.170853e-10;-3.1300157e-10;-3.0908062e-10;-3.0530162e-10;-3.0164546e-10;-2.9809438e-10;-2.9463182e-10;-2.9124189e-10;-2.8790897e-10;
-2.8461725e-10;-2.8134992e-10;-2.7808816e-10;-2.7480979e-10;-2.7148678e-10;-2.6808136e-10;-2.6453897e-10;-2.607741e-10;-2.5663979e-10;-2.5185121e-10;
-2.4575325e-10;-2.363599e-10;-2.1329197e-10;-4.2106968e-10;-4.0990455e-10;-3.9965509e-10;-3.9022649e-10;-3.8153383e-10;-3.7350109e-10;-3.6605996e-10;
-3.5914913e-10;-3.5271336e-10;-3.4670286e-10;-3.4107259e-10;-3.3578174e-10;-3.3079331e-10;-3.2607378e-10;-3.2159267e-10;-3.1732236e-10;-3.1323771e-10;
-3.0931591e-10;-3.0553612e-10;-3.0187922e-10;-2.9832753e-10;-2.9486449e-10;-2.9147423e-10;-2.8814126e-10;-2.8484975e-10;-2.8158303e-10;-2.7832242e-10;
-2.7504593e-10;-2.7172578e-10;-2.6832478e-10;-2.6478916e-10;-2.6103497e-10;-2.569186e-10;-2.5216287e-10;-2.4613553e-10;-2.3694546e-10;-2.1500389e-10;
-4.2123099e-10;-4.1006704e-10;-3.9981848e-10;-3.9039055e-10;-3.8169837e-10;-3.7366585e-10;-3.6622483e-10;-3.5931394e-10;-3.5287803e-10;-3.4686723e-10;
-3.4123657e-10;-3.3594527e-10;-3.3095632e-10;-3.2623623e-10;-3.2175454e-10;-3.1748362e-10;-3.1339839e-10;-3.09476e-10;-3.0569566e-10;-3.0203826e-10;
-2.9848615e-10;-2.9502276e-10;-2.916323e-10;-2.8829927e-10;-2.8500793e-10;-2.817416e-10;-2.7848177e-10;-2.7520652e-10;-2.7188832e-10;-2.6849029e-10;
-2.6495919e-10;-2.6121222e-10;-2.5710781e-10;-2.5237404e-10;-2.4639349e-10;-2.3733643e-10;-2.1610833e-10;-4.2134124e-10;-4.1017809e-10;-3.9993017e-10;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="BG05Data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[1].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="time";
     var_type=T_Real;
     real_val=539;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="step";
     var_type=T_Int;
     int_val=540;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="dt_integ";
     var_type=T_Real;
     real_val=0.001;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="current_clamp";
     var_type=T_Bool;
     bool_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="clamp current to a given value -- bypass e and i channel integration";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="cur_clamp_val";
     var_type=T_Real;
     real_val=1e-09;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nA current clamp value (1e-9 default)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="stim_on";
     var_type=T_Real;
     real_val=20;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms time when to turn on stimulus (current clamp only)";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="v_m";
     var_type=T_Real;
     real_val=-0.06502829227246923;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="g_e";
     var_type=T_Real;
     real_val=1.017045668506861;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="g_i";
     var_type=T_Real;
     real_val=0.9087024712634799;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="I_net";
     var_type=T_Real;
     real_val=4.671757876457609e-10;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="I_chan";
     var_type=T_Real;
     real_val=1e-09;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="I_leak";
     var_type=T_Real;
     real_val=-1.172748132160552e-10;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="I_spike";
     var_type=T_Real;
     real_val=1.740365186454146e-14;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="adapt";
     var_type=T_Real;
     real_val=4.127895100051325e-10;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="d_adapt";
     var_type=T_Real;
     real_val=-3.999301610279078e-10;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[16] {
     name="time_steps";
     var_type=T_Int;
     int_val=540;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[17] {
     name="g_e_mean";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[18] {
     name="g_e_var";
     var_type=T_Real;
     real_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="1 for high conductance";
     init_from=NULL;
    };
    ProgVar @[19] {
     name="g_e_dt";
     var_type=T_Real;
     real_val=36.65689149560117;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="time constant for integrating g_e";
     init_from=NULL;
    };
    ProgVar @[20] {
     name="g_e_dt_time";
     var_type=T_Real;
     real_val=0.02728;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 2.728 def";
     init_from=NULL;
    };
    ProgVar @[21] {
     name="g_i_mean";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="3 for high conductance";
     init_from=NULL;
    };
    ProgVar @[22] {
     name="g_i_var";
     var_type=T_Real;
     real_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[23] {
     name="g_i_dt";
     var_type=T_Real;
     real_val=95.32888465204958;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[24] {
     name="g_i_dt_time";
     var_type=T_Real;
     real_val=0.01049;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 10.49 def";
     init_from=NULL;
    };
    ProgVar @[25] {
     name="C_memb_cap";
     var_type=T_Real;
     real_val=2.81e-10;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="pF  281 def";
     init_from=NULL;
    };
    ProgVar @[26] {
     name="v_m_dt";
     var_type=T_Real;
     real_val=3558718861.209964;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="1/C";
     init_from=NULL;
    };
    ProgVar @[27] {
     name="g_bar_l";
     var_type=T_Real;
     real_val=3e-08;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[28] {
     name="g_bar_e";
     var_type=T_Real;
     real_val=2e-08;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[29] {
     name="g_bar_i";
     var_type=T_Real;
     real_val=1e-10;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[30] {
     name="e_rev_l";
     var_type=T_Real;
     real_val=-0.0706;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -70.6 def  E_L in orig";
     init_from=NULL;
    };
    ProgVar @[31] {
     name="e_rev_e";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV 0 def  E_e in orig";
     init_from=NULL;
    };
    ProgVar @[32] {
     name="e_rev_i";
     var_type=T_Real;
     real_val=-0.075;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -75  def  E_i in orig";
     init_from=NULL;
    };
    ProgVar @[33] {
     name="act_thr";
     var_type=T_Real;
     real_val=-0.0504;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -50.4 def -- V_t in orig";
     init_from=NULL;
    };
    ProgVar @[34] {
     name="spike_thr";
     var_type=T_Real;
     real_val=0.02;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[35] {
     name="spike_reset";
     var_type=T_Real;
     real_val=-0.0706;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="set to same as e_rev_l";
     init_from=NULL;
    };
    ProgVar @[36] {
     name="act_thr_slope";
     var_type=T_Real;
     real_val=0.002;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV 2 def -- delta T in orig";
     init_from=NULL;
    };
    ProgVar @[37] {
     name="adapt_dt_time";
     var_type=T_Real;
     real_val=0.144;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 144 def -- tau_w in orig";
     init_from=NULL;
    };
    ProgVar @[38] {
     name="adapt_dt";
     var_type=T_Real;
     real_val=6.944444444444445;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[39] {
     name="adapt_vm_gain";
     var_type=T_Real;
     real_val=4e-09;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 4 def -- a in orig";
     init_from=NULL;
    };
    ProgVar @[40] {
     name="adapt_spike_gain";
     var_type=T_Real;
     real_val=8.050000000000001e-11;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nA 0.0805 def -- b in orig";
     init_from=NULL;
    };
    ProgVar @[41] {
     name="i";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[1].vars[0]$$;
    };
    AssignExpr @[1] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[7]$$;
     expr {
      expr="e_rev_l";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[14]$$;
     expr {
      expr="0";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[8]$$;
     expr {
      expr="g_e_mean";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[9]$$;
     expr {
      expr="g_i_mean";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[19]$$;
     expr {
      expr="1.0 / g_e_dt_time";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[23]$$;
     expr {
      expr="1.0 / g_i_dt_time";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[26]$$;
     expr {
      expr="1.0 / C_memb_cap";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[38]$$;
     expr {
      expr="1.0 / adapt_dt_time";
     };
    };
    ForLoop @[9] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[1]$$;
       expr {
	expr="1000.0 * ((float)step * dt_integ)";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[1].vars[8]$;
       expr {
	expr="g_e + dt_integ * (g_e_dt * (g_e_mean - g_e) + g_e_var * Random::Gauss(1.0))";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[1].vars[9]$;
       expr {
	expr="g_i + dt_integ * (g_i_dt * (g_i_mean - g_e) + g_i_var * Random::Gauss(1.0))";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[12]$$;
       expr {
	expr="g_bar_l * (e_rev_l - v_m)";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[13]$$;
       expr {
	expr="g_bar_l * act_thr_slope * exp((v_m - act_thr) / act_thr_slope)";
       };
      };
      IfElse @[5] {
       desc=;
       flags=;
       cond {
	expr="current_clamp";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[1].vars[11]$$;
	 expr {
	  expr="time > stim_on ? cur_clamp_val: 0.0";
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[1].vars[11]$;
	 expr {
	  expr=" g_e * g_bar_e * (e_rev_e - v_m) + g_i * g_bar_i * (e_rev_i - v_m)";
	 };
	};
       };
      };
      AssignExpr @[6] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[10]$$;
       expr {
	expr="I_leak + I_chan + I_spike - adapt";
       };
      };
      AssignExpr @[7] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[15]$$;
       expr {
	expr="adapt_vm_gain * (v_m - e_rev_l) - adapt";
       };
      };
      AssignExpr @[8] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[1].vars[7]$;
       expr {
	expr="v_m + dt_integ * v_m_dt * I_net";
       };
      };
      If @[9] {
       desc=;
       flags=;
       cond {
	expr="v_m > spike_thr";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	VarIncr @[0] {
	 desc=;
	 flags=;
	 var=$.projects[0].programs[1].vars[14]$;
	 expr {
	  expr="adapt_spike_gain";
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[1].vars[7]$;
	 expr {
	  expr="spike_reset";
	 };
	};
       };
      };
      AssignExpr @[10] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[1].vars[14]$;
       expr {
	expr="adapt + dt_integ * adapt_dt * d_adapt";
       };
      };
      AddNewDataRow @[11] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[1].vars[0]$;
      };
      DataVarProg @[12] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[1].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[1].vars[11]$;
       var_2=$.projects[0].programs[1].vars[10]$;
       var_3=$.projects[0].programs[1].vars[13]$;
       var_4=$.projects[0].programs[1].vars[1]$;
      };
      DataVarProg @[13] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[1].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[1].vars[7]$;
       var_2=$.projects[0].programs[1].vars[8]$;
       var_3=$.projects[0].programs[1].vars[9]$;
       var_4=$.projects[0].programs[1].vars[12]$;
      };
      DataVarProg @[14] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[1].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[1].vars[14]$;
       var_2=$.projects[0].programs[1].vars[15]$;
       var_3=NULL;
       var_4=NULL;
      };
      DoneWritingDataRow @[15] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[1].vars[0]$;
      };
     };
     init {
      expr="step = 0";
     };
     test {
      expr="step < time_steps";
     };
     iter {
      expr="step++";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[2] {
   name="AdExNorm";
   short_nm="AdExNrm";
   tags=;
   desc="normalized adaptive exponential model";
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="AdExNormData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="time";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
       };
      };
      float_Data @[1] {
       name="v_m";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0.34982216;0.39078024;0.42445338;0.45216572;0.47508126;0.4943234;0.51111799;0.52702063;0.54459542;0.57062918;
0.64512318;0.30000001;0.34675646;0.38521546;0.41685361;0.44290134;0.46441311;0.48234135;0.49760681;0.51117015;
0.52415937;0.53825068;0.55714333;0.59539449;0.84137112;0.30000001;0.34391692;0.38006124;0.40981501;0.43432525;
0.45456019;0.47136146;0.48548761;0.49764645;0.5085277;0.51886493;0.52959484;0.54232663;0.56115544;0.60436302;
0.98860532;0.30000001;0.34136605;0.37543097;0.40349221;0.42662373;0.44572401;0.46155748;0.474787;0.4859961;
0.49570462;0.50438577;0.51249498;0.52052599;0.52913308;0.53944659;0.55414039;0.58289933;0.70934129;0.30000001;
0.33918869;0.37147871;0.39809543;0.42005149;0.43818957;0.45321822;0.4657394;0.47626776;0.48524386;0.49304491;
0.49999666;0.50638884;0.51249707;0.51861674;0.52512282;0.53260016;0.54219222;0.55682915;0.58789945;0.7499277;
0.30000001;0.3374072;0.36824507;0.39368001;0.414675;0.43202895;0.44640905;0.45837596;0.468402;0.47688431;
0.48415506;0.49049088;0.49612266;0.50124586;0.50603193;0.51064074;0.51523668;0.52001214;0.5252288;0.53130448;
0.53903061;0.55025303;0.57084483;0.63524079;0.30000001;0.33605686;0.36579397;0.39033318;0.41060004;0.42736101;
0.44125384;0.45281124;0.4624787;0.4706277;0.47756603;0.48354718;0.48877883;0.49343124;0.49764511;0.50153905;
0.50521642;0.50877249;0.5123018;0.51590788;0.51971781;0.52390671;0.52874708;0.53472078;0.542822;0.55559343;
0.58239019;0.70144886;0.30000001;0.33515972;0.36416554;0.38810968;0.40789291;0.4242605;0.43783122;0.44912049;
0.45855764;0.4664993;0.47324005;0.47902143;0.48404041;0.48845708;0.49240187;0.49598154;0.49928498;0.50238794;
0.50535733;0.50825548;0.51114434;0.51409096;0.51717454;0.52049845;0.5242101;0.52854204;0.53390223;0.54110867;
0.55214286;0.57355475;0.64672732;0.30000001;0.33463109;0.363206;0.38679948;0.4062978;0.42243373;0.43581519;
0.44694763;0.45625147;0.46407527;0.47070643;0.47638038;0.48128882;0.48558727;0.48940179;0.49283484;0.49597055;
0.49887881;0.50161922;0.50424403;0.50680125;0.50933754;0.51190138;0.51454729;0.51734173;0.52037257;0.5237658;
0.52771801;0.53256649;0.53896207;0.54838616;0.56521547;0.6107834;1.1359856;0.30000001;0.33435416;0.36270335;
0.38611317;0.40546224;0.42147687;0.43475932;0.44580993;0.4550446;0.46280771;0.46938321;0.47500351;0.47985774;
0.48409933;0.48785233;0.49121752;0.49427706;0.49709883;0.4997398;0.502249;0.50467008;0.50704372;0.50940996;
0.51181084;0.51429409;0.51691782;0.51975846;0.52292424;0.52658075;0.53100407;0.53670573;0.54478008;0.55814028;
0.58823109;0.74988973;0.30000001;0.33424792;0.36251047;0.3858498;0.40514162;0.42110974;0.43435419;0.44537348;
0.45458168;0.46232173;0.46887615;0.47447631;0.47931036;0.48353094;0.48726144;0.49060202;0.49363422;0.49642518;
0.49903113;0.50150007;0.5038743;0.50619274;0.50849307;0.51081377;0.5131976;0.51569492;0.51837009;0.5213111;
0.52464759;0.52858603;0.53348708;0.54006088;0.54996598;0.56831825;0.62250835;0.30000001;0.33418277;0.36239225;
0.38568836;0.40494508;0.42088464;0.43410584;0.44510594;0.45429796;0.46202388;0.46856549;0.4741534;0.47897524;
0.48318315;0.48690018;0.49022603;0.49324194;0.49601465;0.49859992;0.50104517;0.50339204;0.50567842;0.50794059;
0.51021546;0.51254284;0.51496923;0.51755279;0.52037156;0.52353776;0.52722579;0.53173059;0.53760743;0.54607105;
0.56047058;0.59490925;0.82505786;0.30000001;0.33417434;0.36237693;0.38566744;0.40491962;0.42085552;0.43407369;
0.44507131;0.45426121;0.46198535;0.46852529;0.47411162;0.47893187;0.48313817;0.48685345;0.49017742;0.49319124;
0.49596164;0.49854425;0.50098652;0.50332987;0.50561219;0.5078696;0.51013863;0.51245898;0.51487654;0.51744872;
0.52025241;0.52339786;0.52705568;0.53151345;0.53730959;0.54561263;0.55960286;0.59232521;0.79314989;0.30000001;
0.3341715;0.3623718;0.38566047;0.4049111;0.42084575;0.43406293;0.44505969;0.45424891;0.46197245;0.46851182;
0.47409761;0.47891736;0.48312309;0.4868378;0.49016115;0.49317428;0.49594387;0.49852562;0.50096685;0.50330907;
0.50559008;0.50784588;0.510113;0.51243091;0.51484555;0.51741397;0.52021265;0.52335119;0.52699906;0.53144121;
0.53721076;0.54546124;0.55931866;0.59149623;0.78369975;0.30000001;0.33417043;0.36236987;0.38565779;0.40490785;
0.42084205;0.43405885;0.44505531;0.45424426;0.46196753;0.46850672;0.4740923;0.47891185;0.4831174;0.48683187;
0.49015498;0.49316785;0.49593714;0.49851856;0.5009594;0.5033012;0.50558168;0.50783682;0.51010323;0.5124203;
0.51483381;0.5174008;0.52019757;0.52333349;0.52697754;0.53141385;0.53717333;0.54540402;0.55921155;0.59118599;
0.78025579;0.30000001;0.33417001;0.36236909;0.38565674;0.4049066;0.42084059;0.43405724;0.44505358;0.45424241;
0.46196559;0.4685047;0.47409022;0.4789097;0.48311514;0.48682955;0.49015254;0.49316531;0.49593449;0.49851578;
0.50095648;0.5032981;0.50557834;0.5078333;0.51009941;0.51241612;0.51482916;0.51739562;0.52019161;0.52332652;
0.52696908;0.53140312;0.53715867;0.54538155;0.55916953;0.59106457;0.77892143;0.30000001;0.33416983;0.36236879;
0.38565633;0.40490609;0.42084002;0.43405658;0.44505286;0.45424169;0.46196485;0.46850389;0.47408938;0.47890884;
0.48311424;0.48682863;0.49015158;0.4931643;0.49593344;0.49851465;0.50095528;0.50329685;0.50557703;0.50783187;
0.51009786;0.51241446;0.51482731;0.51739353;0.52018929;0.52332377;0.52696574;0.53139883;0.53715283;0.54537261;
0.55915284;0.59101629;0.77839279;0.30000001;0.33416978;0.36236867;0.38565618;0.40490589;0.42083979;0.43405634;
0.44505259;0.45424139;0.46196452;0.46850359;0.47408906;0.47890848;0.48311388;0.48682824;0.4901512;0.49316388;
0.49593303;0.49851421;0.50095481;0.50329638;0.50557649;0.50783134;0.51009727;0.5124138;0.5148266;0.51739269;
0.52018833;0.52332264;0.52696437;0.5313971;0.53715044;0.54536897;0.55914611;0.59099698;0.77818155;0.30000001;
0.33416975;0.36236861;0.38565612;0.4049058;0.4208397;0.43405622;0.44505247;0.45424128;0.4619644;0.46850345;
0.47408891;0.47890833;0.48311374;0.48682809;0.49015105;0.49316373;0.49593285;0.49851403;0.50095463;0.50329614;
       };
      };
      float_Data @[2] {
       name="g_e";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
       };
      };
      float_Data @[3] {
       name="g_i";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
      float_Data @[4] {
       name="I_net";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0.14000027;0.11509221;0.094621539;0.07787165;0.064392716;0.054070372;0.047192812;0.044686355;0.049385265;0.07315474;
0.20932828;8.467803;0.13138564;0.10806979;0.088903189;0.073194124;0.060448103;0.050378308;0.042895969;0.038112946;
0.036499802;0.039596602;0.053088333;0.10748566;0.69119436;155213.77;0.12340658;0.10156552;0.083608069;0.0688738;
0.056860145;0.047211595;0.039694466;0.034166362;0.030576235;0.029047731;0.030151037;0.035776239;0.052908994;0.12141331;
1.0797209;2.4438838e+08;0.11623859;0.095722459;0.07885205;0.064999595;0.053671807;0.044492055;0.037174933;0.031497538;
0.027280955;0.024394101;0.022786839;0.022567173;0.024185805;0.028980946;0.041289642;0.080812693;0.35530177;210.74667;
0.11012019;0.090735011;0.074792944;0.061696485;0.050968055;0.04223055;0.035184477;0.029584648;0.025222849;0.021921022;
0.019534405;0.017961973;0.017164204;0.017196182;0.018282071;0.021011438;0.02695366;0.041129794;0.087307498;0.45529935;
1604.1018;0.10511426;0.086654417;0.071472168;0.058995936;0.048764601;0.040408082;0.033626962;0.028173158;0.023835298;
0.020430805;0.017803667;0.015825279;0.01439627;0.013448816;0.012950732;0.012914613;0.01341904;0.01465885;0.017072652;
0.021710437;0.031535007;0.057862878;0.18095276;5.1280546;0.10131975;0.083561324;0.068955146;0.056949861;0.047098346;
0.039038837;0.032476306;0.027165594;0.022898635;0.01949675;0.016807038;0.014700932;0.01307325;0.011840994;0.010941938;
0.010333482;0.009992511;0.0099172955;0.010133202;0.010705907;0.011770775;0.013601349;0.016786212;0.022764318;0.035887852;
0.075298853;0.33455476;141.99394;0.098798826;0.081506394;0.067282997;0.055590913;0.045992889;0.03813374;0.031722788;
0.02651838;0.022316137;0.018941497;0.016245654;0.014103308;0.012410919;0.011084784;0.010058884;0.0092827063;0.0087193241;
0.0083440207;0.0081437305;0.0081176879;0.0082799289;0.0086650383;0.0093400879;0.010429772;0.012172791;0.015062103;0.020250084;
0.031006113;0.060167432;0.20561485;9.1425953;0.097313352;0.080295511;0.066297695;0.05479027;0.045341987;0.037601858;
0.031282179;0.026143791;0.021984853;0.018633541;0.015943799;0.013792758;0.01207867;0.010718756;0.0096468953;0.0088112783;
0.0081722522;0.0077005038;0.0073757223;0.0071858368;0.0071269772;0.0072044185;0.0074350387;0.0078523709;0.0085166125;0.0095349662;
0.011105778;0.013624153;0.017971596;0.026481653;0.047290348;0.1280459;1.4758182;3.876168e+11;0.096535206;0.079661213;
0.065781564;0.054370899;0.045001157;0.037323628;0.031052271;0.025949344;0.021814415;0.018477153;0.015793001;0.01364044;
0.011918793;0.010545978;0.0094561512;0.0085973255;0.0079291733;0.0074211229;0.0070508597;0.0068032732;0.0066699106;0.0066490388;
0.0067465208;0.0069779148;0.0073726671;0.0079821907;0.008895888;0.010274866;0.012429545;0.016021654;0.022688881;0.037542131;
0.084555104;0.45426089;1601.0508;0.096236616;0.079417817;0.06558352;0.054209985;0.044870399;0.037216932;0.030964207;
0.025875034;0.021749541;0.018417979;0.015736368;0.013583721;0.011859785;0.010482776;0.0093869977;0.0085204579;0.0078426618;
0.0073226946;0.0069376766;0.0066716434;0.0065148775;0.00646376;0.0065212813;0.0066984971;0.0070175123;0.007517199;0.0082642445;
0.009375534;0.011067005;0.013772019;0.018472292;0.02783343;0.051569734;0.1522743;2.6867032;0.096053578;0.079268612;
0.065462105;0.054111339;0.044790246;0.037151542;0.030910261;0.025829561;0.021709913;0.018381923;0.015701974;0.013549402;
0.011824223;0.010444837;0.0093456469;0.0084746759;0.0077913478;0.0072645647;0.0068711475;0.0065946761;0.0064247614;0.0063567921;
0.0063922661;0.0065399366;0.0068182228;0.0072598387;0.0079206266;0.0088970736;0.010363458;0.012658379;0.016513957;0.023782795;
0.040462643;0.096772693;0.64671755;68658.109;0.096029878;0.079249293;0.065446384;0.054098569;0.044779867;0.037143078;
0.03090328;0.025823679;0.021704789;0.018377267;0.015697539;0.013544984;0.011819652;0.010439969;0.0093403505;0.0084688216;
0.0077847969;0.0072571575;0.0068626869;0.0065849097;0.0064133545;0.0063432902;0.0063760355;0.0065200659;0.006793363;0.0072279153;
0.0078783017;0.0088386647;0.010278584;0.012526223;0.016287128;0.023331638;0.03931253;0.09194985;0.56431729;13925.655;
0.096021943;0.079242826;0.065441124;0.054094292;0.044776395;0.037140243;0.030900942;0.025821708;0.021703074;0.01837571;
0.015696054;0.013543506;0.011818123;0.010438341;0.0093385791;0.0084668649;0.0077826083;0.0072546834;0.0068598613;0.0065816492;
0.0064095482;0.0063387868;0.0063706241;0.0065134452;0.0067850854;0.007217295;0.007864234;0.0088192774;0.010250461;0.012482537;
0.016212406;0.023183826;0.03893939;0.09041892;0.54009199;8681.7393;0.096018925;0.079240367;0.065439127;0.054092668;
0.044775072;0.037139166;0.030900054;0.025820961;0.021702424;0.018375117;0.015695492;0.013542945;0.011817543;0.010437722;
0.0093379077;0.0084661227;0.0077817775;0.0072537446;0.0068587898;0.0065804129;0.0064081047;0.0063370792;0.0063685728;0.0065109353;
0.0067819487;0.0072132712;0.0078589069;0.0088119395;0.010239822;0.012466025;0.016184194;0.023128124;0.038799237;0.089848131;
0.53128612;7308.3647;0.096017741;0.079239398;0.065438338;0.054092031;0.044774555;0.037138741;0.030899705;0.025820667;
0.021702167;0.018374885;0.01569527;0.013542724;0.011817315;0.010437479;0.0093376432;0.0084658302;0.0077814511;0.0072533754;
0.0068583679;0.0065799262;0.006407537;0.0063364077;0.0063677658;0.0065099485;0.0067807152;0.0072116894;0.0078568133;0.0088090552;
0.010235641;0.012459537;0.016173117;0.023106266;0.038744316;0.089625068;0.52787775;6836.668;0.096017271;0.079239011;
0.065438025;0.054091774;0.044774346;0.037138574;0.030899566;0.02582055;0.021702064;0.018374791;0.015695181;0.013542636;
0.011817223;0.010437382;0.0093375379;0.0084657138;0.0077813207;0.0072532282;0.0068582003;0.0065797325;0.0064073107;0.00633614;
0.0063674445;0.0065095555;0.0067802239;0.0072110589;0.0078559788;0.0088079059;0.010233976;0.012456954;0.016168704;0.023097564;
0.038722456;0.089536399;0.52652788;6658.3232;0.096017078;0.079238862;0.065437898;0.054091673;0.044774264;0.037138507;
0.03089951;0.025820503;0.021702023;0.018374754;0.015695145;0.013542601;0.011817187;0.010437344;0.009337496;0.0084656673;
0.0077812686;0.0072531691;0.0068581328;0.0065796548;0.0064072199;0.0063360329;0.0063673155;0.0065093976;0.0067800269;0.0072108065;
0.0078556444;0.0088074449;0.010233309;0.012455919;0.016166938;0.023094079;0.038713709;0.089500919;0.52598858;6588.3613;
0.096017003;0.079238795;0.065437853;0.054091632;0.044774231;0.037138477;0.030899487;0.025820484;0.021702008;0.018374739;
0.015695132;0.013542587;0.011817172;0.010437328;0.0093374783;0.0084656486;0.0077812476;0.0072531453;0.0068581058;0.0065796236;
       };
      };
      float_Data @[5] {
       name="I_chan";
       desc="net current from channels";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0.14;0.13003556;0.12184395;0.11510932;0.10956686;0.10498375;0.10113532;0.097776398;0.094595879;0.091080911;
0.08587417;0.070975356;0.14;0.1306487;0.12295691;0.11662928;0.11141973;0.10711738;0.10353173;0.10047864;
0.097765975;0.095168121;0.092349857;0.088571332;0.080921106;0.031725779;0.14;0.13121662;0.12398775;0.118037;
0.11313495;0.10908797;0.10572771;0.10290248;0.10047071;0.098294467;0.096227013;0.094081029;0.091534674;0.087768912;
0.079127394;0.0022789398;0.14;0.13172679;0.1249138;0.11930156;0.11467525;0.1108552;0.1076885;0.1050426;
0.10280078;0.10085908;0.099122845;0.097501002;0.095894799;0.094173387;0.092110686;0.089171924;0.083420128;0.058131747;
0.14;0.13216226;0.12570426;0.12038092;0.11598971;0.11236209;0.10935635;0.10685212;0.10474645;0.10295123;
0.10139102;0.10000066;0.098722234;0.097500585;0.096276656;0.094975442;0.093479961;0.091561556;0.088634163;0.082420111;
0.050014462;0.14;0.13251856;0.12635098;0.121264;0.117065;0.11359421;0.11071819;0.10832481;0.10631961;
0.10462314;0.10316899;0.10190183;0.10077547;0.099750824;0.098793618;0.097871855;0.096952662;0.095997572;0.094954237;
0.0937391;0.092193879;0.089949392;0.085831039;0.072951838;0.14;0.13278863;0.1268412;0.12193336;0.11787999;
0.1145278;0.11174923;0.10943776;0.10750426;0.10587446;0.10448679;0.10329057;0.10224424;0.10131375;0.10047098;
0.099692188;0.098956712;0.098245502;0.097539641;0.096818417;0.096056432;0.095218658;0.09425059;0.093055844;0.091435604;
0.088881306;0.083521962;0.059710231;0.14;0.13296805;0.12716688;0.12237807;0.11842141;0.1151479;0.11243375;
0.11017591;0.10828847;0.10670014;0.10535199;0.10419571;0.10319192;0.10230858;0.10151963;0.1008037;0.100143;
0.099522412;0.098928526;0.098348908;0.097771131;0.097181812;0.096565083;0.095900312;0.095157981;0.09429159;0.093219548;
0.091778263;0.089571424;0.085289046;0.070654534;0.14;0.13307378;0.12735879;0.1226401;0.11874044;0.11551325;
0.11283696;0.11061047;0.1087497;0.10718495;0.10585871;0.10472392;0.10374223;0.10288254;0.10211964;0.10143303;
0.10080589;0.10022424;0.099676162;0.099151194;0.098639749;0.098132491;0.09761972;0.097090535;0.096531652;0.095925488;
0.095246837;0.09445639;0.093486704;0.092207588;0.09032277;0.086956911;0.077843323;-0.027197115;0.14;0.13312916;
0.12745933;0.12277737;0.11890756;0.11570463;0.11304814;0.11083801;0.10899109;0.10743845;0.10612336;0.1049993;
0.10402845;0.10318013;0.10242953;0.1017565;0.10114459;0.10058023;0.10005204;0.099550202;0.099065982;0.098591253;
0.098118015;0.097637832;0.097141184;0.09661644;0.09604831;0.095415153;0.094683848;0.093799181;0.092658848;0.091043979;
0.088371947;0.082353786;0.050022054;0.14;0.13315041;0.12749791;0.12283004;0.11897168;0.11577805;0.11312916;
0.1109253;0.10908367;0.10753565;0.10622477;0.10510474;0.10413793;0.10329381;0.10254771;0.1018796;0.10127316;
0.10071496;0.10019378;0.099699989;0.099225141;0.098761447;0.098301388;0.097837247;0.097360484;0.096861012;0.096325986;
0.095737778;0.095070481;0.094282798;0.093302578;0.091987826;0.090006799;0.086336359;0.075498328;0.14;0.13316345;
0.12752156;0.12286233;0.11901098;0.11582307;0.11317883;0.11097881;0.10914041;0.10759522;0.1062869;0.10516932;
0.10420495;0.10336336;0.10261996;0.1019548;0.10135161;0.10079707;0.10028002;0.099790968;0.099321596;0.098864317;
0.09841188;0.097956911;0.097491436;0.09700615;0.096489437;0.095925696;0.095292449;0.094554834;0.093653888;0.092478514;
0.090785787;0.087905884;0.08101815;0.034988429;0.14;0.13316514;0.12752461;0.12286651;0.11901607;0.11582889;
0.11318526;0.11098574;0.10914776;0.10760293;0.10629494;0.10517768;0.10421363;0.10337237;0.10262931;0.10196451;
0.10136175;0.10080767;0.10029115;0.099802703;0.099334024;0.098877557;0.098426081;0.097972266;0.097508207;0.097024694;
0.096510254;0.095949516;0.095320433;0.094588861;0.093697317;0.092538089;0.090877473;0.08807943;0.081534952;0.041370023;
0.14;0.1331657;0.12752564;0.12286791;0.11901778;0.11583085;0.11318742;0.11098806;0.10915022;0.10760552;
0.10629763;0.10518048;0.10421652;0.10337538;0.10263243;0.10196777;0.10136514;0.10081122;0.10029487;0.099806629;
0.099338181;0.09888199;0.098430827;0.097977407;0.09751381;0.097030886;0.096517205;0.095957473;0.095329762;0.094600193;
0.093711756;0.092557847;0.090907753;0.088136271;0.081700757;0.043260045;0.14;0.13316591;0.12752603;0.12286844;
0.11901843;0.11583159;0.11318823;0.11098894;0.10915115;0.10760649;0.10629866;0.10518154;0.10421763;0.10337652;
0.10263363;0.101969;0.10136643;0.10081257;0.10029629;0.099808119;0.099339761;0.098883666;0.09843263;0.097979352;
0.097515941;0.09703324;0.096519843;0.09596049;0.095333301;0.094604492;0.093717225;0.092565328;0.090919197;0.088157684;
0.081762806;0.043948844;0.14;0.133166;0.12752618;0.12286865;0.11901868;0.11583188;0.11318856;0.11098929;
0.10915152;0.10760688;0.10629906;0.10518195;0.10421807;0.10337697;0.10263409;0.10196949;0.10136694;0.1008131;
0.10029685;0.099808708;0.099340387;0.098884329;0.098433338;0.097980119;0.097516775;0.097034164;0.096520878;0.095961675;
0.095334694;0.094606176;0.093719378;0.092568271;0.090923697;0.088166088;0.08178708;0.044215713;0.14;0.13316603;
0.12752624;0.12286873;0.11901879;0.115832;0.11318868;0.11098943;0.10915166;0.10760703;0.10629922;0.10518213;
0.10421824;0.10337715;0.10263428;0.10196968;0.10136715;0.10081331;0.10029707;0.099808939;0.099340633;0.098884597;
0.098433621;0.097980425;0.09751711;0.097034536;0.096521288;0.095962144;0.095335253;0.094606854;0.093720235;0.092569441;
0.090925485;0.088169441;0.081796743;0.044321444;0.14;0.13316604;0.12752627;0.12286877;0.11901882;0.11583205;
0.11318874;0.11098948;0.10915172;0.1076071;0.10629928;0.10518219;0.1042183;0.10337722;0.10263436;0.10196976;
0.10136722;0.1008134;0.10029715;0.099809036;0.099340729;0.098884702;0.09843374;0.097980544;0.097517245;0.097034678;
0.09652146;0.095962338;0.095335469;0.094607122;0.093720578;0.09256991;0.0909262;0.088170774;0.081800602;0.044363696;
0.14;0.13316604;0.12752628;0.12286878;0.11901884;0.11583206;0.11318876;0.1109895;0.10915174;0.10760712;
0.10629931;0.10518222;0.10421833;0.10337725;0.10263439;0.10196979;0.10136726;0.10081343;0.10029719;0.099809073;
       };
      };
      float_Data @[6] {
       name="I_leak";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;-0.014946648;-0.027234072;-0.037336014;-0.045649715;-0.052524384;-0.058297019;-0.063335396;-0.068106182;-0.07337863;
-0.081188746;-0.10353696;0;-0.014026937;-0.025564637;-0.035056081;-0.042870402;-0.049323935;-0.054702401;-0.059282042;
-0.063351043;-0.067247815;-0.071475215;-0.077143006;-0.088618346;-0.16241133;0;-0.01317508;-0.024018373;-0.032944504;
-0.040297575;-0.046368055;-0.05140844;-0.055646282;-0.059293937;-0.062558301;-0.065659486;-0.068878457;-0.072697982;-0.078346632;
-0.091308907;-0.20658159;0;-0.012409814;-0.022629293;-0.031047661;-0.03798712;-0.043717206;-0.048467249;-0.052436102;
-0.055798829;-0.058711387;-0.061315738;-0.063748494;-0.066157803;-0.068739921;-0.071833968;-0.076242119;-0.084869809;-0.12280238;
0;-0.011756605;-0.021443617;-0.029428627;-0.03601544;-0.041456871;-0.04596547;-0.049721822;-0.052880324;-0.055573154;
-0.057913478;-0.059999;-0.061916649;-0.063749127;-0.065585017;-0.067536838;-0.069780052;-0.072657667;-0.077048749;-0.086369835;
-0.13497831;0;-0.011222163;-0.020473523;-0.028104004;-0.034402501;-0.039608687;-0.043922719;-0.047512785;-0.050520595;
-0.053065289;-0.055246513;-0.057147261;-0.058836792;-0.060373761;-0.061809577;-0.063192219;-0.064571001;-0.066003643;-0.067568645;
-0.069391347;-0.071709186;-0.075075909;-0.081253447;-0.10057224;0;-0.010817056;-0.019738192;-0.027099952;-0.03318001;
-0.038208302;-0.042376149;-0.04584337;-0.048743613;-0.051188305;-0.053269811;-0.055064157;-0.056633651;-0.058029372;-0.059293535;
-0.060461711;-0.06156493;-0.062631749;-0.063690536;-0.064772367;-0.065915346;-0.067172013;-0.068624116;-0.070416242;-0.072846591;
-0.076678038;-0.084717058;-0.12043465;0;-0.010547917;-0.019249666;-0.026432905;-0.032367878;-0.037278149;-0.04134937;
-0.044736143;-0.047567286;-0.049949791;-0.051972017;-0.05370643;-0.055212121;-0.056537129;-0.057720557;-0.058794461;-0.059785496;
-0.060716383;-0.061607204;-0.062476642;-0.063343301;-0.064227276;-0.065152369;-0.066149533;-0.06726303;-0.068562619;-0.070170671;
-0.072332606;-0.075642861;-0.082066432;-0.1040182;0;-0.010389326;-0.0189618;-0.026039846;-0.031889342;-0.036730122;
-0.040744558;-0.044084292;-0.046875443;-0.049222581;-0.051211927;-0.052914109;-0.054386646;-0.055676185;-0.056820538;-0.057850454;
-0.058791161;-0.059663642;-0.060485762;-0.061273202;-0.062040374;-0.062801264;-0.063570417;-0.064364195;-0.065202527;-0.066111773;
-0.067129739;-0.068315409;-0.069769949;-0.071688622;-0.074515842;-0.079564638;-0.093235016;-0.25079566;0;-0.01030625;
-0.018811006;-0.025833948;-0.031638671;-0.036443066;-0.040427793;-0.043742985;-0.046513375;-0.048842315;-0.050814968;-0.052501053;
-0.053957328;-0.055229794;-0.0563557;-0.057365254;-0.058283117;-0.059129648;-0.059921939;-0.060674701;-0.061401028;-0.062113117;
-0.062822983;-0.063543253;-0.064288221;-0.065075338;-0.065927528;-0.066877268;-0.067974232;-0.069301225;-0.071011722;-0.073434025;
-0.07744208;-0.086469315;-0.13496692;0;-0.010274372;-0.018753143;-0.025754942;-0.031542484;-0.036332916;-0.040306255;
-0.043612044;-0.046374504;-0.048696518;-0.050662849;-0.052342888;-0.05379311;-0.055059277;-0.056178436;-0.057180606;-0.058090262;
-0.058927558;-0.05970934;-0.060450017;-0.061162293;-0.061857831;-0.062547915;-0.063244134;-0.063959278;-0.064708479;-0.065511025;
-0.066393331;-0.067394279;-0.068575807;-0.070046127;-0.072018258;-0.074989803;-0.080495462;-0.096752509;0;-0.01025483;
-0.018717671;-0.025706507;-0.03148352;-0.036265396;-0.040231753;-0.043531779;-0.046289384;-0.048607171;-0.050569654;-0.052246019;
-0.053692576;-0.054954946;-0.056070056;-0.057067811;-0.05797258;-0.058804397;-0.059579972;-0.060313549;-0.061017606;-0.061703522;
-0.062382184;-0.063064635;-0.063762844;-0.064490773;-0.065265842;-0.06611146;-0.067061327;-0.068167746;-0.069519177;-0.07128223;
-0.073821321;-0.078141175;-0.088472776;-0.15751736;0;-0.0102523;-0.018713078;-0.025700238;-0.031475887;-0.036256652;
-0.040222108;-0.043521389;-0.046278365;-0.048595604;-0.050557587;-0.052233484;-0.053679567;-0.054941449;-0.056056038;-0.057053227;
-0.057957374;-0.05878849;-0.059563275;-0.060295947;-0.060998961;-0.061683662;-0.062360883;-0.063041598;-0.06373769;-0.06446296;
-0.065234624;-0.06607572;-0.067019351;-0.06811671;-0.069454029;-0.071192868;-0.073683791;-0.077880859;-0.087697566;-0.14794497;
0;-0.010251452;-0.018711541;-0.025698137;-0.031473327;-0.036253728;-0.040218879;-0.04351791;-0.046274677;-0.048591729;
-0.050553549;-0.052229285;-0.053675212;-0.054936931;-0.056051347;-0.057048347;-0.057952281;-0.058783166;-0.059557687;-0.060290057;
-0.060992725;-0.061677016;-0.062353756;-0.063033894;-0.063729279;-0.064453669;-0.065224193;-0.066063792;-0.067005351;-0.068099707;
-0.069432363;-0.07116323;-0.073638365;-0.077795595;-0.087448865;-0.14510994;0;-0.010251131;-0.018710956;-0.025697339;
-0.031472359;-0.036252614;-0.040217649;-0.043516587;-0.046273276;-0.048590261;-0.050552014;-0.052227691;-0.053673558;-0.054935217;
-0.056049563;-0.057046495;-0.057950351;-0.058781143;-0.059555568;-0.060287822;-0.060990356;-0.061674494;-0.062351052;-0.063030973;
-0.06372609;-0.064450137;-0.065220237;-0.066059269;-0.067000046;-0.068093263;-0.06942416;-0.071152009;-0.073621199;-0.077763468;
-0.0873558;-0.14407673;0;-0.010251004;-0.018710727;-0.025697026;-0.031471975;-0.036252178;-0.040217169;-0.04351607;
-0.046272725;-0.04858968;-0.050551411;-0.052227065;-0.053672906;-0.054934543;-0.056048863;-0.057045765;-0.057949591;-0.05878035;
-0.05955473;-0.060286943;-0.060989425;-0.061673503;-0.06234999;-0.063029818;-0.063724831;-0.064448752;-0.065218687;-0.066057488;
-0.06699796;-0.068090729;-0.069420934;-0.071147598;-0.073614463;-0.077750862;-0.087319374;-0.14367643;0;-0.010250954;
-0.018710636;-0.025696902;-0.031471822;-0.036252003;-0.040216975;-0.043515861;-0.046272505;-0.048589449;-0.050551172;-0.052226815;
-0.053672645;-0.054934271;-0.056048583;-0.057045475;-0.057949286;-0.058780033;-0.059554398;-0.060286593;-0.060989052;-0.061673108;
-0.062349565;-0.063029364;-0.063724332;-0.0644482;-0.065218061;-0.066056781;-0.066997126;-0.068089724;-0.069419645;-0.07114584;
-0.073611774;-0.077745847;-0.08730489;-0.14351784;0;-0.010250933;-0.018710598;-0.025696851;-0.031471763;-0.036251932;
-0.0402169;-0.043515779;-0.046272416;-0.048589356;-0.050551075;-0.052226715;-0.053672545;-0.054934166;-0.056048471;-0.057045359;
-0.057949167;-0.058779906;-0.059554264;-0.060286451;-0.060988903;-0.061672948;-0.062349394;-0.063029177;-0.06372413;-0.064447977;
-0.065217815;-0.066056497;-0.06699679;-0.068089314;-0.069419131;-0.07114514;-0.073610701;-0.077743836;-0.087299094;-0.14345446;
0;-0.010250926;-0.018710583;-0.025696831;-0.031471737;-0.036251906;-0.040216867;-0.043515746;-0.046272382;-0.048589323;
-0.050551038;-0.052226674;-0.0536725;-0.054934122;-0.056048427;-0.057045311;-0.057949118;-0.058779854;-0.059554212;-0.060286395;
       };
      };
      float_Data @[7] {
       name="I_spike";
       desc="net current from spiking mech";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 2.7239957e-07;3.2891289e-06;2.5496134e-05;0.00013730217;0.00054883648;0.0017260287;0.004517368;0.010461055;0.023168419;0.055786476;
0.2050425;8.5008364;2.7239957e-07;2.8216946e-06;1.9303523e-05;9.389667e-05;0.00034535798;0.0010124927;0.0024814089;0.0053233346;
0.010488361;0.020080091;0.040621389;0.10447283;0.70732003;155213.91;2.7239957e-07;2.4482204e-06;1.4918128e-05;6.6040302e-05;
0.00022492738;0.00061864028;0.0014330895;0.0029041474;0.0053338977;0.0091902521;0.01540985;0.026350895;0.049803741;0.12768054;
1.1075554;2.4438838e+08;2.7239957e-07;2.1550568e-06;1.1835029e-05;4.8140559e-05;0.00015304032;0.0003977071;0.0008777742;0.0017008188;
0.00297893;0.0048403665;0.0074711516;0.011206668;0.016744336;0.02574943;0.043124344;0.089907266;0.37869346;210.83321;
2.7239957e-07;1.9327595e-06;9.7128595e-06;3.6755435e-05;0.00011017702;0.00027286939;0.00057849305;0.0010819117;0.001831521;0.0028689667;
0.0042376365;0.0059990012;0.0082581537;0.011207844;0.015219779;0.021071039;0.030623527;0.049470231;0.10284448;0.48625448;
1604.2136;2.7239957e-07;1.7680464e-06;8.262843e-06;2.9474202e-05;8.4205909e-05;0.00020052976;0.0004115653;0.00074868044;0.0012359732;
0.0018888616;0.002716955;0.0037296077;0.0049426006;0.0063856482;0.0081120925;0.010214373;0.012853206;0.01631959;0.021183018;
0.028702484;0.042236738;0.074025638;0.20726539;5.1864257;2.7239957e-07;1.6526124e-06;7.3097822e-06;2.4932531e-05;6.8683992e-05;
0.00015878722;0.00031804928;0.00056683971;0.00091915071;0.0013814641;0.0019543567;0.0026356208;0.0034236291;0.0043202844;0.0053335396;
0.0064799418;0.0077879783;0.0093034375;0.011098926;0.013291894;0.016081201;0.019828007;0.025257226;0.034048956;0.051052697;
0.096682481;0.36917454;142.08794;2.7239957e-07;1.5801202e-06;6.7381984e-06;2.2309196e-05;5.9988994e-05;0.00013598436;0.00026802393;
0.00047132064;0.00075551221;0.0011238103;0.0015742237;0.0021018772;0.002701425;0.0033689942;0.0041035498;0.0049078506;0.0057892851;
0.0067609064;0.0078430446;0.0090660192;0.010474839;0.012137572;0.014160948;0.016721273;0.020131079;0.024999669;0.032683536;
0.046861351;0.081361607;0.23734111;9.210741;2.7239957e-07;1.5389018e-06;6.4225474e-06;2.0894566e-05;5.5390326e-05;0.00012411417;
0.00024232361;0.00042279882;0.00067323103;0.00099553284;0.0013869131;0.0018418637;0.0023541993;0.0029186571;0.0035319454;0.0041933577;
0.0049051521;0.0056728967;0.0065059653;0.0074183755;0.0084302127;0.0095700314;0.010878942;0.012417727;0.014279814;0.016616367;
0.019688791;0.023990577;0.030571977;0.042092226;0.06742844;0.15641803;1.5267996;3.876168e+11;2.7239957e-07;1.517741e-06;
6.2631443e-06;2.0189706e-05;5.312388e-05;0.00011831598;0.00022986229;0.00039941934;0.00063380669;0.00093439646;0.0012981246;0.0017193302;
0.0021916337;0.002709395;0.0032686475;0.0038676038;0.004506913;0.0051898304;0.0059224456;0.0067140986;0.0075781131;0.0085330419;
0.0096047353;0.010829794;0.012261488;0.013980305;0.016113887;0.018877508;0.022664459;0.028274611;0.037601616;0.0563039;
0.10981238;0.49438396;1601.1715;2.7239957e-07;1.5096987e-06;6.203034e-06;1.9925594e-05;5.2279036e-05;0.00011616378;0.00022525297;
0.00039079715;0.00061930536;0.00091196445;0.0012656271;0.0016745999;0.0021324628;0.0026334787;0.0031734901;0.0037503922;0.0043643531;
0.0050179381;0.005716268;0.0064673238;0.0072825048;0.0081775943;0.0091743497;0.010303139;0.011607355;0.013151104;0.015033239;
0.017414693;0.020576276;0.025054676;0.032012109;0.044469461;0.072970808;0.18266802;2.744015;2.7239957e-07;1.5047896e-06;
6.16647e-06;1.9765395e-05;5.176778e-05;0.00011486384;0.00022247325;0.00038560422;0.00061058177;0.00089848466;0.0012461201;0.0016477808;
0.0020970297;0.0025880828;0.0031166808;0.0036805465;0.0042795856;0.0049159857;0.0055943378;0.0063218847;0.0071089915;0.0079699643;
0.0089244097;0.0099994643;0.011233502;0.012682476;0.014431305;0.016615504;0.019465569;0.023407357;0.029320544;0.039335642;
0.060058102;0.12338237;0.69036633;68658.273;2.7239957e-07;1.5041552e-06;6.161752e-06;1.974475e-05;5.1701954e-05;0.0001146966;
0.00022211588;0.00038493698;0.00060946145;0.00089675433;0.0012436173;0.0016443414;0.0020924881;0.0025822676;0.0031094085;0.0036716124;
0.0042687529;0.0049029705;0.0055787913;0.0063033672;0.0070869369;0.0079436256;0.0088927802;0.0099611487;0.011186501;0.012623828;
0.014356413;0.016516833;0.019329872;0.023209102;0.029003924;0.038754143;0.05869716;0.1181438;0.60669178;13925.798;
2.7239957e-07;1.5039428e-06;6.1601727e-06;1.9737841e-05;5.167993e-05;0.00011464066;0.00022199634;0.00038471381;0.00060908677;0.00089617562;
0.0012427804;0.0016431913;0.0020909698;0.0025803237;0.0031069776;0.0036686265;0.0042651328;0.0048986217;0.0055735977;0.0062971828;
0.0070795724;0.0079348339;0.0088822264;0.0099483682;0.011170832;0.01260429;0.014331484;0.016484026;0.019284824;0.023143431;
0.028899383;0.038563151;0.058254465;0.11647684;0.58205795;8681.877;2.7239957e-07;1.5038622e-06;6.1595733e-06;1.9735218e-05;
5.1671574e-05;0.00011461942;0.00022195098;0.00038462912;0.00060894457;0.00089595607;0.0012424627;0.0016427549;0.0020903936;0.0025795859;
0.0031060551;0.0036674934;0.0042637591;0.0048969714;0.0055716271;0.0062948363;0.0070767789;0.0079314997;0.0088782236;0.0099435225;
0.011164892;0.012596884;0.014322039;0.0164716;0.019267771;0.023118589;0.02885988;0.038491115;0.058088042;0.11585481;
0.57309926;7308.501;2.7239957e-07;1.5038305e-06;6.1593373e-06;1.9734187e-05;5.1668281e-05;0.00011461107;0.00022193312;0.0003845958;
0.00060888863;0.00089586963;0.0012423377;0.0016425832;0.0020901668;0.0025792958;0.0031056923;0.0036670477;0.0042632185;0.0048963227;
0.0055708522;0.0062939133;0.0070756804;0.0079301875;0.0088766497;0.0099416161;0.011162557;0.012593972;0.014318325;0.016466716;
0.019261068;0.023108829;0.028844366;0.03846284;0.058022801;0.11561164;0.56963104;6836.8032;2.7239957e-07;1.5038178e-06;
6.1592436e-06;1.9733776e-05;5.1666972e-05;0.00011460773;0.00022192601;0.0003845825;0.00060886634;0.00089583523;0.0012422879;0.0016425147;
0.0020900765;0.0025791801;0.0031055477;0.0036668701;0.0042630034;0.0048960638;0.0055705435;0.0062935455;0.0070752422;0.007929665;
0.008876022;0.0099408571;0.011161625;0.012592812;0.014316845;0.01646477;0.019258397;0.02310494;0.028838186;0.038451578;
0.057996836;0.11551497;0.56825739;6658.4585;2.7239957e-07;1.5038128e-06;6.1592059e-06;1.973361e-05;5.1666448e-05;0.0001146064;
0.00022192315;0.0003845772;0.00060885737;0.00089582143;0.001242268;0.0016424874;0.0020900404;0.0025791337;0.0031054898;0.0036667988;
0.0042629172;0.00489596;0.0055704196;0.0062933983;0.0070750671;0.0079294555;0.0088757705;0.0099405525;0.011161253;0.012592346;
0.014316252;0.016463989;0.019257328;0.023103382;0.02883571;0.038447071;0.057986438;0.11547628;0.56770855;6588.4966;
2.7239957e-07;1.5038107e-06;6.1591904e-06;1.9733545e-05;5.1666237e-05;0.00011460586;0.000221922;0.00038457505;0.00060885382;0.00089581584;
0.00124226;0.0016424763;0.0020900257;0.0025791151;0.0031054665;0.0036667702;0.0042628823;0.0048959185;0.0055703698;0.0062933392;
       };
      };
      float_Data @[8] {
       name="adapt";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;1.3839489e-05;3.8960115e-05;7.3259944e-05;0.00011501945;0.0001628544;0.00021570218;0.00027284815;0.00033401465;0.00039963826;
0.00047203776;0.0086146276;0.0085548032;0.0085083833;0.0084729679;0.0084465872;0.0084276255;0.0084147705;0.0084069846;0.008403494;
0.0084037948;0.0084077017;0.008415495;0.0084284833;0.0084520057;0.016593693;0.016478458;0.016376223;0.01628474;0.016202156;
0.016126953;0.016057894;0.015993981;0.015934436;0.015878681;0.015826337;0.015777228;0.015731441;0.015689507;0.015653096;
0.015628938;0.023761684;0.023596672;0.023444297;0.023302441;0.023169367;0.023043642;0.022924095;0.022809777;0.022699928;
0.022593956;0.022491416;0.022391999;0.022295525;0.022201953;0.02211142;0.022024382;0.021942029;0.021868236;0.02988008;
0.02967258;0.029477406;0.029292557;0.029116385;0.028947536;0.028784897;0.028627563;0.028474798;0.02832602;0.028180769;
0.028038692;0.027899534;0.027763117;0.027629346;0.027498201;0.027369775;0.027244318;0.027122399;0.027005389;0.026897823;
0.034886014;0.034643751;0.034413557;0.034193534;0.033982098;0.033777967;0.033580072;0.033387545;0.033199683;0.033015907;
0.032835763;0.032658894;0.032485008;0.032313898;0.032145396;0.031979397;0.031815827;0.031654675;0.031495962;0.031339806;
0.031186419;0.031036243;0.030890228;0.030750947;0.038680524;0.038411908;0.038155172;0.037908483;0.037670322;0.037439447;
0.037214827;0.036995627;0.036781162;0.036570869;0.036364302;0.036161095;0.035960961;0.035763673;0.035569046;0.03537694;
0.035187248;0.034999896;0.034814835;0.034632038;0.034451511;0.034273297;0.034097485;0.033924237;0.033753853;0.033586901;
0.033424657;0.033270985;0.04120145;0.040915329;0.040640961;0.040376555;0.040120639;0.039871991;0.03962962;0.039392702;
0.039160561;0.038932659;0.038708542;0.038487855;0.038270306;0.038055662;0.037843738;0.037634376;0.037427466;0.037222911;
0.037020639;0.036820594;0.036622744;0.036427069;0.036233574;0.036042277;0.035853233;0.035666533;0.035482336;0.035300903;
0.03512273;0.034948863;0.034782149;0.042686921;0.042390484;0.042105723;0.041830882;0.041564502;0.041305386;0.04105255;
0.040805191;0.040562641;0.040324356;0.040089905;0.039858922;0.039631117;0.039406259;0.039184157;0.038964655;0.038747635;
0.038532987;0.038320642;0.038110532;0.037902612;0.037696842;0.037493207;0.037291702;0.037092328;0.036895115;0.036700111;
0.036507409;0.03631714;0.036129538;0.035945017;0.035764396;0.035589702;0.035428882;0.043465063;0.043163225;0.042873021;
0.042592712;0.042320848;0.042056248;0.041797936;0.041545104;0.0412971;0.041053381;0.040813513;0.040577136;0.040343963;
0.040113758;0.039886329;0.039661523;0.039439209;0.039219294;0.039001685;0.038786326;0.038573153;0.038362138;0.038153246;
0.037946463;0.037741784;0.037539214;0.037338778;0.037140526;0.036944527;0.036750909;0.036559861;0.036371727;0.036187138;
0.036007546;0.035837557;0.043763652;0.04345974;0.04316745;0.042885039;0.042611074;0.042344369;0.042083953;0.041829024;
0.041578926;0.041333124;0.041091178;0.040852733;0.040617496;0.040385239;0.040155768;0.039928924;0.039704587;0.039482646;
0.039263025;0.039045651;0.038830474;0.038617447;0.038406547;0.038197752;0.037991047;0.037786443;0.037583951;0.037383612;
0.037185479;0.036989648;0.036796272;0.0366056;0.036418077;0.03623461;0.036057513;0.043946698;0.043641511;0.043347944;
0.043064244;0.04278899;0.042520996;0.042259291;0.042003077;0.041751694;0.041504614;0.041261394;0.041021679;0.040785182;
0.040551666;0.040320944;0.040092852;0.039867271;0.039644092;0.039423235;0.039204631;0.038988221;0.038773969;0.038561836;
0.038351808;0.038143869;0.037938021;0.037734274;0.037532661;0.037333235;0.03713607;0.036941297;0.036749132;0.036559932;
0.036374394;0.036194149;0.036024719;0.043970399;0.043665048;0.043371309;0.043087449;0.042812027;0.042543866;0.042281993;
0.042025611;0.041774064;0.041526817;0.041283429;0.041043554;0.040806893;0.040573213;0.040342327;0.040114075;0.039888334;
0.039664995;0.039443977;0.039225213;0.039008643;0.038794231;0.038581941;0.038371753;0.038163655;0.037957646;0.037753738;
0.037551962;0.037352365;0.037155028;0.03696008;0.036767721;0.036578309;0.036392521;0.036211904;0.036041636;0.043978333;
0.043672927;0.043379135;0.043095216;0.042819738;0.042551521;0.042289592;0.042033155;0.041781552;0.041534249;0.041290808;
0.041050877;0.040814161;0.040580429;0.040349487;0.040121183;0.039895386;0.039671995;0.039450925;0.039232105;0.039015483;
0.038801018;0.038588673;0.038378432;0.038170282;0.037964217;0.037760258;0.037558425;0.037358772;0.03716138;0.036966369;
0.036773946;0.036584463;0.03639859;0.036217853;0.036047313;0.043981347;0.043675918;0.043382104;0.043098167;0.042822666;
0.042554431;0.042292479;0.042036019;0.041784398;0.041537073;0.04129361;0.041053656;0.040816922;0.040583167;0.040352207;
0.04012388;0.039898064;0.039674651;0.039453562;0.03923472;0.03901808;0.038803592;0.038591232;0.038380969;0.038172796;
0.037966713;0.037762731;0.03756088;0.037361205;0.03716379;0.036968756;0.036776312;0.036586802;0.036400896;0.036220115;
0.03604947;0.043982532;0.043677095;0.043383274;0.043099329;0.042823821;0.042555574;0.042293616;0.042037148;0.041785516;
0.041538183;0.041294713;0.041054752;0.04081801;0.040584248;0.040353276;0.040124942;0.039899118;0.039675698;0.039454598;
0.039235752;0.0390191;0.038804609;0.038592238;0.038381968;0.038173787;0.037967693;0.037763704;0.037561845;0.037362162;
0.037164737;0.036969695;0.036777243;0.036587723;0.036401801;0.036221001;0.03605032;0.043983005;0.043677565;0.04338374;
0.043099791;0.04282428;0.042556029;0.042294066;0.042037595;0.041785963;0.041538626;0.041295152;0.041055188;0.040818442;
0.040584676;0.040353704;0.040125366;0.039899539;0.039676115;0.039455011;0.039236162;0.03901951;0.038805012;0.038592637;
0.038382363;0.038174182;0.037968084;0.037764095;0.037562229;0.037362546;0.037165117;0.036970071;0.036777612;0.036588088;
0.036402162;0.036221359;0.036050659;0.043983191;0.043677755;0.043383926;0.043099977;0.042824462;0.042556211;0.042294249;
0.042037778;0.041786142;0.041538805;0.041295331;0.041055363;0.040818613;0.040584847;0.040353876;0.040125538;0.039899707;
0.039676283;0.039455179;0.039236326;0.039019674;0.038805176;0.038592797;0.038382523;0.038174339;0.037968244;0.037764248;
0.037562385;0.037362698;0.037165269;0.036970221;0.036777761;0.036588237;0.036402307;0.0362215;0.036050793;0.043983269;
0.043677829;0.043384004;0.043100052;0.042824537;0.042556286;0.042294323;0.042037848;0.041786212;0.041538876;0.041295402;
0.041055433;0.040818684;0.040584918;0.040353943;0.040125605;0.039899774;0.03967635;0.039455242;0.039236393;0.039019737;
       };
      };
      float_Data @[9] {
       name="d_adapt";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [540] 0;0.0019928864;0.0036173703;0.0049391752;0.0060133687;0.0068882317;0.0076100817;0.0082290173;0.0088079767;0.0094498033;
0.010425528;0.01333289;-0.0086146276;-0.006684545;-0.0050997646;-0.0037988238;-0.0027305339;-0.0018511006;-0.0011211168;-0.00050271244;
4.3311615e-05;0.00056258094;0.0011223268;0.0018702388;0.0033872959;0.013202839;-0.016593693;-0.014721781;-0.013173774;-0.011892139;
-0.010829145;-0.0099445451;-0.0092034349;-0.0085744765;-0.0080285771;-0.0075375745;-0.0070717391;-0.0065934337;-0.0060383757;-0.0052432898;
-0.0034785743;0.011915274;-0.023761684;-0.021942031;-0.020427058;-0.019162754;-0.018104417;-0.017214682;-0.016461795;-0.015818298;
-0.015260085;-0.014765771;-0.014315984;-0.0138922;-0.013474485;-0.01303663;-0.012533558;-0.011858766;-0.010626055;-0.0054945867;
-0.02988008;-0.028105034;-0.026618257;-0.025368741;-0.024314327;-0.023419952;-0.022656167;-0.021997986;-0.021424089;-0.020916266;
-0.020458972;-0.020038826;-0.019643981;-0.019263234;-0.018884676;-0.018493289;-0.018065769;-0.01755663;-0.016849231;-0.015489412;
-0.008900716;-0.034886014;-0.033147462;-0.031683754;-0.030446332;-0.0293951;-0.028496809;-0.027723711;-0.027052509;-0.026463604;
-0.025940536;-0.025469562;-0.025039257;-0.024640104;-0.024264062;-0.023904121;-0.023553766;-0.023206361;-0.022854187;-0.022486812;
-0.022087626;-0.021625193;-0.021026121;-0.020056436;-0.017341316;-0.038680524;-0.036969632;-0.035523415;-0.034295157;-0.03324632;
-0.032345004;-0.031564675;-0.030883178;-0.030282013;-0.029745763;-0.029261662;-0.028819209;-0.028409809;-0.028026422;-0.02766324;
-0.027315376;-0.026978591;-0.026648998;-0.026322763;-0.025995722;-0.025662798;-0.02531703;-0.024947602;-0.024535406;-0.024040975;
-0.023363164;-0.02212905;-0.01721303;-0.04120145;-0.039508939;-0.038074337;-0.036852166;-0.03580492;-0.034901571;-0.034116372;
-0.033427883;-0.032818258;-0.032272685;-0.031778939;-0.031326998;-0.030908691;-0.030517379;-0.030147662;-0.029795116;-0.029456068;
-0.029127393;-0.028806344;-0.028490374;-0.028176971;-0.027863434;-0.027546592;-0.027222341;-0.02688483;-0.026524851;-0.026126245;
-0.025656555;-0.025037017;-0.024006672;-0.020913057;-0.042686921;-0.041005239;-0.039577484;-0.038358901;-0.03731259;-0.036408037;
-0.035619944;-0.034927286;-0.03431258;-0.033761349;-0.033261649;-0.032803707;-0.032379564;-0.031982768;-0.031608086;-0.031251263;
-0.030908812;-0.030577837;-0.030255875;-0.029940773;-0.02963056;-0.029323341;-0.029017152;-0.028709808;-0.028398657;-0.02808021;
-0.027749481;-0.027398687;-0.027014479;-0.026571056;-0.026009571;-0.025155777;-0.023158366;-0.0019894571;-0.043465063;-0.041789059;
-0.040364888;-0.039148185;-0.038102359;-0.037197173;-0.036407564;-0.035712708;-0.035095315;-0.034541074;-0.034038186;-0.033576995;
-0.033149652;-0.032749783;-0.032372236;-0.03201282;-0.031668127;-0.031335339;-0.031012094;-0.030696364;-0.030386351;-0.030080389;
-0.029776849;-0.029474029;-0.02917002;-0.028862501;-0.028548442;-0.028223557;-0.027881298;-0.027510745;-0.027091632;-0.026580522;
-0.025861528;-0.024478303;-0.017841967;-0.043763652;-0.042089824;-0.040667031;-0.039451048;-0.038405411;-0.037499979;-0.036709785;
-0.036014084;-0.03539566;-0.034840252;-0.034336131;-0.033873681;-0.033445083;-0.033044003;-0.032665309;-0.032304846;-0.031959217;
-0.03162564;-0.031301778;-0.03098565;-0.030675501;-0.030369738;-0.030066825;-0.0297652;-0.029463144;-0.029158646;-0.028849149;
-0.028531166;-0.028199574;-0.027846206;-0.027456786;-0.027003163;-0.026419437;-0.025501879;-0.023157177;-0.043946698;-0.042274203;
-0.040852252;-0.039636713;-0.038591187;-0.03768561;-0.036895055;-0.036198836;-0.035579775;-0.035023656;-0.034518771;-0.034055542;
-0.033626173;-0.033224341;-0.032844935;-0.032483812;-0.032137591;-0.031803507;-0.031479239;-0.031162823;-0.030852539;-0.030546831;
-0.030244213;-0.029943189;-0.029642155;-0.02933925;-0.029032163;-0.028717801;-0.028391724;-0.028047036;-0.027672075;-0.027244834;
-0.026717087;-0.025955573;-0.024397777;-0.015022404;-0.043970399;-0.042298075;-0.040876232;-0.039660748;-0.038615242;-0.037709642;
-0.036919042;-0.036222756;-0.035603613;-0.035047401;-0.034542419;-0.03407909;-0.033649616;-0.033247687;-0.032868188;-0.03250698;
-0.032160684;-0.03182653;-0.031502206;-0.031185754;-0.03087545;-0.030569743;-0.030267159;-0.029966207;-0.029665297;-0.029362584;
-0.029055789;-0.028741866;-0.028416453;-0.028072802;-0.027699543;-0.027275339;-0.026753804;-0.026008405;-0.024518896;-0.016315641;
-0.043978333;-0.042306066;-0.040884264;-0.039668798;-0.038623296;-0.037717693;-0.036927078;-0.036230769;-0.035611596;-0.035055354;
-0.034550335;-0.034086972;-0.033657469;-0.033255506;-0.032875977;-0.032514736;-0.032168414;-0.031834237;-0.031509899;-0.03119343;
-0.03088312;-0.030577416;-0.03027484;-0.029973913;-0.029673044;-0.029370395;-0.029063696;-0.028749919;-0.028424725;-0.028081417;
-0.02770872;-0.027285518;-0.026766015;-0.026025843;-0.024558006;-0.016699322;-0.043981347;-0.042309102;-0.040887311;-0.039671853;
-0.038626354;-0.037720747;-0.036930125;-0.036233809;-0.035614625;-0.035058372;-0.034553342;-0.034089968;-0.033660449;-0.033258472;
-0.032878932;-0.032517683;-0.03217135;-0.031837165;-0.031512819;-0.031196345;-0.030886034;-0.030580329;-0.030277757;-0.029976839;
-0.029675985;-0.029373361;-0.029066699;-0.028752977;-0.028427865;-0.028084688;-0.027712204;-0.027289378;-0.026770642;-0.026032431;
-0.024572674;-0.016839238;-0.043982532;-0.042310297;-0.040888511;-0.039673056;-0.038627557;-0.037721951;-0.036931325;-0.036235005;
-0.03561582;-0.03505956;-0.034554526;-0.034091145;-0.033661623;-0.033259641;-0.032880094;-0.032518841;-0.032172505;-0.031838316;
-0.031513967;-0.031197492;-0.030887179;-0.030581474;-0.030278904;-0.02997799;-0.029677141;-0.029374527;-0.02906788;-0.028754178;
-0.028429102;-0.028085975;-0.027713573;-0.027290896;-0.02677246;-0.02603502;-0.024578419;-0.016893461;-0.043983005;-0.042310771;
-0.040888991;-0.039673537;-0.038628034;-0.037722427;-0.036931805;-0.036235482;-0.035616294;-0.035060033;-0.034554999;-0.034091614;
-0.033662088;-0.033260107;-0.03288056;-0.032519303;-0.032172967;-0.031838778;-0.031514425;-0.03119795;-0.030887635;-0.030581931;
-0.030279363;-0.029978449;-0.029677603;-0.029374992;-0.029068351;-0.028754659;-0.028429594;-0.028086487;-0.027714118;-0.027291501;
-0.026773185;-0.02603605;-0.024580706;-0.016914947;-0.043983191;-0.042310964;-0.040889181;-0.039673727;-0.038628228;-0.037722621;
-0.036931995;-0.036235671;-0.035616484;-0.035060223;-0.034555186;-0.0340918;-0.033662274;-0.033260293;-0.032880746;-0.03251949;
-0.032173149;-0.031838961;-0.031514607;-0.031198133;-0.030887818;-0.030582113;-0.030279545;-0.029978633;-0.029677788;-0.029375179;
-0.029068539;-0.028754851;-0.028429791;-0.028086692;-0.027714338;-0.027291743;-0.026773475;-0.026036464;-0.02458162;-0.016923532;
-0.043983269;-0.042311039;-0.040889259;-0.039673805;-0.038628306;-0.037722699;-0.036932074;-0.03623575;-0.035616562;-0.035060298;
-0.034555264;-0.034091879;-0.033662349;-0.033260368;-0.03288082;-0.032519564;-0.032173224;-0.031839035;-0.031514682;-0.031198207;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="AdExNormData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[2].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="time";
     var_type=T_Real;
     real_val=539;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="step";
     var_type=T_Int;
     int_val=540;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="dt_integ";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="current_clamp";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="clamp current to a given value -- bypass e and i channel integration";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="cur_clamp_val";
     var_type=T_Real;
     real_val=0.1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nA current clamp value (1e-9 default)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="stim_on";
     var_type=T_Real;
     real_val=20;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms time when to turn on stimulus (current clamp only)";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="v_m";
     var_type=T_Real;
     real_val=0.5032961496892299;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="g_e";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="g_i";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="I_net";
     var_type=T_Real;
     real_val=0.006579623594558034;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="I_chan";
     var_type=T_Real;
     real_val=0.09980907067386635;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="I_leak";
     var_type=T_Real;
     real_val=-0.06028639398920047;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="I_spike";
     var_type=T_Real;
     real_val=0.006293339178031633;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="adapt";
     var_type=T_Real;
     real_val=0.03901973805700814;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="d_adapt";
     var_type=T_Real;
     real_val=-0.03119820640291275;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[16] {
     name="time_steps";
     var_type=T_Int;
     int_val=540;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[17] {
     name="g_e_mean";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[18] {
     name="g_e_var";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="1 for high conductance";
     init_from=NULL;
    };
    ProgVar @[19] {
     name="g_e_dt";
     var_type=T_Real;
     real_val=0.3665689149560117;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="time constant for integrating g_e";
     init_from=NULL;
    };
    ProgVar @[20] {
     name="g_e_dt_time";
     var_type=T_Real;
     real_val=2.728;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 2.728 def";
     init_from=NULL;
    };
    ProgVar @[21] {
     name="g_i_mean";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="3 for high conductance";
     init_from=NULL;
    };
    ProgVar @[22] {
     name="g_i_var";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[23] {
     name="g_i_dt";
     var_type=T_Real;
     real_val=0.09532888465204957;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[24] {
     name="g_i_dt_time";
     var_type=T_Real;
     real_val=10.49;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 10.49 def";
     init_from=NULL;
    };
    ProgVar @[25] {
     name="C_memb_cap";
     var_type=T_Real;
     real_val=2.81;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="pF  281 def";
     init_from=NULL;
    };
    ProgVar @[26] {
     name="v_m_dt";
     var_type=T_Real;
     real_val=0.3558718861209965;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="1/C";
     init_from=NULL;
    };
    ProgVar @[27] {
     name="g_bar_l";
     var_type=T_Real;
     real_val=0.3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[28] {
     name="g_bar_e";
     var_type=T_Real;
     real_val=0.2;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[29] {
     name="g_bar_i";
     var_type=T_Real;
     real_val=0.2;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 30 def";
     init_from=NULL;
    };
    ProgVar @[30] {
     name="e_rev_l";
     var_type=T_Real;
     real_val=0.3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -70.6 def  E_L in orig";
     init_from=NULL;
    };
    ProgVar @[31] {
     name="e_rev_e";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV 0 def  E_e in orig";
     init_from=NULL;
    };
    ProgVar @[32] {
     name="e_rev_i";
     var_type=T_Real;
     real_val=0.25;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -75  def  E_i in orig";
     init_from=NULL;
    };
    ProgVar @[33] {
     name="act_thr";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV -50.4 def -- V_t in orig";
     init_from=NULL;
    };
    ProgVar @[34] {
     name="spike_thr";
     var_type=T_Real;
     real_val=1.2;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[35] {
     name="spike_reset";
     var_type=T_Real;
     real_val=0.3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="set to same as e_rev_l";
     init_from=NULL;
    };
    ProgVar @[36] {
     name="act_thr_slope";
     var_type=T_Real;
     real_val=0.02;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="mV 2 def -- delta T in orig";
     init_from=NULL;
    };
    ProgVar @[37] {
     name="adapt_dt_time";
     var_type=T_Real;
     real_val=144;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="ms 144 def -- tau_w in orig";
     init_from=NULL;
    };
    ProgVar @[38] {
     name="adapt_dt";
     var_type=T_Real;
     real_val=0.006944444444444444;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[39] {
     name="adapt_vm_gain";
     var_type=T_Real;
     real_val=0.04;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nS 4 def -- a in orig";
     init_from=NULL;
    };
    ProgVar @[40] {
     name="adapt_spike_gain";
     var_type=T_Real;
     real_val=0.00805;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="nA 0.0805 def -- b in orig";
     init_from=NULL;
    };
    ProgVar @[41] {
     name="i";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[2].vars[0]$$;
    };
    AssignExpr @[1] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[7]$$;
     expr {
      expr="e_rev_l";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[14]$$;
     expr {
      expr="0";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[8]$$;
     expr {
      expr="g_e_mean";
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[9]$$;
     expr {
      expr="g_i_mean";
     };
    };
    AssignExpr @[5] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[19]$$;
     expr {
      expr="1.0 / g_e_dt_time";
     };
    };
    AssignExpr @[6] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[23]$$;
     expr {
      expr="1.0 / g_i_dt_time";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[26]$$;
     expr {
      expr="1.0 / C_memb_cap";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[2].vars[38]$$;
     expr {
      expr="1.0 / adapt_dt_time";
     };
    };
    ForLoop @[9] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[1]$$;
       expr {
	expr="((float)step * dt_integ)";
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[2].vars[8]$;
       expr {
	expr="g_e + dt_integ * (g_e_dt * (g_e_mean - g_e) + g_e_var * Random::Gauss(1.0))";
       };
      };
      AssignExpr @[2] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[2].vars[9]$;
       expr {
	expr="g_i + dt_integ * (g_i_dt * (g_i_mean - g_i) + g_i_var * Random::Gauss(1.0))";
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[12]$$;
       expr {
	expr="g_bar_l * (e_rev_l - v_m)";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[13]$$;
       expr {
	expr="g_bar_l * act_thr_slope * exp((v_m - act_thr) / act_thr_slope)";
       };
      };
      IfElse @[5] {
       desc=;
       flags=;
       cond {
	expr="current_clamp";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[2].vars[11]$$;
	 expr {
	  expr="time > stim_on ? cur_clamp_val: 0.0";
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[2].vars[11]$;
	 expr {
	  expr=" g_e * g_bar_e * (e_rev_e - v_m) + g_i * g_bar_i * (e_rev_i - v_m)";
	 };
	};
       };
      };
      AssignExpr @[6] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[10]$$;
       expr {
	expr="I_leak + I_chan + I_spike - adapt";
       };
      };
      AssignExpr @[7] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[15]$$;
       expr {
	expr="adapt_vm_gain * (v_m - e_rev_l) - adapt";
       };
      };
      AssignExpr @[8] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[2].vars[7]$;
       expr {
	expr="v_m + dt_integ * v_m_dt * I_net";
       };
      };
      If @[9] {
       desc=;
       flags=;
       cond {
	expr="v_m > spike_thr";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	VarIncr @[0] {
	 desc=;
	 flags=;
	 var=$.projects[0].programs[2].vars[14]$;
	 expr {
	  expr="adapt_spike_gain";
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[2].vars[7]$;
	 expr {
	  expr="spike_reset";
	 };
	};
       };
      };
      AssignExpr @[10] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[2].vars[14]$;
       expr {
	expr="adapt + dt_integ * adapt_dt * d_adapt";
       };
      };
      AddNewDataRow @[11] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[0]$;
      };
      DataVarProg @[12] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[2].vars[11]$;
       var_2=$.projects[0].programs[2].vars[10]$;
       var_3=$.projects[0].programs[2].vars[13]$;
       var_4=$.projects[0].programs[2].vars[1]$;
      };
      DataVarProg @[13] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[2].vars[7]$;
       var_2=$.projects[0].programs[2].vars[8]$;
       var_3=$.projects[0].programs[2].vars[9]$;
       var_4=$.projects[0].programs[2].vars[12]$;
      };
      DataVarProg @[14] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[0]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[2].vars[14]$;
       var_2=$.projects[0].programs[2].vars[15]$;
       var_3=NULL;
       var_4=NULL;
      };
      DoneWritingDataRow @[15] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[0]$;
      };
     };
     init {
      expr="step = 0";
     };
     test {
      expr="step < time_steps";
     };
     iter {
      expr="step++";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[3] {
   name="MeasActFun";
   short_nm="MsctFn";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="ActFunData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="s_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[1] {
       name="i_thr_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[2] {
       name="i_thr";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[3] {
       name="nvar";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      int_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name="rep";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[5] {
       name="hz";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[6] {
       name="hz_norm";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[7] {
       name="act_eq";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[8] {
       name="vm_eq";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
      float_Data @[9] {
       name="g_e_lin";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    DataTable @[1] {
     name="ActFun_Group";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="i_thr_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0;0;0;0;0;0;0;0;0;0;
0;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.60000002;0.60000002;0.60000002;0.60000002;
0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.69999999;0.69999999;0.69999999;
0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.89999998;
0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;
       };
      };
      float_Data @[1] {
       name="s_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0;0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;
1;0;0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;
0.89999998;1;0;0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;
0.80000001;0.89999998;1;0;0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;
0.69999999;0.80000001;0.89999998;1;0;0.1;0.2;0.30000001;0.40000001;0.5;
0.60000002;0.69999999;0.80000001;0.89999998;1;0;0.1;0.2;0.30000001;0.40000001;
0.5;0.60000002;0.69999999;0.80000001;0.89999998;1;0;0.1;0.2;0.30000001;
0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;1;0;0.1;0.2;
0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;1;0;0.1;
0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;1;0;
0.1;0.2;0.30000001;0.40000001;0.5;0.60000002;0.69999999;0.80000001;0.89999998;1;
       };
      };
      int_Data @[2] {
       name="N";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
20;20;20;20;20;20;20;20;20;20;
       };
      };
      float_Data @[3] {
       name="hz";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 1.8;2.4000001;57.900002;82.900002;107.3;130.39999;152.60001;172.89999;196.3;210.8;
238.60001;0;0;34.900002;62.400002;88.400002;112.6;135.7;158.10001;179.3;
199.60001;219.8;0.1;0;4.6999998;34.5;63.900002;90.300003;115.3;139;
161.89999;184.5;203.2;0;0;0;2.4000001;31.700001;62.200001;89.900002;
116.3;140.7;164.3;187.60001;0;0;0;0;1;27.700001;
58.299999;87.800003;114.9;141;165.8;0;0;0;0;0;
0.1;22.1;53.700001;83.300003;112.2;139.60001;0;0;0;0;
0;0;0;15.9;47;77.900002;107.9;0.1;0;0;
0;0;0;0;0;9.1000004;39.799999;70.699997;0.1;0;
0;0;0;0;0;0;0;3.5999999;31.299999;0;
0;0;0;0;0;0;0;0;0;0.30000001;
       };
      };
      float_Data @[4] {
       name="hz_1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0.32118204;0.31119466;0.53262019;0.30693731;0.26257834;0.34335804;0.2937955;0.30693737;0.16383561;0.4679181;
0.2937955;0;0;0.44662482;0.39999998;0.31119466;0.25546655;0.33324561;0.3395043;0.36346287;
0.23395908;0.35243511;0.099999994;0;0.36346284;0.35168767;0.3966969;0.30000001;0.3634629;0.3077935;
0.30693737;0.32036161;0.33717087;0;0;0;0.42550281;0.6202715;0.50052601;0.3966969;
0.46509758;0.3634629;0.44188592;0.27529889;0;0;0;0;0.22941573;0.60306233;
0.56707931;0.38113397;0.33950427;0.36992174;0.32118201;0;0;0;0;0;
0.099999994;0.51247591;0.46509758;0.58534741;0.40781829;0.44956118;0;0;0;0;
0;0;0;0.42239913;0.53311396;0.57077968;0.49150681;0.099999994;0;0;
0;0;0;0;0;0.46960223;0.56007516;0.44188586;0.099999994;0;
0;0;0;0;0;0;0;0.42550278;0.4872047;0;
0;0;0;0;0;0;0;0;0;0.16383561;
       };
      };
      float_Data @[5] {
       name="hz_norm";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0.0072000003;0.0096000005;0.23159996;0.33160001;0.42920002;0.52159995;0.61039996;0.69160002;0.78520012;0.84320003;
0.95439994;0;0;0.13959999;0.24959998;0.35360003;0.45040002;0.54280007;0.63239998;0.71720004;
0.79840004;0.87919998;0.00040000002;0;0.018800002;0.138;0.25560004;0.36120003;0.46119994;0.55600011;
0.64759994;0.73800004;0.81279993;0;0;0;0.0096000005;0.1268;0.24879999;0.35960004;
0.46520001;0.56280005;0.65719998;0.75040001;0;0;0;0;0.0040000002;0.11079999;
0.23319998;0.35120004;0.45959997;0.56400001;0.66319996;0;0;0;0;0;
0.00040000002;0.088400006;0.2148;0.33320001;0.4488;0.55840003;0;0;0;0;
0;0;0;0.063600004;0.18800001;0.31159997;0.43160003;0.00040000002;0;0;
0;0;0;0;0;0.036400001;0.15920001;0.28280002;0.00040000002;0;
0;0;0;0;0;0;0;0.014400001;0.1252;0;
0;0;0;0;0;0;0;0;0;0.0012000001;
       };
      };
      float_Data @[6] {
       name="hz_norm_1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0.0012847281;0.0012447786;0.0021304798;0.0012277488;0.0010503145;0.0013734318;0.0011751815;0.0012277457;0.0006553437;0.0018716726;
0.0011751787;0;0;0.0017864981;0.0016000015;0.0012447793;0.0010218653;0.0013329807;0.0013580153;0.0014538522;
0.00093583803;0.0014097432;0.00039999999;0;0.0014538515;0.0014067496;0.0015867879;0.0011999998;0.0014538507;0.0012311749;
0.001227752;0.0012814492;0.0013486804;0;0;0;0.0017020112;0.0024810866;0.0020021053;0.0015867879;
0.0018603909;0.0014538516;0.0017675421;0.0011011922;0;0;0;0;0.00091766304;0.0024122496;
0.0022683165;0.0015245357;0.0013580156;0.0014796866;0.0012847254;0;0;0;0;0;
0.0003999999;0.0020499041;0.0018603898;0.0023413894;0.0016312726;0.0017982444;0;0;0;0;
0;0;0;0.0016895965;0.0021324563;0.0022831196;0.0019660268;0.00039999999;0;0;
0;0;0;0;0;0.0018784088;0.0022403011;0.0017675429;0.00039999999;0;
0;0;0;0;0;0;0;0.0017020111;0.0019488186;0;
0;0;0;0;0;0;0;0;0;0.00065534242;
       };
      };
      float_Data @[7] {
       name="vm_eq";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0.49999994;0.81249988;0.8846156;0.91666669;0.93478268;0.94642848;0.9545458;0.96052629;0.96511638;0.96874988;
0.97169816;0.30769238;0.5;0.60869575;0.67857146;0.72727275;0.7631579;0.79069787;0.81249988;0.83018863;
0.84482753;0.8571431;0.28260869;0.41071424;0.5;0.56578934;0.61627895;0.65625006;0.68867946;0.7155171;
0.73809522;0.75735289;0.77397257;0.27272731;0.36842105;0.44186053;0.5;0.54716974;0.58620679;0.61904782;
0.64705873;0.67123294;0.69230759;0.71084332;0.26744181;0.34374997;0.40566054;0.45689669;0.5;0.53676474;
0.56849319;0.59615391;0.62048179;0.64204532;0.66129029;0.26415095;0.3275862;0.38095239;0.42647067;0.46575347;
0.50000006;0.53012049;0.55681813;0.58064526;0.60204095;0.62135917;0.26190475;0.31617644;0.36301371;0.4038462;
0.43975911;0.47159094;0.5;0.52551019;0.54854381;0.56944454;0.58849555;0.26027396;0.30769238;0.34939763;
0.3863636;0.41935486;0.44897947;0.47572812;0.5;0.52212393;0.54237276;0.56097567;0.25903609;0.30113637;
0.33870971;0.37244895;0.40291268;0.43055549;0.45575231;0.47881356;0.5;0.51953125;0.53759396;0.25806457;
0.29591841;0.33009714;0.36111113;0.38938048;0.41525421;0.43902439;0.4609375;0.48120302;0.5;0.51748264;
       };
      };
      float_Data @[8] {
       name="act_eq";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0.0072144261;0.009617635;0.23100536;0.33122247;0.42863402;0.52092749;0.60859525;0.68953061;0.78331381;0.84022343;
0.95199049;9.4990086e-05;0;0.13975224;0.24916358;0.3525441;0.44929776;0.54199028;0.630844;0.7151596;
0.79596025;0.87539995;0.00010020028;0;0.01863246;0.13696799;0.2558499;0.36008623;0.46021023;0.55485672;
0.64604557;0.73515826;0.8111068;8.1125487e-05;0;0;0.0096184332;0.1269314;0.24860016;0.35835922;
0.46441206;0.56092989;0.65692592;0.74835014;7.4699397e-05;0;0;0;0.0040080138;0.11056663;
0.23206916;0.35074955;0.4582158;0.5621829;0.66176492;6.653303e-05;0;0;0;0;
0.00040080157;0.088559486;0.21465473;0.33229017;0.44793916;0.55714983;5.6312587e-05;0;0;0;
0;0;0;0.063721023;0.18780771;0.31142551;0.43147597;0.00010020028;0;0;
0;0;0;0;0;0.036266122;0.15872654;0.28266919;0.00020040055;0;
0;0;0;0;0;0;0;0.014428052;0.12438989;1.2424862e-05;
0;0;0;0;0;0;0;0;0;0.0012024043;
       };
      };
      float_Data @[9] {
       name="g_e_lin";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] 0;0.11;0.22;0.32999998;0.44;0.55000007;0.65999997;0.77000016;0.88;0.98999989;
1.1000001;0;0;0.11;0.22000003;0.32999998;0.44;0.55000007;0.65999991;0.77000016;
0.88;0.98999989;0;0;0;0.11000001;0.22;0.32999998;0.44000006;0.55000007;
0.65999997;0.77000016;0.88;0;0;0;0;0.11;0.22;0.32999998;
0.44;0.55000007;0.65999991;0.77000016;0;0;0;0;0;0.11;
0.22000003;0.32999995;0.44;0.55000007;0.65999997;0;0;0;0;0;
0;0.11000003;0.22;0.32999998;0.44;0.55000007;0;0;0;0;
0;0;0;0.10999998;0.22;0.32999995;0.44;0;0;0;
0;0;0;0;0;0.11000003;0.22;0.32999998;0;0;
0;0;0;0;0;0;0;0.10999998;0.22;0;
0;0;0;0;0;0;0;0;0;0.11000003;
       };
      };
      float_Data @[10] {
       name="i_thr";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [110] -0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;-0.23999996;
-0.23999996;-0.03999998;-0.03999998;-0.03999998;-0.03999998;-0.03999998;-0.03999998;-0.03999998;-0.03999998;-0.03999998;
-0.03999998;-0.03999998;0.16000003;0.16000003;0.16000003;0.16000003;0.16000003;0.16000003;0.16000003;0.16000003;
0.16000003;0.16000003;0.16000003;0.36000007;0.36000007;0.36000007;0.36000007;0.36000007;0.36000007;0.36000007;
0.36000007;0.36000007;0.36000007;0.36000007;0.56000006;0.56000006;0.56000006;0.56000006;0.56000006;0.56000006;
0.56000006;0.56000006;0.56000006;0.56000006;0.56000006;0.76000011;0.76000011;0.76000011;0.76000011;0.76000011;
0.76000011;0.76000011;0.76000011;0.76000011;0.76000011;0.76000011;0.95999986;0.95999986;0.95999986;0.95999986;
0.95999986;0.95999986;0.95999986;0.95999986;0.95999986;0.95999986;0.95999986;1.16;1.16;1.16;
1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.3600001;1.3600001;
1.3600001;1.3600001;1.3600001;1.3600001;1.3600001;1.3600001;1.3600001;1.3600001;1.3600001;1.5599997;
1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;1.5599997;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects[0].networks[0]$$;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="send_act";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc="sending unit activation";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="ActFunData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[3].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="s_act";
     var_type=T_Real;
     real_val=1.1;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="i_thr_act";
     var_type=T_Real;
     real_val=0.9999999999999999;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="activation value that should be at threshold, if cmp_ithr";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="i_act";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="i_thr";
     var_type=T_Real;
     real_val=1.559999942779541;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="vm_eq";
     var_type=T_Real;
     real_val=0.5174825191497803;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="act_eq";
     var_type=T_Real;
     real_val=6.399999280537472e-11;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="g_e_lin";
     var_type=T_Real;
     real_val=0.1100000292062759;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="g_e_thr";
     var_type=T_Real;
     real_val=0.508897;
     objs_ptr=0;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="nvar";
     var_type=T_Real;
     real_val=0.01;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="g_bar_e";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="g_bar_i";
     var_type=T_Real;
     real_val=1.559999942779541;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="spike_eq_gain";
     var_type=T_Real;
     real_val=4;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="value to get act_eq to match the hz computation -- 4 seems to work best";
     init_from=NULL;
    };
    ProgVar @[14] {
     name="act_gain";
     var_type=T_Real;
     real_val=1.1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="gain on the GELIN activation function to fit curves -- 1 seems good..";
     init_from=NULL;
    };
    ProgVar @[15] {
     name="rep";
     var_type=T_Int;
     int_val=20;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[16] {
     name="hz";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[17] {
     name="hz_norm";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[18] {
     name="cycles";
     var_type=T_Int;
     int_val=500;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[19] {
     name="reps";
     var_type=T_Int;
     int_val=20;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[20] {
     name="act_inc";
     var_type=T_Real;
     real_val=0.1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[21] {
     name="i_thr_act_inc";
     var_type=T_Real;
     real_val=0.1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="increment in i_thr_act";
     init_from=NULL;
    };
    ProgVar @[22] {
     name="act_max";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[23] {
     name="hz_max";
     var_type=T_Real;
     real_val=250;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[24] {
     name="cycle";
     var_type=T_Int;
     int_val=500;
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="current cycle of settling (local loop counter)";
     init_from=NULL;
    };
    ProgVar @[25] {
     name="monitor";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="for debugging";
     init_from=NULL;
    };
    ProgVar @[26] {
     name="Receiver";
     var_type=T_Object;
     object_type=LeabraLayer;
     object_val=.projects[0].networks[0].layers[2]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[27] {
     name="BioUnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.projects[0].networks[0].specs[4]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[28] {
     name="ActFun_Group";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[3].objs[1]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[29] {
     name="CycleOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[30] {
     name="i";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
    Function @[0] {
     desc=;
     flags=;
     name="OneRun";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="sact";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="iact";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name=;
      el_typ=ProgVars;
      el_def=0;
      ProgVars @[0] {
       desc=;
       flags=;
       local_vars {
	name=;
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="n_spike";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR|USED;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="i";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="cyc";
	 var_type=T_Int;
	 int_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR|USED;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      AssignExpr @[1] {
       desc=;
       flags=;
       result_var=.projects[0].programs[3].functions[0].fun_code[0].local_vars[0]$$;
       expr {
	expr="0";
       };
      };
      NetCounterInit @[2] {
       desc="initialize local cycle counter and corresponding counter on network";
       flags=;
       network_var=.projects[0].programs[3].args[0]$$;
       local_ctr_var=.projects[0].programs[3].vars[24]$$;
       counter=Network::cycle;
       update_after=1;
      };
      MethodCall @[3] {
       desc="resets input data, before getting new external inputs data from apply inputs call";
       flags=;
       result_var=NULL;
       obj=$.projects[0].programs[3].args[0]$;
       method=Network::Init_InputData;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      MethodCall @[4] {
       desc="initializes various counters at start of settling";
       flags=;
       result_var=NULL;
       obj=$.projects[0].programs[3].args[0]$;
       method=LeabraNetwork::Settle_Init;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      If @[5] {
       desc=;
       flags=;
       cond {
	expr="monitor";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	ResetDataRows @[0] {
	 desc=;
	 flags=;
	 data_var=.projects[0].programs[3].vars[29]$$;
	};
	MethodCall @[1] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$.projects[0].programs[3].vars[29]$;
	 method=taBase::StructUpdate;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=bool;
	   type="bool";
	   name="begin";
	   required=1;
	   def_val=;
	   expr {
	    expr="true";
	   };
	  };
	 };
	};
       };
      };
      ForLoop @[6] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	MemberAssign @[0] {
	 desc="set to network";
	 flags=;
	 obj=$.projects[0].programs[3].args[0]$;
	 path="layers[0].units[0].act";
	 expr {
	  expr="sact";
	 };
	 update_after=0;
	};
	MemberAssign @[1] {
	 desc="set to network";
	 flags=;
	 obj=$.projects[0].programs[3].args[0]$;
	 path="layers[1].units[0].act";
	 expr {
	  expr="iact";
	 };
	 update_after=0;
	};
	MethodCall @[2] {
	 desc="this does all the standard leabra processing for one cycle of activation updating";
	 flags=;
	 result_var=NULL;
	 obj=$.projects[0].programs[3].args[0]$;
	 method=LeabraNetwork::Cycle_Run;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	 };
	};
	If @[3] {
	 desc=;
	 flags=;
	 cond {
	  expr="monitor";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  ProgramCall @[0] {
	   desc=;
	   flags=;
	   prog_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=Network;
	     type="LeabraNetwork*";
	     name="network";
	     required=1;
	     def_val=;
	     expr {
	      expr="network";
	     };
	    };
	   };
	   target=.projects[0].programs.gp[0][2]$$;
	   targ_ld_init="*LeabraCycleMonitor*";
	  };
	 };
	};
	If @[4] {
	 desc=;
	 flags=;
	 cond {
	  expr="Receiver.units[0].act > .5";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$.projects[0].programs[3].functions[0].fun_code[0].local_vars[0]$;
	   expr {
	    expr="1";
	   };
	  };
	 };
	};
	NetCounterIncr @[5] {
	 desc="increment cycle counter (also on network)";
	 flags=;
	 network_var=$.projects[0].programs[3].args[0]$;
	 local_ctr_var=$.projects[0].programs[3].vars[24]$;
	 counter=Network::cycle;
	 update_after=1;
	};
       };
       init {
	expr="cyc = 0";
       };
       test {
	expr="cyc < cycles";
       };
       iter {
	expr="cyc++";
       };
      };
      If @[7] {
       desc=;
       flags=;
       cond {
	expr="monitor";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	MethodCall @[0] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$.projects[0].programs[3].vars[29]$;
	 method=taBase::StructUpdate;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=bool;
	   type="bool";
	   name="begin";
	   required=1;
	   def_val=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	};
	MiscCall @[1] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::ProcessEvents;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	 };
	};
       };
      };
      ReturnExpr @[8] {
       desc=;
       flags=;
       expr {
	expr="n_spike";
       };
      };
     };
    };
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[3].vars[1]$$;
    };
    MemberAssign @[1] {
     desc=;
     flags=;
     obj=.projects[0].programs[3].vars[27]$$;
     path="noise.var";
     expr {
      expr="nvar";
     };
     update_after=1;
    };
    MemberAssign @[2] {
     desc=;
     flags=;
     obj=$.projects[0].programs[3].vars[27]$;
     path="g_bar.e";
     expr {
      expr="g_bar_e";
     };
     update_after=1;
    };
    MemberAssign @[3] {
     desc=;
     flags=;
     obj=$.projects[0].programs[3].vars[27]$;
     path="spike.eq_gain";
     expr {
      expr="spike_eq_gain";
     };
     update_after=1;
    };
    MemberAssign @[4] {
     desc=;
     flags=;
     obj=$.projects[0].programs[3].vars[27]$;
     path="act.gain";
     expr {
      expr="act_gain";
     };
     update_after=1;
    };
    ForLoop @[5] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      MemberAssign @[0] {
       desc=;
       flags=;
       obj=.projects[0].programs[3].vars[26]$$;
       path="units[0].net";
       expr {
	expr="i_thr_act";
       };
       update_after=0;
      };
      MemberAssign @[1] {
       desc=;
       flags=;
       obj=$.projects[0].programs[3].vars[27]$;
       path="g_bar.i";
       expr {
	expr="1";
       };
       update_after=1;
      };
      MethodCall @[2] {
       desc=;
       flags=;
       result_var=.projects[0].programs[3].vars[5]$$;
       obj=$.projects[0].programs[3].vars[27]$;
       method=LeabraUnitSpec::Compute_IThresh;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=LeabraUnit_ptr;
	 type="LeabraUnit*";
	 name="u";
	 required=1;
	 def_val=;
	 expr {
	  expr="Receiver.units[0]";
	 };
	};
	ProgArg @[1] {
	 arg_type=LeabraNetwork_ptr;
	 type="LeabraNetwork*";
	 name="net";
	 required=1;
	 def_val=;
	 expr {
	  expr="network";
	 };
	};
       };
      };
      AssignExpr @[3] {
       desc=;
       flags=;
       result_var=.projects[0].programs[3].vars[12]$$;
       expr {
	expr="i_thr";
       };
      };
      AssignExpr @[4] {
       desc=;
       flags=;
       result_var=.projects[0].programs[3].vars[4]$$;
       expr {
	expr="1";
       };
      };
      MemberAssign @[5] {
       desc=;
       flags=;
       obj=$.projects[0].programs[3].vars[27]$;
       path="g_bar.i";
       expr {
	expr="g_bar_i";
       };
       update_after=1;
      };
      ForLoop @[6] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	MemberAssign @[0] {
	 desc=;
	 flags=;
	 obj=$.projects[0].programs[3].vars[26]$;
	 path="units[0].net";
	 expr {
	  expr="s_act";
	 };
	 update_after=0;
	};
	MemberAssign @[1] {
	 desc=;
	 flags=;
	 obj=$.projects[0].programs[3].vars[26]$;
	 path="units[0].gc.i";
	 expr {
	  expr="i_thr";
	 };
	 update_after=0;
	};
	MethodCall @[2] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[3].vars[6]$$;
	 obj=$.projects[0].programs[3].vars[27]$;
	 method=LeabraUnitSpec::Compute_EqVm;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=LeabraUnit_ptr;
	   type="LeabraUnit*";
	   name="u";
	   required=1;
	   def_val=;
	   expr {
	    expr="Receiver.units[0]";
	   };
	  };
	 };
	};
	MemberAssign @[3] {
	 desc=;
	 flags=;
	 obj=$.projects[0].programs[3].vars[27]$;
	 path="act_fun";
	 expr {
	  expr="LeabraUnitSpec::GELIN";
	 };
	 update_after=1;
	};
	MethodCall @[4] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[3].vars[8]$$;
	 obj=$.projects[0].programs[3].vars[27]$;
	 method=LeabraUnitSpec::Compute_ActValFmVmVal_rate;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=LeabraUnit_ptr;
	   type="LeabraUnit*";
	   name="u";
	   required=1;
	   def_val=;
	   expr {
	    expr="Receiver.units[0]";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=float;
	   type="float";
	   name="vm_val";
	   required=1;
	   def_val=;
	   expr {
	    expr="vm_eq";
	   };
	  };
	 };
	};
	MemberAssign @[5] {
	 desc=;
	 flags=;
	 obj=$.projects[0].programs[3].vars[27]$;
	 path="act_fun";
	 expr {
	  expr="LeabraUnitSpec::SPIKE";
	 };
	 update_after=1;
	};
	ForLoop @[6] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  FunctionCall @[0] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[3].vars[16]$$;
	   fun=.projects[0].programs[3].functions[0]$$;
	   fun_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="sact";
	     required=1;
	     def_val=;
	     expr {
	      expr="s_act";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="iact";
	     required=1;
	     def_val=;
	     expr {
	      expr="i_act";
	     };
	    };
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[3].vars[16]$;
	   expr {
	    expr="hz / ((float)cycles / 1000.0)";
	   };
	  };
	  AssignExpr @[2] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[3].vars[17]$$;
	   expr {
	    expr="hz / hz_max";
	   };
	  };
	  AssignExpr @[3] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[3].vars[7]$$;
	   expr {
	    expr="Receiver.units[0].act_eq";
	   };
	  };
	  AddNewDataRow @[4] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[3].vars[1]$;
	  };
	  DataVarProg @[5] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[3].vars[1]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=.projects[0].programs[3].vars[2]$$;
	   var_2=.projects[0].programs[3].vars[15]$$;
	   var_3=$.projects[0].programs[3].vars[16]$;
	   var_4=$.projects[0].programs[3].vars[17]$;
	  };
	  DataVarProg @[6] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[3].vars[1]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=.projects[0].programs[3].vars[10]$$;
	   var_2=.projects[0].programs[3].vars[3]$$;
	   var_3=$.projects[0].programs[3].vars[6]$;
	   var_4=$.projects[0].programs[3].vars[5]$;
	  };
	  DataVarProg @[7] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[3].vars[1]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[3].vars[8]$;
	   var_2=$.projects[0].programs[3].vars[7]$;
	   var_3=$.projects[0].programs[3].vars[6]$;
	   var_4=$.projects[0].programs[3].vars[5]$;
	  };
	  DoneWritingDataRow @[8] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[3].vars[1]$;
	  };
	 };
	 init {
	  expr="rep = 0";
	 };
	 test {
	  expr="rep < reps";
	 };
	 iter {
	  expr="rep++";
	 };
	};
       };
       init {
	expr="s_act = 0";
       };
       test {
	expr="s_act <= act_max";
       };
       iter {
	expr="s_act += act_inc";
       };
      };
     };
     init {
      expr="i_thr_act = 0";
     };
     test {
      expr="i_thr_act <= 0.9";
     };
     iter {
      expr="i_thr_act += i_thr_act_inc";
     };
    };
    DataGroupProg @[6] {
     desc=;
     flags=;
     src_data_var=$.projects[0].programs[3].vars[1]$;
     dest_data_var=.projects[0].programs[3].vars[28]$$;
     group_spec {
      name="group_spec";
      ops {
       name=;
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="i_thr_act";
	agg {name="AggregateSpec_7": op=GROUP: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="s_act";
	agg {name="AggregateSpec_7": op=GROUP: rel={name="Relation_7": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="rep";
	agg {name="AggregateSpec_10": op=N: rel={name="Relation_10": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="hz";
	agg {name="AggregateSpec_11": op=MEAN: rel={name="Relation_11": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="hz";
	agg {name="AggregateSpec_11": op=SEM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="hz_norm";
	agg {name="AggregateSpec_12": op=MEAN: rel={name="Relation_12": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[6] {
	col_name="hz_norm";
	agg {name="AggregateSpec_12": op=SEM: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[7] {
	col_name="vm_eq";
	agg {name="AggregateSpec_12": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[8] {
	col_name="act_eq";
	agg {name="AggregateSpec_12": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[9] {
	col_name="g_e_lin";
	agg {name="AggregateSpec_12": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
       DataGroupEl @[10] {
	col_name="i_thr";
	agg {name="AggregateSpec_12": op=MEAN: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[4] {
   name="FitActFun";
   short_nm="FtctFn";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="FitRawData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="i_thr_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;0.5;
0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;
0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;0.60000002;
0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;
0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;0.69999999;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;
0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;0.89999998;
       };
      };
      float_Data @[1] {
       name="s_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
0;0.050000001;0.1;0.15000001;0.2;0.25;0.30000001;0.34999999;0.40000001;0.44999999;
0.5;0.55000001;0.60000002;0.64999998;0.69999999;0.75;0.80000001;0.85000002;0.89999998;0.94999999;
       };
      };
      int_Data @[2] {
       name="N";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
10;10;10;10;10;10;10;10;10;10;
       };
      };
      float_Data @[3] {
       name="hz";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 6.4000001;6.8000002;7.5999999;47.200001;58.799999;72;84;96.800003;107.6;118.4;
130.8;140.8;151.2;164.39999;172;185.2;195.2;204.39999;214.39999;225.60001;
0;0.40000001;0;27.6;39.200001;52;64;75.599998;90;100;
112.8;124;137.60001;146.8;157.60001;170;180.39999;190;200.8;210.39999;
0;0.40000001;0;7.1999998;16.799999;30.4;42;54;68.400002;80.800003;
94.800003;103.6;116.4;128.39999;140.39999;151.2;161.2;172.39999;184.8;193.60001;
0;0;0;0.40000001;2.4000001;10.8;18;29.6;43.200001;57.200001;
68;81.199997;94;105.6;118.8;133.2;141.2;152.8;166;176.8;
0;0;0;0;0;0.40000001;2.8;7.1999998;18.4;30;
41.599998;55.599998;67.599998;83.599998;93.599998;105.6;118.4;128.39999;144.8;156.8;
0;0;0;0;0;0;0;0.40000001;2.4000001;9.1999998;
18.799999;28.799999;42.400002;54.799999;68.400002;79.199997;93.199997;106.8;120.8;128.8;
0.40000001;0;0;0;0;0;0;0;0;0.40000001;
3.5999999;6.4000001;16.4;28.799999;40.400002;51.599998;64;78.800003;90;100.8;
0;0;0;0;0;0;0;0;0;0;
0;1.2;2.8;7.1999998;14.8;25.200001;35.200001;48;60;72.800003;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1.2;5.1999998;10.8;27.6;34.799999;45.200001;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1.2;6;7.5999999;19.6;
       };
      };
      float_Data @[4] {
       name="hz_1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 1.0666666;1.2;1.2578641;1.6653328;1.2;1.3333333;1.1925696;0.99777532;2.1039646;1.0666667;
0.85374993;1.3063945;1.5549206;1.2578641;1.0327955;1.0413667;0.99777532;1.2578641;1.4847372;1.0666667;
0;0.40000001;0;2.3437862;1.3063945;1.1925696;1.7888544;1.5143757;1.605546;1.5776212;
2.0483055;2.1499355;1.0666667;0.85374993;1.7074999;1.8135295;0.71802205;0.89442718;1.1623731;0.88443333;
0;0.39999995;0;0.99777526;1.1623731;1.8086213;0.66666663;1.3662601;1.7333333;2.7194772;
1.9821427;0.9333334;1.7333333;1.9275776;1.3920407;1.6653327;1.0413667;1.2578641;1.4360439;1.2220201;
0;0;0;0.39999995;0.65319723;1.7938167;1.0749677;1.8086213;2.0483055;1.5832456;
1.4605935;1.6918104;1.7126976;1.8086214;1.6918104;1.7938167;1.3399833;1.3063943;1.2292726;1.1623731;
0;0;0;0;0;0.40000001;1.0413665;1.4360439;1.7074999;1.4907119;
2.8095076;1.8330302;1.2578641;1.9275777;2.2469733;1.3597385;1.0666667;2.1039643;1.6653328;0.53333336;
0;0;0;0;0;0;0;0.40000001;0.88443321;1.4666666;
1.4666666;2.1333332;1.9955506;2.3132467;2.6964996;1.4360439;2.235074;1.6918103;0.99777532;1.8666666;
0.40000001;0;0;0;0;0;0;0;0;0.39999995;
0.71802193;1.3597386;1.2578641;1.5549206;1.392041;2.4184475;2.7968235;1.6918103;2;2.4440403;
0;0;0;0;0;0;0;0;0;0;
0;0.61101007;0.85374993;1.3063945;1.6918104;1.2;2.3701851;1.7888544;1.7888544;2.2150996;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.61101007;1.2;1.4666666;2.948446;2.6699977;2.6025627;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.61101007;1.8135295;1.8330302;1.7333333;
       };
      };
      float_Data @[5] {
       name="hz_norm";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0.031999998;0.033999998;0.037999999;0.23600002;0.29399997;0.36000004;0.42000002;0.48399997;0.53799999;0.59199995;
0.65399992;0.704;0.75599992;0.82200003;0.86000001;0.926;0.97600001;1.0220001;1.0719999;1.128;
0;0.0019999999;0;0.13800001;0.19600001;0.25999999;0.31999996;0.37800002;0.44999999;0.5;
0.56400001;0.62;0.6879999;0.73400003;0.78799999;0.85000002;0.90199995;0.94999993;1.0039999;1.0519999;
0;0.0019999999;0;0.035999998;0.084000006;0.152;0.21000001;0.26999998;0.34200001;0.40399998;
0.47399998;0.51800001;0.58199996;0.64199996;0.7019999;0.75600004;0.80600005;0.86200011;0.92399997;0.96800005;
0;0;0;0.0019999999;0.011999999;0.053999998;0.090000004;0.148;0.21600001;0.28599998;
0.33999997;0.40600005;0.47000003;0.528;0.59399998;0.66600001;0.70599997;0.76400006;0.83000004;0.884;
0;0;0;0;0;0.0019999999;0.013999999;0.035999998;0.092;0.14999999;
0.20799999;0.278;0.338;0.41800004;0.46799999;0.528;0.59199995;0.6419999;0.72399998;0.78399992;
0;0;0;0;0;0;0;0.0019999999;0.011999999;0.046;
0.093999997;0.14399999;0.21199998;0.27399999;0.34199995;0.396;0.46599999;0.53400004;0.60399997;0.64399993;
0.0019999999;0;0;0;0;0;0;0;0;0.0019999999;
0.017999999;0.031999998;0.081999995;0.14400001;0.20199999;0.25800002;0.31999999;0.39400005;0.44999999;0.50400001;
0;0;0;0;0;0;0;0;0;0;
0;0.0060000001;0.013999999;0.036000002;0.073999994;0.126;0.176;0.24000001;0.29999998;0.36399999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.0060000001;0.025999999;0.053999998;0.138;0.17399999;0.22600003;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.0060000001;0.029999997;0.037999999;0.098000005;
       };
      };
      float_Data @[6] {
       name="hz_norm_1";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0.0053333333;0.0059999996;0.0062893205;0.0083266636;0.0060000005;0.0066666664;0.0059628477;0.0049888752;0.010519828;0.0053333365;
0.0042687538;0.0065319734;0.0077745994;0.0062893187;0.0051639806;0.0052068345;0.0049888808;0.0062893145;0.0074236942;0.0053333277;
0;0.0019999999;0;0.011718931;0.006531972;0.0059628496;0.008944273;0.007571876;0.0080277296;0.0078881029;
0.010241529;0.010749677;0.0053333319;0.0042687454;0.0085374992;0.0090676462;0.0035901133;0.0044721318;0.0058118599;0.0044221706;
0;0.0019999999;0;0.0049888762;0.0058118654;0.0090431077;0.0033333325;0.0068313009;0.0086666672;0.013597383;
0.0099107102;0.0046666684;0.0086666709;0.0096378876;0.0069602062;0.008326659;0.0052068313;0.0062893215;0.0071802195;0.0061101043;
0;0;0;0.0019999999;0.0032659862;0.0089690825;0.0053748386;0.0090431077;0.010241526;0.0079162298;
0.0073029674;0.0084590511;0.0085634887;0.0090431077;0.0084590521;0.0089690853;0.0066999188;0.0065319701;0.0061463634;0.0058118636;
0;0;0;0;0;0.0019999999;0.0052068331;0.00718022;0.0085374992;0.0074535613;
0.014047538;0.0091651538;0.0062893215;0.0096378876;0.011234868;0.0067986944;0.0053333365;0.010519824;0.0083266636;0.0026666722;
0;0;0;0;0;0;0;0.0019999999;0.0044221664;0.0073333327;
0.0073333327;0.010666667;0.0099777523;0.011566236;0.013482501;0.0071802177;0.011175368;0.0084590539;0.0049888785;0.009333333;
0.0019999999;0;0;0;0;0;0;0;0;0.0019999999;
0.00359011;0.0067986925;0.006289321;0.0077746036;0.0069602039;0.012092239;0.01398412;0.0084590493;0.0099999998;0.0122202;
0;0;0;0;0;0;0;0;0;0;
0;0.0030550503;0.0042687496;0.0065319724;0.0084590521;0.0059999996;0.011850924;0.0089442711;0.0089442721;0.011075499;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.0030550503;0.0060000005;0.0073333331;0.01474223;0.01334999;0.013012815;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.0030550503;0.0090676462;0.009165151;0.0086666653;
       };
      };
      float_Data @[7] {
       name="vm_eq";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0.49999994;0.72727251;0.81249988;0.85714281;0.88461554;0.90322578;0.91666669;0.92682934;0.93478262;0.94117641;
0.9464286;0.95081961;0.95454562;0.95774651;0.96052635;0.96296299;0.96511638;0.96703303;0.96874988;0.97029698;
0.30769232;0.41935474;0.5;0.56097561;0.60869563;0.6470589;0.67857134;0.70491797;0.72727263;0.74647886;
0.7631579;0.77777773;0.79069769;0.80219781;0.81249988;0.82178223;0.83018863;0.83783782;0.84482753;0.85123956;
0.28260872;0.35294113;0.41071433;0.45901638;0.5;0.53521115;0.5657894;0.59259266;0.61627907;0.63736254;
0.65625006;0.67326736;0.68867928;0.70270264;0.71551716;0.72727287;0.73809522;0.74809164;0.75735289;0.76595742;
0.27272728;0.32394364;0.36842105;0.40740734;0.4418605;0.47252744;0.5;0.5247525;0.54716974;0.56756747;
0.58620691;0.60330576;0.6190477;0.63358784;0.64705884;0.65957451;0.67123282;0.68211925;0.69230765;0.70186335;
0.26744184;0.30769229;0.34374997;0.37623763;0.40566045;0.43243247;0.4568966;0.47933882;0.5;0.51908398;
0.53676468;0.55319136;0.56849325;0.58278137;0.5961538;0.60869563;0.62048191;0.63157898;0.64204544;0.65193367;
0.26415092;0.29729727;0.3275862;0.35537192;0.38095239;0.40458018;0.42647058;0.44680852;0.46575341;0.48344368;
0.50000006;0.5155279;0.53012043;0.5438596;0.55681813;0.5690608;0.58064514;0.59162313;0.60204083;0.61194032;
0.26190475;0.29007629;0.31617644;0.34042552;0.36301371;0.38410595;0.4038462;0.42236024;0.43975902;0.45614034;
0.47159094;0.48618788;0.5;0.51308906;0.52551025;0.53731346;0.54854375;0.55924171;0.56944448;0.57918549;
0.26027396;0.28476819;0.30769232;0.32919255;0.34939763;0.36842105;0.38636369;0.40331501;0.41935486;0.43455499;
0.44897956;0.46268654;0.47572818;0.48815161;0.5;0.51131213;0.52212387;0.53246748;0.54237276;0.55186731;
0.25903609;0.28070173;0.30113631;0.32044199;0.33870965;0.35602093;0.37244895;0.38805965;0.40291268;0.41706163;
0.43055558;0.44343895;0.45575231;0.46753249;0.47881359;0.48962659;0.5;0.50996017;0.51953125;0.52873558;
0.25806454;0.27748686;0.29591841;0.31343287;0.33009714;0.34597158;0.36111113;0.37556556;0.38938051;0.40259737;
0.41525429;0.42738587;0.43902439;0.45019919;0.4609375;0.47126442;0.48120302;0.49077493;0.5;0.50889677;
       };
      };
      float_Data @[8] {
       name="i_thr";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] -0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;
-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;-0.23999998;
-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;
-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;-0.039999992;
0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;
0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;0.16;
0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;
0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;0.36000004;
0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;
0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;0.56;
0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;
0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;0.76000005;
0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;
0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;0.96000004;
1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;
1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;1.16;
1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;
1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;1.3599999;
1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;
1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;1.5599998;
       };
      };
      float_Data @[9] {
       name="fit";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [200] 0.10126024;1.1477867;1.6057577;1.8616854;2.0249543;2.1381299;2.221189;2.2847352;2.3349187;2.3755527;
2.4091263;2.4373307;2.4613609;2.4820762;2.5001204;2.5159781;2.5300248;2.5425525;2.5537949;2.563942;
0;0;0.10126048;0.359119;0.57217944;0.75099117;0.90309042;1.033987;1.1477875;1.2476125;
1.3358717;1.4144542;1.4848627;1.5483034;1.6057577;1.6580347;1.7057989;1.7496109;1.7899398;1.8271843;
0;0;0;0;0.10126048;0.24824309;0.38015348;0.49914336;0.60698408;0.70514643;
0.79485959;0.8771534;0.95290184;1.0228475;1.0876271;1.1477886;1.2038023;1.2560827;1.3049866;1.3508304;
0;0;0;0;0;0;0.10126048;0.20404375;0.2993511;0.3879486;
0.47050452;0.54760224;0.61975682;0.68741941;0.75099087;0.81082636;0.86724067;0.92051703;0.97090548;1.0186336;
0;0;0;0;0;0;0;0.017393004;0.10126048;0.18028045;
0.254848;0.32531828;0.39201275;0.45521685;0.515194;0.57217944;0.62638724;0.67801249;0.72723186;0.77420771;
0;0;0;0;0;0;0;0;0;0.033917703;
0.10126073;0.16544147;0.22667146;0.28514317;0.34103367;0.39450619;0.44570965;0.49478343;0.54185349;0.58703887;
0;0;0;0;0;0;0;0;0;0;
0;0.045002773;0.10126048;0.15529498;0.20723058;0.25718364;0.30526251;0.35156727;0.39619255;0.43922517;
0;0;0;0;0;0;0;0;0;0;
0;0;0.0029137968;0.052953891;0.10126048;0.14791787;0.19300741;0.23660332;0.27877659;0.3195951;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.015283478;0.058936313;0.10126048;0.14231387;0.1821506;0.22082219;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.024889193;0.063600041;0.10126048;0.13791125;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ActFun_Group";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects[0].programs[3].objs[1]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="FitRawData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[4].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="vm_eq";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="err_sum";
     var_type=T_Real;
     real_val=0.2552117117745569;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="act_thr";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="act_thr_eff";
     var_type=T_Real;
     real_val=0.475;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="pow_fact";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="exp_fact";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="g_e_thr";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="slope";
     var_type=T_Real;
     real_val=4;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="vm_thr_max";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="vm_thr";
     var_type=T_Real;
     real_val=0.03389676809310915;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[4].vars[0]$$;
     method=taBase::CopyFrom;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase_ptr;
       type="taBase*";
       name="cpy_from";
       required=1;
       def_val=;
       expr {
	expr="ActFun_Group";
       };
      };
     };
    };
    MethodCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[4].vars[0]$;
     method=DataTable::NewColFloat;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"fit\"";
       };
      };
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[4].vars[2]$$;
     expr {
      expr="0";
     };
    };
    DataCalcLoop @[3] {
     desc=;
     flags=;
     src_data_var=$.projects[0].programs[4].vars[0]$;
     dest_data_var=NULL;
     src_cols {
      name="src_cols";
      el_typ=DataOpEl;
      el_def=0;
      DataOpEl @[0] {
       col_name="i_thr_act";
      };
      DataOpEl @[1] {
       col_name="s_act";
      };
      DataOpEl @[2] {
       col_name="N";
      };
      DataOpEl @[3] {
       col_name="hz";
      };
      DataOpEl @[4] {
       col_name="hz_1";
      };
      DataOpEl @[5] {
       col_name="hz_norm";
      };
      DataOpEl @[6] {
       col_name="hz_norm_1";
      };
      DataOpEl @[7] {
       col_name="vm_eq";
      };
      DataOpEl @[8] {
       col_name="i_thr";
      };
      DataOpEl @[9] {
       col_name="fit";
      };
     };
     dest_cols {
      name="dest_cols";
      el_typ=DataOpEl;
      el_def=0;
     };
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[4].vars[10]$$;
       expr {
	expr="s_vm_eq - act_thr_eff";
       };
      };
      IfElse @[1] {
       desc=;
       flags=;
       cond {
	expr="vm_thr > 0.0";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[4].vars[10]$;
	 expr {
	  expr="MIN(vm_thr, vm_thr_max)";
	 };
	};
	AssignExpr @[1] {
	 desc=;
	 flags=OFF;
	 result_var=.projects[0].programs[4].prog_code[3].src_col_vars[9]$$;
	 expr {
	  expr="slope * pow( (exp(exp_fact * vm_thr)-1.0), pow_fact)";
	 };
	};
	AssignExpr @[2] {
	 desc=;
	 flags=OFF;
	 result_var=$.projects[0].programs[4].prog_code[3].src_col_vars[9]$;
	 expr {
	  expr="slope * (exp(exp_fact * vm_thr)-1.0)";
	 };
	};
	AssignExpr @[3] {
	 desc=;
	 flags=OFF;
	 result_var=$.projects[0].programs[4].vars[10]$;
	 expr {
	  expr="vm_thr * (exp(s_i_thr) -1.0)";
	 };
	};
	AssignExpr @[4] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[4].prog_code[3].src_col_vars[9]$;
	 expr {
	  expr="slope * (exp(exp_fact * vm_thr)-1.0) ";
	 };
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[4].prog_code[3].src_col_vars[9]$;
	 expr {
	  expr="0.0";
	 };
	};
       };
      };
      VarIncr @[2] {
       desc=;
       flags=;
       var=$.projects[0].programs[4].vars[2]$;
       expr {
	expr="fabs(s_fit - s_hz_norm)";
       };
      };
      DataCalcSetSrcRow @[3] {
       desc=;
       flags=;
       src_data_var=$.projects[0].programs[4].vars[0]$;
       dest_data_var=NULL;
      };
     };
     use_col_numbers=0;
     src_col_vars {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="s_i_thr_act";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="s_s_act";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="s_N";
       var_type=T_Int;
       int_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="s_hz";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="s_hz_1";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="s_hz_norm";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="s_hz_norm_1";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[7] {
       name="s_vm_eq";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[8] {
       name="s_i_thr";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[9] {
       name="s_fit";
       var_type=T_Real;
       real_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     dest_col_vars {
      name=;
      el_typ=ProgVar;
      el_def=0;
     };
    };
    AssignExpr @[4] {
     desc=;
     flags=;
     result_var=$.projects[0].programs[4].vars[2]$;
     expr {
      expr="err_sum / (float)FitRawData.rows";
     };
    };
    PrintVar @[5] {
     desc=;
     flags=;
     message=;
     print_var=$.projects[0].programs[4].vars[2]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="n_cycles";
      var_type=T_Int;
      int_val=500;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="total number of cycles to process";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="on_cycle";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="cycle number to turn input on";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="off_cycle";
      var_type=T_Int;
      int_val=450;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="cycle number to turn input off";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="excite_act";
      var_type=T_Real;
      real_val=0.8;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[6] {
      name="inhib_act";
      var_type=T_Real;
      real_val=0.9;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="send_act";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="sending unit activation";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="send_act_i";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="sending unit activation";
      init_from=NULL;
     };
     ProgVar @[9] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
     ProgVar @[10] {
      name="CycleOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[3]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].args[0]$;
      method=Network::Init_Acts;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetCounterInit @[1] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][0].vars[3]$;
      counter=Network::cycle;
      update_after=1;
     };
     MethodCall @[2] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][0].vars[10]$$;
      method=taBase::StructUpdate;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	expr {
	 expr="true";
	};
       };
      };
     };
     IfElse @[5] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=OFF;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][0].vars[4]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[0][0].vars[4]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[6] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       IfElse @[0] {
	desc=;
	flags=;
	cond {
	 expr="cycle >= on_cycle && cycle < off_cycle";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="on";
	  flags=;
	  result_var=.projects[0].programs.gp[0][0].vars[7]$$;
	  expr {
	   expr="excite_act";
	  };
	 };
	 AssignExpr @[1] {
	  desc="on";
	  flags=;
	  result_var=.projects[0].programs.gp[0][0].vars[8]$$;
	  expr {
	   expr="inhib_act";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc="off";
	  flags=;
	  result_var=$.projects[0].programs.gp[0][0].vars[7]$;
	  expr {
	   expr="0.0";
	  };
	 };
	 AssignExpr @[1] {
	  desc="off";
	  flags=;
	  result_var=$.projects[0].programs.gp[0][0].vars[8]$;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       MemberAssign @[1] {
	desc="set to network";
	flags=;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	path="layers[0].units[0].act";
	expr {
	 expr="send_act";
	};
	update_after=0;
       };
       MemberAssign @[2] {
	desc="set to network";
	flags=;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	path="layers[1].units[0].act";
	expr {
	 expr="send_act_i";
	};
	update_after=0;
       };
       ProgramCall @[3] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][1]$$;
	targ_ld_init="*LeabraCycle*";
       };
       MemberAssign @[4] {
	desc="need to set again for display because network turns it off..";
	flags=;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	path="layers[0].units[0].act";
	expr {
	 expr="send_act";
	};
	update_after=0;
       };
       MemberAssign @[5] {
	desc="need to set again for display because network turns it off..";
	flags=;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	path="layers[1].units[0].act";
	expr {
	 expr="send_act_i";
	};
	update_after=0;
       };
       NetUpdateView @[6] {
	desc="update network views, if update_net_view == true";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	update_var=.projects[0].programs.gp[0][0].vars[9]$$;
       };
       NetCounterIncr @[7] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][0].vars[3]$;
	counter=Network::cycle;
	update_after=1;
       };
       IfContinue @[8] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=OFF;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[9] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=OFF;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < n_cycles";
      };
     };
     MethodCall @[7] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc=;
      flags=OFF;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].vars[10]$;
      method=taBase::StructUpdate;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	expr {
	 expr="false";
	};
       };
      };
     };
     IfElse @[9] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[10] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[11] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      update_var=$.projects[0].programs.gp[0][0].vars[9]$;
     };
    };
    step_prog=$.projects[0].programs.gp[0][1]$;
    step_n=1;
   };
   Program @[1] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     PrintExpr @[0] {
      desc=;
      flags=OFF;
      expr {
       expr="network.cycle";
      };
     };
     MethodCall @[1] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[2] {
      desc="update network views if update_net_view == true";
      flags=OFF;
      network_var=$.projects[0].programs.gp[0][1].args[0]$;
      update_var=.projects[0].programs.gp[0][1].vars[0]$$;
     };
     ProgramCall @[3] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects[0].programs.gp[0][2]$;
      targ_ld_init="*LeabraCycleMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraCycleMonitor";
    short_nm="CycMnt";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="net";
	computed=0;
	object_type=LeabraUnit;
	object=.projects[0].networks[0].layers[2].units[0]$$;
	variable="net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="I_net";
	computed=0;
	object_type=LeabraUnit;
	object=$.projects[0].networks[0].layers[2].units[0]$;
	variable="I_net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="v_m";
	computed=0;
	object_type=LeabraUnit;
	object=$.projects[0].networks[0].layers[2].units[0]$;
	variable="v_m";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="act";
	computed=0;
	object_type=LeabraUnit;
	object=$.projects[0].networks[0].layers[2].units[0]$;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="act_eq";
	computed=0;
	object_type=LeabraUnit;
	object=$.projects[0].networks[0].layers[2].units[0]$;
	variable="act_eq";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="adapt";
	computed=0;
	object_type=LeabraUnit;
	object=$.projects[0].networks[0].layers[2].units[0]$;
	variable="adapt";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][2].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=OFF;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=1;
     val_type_fixed=0;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7988115549087524;
     val_type_fixed=0;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAkgAAAt4AAALqAQAAAAYBAAAAAQ==";
     val_type_fixed=0;
    };
   };
   name="Browser";
   m_data=.projects[0]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3DataViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {
       name="view_frame_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="T3Frames";
     m_data=NULL;
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       name="Network";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[1].units[0]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_BOTH;
	  max_size {x=4: y=1: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.1;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_F;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="v_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=;InhibIn=-1;Receiver=;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.5: y=0.5640469: z=1.702481: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.785078;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[1] {
       name="CycleOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][0]$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="cycle";
	    m_data=.projects[0].data.gp[1][0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="net";
	    m_data=.projects[0].data.gp[1][0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="I_net";
	    m_data=.projects[0].data.gp[1][0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1.02534e-07: fix_max=0: max=7.13007e+12: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="v_m";
	    m_data=.projects[0].data.gp[1][0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="act";
	    m_data=.projects[0].data.gp[1][0].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="act_eq";
	    m_data=.projects[0].data.gp[1][0].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="adapt";
	    m_data=.projects[0].data.gp[1][0].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=500: };
	   range {min=0: max=500: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="net";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_net";
	   fixed_range {fix_min=0: min=1.02534e-07: fix_max=0: max=7.13007e+12: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=-80: max=7.130071e+12: };
	   range {min=-1e+12: max=8e+12: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="v_m";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="yellow": r=1: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="act";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="act_eq";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[1] {
	  name="GraphTableView_5";
	  m_data=$.projects[0].data.gp[1][0]$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0.71: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="cycle";
	    m_data=$.projects[0].data.gp[1][0].data[0]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="net";
	    m_data=$.projects[0].data.gp[1][0].data[1]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.2: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="I_net";
	    m_data=$.projects[0].data.gp[1][0].data[2]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="v_m";
	    m_data=$.projects[0].data.gp[1][0].data[3]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="act";
	    m_data=$.projects[0].data.gp[1][0].data[4]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="act_eq";
	    m_data=$.projects[0].data.gp[1][0].data[5]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="adapt";
	    m_data=$.projects[0].data.gp[1][0].data[6]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0.71: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_20";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=500: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=500: };
	   range {min=0: max=500: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_21";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_80";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="adapt";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_81";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name="GraphPlotView_82";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name="GraphPlotView_83";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name="GraphPlotView_84";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name="GraphPlotView_85";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name="GraphPlotView_86";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_87";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_88";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_89";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_90";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_91";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_92";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_93";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_94";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_95";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_22";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_23";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.48: y=0.605: z=1.553798: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.553798;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[2] {
       name="BG05Data";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="GraphTableView_1";
	  m_data=$.projects[0].programs[1].objs[0]$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="time";
	    m_data=.projects[0].programs[1].objs[0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.4995: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="v_m";
	    m_data=.projects[0].programs[1].objs[0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.0706: fix_max=0: max=0.0176927: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="g_e";
	    m_data=.projects[0].programs[1].objs[0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="g_i";
	    m_data=.projects[0].programs[1].objs[0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="I_net";
	    m_data=.projects[0].programs[1].objs[0].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1.69835e-10: fix_max=0: max=1.05493: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="I_chan";
	    m_data=.projects[0].programs[1].objs[0].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="I_leak";
	    m_data=.projects[0].programs[1].objs[0].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="I_spike";
	    m_data=.projects[0].programs[1].objs[0].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=2.46477e-15: fix_max=0: max=36668: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="adapt";
	    m_data=.projects[0].programs[1].objs[0].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=3.69498e-11: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="d_adapt";
	    m_data=.projects[0].programs[1].objs[0].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-3.69498e-11: fix_max=0: max=3.19509e-10: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=539: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_4";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=539: };
	   range {min=0: max=539: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_5";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_16";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="v_m";
	   fixed_range {fix_min=0: min=-0.0706: fix_max=0: max=0.006318034: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-0.0706: max=0.006318034: };
	   range {min=-0.0706: max=0.006318034: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_17";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_e";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1.054927: };
	   range {min=0: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name="GraphPlotView_18";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_i";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1.054927: };
	   range {min=0: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name="GraphPlotView_19";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_net";
	   fixed_range {fix_min=0: min=1.69835e-10: fix_max=0: max=1.05493: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=2.464773e-15: max=1.054927: };
	   range {min=0: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=1;
	  };
	  plot_5 {
	   name="GraphPlotView_20";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_chan";
	   fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=-1.973113e-09: max=1.054927: };
	   range {min=-0.2: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=1;
	  };
	  plot_6 {
	   name="GraphPlotView_21";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="I_spike";
	   fixed_range {fix_min=0: min=2.464773e-15: fix_max=0: max=124.2556: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=2.464773e-15: max=124.2556: };
	   range {min=2.464773e-15: max=124.2556: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=1;
	  };
	  plot_7 {
	   name="GraphPlotView_22";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="adapt";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=3.69498e-11: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=3.694978e-11: };
	   range {min=0: max=3.694978e-11: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_23";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="d_adapt";
	   fixed_range {fix_min=0: min=-3.69498e-11: fix_max=0: max=3.19509e-10: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=-3.694978e-11: max=3.195089e-10: };
	   range {min=-3.694978e-11: max=3.195089e-10: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_24";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_25";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_26";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_27";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_28";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_29";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_30";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_31";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_6";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_7";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[1] {
	  name="GraphTableView_2";
	  m_data=$.projects[0].programs[1].objs[0]$;
FloatTransform @*(.m_transform) {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.9983761: y=0.7129908: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="time";
	    m_data=$.projects[0].programs[1].objs[0].data[0]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="v_m";
	    m_data=$.projects[0].programs[1].objs[0].data[1]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-70.6: fix_max=0: max=-70.6: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="g_e";
	    m_data=$.projects[0].programs[1].objs[0].data[2]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.963326: fix_max=0: max=1.03286: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="g_i";
	    m_data=$.projects[0].programs[1].objs[0].data[3]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.718682: fix_max=0: max=1.01777: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="I_net";
	    m_data=$.projects[0].programs[1].objs[0].data[4]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="I_chan";
	    m_data=$.projects[0].programs[1].objs[0].data[5]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="I_leak";
	    m_data=$.projects[0].programs[1].objs[0].data[6]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="I_spike";
	    m_data=$.projects[0].programs[1].objs[0].data[7]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="adapt";
	    m_data=$.projects[0].programs[1].objs[0].data[8]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=4.21341e-10: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="d_adapt";
	    m_data=$.projects[0].programs[1].objs[0].data[9]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-6.76668e-11: fix_max=0: max=3.92636e-10: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.5: y=0.5: z=0.5: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.9983761: y=0.7129908: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=539: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_8";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=539: };
	   range {min=0: max=539: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_9";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_32";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_e";
	   fixed_range {fix_min=0: min=0.963326: fix_max=0: max=1.03286: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1.032858: };
	   range {min=0: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_33";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_i";
	   fixed_range {fix_min=0: min=0.718682: fix_max=0: max=1.01777: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0.7186825: max=1.017769: };
	   range {min=0.7186825: max=1.017769: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name="GraphPlotView_34";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_chan";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1e-09: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1e-09: };
	   range {min=0: max=1e-09: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name="GraphPlotView_35";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="adapt";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=4.213412e-10: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=4.213412e-10: };
	   range {min=0: max=4.213412e-10: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name="GraphPlotView_36";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name="GraphPlotView_37";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name="GraphPlotView_38";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_39";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_40";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_41";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_42";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_43";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_44";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_45";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_46";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_47";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_10";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_11";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.48: y=0.5799999: z=1.502084: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.502084;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[3] {
       name="AdExNormData";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="GraphTableView_3";
	  m_data=$.projects[0].programs[2].objs[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="time";
	    m_data=.projects[0].programs[2].objs[0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="v_m";
	    m_data=.projects[0].programs[2].objs[0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0.2: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="g_e";
	    m_data=.projects[0].programs[2].objs[0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="g_i";
	    m_data=.projects[0].programs[2].objs[0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="I_net";
	    m_data=.projects[0].programs[2].objs[0].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1.69835e-10: fix_max=0: max=1.05493: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="I_chan";
	    m_data=.projects[0].programs[2].objs[0].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="I_leak";
	    m_data=.projects[0].programs[2].objs[0].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="I_spike";
	    m_data=.projects[0].programs[2].objs[0].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=2.724e-07: fix_max=0: max=2.10844e+12: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="adapt";
	    m_data=.projects[0].programs[2].objs[0].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=3.69498e-11: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="d_adapt";
	    m_data=.projects[0].programs[2].objs[0].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-3.69498e-11: fix_max=0: max=3.19509e-10: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=539: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_12";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=539: };
	   range {min=0: max=539: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_13";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_48";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="v_m";
	   fixed_range {fix_min=1: min=0.2: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.2: max=1.135986: };
	   range {min=0.2: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_49";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_e";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name="GraphPlotView_50";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_i";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name="GraphPlotView_51";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_net";
	   fixed_range {fix_min=0: min=1.69835e-10: fix_max=0: max=1.05493: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=1;
	  };
	  plot_5 {
	   name="GraphPlotView_52";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_chan";
	   fixed_range {fix_min=0: min=-1.97311e-09: fix_max=0: max=1.059e-09: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=1;
	  };
	  plot_6 {
	   name="GraphPlotView_53";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="I_spike";
	   fixed_range {fix_min=0: min=2.723996e-07: fix_max=0: max=3.876168e+11: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=2.723996e-07: max=3.876168e+11: };
	   range {min=2.723996e-07: max=3.876168e+11: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=1;
	  };
	  plot_7 {
	   name="GraphPlotView_54";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="adapt";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=3.69498e-11: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_55";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="d_adapt";
	   fixed_range {fix_min=0: min=-3.69498e-11: fix_max=0: max=3.19509e-10: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_56";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_57";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_58";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_59";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_60";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_61";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_62";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_63";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_14";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_15";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[1] {
	  name="GraphTableView_4";
	  m_data=$.projects[0].programs[2].objs[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.3: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="time";
	    m_data=$.projects[0].programs[2].objs[0].data[0]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="v_m";
	    m_data=$.projects[0].programs[2].objs[0].data[1]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-70.6: fix_max=0: max=-70.6: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="g_e";
	    m_data=$.projects[0].programs[2].objs[0].data[2]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="g_i";
	    m_data=$.projects[0].programs[2].objs[0].data[3]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.718682: fix_max=0: max=1.01777: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="I_net";
	    m_data=$.projects[0].programs[2].objs[0].data[4]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="I_chan";
	    m_data=$.projects[0].programs[2].objs[0].data[5]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1e-09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="I_leak";
	    m_data=$.projects[0].programs[2].objs[0].data[6]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="I_spike";
	    m_data=$.projects[0].programs[2].objs[0].data[7]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="adapt";
	    m_data=$.projects[0].programs[2].objs[0].data[8]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.36632: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="d_adapt";
	    m_data=$.projects[0].programs[2].objs[0].data[9]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-6.76668e-11: fix_max=0: max=3.92636e-10: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=1.3: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=539: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=2;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_16";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="time";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=539: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=539: };
	   range {min=0: max=539: };
	   n_ticks=10;
	   axis_length=2;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_17";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_64";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_e";
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_65";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="g_i";
	   fixed_range {fix_min=0: min=0.718682: fix_max=0: max=1.01777: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name="GraphPlotView_66";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="I_chan";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1e-09: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name="GraphPlotView_67";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="adapt";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0.04398327: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0.04398327: };
	   range {min=0: max=0.04398327: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name="GraphPlotView_68";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name="GraphPlotView_69";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name="GraphPlotView_70";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_71";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_72";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_73";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_74";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_75";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_76";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_77";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_78";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_79";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_18";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_19";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=2.00875: y=1.095: z=2.928938: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.941438;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[4] {
       name="ActFun_Group";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="GraphTableView_6";
	  m_data=$.projects[0].programs[3].objs[1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="i_thr_act";
	    m_data=.projects[0].programs[3].objs[1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="s_act";
	    m_data=.projects[0].programs[3].objs[1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="N";
	    m_data=.projects[0].programs[3].objs[1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="hz";
	    m_data=.projects[0].programs[3].objs[1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="hz_1";
	    m_data=.projects[0].programs[3].objs[1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="hz_norm";
	    m_data=.projects[0].programs[3].objs[1].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="hz_norm_1";
	    m_data=.projects[0].programs[3].objs[1].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="vm_eq";
	    m_data=.projects[0].programs[3].objs[1].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="act_eq";
	    m_data=.projects[0].programs[3].objs[1].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="g_e_lin";
	    m_data=.projects[0].programs[3].objs[1].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="i_thr";
	    m_data=.projects[0].programs[3].objs[1].data[10]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=109: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=0;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_24";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="s_act";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_25";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="i_thr_act";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0.9: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.9: };
	   range {min=0: max=0.9: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_96";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="hz_norm";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0.9543999: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1.1: };
	   range {min=0: max=1.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_97";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="hz";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=235.2: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=235.2: };
	   range {min=0: max=235.2: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name="GraphPlotView_98";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="vm_eq";
	   fixed_range {fix_min=0: min=0.258065: fix_max=0: max=0.971698: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0.2580645: max=0.9716982: };
	   range {min=0.2580645: max=0.9716982: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=1;
	  };
	  plot_4 {
	   name="GraphPlotView_99";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="g_e_lin";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1.1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1.1: };
	   range {min=0: max=1.1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name="GraphPlotView_100";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="act_eq";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0.9704: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0.9704: };
	   range {min=0: max=0.9704: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name="GraphPlotView_101";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name="GraphPlotView_102";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_103";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_104";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="hz_1";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_105";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="hz_norm_1";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_106";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_107";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_108";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_109";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_110";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_111";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_26";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_27";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.486625: y=0.479: z=1.538822: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.551322;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[5] {
       name="FitRawData";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="GraphTableView_7";
	  m_data=$.projects[0].programs[4].objs[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="i_thr_act";
	    m_data=.projects[0].programs[4].objs[0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="s_act";
	    m_data=.projects[0].programs[4].objs[0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.95: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="N";
	    m_data=.projects[0].programs[4].objs[0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="hz";
	    m_data=.projects[0].programs[4].objs[0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="hz_1";
	    m_data=.projects[0].programs[4].objs[0].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="hz_norm";
	    m_data=.projects[0].programs[4].objs[0].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=1.128: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="hz_norm_1";
	    m_data=.projects[0].programs[4].objs[0].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="vm_eq";
	    m_data=.projects[0].programs[4].objs[0].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.258065: fix_max=0: max=0.970297: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="i_thr";
	    m_data=.projects[0].programs[4].objs[0].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.293352: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="fit";
	    m_data=.projects[0].programs[4].objs[0].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=2.56394: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=199: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE_AND_POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name="GraphAxisView_28";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="vm_eq";
	   fixed_range {fix_min=0: min=0.2580645: fix_max=0: max=0.970297: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.2580645: max=0.970297: };
	   range {min=0.2580645: max=0.970297: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name="GraphAxisView_29";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="i_thr_act";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0.9: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0.9: };
	   range {min=0: max=0.9: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name="GraphPlotView_112";
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="hz_norm";
	   fixed_range {fix_min=0: min=0: fix_max=1: max=1.128: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1.128: };
	   range {min=0: max=1.128: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name="GraphPlotView_113";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="fit";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=2.56394: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=2.563942: };
	   range {min=0: max=2.563942: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name="GraphPlotView_114";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name="GraphPlotView_115";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name="GraphPlotView_116";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name="GraphPlotView_117";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name="GraphPlotView_118";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name="GraphPlotView_119";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name="GraphPlotView_120";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name="GraphPlotView_121";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name="GraphPlotView_122";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name="GraphPlotView_123";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name="GraphPlotView_124";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name="GraphPlotView_125";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name="GraphPlotView_126";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name="GraphPlotView_127";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name="GraphAxisView_30";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="GraphAxisView_31";
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4415: y=0.497: z=1.538562: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.551062;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.007640067953616381;
       val_type_fixed=0;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.04059829190373421;
       val_type_fixed=0;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7368420958518982;
       val_type_fixed=0;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=1;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="lt_avg_norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="st_avg_norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="lt_avg_ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="st_avg_ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[19] {
     name="trial";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @[20] {
     name="group";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @[21] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @[22] {
     name="batch";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="UnitNet";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="UnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[1].children[0]$$: };
     sse_tol=0.5;
     act_fun=SPIKE;
     act {thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0: g_gain=1: window=1: eq_gain=10: eq_dt=0: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.1: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=10: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=0.4: l=2.8: i=1: h=0.1: a=0.1: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=1;
      dt=0.007;
      vm_gain=0.1;
      spike_gain=0.01;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=VM_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0: par=1: };
     noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.1: min_pct_c=0.9: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraConSpec @[1] {
     name="ConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="BiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=0.02: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.01: err=0.99: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="InhibCon";
       desc=;
       unique{ inhib;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="RandomSpec_6": type=UNIFORM: mean=1: var=0: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=1;
       wt_scale {abs=2: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.01: err=0.99: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=1: var=0: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=2: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0;
     cur_lrate=0;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.01: err=0.99: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    LeabraLayerSpec @[2] {
     name="LayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=UNIT_INHIB;
      kwta_pt=0.25;
      min_i=0;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     clamp {hard=0: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     add_rnd_wts=0;
    };
    LeabraUnitSpec @[4] {
     name="BioUnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$.projects[0].networks[0].specs[1].children[0]$: };
     sse_tol=0.5;
     act_fun=SPIKE;
     act {thr=0.5: gain=1.1: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0: g_gain=1: window=1: eq_gain=4: eq_dt=0: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     v_m_init {name="": type=UNIFORM: mean=0.3: var=0: par=1: };
     dt {integ=1: vm=0.355872: net=0.7: midpoint=0: d_vm_max=100: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=2.809999: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.3: i=1.56: h=0.1: a=0.1: };
     e_rev {e=1: l=0.3: i=0.25: h=1: a=0.25: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=1;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=VM_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.01: par=1: };
     noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.1: min_pct_c=0.9: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=4: y=1: z=2: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       name="SendingUnit";
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=.projects[0].networks[0].layers[2].projections[0]$$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=0: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.03213762;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.01905036;
       avg_ml=0.15;
       avg_l=0.15;
       l_thr=0.15;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[0]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="SendingUnit";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=-2.8: max=-2.8: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.0008800864: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=1.3057e-05;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[2]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="InhibIn";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=3: y=0: z=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       name="InhibUnit";
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=.projects[0].networks[0].layers[2].projections[1]$$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=0: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.03213758;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.01905036;
       avg_ml=0.15;
       avg_l=0.15;
       l_thr=0.15;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[0]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="InhibUnit";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=0: max_i=0: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=-2.8: max=-2.8: max_i=0: };
     acts {cmpt=1: avg=0: max=0: max_i=0: };
     acts_p {cmpt=1: avg=0: max=0: max_i=0: };
     acts_m {cmpt=1: avg=0: max=0: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=1.3057e-05;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[2]$: };
     hard_clamped=0;
     avg_l_avg=1.401298e-45;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="Receiver";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=1: y=0: z=1: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[3]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[1]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_InhibIn";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[1].children[1]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=1: y=1: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name="ReceivingUnit";
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=1;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[0].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 1;
	 units = {0; };
	 wt = {1; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[0].layers[2].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 1;
	 units = {0; };
	 wt = {1; };
	};
       };
       send {
	name=;
	el_typ=SendCons;
	el_def=0;
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=2;
       pos {x=0: y=0: z=0: };
       act_eq=6.399999e-11;
       act_nd=6.399999e-11;
       act_avg=0.2447553;
       act_m=0.01799999;
       act_p=0.01799999;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.2822679;
       avg_ml=0.15;
       avg_l=0.15;
       l_thr=0.15;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[4]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="ReceivingUnit";
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=1: max=1: max_i=0: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=1.128205: max=1.128205: max_i=0: };
     acts {cmpt=1: avg=6.399999e-11: max=6.399999e-11: max_i=0: };
     acts_p {cmpt=1: avg=0.01799999: max=0.01799999: max_i=0: };
     acts_m {cmpt=1: avg=0.01799999: max=0.01799999: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=1: pct_c=0: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.2080988: i_kwta_pt=0: g_bar_i=1: g_bar_l=0.1: };
     maxda=0.0431833;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[2]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=SAVE_UNITS;
   auto_build=NO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=500;
   time=6389116;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=241;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="epoch_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=6.169293311314099e-71;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=3;
   n_cons=2;
   max_size {x=4: y=1: z=2: };
   learn_rule=LEABRA_CHL;
   phase_order=PLUS_ONLY;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=500;
   time_inc=1;
   cycle_max=200;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=1;
    m_sum=770267;
    m_nrm=1.021795e-05;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0.001;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=500;
   avg_cycles=0;
   avg_cycles_sum=62200;
   avg_cycles_n=241;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=3;
   avg_send_pct=0;
   avg_send_pct_sum=239284.8;
   avg_send_pct_n=6395883;
   maxda_stopcrit=0.005;
   maxda=0.0431833;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=0;
   avg_norm_err_sum=0;
   avg_norm_err_n=4;
  };
 };
};
