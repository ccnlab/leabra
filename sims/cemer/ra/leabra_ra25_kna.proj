// ta_Dump File v3.0 -- code v8.3.0.0 rev11233
LeabraProject .projects[0] { 
 UserDataItem_List @*(.user_data_) {
  UserData_DocLink @[0] { };
 };

 Doc_Group @.docs = [2] {
  taDoc @[0] { };
  taDoc @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [14] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
   };

   ControlPanelMethod_Group @.mths = [9] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
    ControlPanelMethod @[6] { };
    ControlPanelMethod @[7] { };
    ControlPanelMethod @[8] { };
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [2] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [2] {
  ParamSet @[0] { 
   ControlPanelMember_Group @.mbrs = [11] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[1] { 
   ControlPanelMember_Group @.mbrs = [11] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [3] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [3] { 
   DataTable @[0] { 
    DataTableCols @.data = [17] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     String_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [20] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[3] { };
     String_Data @[4] { };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [56] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
     float_Data @[55] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] = [7] { 
   DataTable @[0] { 
    DataTableCols @.data = [2] {
     float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
       UserDataItem @[1] { };
      };
     };
     float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
       UserDataItem @[1] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [2] {
     float_Data @[0] { };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [3] {
     float_Data @[0] { };
     float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
       UserDataItem @[1] { };
       UserDataItem @[2] { };
      };
     };
     float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[3] { 
    DataTableCols @.data = [2] {
     float_Data @[0] { };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[4] { 
    DataTableCols @.data = [2] {
     float_Data @[0] { };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[5] { 
    DataTableCols @.data = [5] {
     String_Data @[0] { };
     String_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[6] { 
    DataTableCols @.data = [5] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[3] { 
  };
 };

 Program_TopGroup @.programs = [5] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    If @[0] { 
     ProgEl_List @.true_code = [1] {
      ReturnExpr @[0] { };
     };
    };
    RegisterArgs @[1] { };
    PrintExpr @[2] { };
    Comment @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ProgVarFmArg @[12] { };
    Comment @[13] { };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [5] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      ProgVarFmArg @[1] { };
      MiscCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[3] { };
      If @[4] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[22] { };
    Comment @[23] { };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[26] { };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [5] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    ForLoop @[1] { 
     ProgEl_List @.loop_code = [1] {
      MemberAssign @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    ForLoop @[3] { 
     ProgEl_List @.loop_code = [1] {
      UserScript @[0] { };
     };
    };
    UserScript @[4] { };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [4] {
    Relation @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [35] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
      float_Data @[25] { };
      float_Data @[26] { };
      float_Data @[27] { };
      float_Data @[28] { };
      float_Data @[29] { };
      String_Data @[30] { };
      String_Data @[31] { };
      String_Data @[32] { };
      String_Data @[33] { };
      String_Data @[34] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [4] {
      String_Data @[0] { };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[3] { 
     DataTableCols @.data = [17] {
      String_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [10] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [4] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    ForeachLoop @[2] { 
     ProgEl_List @.loop_code = [2] {
      If @[0] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
      Else @[1] { 
       ProgEl_List @.true_code = [1] {
	DataProcCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
       };
      };
     };
    };
    DataGroupProg @[3] { 
     DataOpList @.group_spec.ops = [5] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
     };
    };
    MemberMethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MathCall @[5] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MathCall @[6] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    DataGroupProg @[7] { 
     DataOpList @.group_spec.ops = [5] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
     };
    };
    MemberAssign @[8] { };
    MemberAssign @[9] { };
   };
  };
  Program @[3] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [5] {
    Relation @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [25] {
      float_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [25] {
      float_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[3] { 
     DataTableCols @.data = [4] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[4] { 
     DataTableCols @.data = [7] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [15] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };

     ProgEl_List @.fun_code = [8] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [1] {
	ProgVar @[0] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      MethodCall @[7] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [29] {
    DataGroupProg @[0] { 
     DataOpList @.group_spec.ops = [7] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
      DataGroupEl @[6] { };
     };
    };
    DataGroupProg @[1] { 
     DataOpList @.group_spec.ops = [4] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
     };
    };
    MemberMethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[3] { };
    MathCall @[4] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[5] { };
    MemberAssign @[6] { };
    MathCall @[7] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    Comment @[8] { };
    MemberAssign @[9] { };
    MathCall @[10] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    Comment @[11] { };
    MathCall @[12] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[13] { };
    MathCall @[14] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    Comment @[15] { };
    MethodCall @[16] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[17] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    Comment @[18] { };
    MethodCall @[19] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[20] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    Comment @[21] { };
    MethodCall @[22] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[23] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    Comment @[24] { };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    FunctionCall @[26] { 
     ProgArg_List @.fun_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    DoneWritingDataRow @[27] { };
    If @[28] { 
     ProgEl_List @.true_code = [12] {
      PrintExpr @[0] { };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      PrintVar @[2] { };
      PrintExpr @[3] { };
      PrintExpr @[4] { };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      PrintVar @[6] { };
      PrintExpr @[7] { };
      PrintExpr @[8] { };
      MethodCall @[9] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      PrintVar @[10] { };
      PrintExpr @[11] { };
     };
    };
   };
  };
  Program @[4] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [4] {
    DataTable @[0] { 
     DataTableCols @.data = [17] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      String_Data @[3] { };
      String_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [3] {
      String_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
     };

     DataOpList @.last_sort_spec.ops = [6] {
      DataSortEl @[0] { };
      DataSortEl @[1] { };
      DataSortEl @[2] { };
      DataSortEl @[3] { };
      DataSortEl @[4] { };
      DataSortEl @[5] { };
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [4] {
      String_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      int_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [6] {
      DataSortEl @[0] { };
      DataSortEl @[1] { };
      DataSortEl @[2] { };
      DataSortEl @[3] { };
      DataSortEl @[4] { };
      DataSortEl @[5] { };
     };
    };
    DataTable @[3] { 
     DataTableCols @.data = [12] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      String_Data @[2] { };
      float_Data @[3] { };
      String_Data @[4] { };
      float_Data @[5] { };
      String_Data @[6] { };
      float_Data @[7] { };
      String_Data @[8] { };
      float_Data @[9] { };
      String_Data @[10] { };
      float_Data @[11] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [5] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
   };

   Function_List @.functions = [3] {
    Function @[0] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [4] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
       };
      };
      AssignExpr @[1] { };
      If @[2] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
      Else @[3] { 
       ProgEl_List @.true_code = [3] {
	AssignExpr @[0] { };
	If @[1] { 
	 ProgEl_List @.true_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	   };
	  };
	 };
	};
	MethodCall @[2] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Function @[1] { 
     ProgVar_List @.args = [0] {
     };

     ProgEl_List @.fun_code = [8] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [1] {
	ProgVar @[0] { };
       };
      };
      DataGroupProg @[1] { 
       DataOpList @.group_spec.ops = [3] {
	DataGroupEl @[0] { };
	DataGroupEl @[1] { };
	DataGroupEl @[2] { };
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [12] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
	ProgArg @[11] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      If @[4] { 
       ProgEl_List @.true_code = [2] {
	AssignExpr @[0] { };
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      FunctionCall @[7] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Function @[2] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [7] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
       };
      };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
       };
      };
      MethodCall @[2] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      If @[4] { 
       ProgEl_List @.true_code = [3] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [0] {
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [3] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	 };
	};
	MethodCall @[2] { 
	 ProgArg_List @.meth_args = [3] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	 };
	};
       };
      };
      ForLoop @[5] { 
       ProgEl_List @.loop_code = [5] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
	MethodCall @[2] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[3] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	If @[4] { 
	 ProgEl_List @.true_code = [2] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  MethodCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	 };
	};
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [3] {
    If @[0] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    FunctionCall @[2] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
   };

   ProgEl_List @.prog_code = [3] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    If @[1] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [0] {
       };
      };
     };
    };
    If @[2] { 
     ProgEl_List @.true_code = [1] {
      FunctionCall @[0] { 
       ProgArg_List @.fun_args = [0] {
       };
      };
     };
    };
   };
  };
  Program_Group @.gp[0] = [11] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [3] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       NetCounterInit @[0] { };
      };
     };
     Else @[1] { 
      ProgEl_List @.true_code = [1] {
       MemberAssign @[0] { };
      };
     };
     WhileLoop @[2] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @[0] { };
     UserData_DocLink @[1] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @[0] { 
      taList @.seeds = [25] {
       RndSeed @[0] { };
       RndSeed @[1] { };
       RndSeed @[2] { };
       RndSeed @[3] { };
       RndSeed @[4] { };
       RndSeed @[5] { };
       RndSeed @[6] { };
       RndSeed @[7] { };
       RndSeed @[8] { };
       RndSeed @[9] { };
       RndSeed @[10] { };
       RndSeed @[11] { };
       RndSeed @[12] { };
       RndSeed @[13] { };
       RndSeed @[14] { };
       RndSeed @[15] { };
       RndSeed @[16] { };
       RndSeed @[17] { };
       RndSeed @[18] { };
       RndSeed @[19] { };
       RndSeed @[20] { };
       RndSeed @[21] { };
       RndSeed @[22] { };
       RndSeed @[23] { };
       RndSeed @[24] { };
      };
     };
     RndSeed @[1] { };
    };

    ProgVar_List @.objs_vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [10] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [6] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
       If @[5] { 
	ProgEl_List @.true_code = [1] {
	 CssExpr @[0] { };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[4] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [0] {
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [7] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[6] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     NetCounterInit @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
     If @[2] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @[0] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [0] {
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [1] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [17] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [20] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[9] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [33] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
       NetMonItem @[26] { };
       NetMonItem @[27] { };
       NetMonItem @[28] { };
       NetMonItem @[29] { };
       NetMonItem @[30] { };
       NetMonItem @[31] { };
       NetMonItem @[32] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @[10] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [7] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [48] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	  ScaleRange @[15] { };
	  ScaleRange @[16] { };
	  ScaleRange @[17] { };
	  ScaleRange @[18] { };
	  ScaleRange @[19] { };
	  ScaleRange @[20] { };
	  ScaleRange @[21] { };
	  ScaleRange @[22] { };
	  ScaleRange @[23] { };
	  ScaleRange @[24] { };
	  ScaleRange @[25] { };
	  ScaleRange @[26] { };
	  ScaleRange @[27] { };
	  ScaleRange @[28] { };
	  ScaleRange @[29] { };
	  ScaleRange @[30] { };
	  ScaleRange @[31] { };
	  ScaleRange @[32] { };
	  ScaleRange @[33] { };
	  ScaleRange @[34] { };
	  ScaleRange @[35] { };
	  ScaleRange @[36] { };
	  ScaleRange @[37] { };
	  ScaleRange @[38] { };
	  ScaleRange @[39] { };
	  ScaleRange @[40] { };
	  ScaleRange @[41] { };
	  ScaleRange @[42] { };
	  ScaleRange @[43] { };
	  ScaleRange @[44] { };
	  ScaleRange @[45] { };
	  ScaleRange @[46] { };
	  ScaleRange @[47] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [56] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	  GraphColView @[20] { };
	  GraphColView @[21] { };
	  GraphColView @[22] { };
	  GraphColView @[23] { };
	  GraphColView @[24] { };
	  GraphColView @[25] { };
	  GraphColView @[26] { };
	  GraphColView @[27] { };
	  GraphColView @[28] { };
	  GraphColView @[29] { };
	  GraphColView @[30] { };
	  GraphColView @[31] { };
	  GraphColView @[32] { };
	  GraphColView @[33] { };
	  GraphColView @[34] { };
	  GraphColView @[35] { };
	  GraphColView @[36] { };
	  GraphColView @[37] { };
	  GraphColView @[38] { };
	  GraphColView @[39] { };
	  GraphColView @[40] { };
	  GraphColView @[41] { };
	  GraphColView @[42] { };
	  GraphColView @[43] { };
	  GraphColView @[44] { };
	  GraphColView @[45] { };
	  GraphColView @[46] { };
	  GraphColView @[47] { };
	  GraphColView @[48] { };
	  GraphColView @[49] { };
	  GraphColView @[50] { };
	  GraphColView @[51] { };
	  GraphColView @[52] { };
	  GraphColView @[53] { };
	  GraphColView @[54] { };
	  GraphColView @[55] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [32] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	 };

	 GraphPlotView_List @.errbars = [32] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [3] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[3] { 
       T3DataView_List @.root_view.children = [3] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
	GraphTableView @[1] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
	GraphTableView @[2] { 
	 T3DataView_List @.children = [20] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[4] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [17] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[5] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [5] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[6] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [4] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
    UserDataItem @[6] { };
    UserDataItem @[7] { };
    UserDataItem @[8] { };
    UserDataItem @[9] { };
    UserDataItem @[10] { };
    UserDataItem @[11] { };
    UserDataItem @[12] { };
    UserDataItem @[13] { };
    UserDataItem @[14] { };
    UserDataItem @[15] { };
    UserDataItem @[16] { };
    UserDataItem @[17] { };
    UserDataItem @[18] { };
    UserDataItem @[19] { };
    UserDataItem @[20] { };
    UserDataItem @[21] { };
    UserDataItem @[22] { };
    UserDataItem @[23] { };
    UserDataItem @[24] { };
    UserDataItem @[25] { };
    UserDataItem @[26] { };
    UserData_DocLink @[27] { };
   };

   BaseSpec_Group @.specs = [4] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraLayerSpec @[1] { 
     BaseSpec_Group @.children = [2] {
      LeabraLayerSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    FullPrjnSpec @[2] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    LeabraConSpec @[3] { 
     BaseSpec_Group @.children = [2] {
      LeabraConSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraBiasSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [4] {
    LeabraLayer @[0] { 
     Projection_List @.projections = [0] {
     };
    };
    LeabraLayer @[1] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[2] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[3] { 
     Projection_List @.projections = [1] {
      LeabraPrjn @[0] { };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 UserDataItem_List @*(.user_data_) {
  name=;
  el_typ=UserData_DocLink;
  el_def=0;
  UserData_DocLink @[0] {name="DocLink": doc=.docs[0]$$: };
 };
 name="leabra_ra25_kna";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2017";
  custom=;
 };
 pub_cite=;
 wiki {wiki="": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>
</head>
<body>

= Leabra Random Associator 25 Patterns =

This project is a simple test case for the Leabra model: learning to form input/output associations between 25 random bit patterns in a simple 3 layer network with 25 units per layer.  It has proven to be a good predictor of overall learning ability for various tweaks to the algorithm.  In general, any new idea is tested out on this project first.

To run, just go to the [[.programs.gp.LeabraAll_Std.LeabraTrainBatchSeedList]] program and do Init and Run.

== Running In Background ==

The LeabraStartup program allows you to run this project in the background to obtain results quickly to a log file, which can then be analyzed with the epoch_log_analysis.proj project included here (which can also be run from the command line).

emergent -nogui -ni -p leabra_ra25_std.proj epochs=100 batches=10

</body>
";
   html_text="<html>
<head>
</head>
<body>
<P>
<h1> Leabra Random Associator 25 Patterns </h1>
<P>
This project is a simple test case for the Leabra model: learning to form input/output associations between 25 random bit patterns in a simple 3 layer network with 25 units per layer.  It has proven to be a good predictor of overall learning ability for various tweaks to the algorithm.  In general, any new idea is tested out on this project first.
<P>
To run, just go to the <a href=\"ta:.programs.gp.LeabraAll_Std.LeabraTrainBatchSeedList\">LeabraTrainBatchSeedList</a> program and do Init and Run.
<P>
<h2> Running In Background </h2>
<P>
The LeabraStartup program allows you to run this project in the background to obtain results quickly to a log file, which can then be analyzed with the epoch_log_analysis.proj project included here (which can also be run from the command line).
<P>
emergent -nogui -ni -p leabra_ra25_std.proj epochs=100 batches=10
<P>
</body>
";
  };
  taDoc @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="FFFB_Docs_and_Params";
   desc=;
   web_doc=1;
   wiki="ccnlab";
   url="LeabraFFFB";
   full_url="https://grey.colorado.edu/ccnlab/index.php/LeabraFFFB";
   text_size=1;
   text="<html>
<head>
</head>
<body>

= Leabra Random Associator 25 Patterns =

This project is a simple test case for the Leabra model: learning to form input/output associations between 25 random bit patterns in a simple 3 layer network with 25 units per layer.  It has proven to be a good predictor of overall learning ability for various tweaks to the algorithm.  In general, any new idea is tested out on this project first.

To run, just go to the [[.programs.gp.LeabraAll_Std.LeabraTrainBatchSeedList]] program and do Init and Run.

== Running In Background ==

The LeabraStartup program allows you to run this project in the background to obtain results quickly to a log file, which can then be analyzed with the epoch_log_analysis.proj project included here (which can also be run from the command line).

emergent -nogui -ni -p leabra_ra25_std.proj epochs=100 batches=10

</body>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraFFFB - Computational Cognitive Neuroscience Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraFFFB\",\"wgTitle\":\"LeabraFFFB\",\"wgCurRevisionId\":3782127,\"wgRevisionId\":3782127,\"wgArticleId\":193617,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraFFFB\",\"wgRelevantArticleId\":193617,\"wgIsProbablyEditable\":!1,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],
\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/ccnlab/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"variant\":\"en\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/ccnlab/load.php?debug=false&amp;lang=en&amp;modules=ext.math.styles%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/ccnlab/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/ccnlab/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async=\"\" src=\"/ccnlab/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraFFFB\" href=\"/ccnlab/index.php?title=Special:ExportRDF/LeabraFFFB&amp;xmlmime=rdf\">
<link rel=\"shortcut icon\" href=\"/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/ccnlab/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/ccnlab/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom feed\" href=\"/ccnlab/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/ccnlab/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/ccnlab/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraFFFB skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraFFFB</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>Back to <a href=\"/ccnlab/index.php/Leabra\" title=\"Leabra\">Leabra</a>
</p><p>This page describes the FeedForward, FeedBack inhibition mechanism, introduced 9/2013.  
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Equations\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Equations</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Parameters\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Parameters</span></a></li>
<li class=\"toclevel-1 tocsection-3\"><a href=\"#More_is_More\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">More is More</span></a>
<ul>
<li class=\"toclevel-2 tocsection-4\"><a href=\"#leabra_ra25_fffb.proj\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">leabra_ra25_fffb.proj</span></a></li>
</ul>
</li>
<li class=\"toclevel-1 tocsection-5\"><a href=\"#max_vs_avg\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">max_vs_avg</span></a>
<ul>
<li class=\"toclevel-2 tocsection-6\"><a href=\"#Params\"><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Params</span></a>
<ul>
<li class=\"toclevel-3 tocsection-7\"><a href=\"#ss\"><span class=\"tocnumber\">4.1.1</span> <span class=\"toctext\">ss</span></a></li>
<li class=\"toclevel-3 tocsection-8\"><a href=\"#LVis_basic\"><span class=\"tocnumber\">4.1.2</span> <span class=\"toctext\">LVis basic</span></a></li>
<li class=\"toclevel-3 tocsection-9\"><a href=\"#Lvis_emer\"><span class=\"tocnumber\">4.1.3</span> <span class=\"toctext\">Lvis emer</span></a></li>
<li class=\"toclevel-3 tocsection-10\"><a href=\"#PBWM_sir52\"><span class=\"tocnumber\">4.1.4</span> <span class=\"toctext\">PBWM sir52</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"Equations\">Equations</span></h1>
<p><img class=\"mwe-math-fallback-image-inline tex\" alt=\"
  g_i = gi \\left[ \\mbox{ff} [&lt;\\eta&gt; - \\mbox{ff0}]_+ + \\mbox{fb} &lt;act&gt; + \\mbox{fbx} [&lt;act&gt; - \\mbox{inf}]_+ \\right]
\" src=\"/mediawiki/sites/ccnlab/images/math/3/3/1/331a3b3eb12979efcc10b5d64aa769eb.png\">
</p><p>where <img class=\"mwe-math-fallback-image-inline tex\" alt=\"[ x ]_+ \" src=\"/mediawiki/sites/ccnlab/images/math/d/9/7/d9792430f9af93dea22c60a63d849cc1.png\"> indicates the positive part of whatever it contains -- anything negative truncates to zero.
</p><p>It does NOT appear that the nonlinear inflection fbx term is necessary for stability in bidirectional networks, and thus it is typically just the first two terms.  Also there is a fb0 baseline parameter that we can probably get rid of and just keep at 0 as shown.
</p><p>There is also a <b>dt</b> parameter that integrates <i>only the feedback portion</i> of the inhibition over time -- a value of around .7 cuts down on the oscillations without making it too slow to respond.  Start to get pronounced slow-wave oscillations at .6 and below.  Only the feedback is strongly subject to these oscillatory dynamics -- ff is thus the more stable \"bedrock\" of the inhibition.
</p>
<h1><span class=\"mw-headline\" id=\"Parameters\">Parameters</span></h1>
<p>You can dial up or down the overall inhibition with the overall <b>gi</b> factor -- typically this is the only param you should manipulate.
</p><p>The relative balance of the <b>ff</b> vs. <b>fb</b> terms is the other major issue -- if fb &gt; ff then you tend to get more oscillation.  If ff &gt; fb too much, then it is hard to find a single \"sweet spot\" parameter that will work across training and across layers.
</p><p>In the perception/objrec/lvis_fffb.proj model (standard lvis with fffb inhibition), the following results were found:
</p>
<ul><li> fb = 1.6, ff = 1.0 -- persistent oscillation, slower convergence</li>
<li> fb = 1, ff = 1 (gi = 1.8 or so) -- much better</li>
<li> fb = .5, ff = 1 (gi = 2.2) -- best?</li></ul>
<p>Overall the fb = 1 and fb = .5 cases can be pretty similar, but the .5 case requires a bit more parameter searching -- but also provides more fine-grained control over activation levels.. probably .5 is best even if not in terms of raw performance.
</p>
<h1><span class=\"mw-headline\" id=\"More_is_More\">More is More</span></h1>
<h2><span class=\"mw-headline\" id=\"leabra_ra25_fffb.proj\">leabra_ra25_fffb.proj</span></h2>
<p>This is a basic \"random associator\" network with 2 hidden layers (Hidden_0, Hidden_1) between random bit pattern Input and Output layers, trained with std Leabra etc.  It is instrumented with a cycle log to see all the dynamics shown below.   You can check it out at svn_sims/leabra/leabra_ra25_fffb.proj
</p><p>Params: for FF = 1, FB = 0.5, gi = 1.5, for FB = 1, gi = 1.2 -- very hard to tell much diff between two learning-wise.
</p><p><br>
</p>
<div class=\"thumb tleft\"><div class=\"thumbinner\" style=\"width:502px;\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_ff1fb5.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/ccnlab/images/thumb/f/f1/leabra_ra_fffb_ff1fb5.png/500px-leabra_ra_fffb_ff1fb5.png\" width=\"500\" height=\"541\" class=\"thumbimage\" srcset=\"/mediawiki/sites/ccnlab/images/thumb/f/f1/leabra_ra_fffb_ff1fb5.png/750px-leabra_ra_fffb_ff1fb5.png 1.5x, /mediawiki/sites/ccnlab/images/thumb/f/f1/leabra_ra_fffb_ff1fb5.png/1000px-leabra_ra_fffb_ff1fb5.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_ff1fb5.png\" class=\"internal\" title=\"Enlarge\"></a></div>FFFB dynamics with FF=1, FB=0.5 Lower Left: average activity over cycles, trained net -- the \"knees\" in the trajectories indicates a reasonably strong reflection of the total net input hitting the layer, as the higher layers come online and start sending feedback excitation back down.  Lower Right and Upper: the effective functions of inhibition and activation vs. average net input as a function of settling over cycles for the Hidden 0 and 1 layers -- the function is largely linear except around the \"threshold\" point.  Critically, the slope on the acts avg line is strongly positive -- this is the more-is-more curve.</div></div></div>
<div class=\"thumb tright\"><div class=\"thumbinner\" style=\"width:502px;\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_kwtavg.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/ccnlab/images/thumb/b/ba/leabra_ra_fffb_kwtavg.png/500px-leabra_ra_fffb_kwtavg.png\" width=\"500\" height=\"533\" class=\"thumbimage\" srcset=\"/mediawiki/sites/ccnlab/images/thumb/b/ba/leabra_ra_fffb_kwtavg.png/750px-leabra_ra_fffb_kwtavg.png 1.5x, /mediawiki/sites/ccnlab/images/thumb/b/ba/leabra_ra_fffb_kwtavg.png/1000px-leabra_ra_fffb_kwtavg.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_kwtavg.png\" class=\"internal\" title=\"Enlarge\"></a></div>KWTA_AVG dynamics: Lower Left: no \"knees\" -- just inexorable rise to static value.  Interestingly, more variance it seems in values -- perhaps magnifying \"noise\" in the competitive distribution.  Lower Right and Upper: note the essentially flat netin vs. acts_avg curves.  The gi curves are also strikingly linear, which is a surprise..</div></div></div>
<div style=\"clear:both;\">
<div class=\"thumb tleft\"><div class=\"thumbinner\" style=\"width:402px;\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_ff1fb5_lrn.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/ccnlab/images/thumb/c/c0/leabra_ra_fffb_ff1fb5_lrn.png/400px-leabra_ra_fffb_ff1fb5_lrn.png\" width=\"400\" height=\"406\" class=\"thumbimage\" srcset=\"/mediawiki/sites/ccnlab/images/thumb/c/c0/leabra_ra_fffb_ff1fb5_lrn.png/600px-leabra_ra_fffb_ff1fb5_lrn.png 1.5x, /mediawiki/sites/ccnlab/images/thumb/c/c0/leabra_ra_fffb_ff1fb5_lrn.png/800px-leabra_ra_fffb_ff1fb5_lrn.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_ff1fb5_lrn.png\" class=\"internal\" title=\"Enlarge\"></a></div>FFFB with FF=1, FB=0.5 -- learning curve showing how the average minus phase activation state increases over learning, suggesting more-is-more activation as a function of the weights getting stronger.</div></div></div>
<div class=\"thumb tright\"><div class=\"thumbinner\" style=\"width:402px;\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_kwtavg_lrn.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/ccnlab/images/thumb/4/45/leabra_ra_fffb_kwtavg_lrn.png/400px-leabra_ra_fffb_kwtavg_lrn.png\" width=\"400\" height=\"407\" class=\"thumbimage\" srcset=\"/mediawiki/sites/ccnlab/images/thumb/4/45/leabra_ra_fffb_kwtavg_lrn.png/600px-leabra_ra_fffb_kwtavg_lrn.png 1.5x, /mediawiki/sites/ccnlab/images/thumb/4/45/leabra_ra_fffb_kwtavg_lrn.png/800px-leabra_ra_fffb_kwtavg_lrn.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/ccnlab/index.php/File:leabra_ra_fffb_kwtavg_lrn.png\" class=\"internal\" title=\"Enlarge\"></a></div>KWTA_AVG -- learning has no systematic effect on average minus phase activations in KWTA.</div></div></div>
<div style=\"clear:both;\">
<p>See above fig captions for strong indications of more-is-more behavior in FFFB compared to KWTA -- the key signature is a positive relationship between net input and average activation, and evidence of actual interesting dynamics during settling.
</p><p>With FB = 0.5 you see more of the graded activations over training, FB = 1.0 still shows it but it is much weaker.  However the relationship between netin and act holds essentially the same between the two.  This suggests that the netin factor creates more of an \"absolute\" threshold that units are comparing against over learning, so more of that produces better results in that respect.
</p>
<h1><span class=\"mw-headline\" id=\"max_vs_avg\">max_vs_avg</span></h1>
<p>1/18/16: In both the PBWM and now the attention models I?ve been working on, I?ve found some limitations with the std FFFB formulation, and I?ve just implemented a new parameterization that covers the relevant space nicely ? I?m currently exploring implications for our most challenging current models (ss, lvis) to see if we want to change the standard defaults..
</p><p>The main problem arises when the number of inputs to a layer are highly variable, creating a corresponding high variability in the average netinput value that drives FF inhib ? if you do NOT want this level of variability in the activation of the layer, then using a more robust non-parametric statistic such as the max netinput can produce more stable kata-style behavior.
</p><p>In PBWM, the inputs to the GPi layer are subject to modulation by a couple of factors (whether something is being maintained, whether it is a PV trial), and these modulations strongly affect the average netin ? but we want a more consistent kwta behavior out of the thing.  So, using the max was useful there.  
</p><p>In the deep_attn.proj model, we want the deep attentional ?spotlight? activations to be more consistent and less variable depending on the activation distribution ? I was having to crank up the gi to 30-40 to get any effect at all for some conditions, and then it was too much for other cases ? the max will definitely work better here.
</p><p>In lvis, I think that a more max-weighted value will help for the output layer (1 WTA) and possibly for other layers ? might help in particular to prevent the network from getting so overwhelmed by images with a lot of visual energy, etc.
</p><p>The new impl (just checked in) has a single new param in the inhib lines in LeabraLayerSpec: max_vs_avg ? if this is 0 then ff operates purely on the average netin (previous std behavior), if 1 then it is purely max, and in between gives intermediate behavior.  I?m guessing that some intermediate value might work better.  Will almost certainly need to adjust ff0 and gi along with max_vs_avg ? turns into kind of a big space.
</p>
<h2><span class=\"mw-headline\" id=\"Params\">Params</span></h2>
<h3><span class=\"mw-headline\" id=\"ss\">ss</span></h3>
<p>Summary: ff0 = .1 (don't change), max_vs_avg = 0.5, drop gi by .1 for most layers and .3 for output layer and gp inhib within ortho_code layer..
</p><p>Best case with all max_vs_avg = 0.5: 119349 
</p>
<table class=\"wikitable\">

<tbody><tr>
<th> Parameter </th>
<th> Value  </th>
<th> Notes
</th></tr>
<tr>
<td> hidden_gi </td>
<td> 2 </td>
<td> 2.1 mva 0, 2.0 mva .5
</td></tr>
<tr>
<td> hidden_ff_max_vs_avg </td>
<td> 0.5 </td>
<td>
</td></tr>
<tr>
<td> ortho_code_lay_gi </td>
<td> 2.2 </td>
<td> 2.3 mva 0, 2.2 mva .5
</td></tr>
<tr>
<td> ortho_code_lay_ff_max_vs_avg </td>
<td> 0.5 </td>
<td>
</td></tr>
<tr>
<td> ortho_code_gp_gi </td>
<td> 1.8 </td>
<td> 2.1 mva 0, 1.8 mva .5
</td></tr>
<tr>
<td> ortho_code_gp_ff_max_vs_avg </td>
<td> 0.5 </td>
<td>
</td></tr>
<tr>
<td> phon_gi </td>
<td> 1.8 </td>
<td> 2.1 mva 0, 1.8 mva .5
</td></tr>
<tr>
<td> phon_ff_max_vs_avg </td>
<td> 0.5 </td>
<td>
</td></tr></tbody></table>
<p>Hidden layer:
</p>
<ul><li> max_vs_avg = .5, ff0 = .1, gi = 2.1 drops avg act to .06 from .12 (in half) but perf same / better early -- gi = 2.0 = .1 (initial learning better, but final slightly worse), gi = 1.9 = .13 (perf worse)</li>
<li> max_vs_avg = .5, ff0 = .2: in general these blow up over time -- ff0 = .1 much better!  gi = 2.3 avg_act = .18, perf bad; gi = 2.5 avg_act = .13; gi = 2.6 avg_act = .08 initially but goes up to .12; gi = 2.7 avg_act = .06 initially but goes up to .11; -- for all perf blows up.</li></ul>
<p>Ortho_code layer-level:
</p>
<ul><li> mva = .5, ff0=.1, gi=2.2 (2.3 originally): best case, but no obvious advantage evident here over hidden mva = .5, gi = 2.0 case</li></ul>
<p>Phono:
</p>
<ul><li> mva = .5, ff0=.1, gi=1.8 (vs 2.1 orig): better than above and also better than original in final overall perf.  critically, this is ONLY true with ortho_code layer-level in place -- for name_err at least -- with sse it is same as orig.  no diff for hid mva = .5 or not.   more consistent to have it on everything!</li></ul>
<h3><span class=\"mw-headline\" id=\"LVis_basic\">LVis basic</span></h3>
<p>basic lvis model: lvis_te16deg.proj
</p>
<ul><li> basically nothing improved overall performance</li>
<li> the Output layer change resulted in significantly faster early learning (which then disappeared with further training)</li>
<li> increasing V4-&gt;TEO wt_scale.abs to 1.6 (from 1.2) improved early performance, and was needed for ANY teo params to work (and still none worked very well)</li>
<li> in any case, hopefully this provides some useful starting points for exploring other models, esp emer_lvis -- do we get advantages there with backgrounds??</li></ul>
<table class=\"wikitable\">

<tbody><tr>
<th> Parameter </th>
<th> Value  </th>
<th> Notes
</th></tr>
<tr>
<td> v2h_lay_gi </td>
<td> 0.8 </td>
<td> 2.0 mva 0, mva .5: .8 has best perf, 1.0 maybe best  hogging -- not big diffs
</td></tr>
<tr>
<td> v2h_gp_gi </td>
<td> 2 </td>
<td> 2.2 mva 0, 2.1 mva .5
</td></tr>
<tr>
<td> v4h_lay_gi </td>
<td> 1.4 </td>
<td> 2.0 mva 0, mva .5: 1.2 best perf, 1.4 closest to orig act
</td></tr>
<tr>
<td> v4h_gp_gi </td>
<td> 2.2 </td>
<td> 2.2 mva 0, mva .5: 2.2 better than 2.1, 2.0
</td></tr>
<tr>
<td> teo_inhib_gi </td>
<td> 1.9 </td>
<td> 2.2 mva 0; mva 5: 2.0 matches act?
</td></tr>
<tr>
<td> te_gi </td>
<td> 1.7 </td>
<td> 2.2 mva 0, mva .5: 1.7 works, 1.9 blows up eventually
</td></tr>
<tr>
<td> output_gi </td>
<td> 2.3 </td>
<td> 3.6 mva 0, mva .5: 2.3 best, couldn't get mva 1 to work over wide range
</td></tr>
<tr>
<td> v4_teo_wt_scale_abs </td>
<td> 1.6 </td>
<td> 1.6 gets netmax up to .8, similar to TE -- improves stability, early learning perf
</td></tr></tbody></table>
<ul><li> changing all max_vs_avg to .5 following principles from ss.proj did NOT work well.</li>
<li> now going incrementally from v2 to v4 etc -- lay before gp -- get each one right and then move on.</li>
<li> v2 and v4 require much lower layer-level gi with mva = .5: .8 for v2 and 1.2 for v4 (those give best performance -- need multiple batches to verify) -- in no case do they result in <i>improved</i> performance over the base mva = 0 case.</li></ul>
<dl><dd><ul><li> v2 gp gi = 2.0 seems slightly better than 2.1 at the end, and slightly better than default.  would need replications to tell.</li>
<li> v4 gp gi = 2.2 better than 2.1, 2.0..</li></ul></dd></dl>
<ul><li> teo and te are complicated..  setting gi = 2.1 instead of 2.2 (default) gives <i>better</i> perf initially then blows up.  activation levels at 2.1 start the same in TEO and TE but then stay lower while the default goes much higher.  end up with significant hogging in TEO and TE -- too much competition and only the hogs win.  at lower values of gi the activations are higher but learning is not as good.  in general seems like sparseness is beneficial initially but then leads to too much hogging..</li></ul>
<dl><dd><ul><li> any attempt so far with teo seems to fail.  moving on to focusing on te.</li></ul></dd></dl>
<h3><span class=\"mw-headline\" id=\"Lvis_emer\">Lvis emer</span></h3>
<p>emer lvis model with backgrounds:
</p>
<h3><span class=\"mw-headline\" id=\"PBWM_sir52\">PBWM sir52</span></h3>
<ul><li> gpi previously depended on the ff_max and ff0_max params: new params are: ff_max_vs_avg = 1, gi = 0.6 to achieve similar performance</li></ul>
<dl><dd><ul><li> note: the gi value before was 2, and the ff0_max =0.5 value cut into the actual max value quite a bit -- theoretically around 1/2 gi should compensate for that, but gi = 1.0 did not work well -- needed to go well below -- ff0_max cutoff had other weird properties presumably.</li>
<li> not able to find any values of gi with ff_max_vs_avg = 0.5 that worked well at all</li></ul></dd></dl>
<ul><li> gpe: not able to find any ff_max_vs_avg = .5 gi values that worked as well as mva = 0 -- not hugely worse but probably significant.</li></ul>
<dl><dd><ul><li> didn't try mva = 1 because this didn't work well in previous version.</li></ul></dd></dl>
<ul><li> matrix: ff_max at layer level worked well with this before -- ff_max_vs_avg = 1 with gi = .6 (same as gpi) did work almost as well as mva = 0 -- but not better.  again ff_max_vs_avg = .5 did NOT help at all..</li></ul></div>
</div>

<!-- 
NewPP limit report
Cached time: 20160429042239
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.086 seconds
Real time usage: 0.102 seconds
Preprocessor visited node count: 59/1000000
Preprocessor generated node count: 88/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key ccnlab:pcache:idhash:193617-0!*!0!!en!5!*!math=0 and timestamp 20160429042239 and revision id 3782127
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/ccnlab/index.php?title=LeabraFFFB&amp;oldid=3782127\">https://grey.colorado.edu/ccnlab/index.php?title=LeabraFFFB&amp;oldid=3782127</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-createaccount\"><a href=\"/ccnlab/index.php?title=Special:UserLogin&amp;returnto=LeabraFFFB&amp;type=signup\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/ccnlab/index.php?title=Special:UserLogin&amp;returnto=LeabraFFFB\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/ccnlab/index.php/LeabraFFFB\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/ccnlab/index.php?title=Talk:LeabraFFFB&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/ccnlab/index.php/LeabraFFFB\">Read</a></span></li>
															<li id=\"ca-viewsource\"><span><a href=\"/ccnlab/index.php?title=LeabraFFFB&amp;action=edit\" title=\"This page is protected.
You can view its source [e]\" accesskey=\"e\">View source</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/ccnlab/index.php?title=LeabraFFFB&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/ccnlab/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search Computational Cognitive Neuroscience Wiki [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/ccnlab/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/ccnlab/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/ccnlab/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/ccnlab/index.php/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li><li id=\"n-help\"><a href=\"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents\" title=\"The place to find out\">Help</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/ccnlab/index.php/Special:WhatLinksHere/LeabraFFFB\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/ccnlab/index.php/Special:RecentChangesLinked/LeabraFFFB\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/ccnlab/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/ccnlab/index.php?title=LeabraFFFB&amp;oldid=3782127\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/ccnlab/index.php?title=LeabraFFFB&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/ccnlab/index.php/Special:Browse/LeabraFFFB\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/ccnlab/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraFFFB\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/ccnlab/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraFFFB&amp;oldid=3782127&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/ccnlab/index.php?title=LeabraFFFB&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 22 January 2016, at 03:10.</li>
											<li id=\"footer-info-numberofwatchingusers\"><a rel=\"nofollow\" class=\"external text\" href=\"https://grey.colorado.edu/ccnlab/index.php?title=Special:WhoIsWatching&amp;ns=&amp;page=LeabraFFFB\">1</a> watching user</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-privacy\"><a href=\"/ccnlab/index.php/Computational_Cognitive_Neuroscience_Wiki:Privacy_policy\" title=\"Computational Cognitive Neuroscience Wiki:Privacy policy\">Privacy policy</a></li>
											<li id=\"footer-places-about\"><a href=\"/ccnlab/index.php/Computational_Cognitive_Neuroscience_Wiki:About\" title=\"Computational Cognitive Neuroscience Wiki:About\">About Computational Cognitive Neuroscience Wiki</a></li>
											<li id=\"footer-places-disclaimer\"><a href=\"/ccnlab/index.php/Computational_Cognitive_Neuroscience_Wiki:General_disclaimer\" title=\"Computational Cognitive Neuroscience Wiki:General disclaimer\">Disclaimers</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/ccnlab/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/ccnlab/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /ccnlab/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/ccnlab/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":139});
} );</script>
	

</body></html>";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="control panel for main parameters and functions in model";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="LeabraUnitSpec_0_act";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=.networks[0].specs[0]$$;
     mbr=LeabraUnitSpec::act;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="LeabraCycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=.programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="StableConSpec_xcal";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=.networks[0].specs[3]$$;
     mbr=LeabraConSpec::xcal;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[3] {
     label="LeabraCycle_cycle_mon";
     short_label=0;
     cust_label=1;
     desc="run the cycle monitor";
     cust_desc=1;
     base=.programs.gp[0][5].vars[1]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[4] {
     label="LeabraUnitSpec_0_act_avg";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act_avg;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[5] {
     label="TopDown_wt_scale";
     short_label=0;
     cust_label=1;
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler";
     cust_desc=0;
     base=.networks[0].specs[3].children[0]$$;
     mbr=LeabraConSpec::wt_scale;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[6] {
     label="HiddenLayer_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=.networks[0].specs[1]$$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[7] {
     label="Output_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=.networks[0].specs[1].children[0]$$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[8] {
     label="unit_avg_l";
     short_label=0;
     cust_label=1;
     desc=" parameters for computing the avg_l long-term floating average that drives BCM-style hebbian learning";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::avg_l;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[9] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="g_bar_l";
     short_label=0;
     cust_label=1;
     desc=" constant leak (potassium, K+) channels -- determines resting potential (typically higher than resting potential of K)";
     cust_desc=0;
     base=.networks[0].specs[0].g_bar$$;
     mbr=LeabraChannels::l;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="leabra_unit_spec_0_kna_adapt";
     short_label=0;
     cust_label=0;
     desc=" sodium-gated potassium channel adaptation mechanism -- evidence supports at least 3 different time constants: M-type (fast), Slick (medium), and Slack (slow)";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::kna_adapt;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{on=true: rate_rise=0.8: f_on=true: f_rise=0.05: f_max=0.1: f_tau=50: m_on=true: m_rise=0.02: m_max=0.1: m_tau=200: s_on=true: s_rise=0.005: s_max=0.2: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: }": range="": notes="": };
    };
    ControlPanelMember @[12] {
     label="leabra_unit_spec_0_g_bar";
     short_label=0;
     cust_label=0;
     desc=" [Defaults: 1, .1, 1] maximal conductances for channels";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::g_bar;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{e=1: l=0.2: i=1: k=1: }": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="leabra_unit_spec_0_dt";
     short_label=0;
     cust_label=0;
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::dt;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="{integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.30303: net_dt=0.714286: }": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Train_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][1]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Train_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Train_Step";
     short_label=0;
     cust_label=1;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Train_Stop";
     short_label=0;
     cust_label=1;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="Cycle_Remove_All_Rows";
     short_label=0;
     cust_label=1;
     desc=" remove all of the rows of data, but keep the column structure";
     cust_desc=0;
     base=.data.gp[1][1]$$;
     mth=DataTable::RemoveAllRows;
    };
    ControlPanelMethod @[5] {
     label="Batch_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[6] {
     label="Batch_Run";
     short_label=0;
     cust_label=1;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[7] {
     label="Batch_Step";
     short_label=0;
     cust_label=1;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[8] {
     label="Batch_Stop";
     short_label=0;
     cust_label=1;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="StableConSpec_lrate";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=STABLE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="top_down_rel";
     short_label=0;
     cust_label=1;
     desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
     cust_desc=0;
     base=.networks[0].specs[3].children[0].wt_scale$$;
     mbr=WtScaleSpec::rel;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=STABLE: saved_value="": range="0:1:0.1": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=1;
   proj_name="leabra_ra25_fffb";
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster="blanca_ccn";
   clusters="blanca_ccn";
   users="oreilly";
   last_submit_time="2016_03_09_01_01_18";
   notes="test4";
   label=;
   extra_files=;
   svn_repo="grey_run";
   repo_url="https://grey.colorado.edu/svn/clusterun";
   queue=;
   run_time="1h";
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=2;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=5;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
  ParamSet @[0] {
   name="ControlPanel_02_24_16_gbar2";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="g_bar_l = 0.2, requires weaker inhib -- but maybe \"smoother\" learning?";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="LeabraUnitSpec_0_act";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: thr=0.5: gain=100: nvar=0.005: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="LeabraCycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=$.programs.gp[0][5].vars[0]$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="StableConSpec_xcal";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::xcal;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: m_lrn=1: set_l_lrn=false: l_lrn=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[3] {
     label="LeabraCycle_cycle_mon";
     short_label=0;
     cust_label=1;
     desc="run the cycle monitor";
     cust_desc=1;
     base=$.programs.gp[0][5].vars[1]$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[4] {
     label="LeabraUnitSpec_0_act_avg";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act_avg;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[5] {
     label="TopDown_wt_scale";
     short_label=0;
     cust_label=1;
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler";
     cust_desc=0;
     base=$.networks[0].specs[3].children[0]$;
     mbr=LeabraConSpec::wt_scale;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: abs=1: rel=0.2: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[6] {
     label="HiddenLayer_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=$.networks[0].specs[1]$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: on=true: gi=1.7: ff=1: ff_max_vs_avg=0: fb=0.5: fb_max_vs_avg=0: fb_tau=1.4: ff0=0.1: fb_dt=0.714286: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[7] {
     label="Output_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=$.networks[0].specs[1].children[0]$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: on=true: gi=1.7: ff=1: ff_max_vs_avg=0: fb=0.5: fb_max_vs_avg=0: fb_tau=1.4: ff0=0.1: fb_dt=0.714286: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[8] {
     label="unit_avg_l";
     short_label=0;
     cust_label=1;
     desc=" parameters for computing the avg_l long-term floating average that drives BCM-style hebbian learning";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::avg_l;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.0346154: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[9] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.04": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="g_bar_l";
     short_label=0;
     cust_label=1;
     desc=" constant leak (potassium, K+) channels -- determines resting potential (typically higher than resting potential of K)";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::l;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.2": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date=;
  };
  ParamSet @[1] {
   name="ControlPanel_02_24_16_gbar1";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="g_bar_l = 0.1";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="LeabraUnitSpec_0_act";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: thr=0.5: gain=100: nvar=0.005: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="LeabraCycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=1;
     base=$.programs.gp[0][5].vars[0]$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="StableConSpec_xcal";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::xcal;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: m_lrn=1: set_l_lrn=false: l_lrn=0.1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[3] {
     label="LeabraCycle_cycle_mon";
     short_label=0;
     cust_label=1;
     desc="run the cycle monitor";
     cust_desc=1;
     base=$.programs.gp[0][5].vars[1]$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[4] {
     label="LeabraUnitSpec_0_act_avg";
     short_label=0;
     cust_label=1;
     desc="control panel for main parameters and functions in model";
     cust_desc=1;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act_avg;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: s_in_s=0.9: ss_dt=0.5: s_dt=0.5: m_dt=0.1: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[5] {
     label="TopDown_wt_scale";
     short_label=0;
     cust_label=1;
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler";
     cust_desc=0;
     base=$.networks[0].specs[3].children[0]$;
     mbr=LeabraConSpec::wt_scale;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: abs=1: rel=0.2: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[6] {
     label="HiddenLayer_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=$.networks[0].specs[1]$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: on=true: gi=1.8: ff=1: ff_max_vs_avg=0: fb=0.5: fb_max_vs_avg=0: fb_tau=1.4: ff0=0.1: fb_dt=0.714286: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[7] {
     label="Output_lay_inhib";
     short_label=0;
     cust_label=1;
     desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition";
     cust_desc=0;
     base=$.networks[0].specs[1].children[0]$;
     mbr=LeabraLayerSpec::lay_inhib;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: on=true: gi=1.8: ff=1: ff_max_vs_avg=0: fb=0.5: fb_max_vs_avg=0: fb_tau=1.4: ff0=0.1: fb_dt=0.714286: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[8] {
     label="unit_avg_l";
     short_label=0;
     cust_label=1;
     desc=" parameters for computing the avg_l long-term floating average that drives BCM-style hebbian learning";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::avg_l;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=0: state=STABLE: saved_value="{user_data_=NULL: init=0.4: max=1.5: min=0.2: tau=10: lrn_max=0.05: lrn_min=0.005: dt=0.1: lrn_fact=0.0346154: }": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[9] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[3]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.04": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="g_bar_l";
     short_label=0;
     cust_label=1;
     desc=" constant leak (potassium, K+) channels -- determines resting potential (typically higher than resting potential of K)";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::l;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.1": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date=;
  };
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="random_5x5_25";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] "evt_0";"evt_1";"evt_2";"evt_3";"evt_4";"evt_5";"evt_6";"evt_7";"evt_8";"evt_9";
"evt_10";"evt_11";"evt_12";"evt_13";"evt_14";"evt_15";"evt_16";"evt_17";"evt_18";"evt_19";
"evt_20";"evt_21";"evt_22";"evt_23";"evt_24";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       name="ar";
      [5 5 25] 1;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
1;0;0;0;1;1;1;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;1;1;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;0;1;0;1;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;1;0;1;1;
0;1;0;0;0;1;0;1;0;1;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0;0;0;1;0;0;1;1;0;0;
0;0;0;0;0;1;0;0;0;1;
0;1;0;0;1;0;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;0;1;0;0;1;0;1;
0;0;0;0;0;1;1;1;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;0;0;1;0;1;1;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;1;0;0;0;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
1;0;0;0;1;0;1;0;1;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;1;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;1;
1;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;1;
1;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;1;1;1;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;1;1;0;0;0;0;0;
0;1;0;0;0;      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       name="ar";
      [5 5 25] 0;1;0;0;1;1;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;0;
0;1;0;1;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
1;0;1;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;0;1;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;1;1;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;0;0;0;1;0;
1;0;1;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;0;1;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;1;1;1;1;0;
0;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;1;0;0;1;1;0;1;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;1;0;0;0;1;
0;1;0;0;0;0;0;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;0;0;
1;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;0;1;0;
0;1;1;0;0;0;0;0;0;0;
1;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;0;0;1;1;1;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;1;0;0;1;0;1;0;1;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;1;0;1;0;0;
0;0;1;0;0;0;0;0;0;0;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;0;0;1;0;0;1;0;0;
1;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;0;1;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;1;0;0;0;
0;0;0;1;0;0;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;0;1;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [25] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 49;49;49;49;49;49;49;49;49;49;
49;49;49;49;49;49;49;49;49;49;
49;49;49;49;49;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_135";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] "evt_11";"evt_10";"evt_24";"evt_2";"evt_17";"evt_16";"evt_3";"evt_18";"evt_23";"evt_19";
"evt_4";"evt_21";"evt_22";"evt_20";"evt_0";"evt_14";"evt_7";"evt_6";"evt_1";"evt_12";
"evt_5";"evt_13";"evt_8";"evt_9";"evt_15";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] ;;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
     float_Data @[5] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 13;13;13;13;13;13;13;13;13;13;
13;13;13;13;13;13;13;13;13;13;
13;13;13;13;13;      };
     };
     float_Data @[6] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     float_Data @[7] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     float_Data @[8] {
      name="cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.99874568;0.99969035;0.99986267;0.99977738;0.99958843;0.99990028;0.99986476;0.99958342;0.99978876;0.99970537;
0.99984574;0.99949485;0.99948341;0.99952382;0.99987721;0.99947834;0.99937487;0.99964118;0.99979705;0.9990173;
0.99961966;0.99949723;0.99954432;0.99985248;0.99988824;      };
     };
     float_Data @[9] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;      };
     };
     float_Data @[10] {
      name="max_avg_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.87504649;0.88616997;0.86703932;0.88431054;0.83970469;0.84885669;0.87361741;0.8748399;0.86574018;0.83867192;
0.8613106;0.81949055;0.840662;0.87402332;0.86112517;0.8602019;0.84335226;0.89185274;0.87799639;0.84610724;
0.84012932;0.86822236;0.84807682;0.86553824;0.86155945;      };
     };
     float_Data @[11] {
      name="mean_Hidden_0_act_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.25287366;0.25591901;0.26046547;0.27358213;0.26051345;0.25733149;0.25380623;0.26270705;0.2602278;0.27038881;
0.26645729;0.25076011;0.25905505;0.25898629;0.25798216;0.25131139;0.26526341;0.25761139;0.25773209;0.25886813;
0.25765103;0.26869491;0.25438881;0.26004943;0.26251638;      };
     };
     float_Data @[12] {
      name="mean_Hidden_1_act_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.2279962;0.23382252;0.23924288;0.24189325;0.23427361;0.23273443;0.23310605;0.23963688;0.23836081;0.24364123;
0.23489557;0.22766311;0.23612785;0.24523437;0.23777877;0.23255605;0.24423188;0.23199686;0.2379128;0.23474762;
0.23380284;0.24125743;0.23321049;0.23553683;0.23557299;      };
     };
     float_Data @[13] {
      name="mean_Output_act_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.23359212;0.23622297;0.23706193;0.23787716;0.22939278;0.23473753;0.23597457;0.23949902;0.23608924;0.2386373;
0.23183544;0.23071672;0.2326774;0.24688284;0.23651582;0.23396724;0.23267189;0.23447295;0.23227943;0.23431771;
0.23924297;0.24002737;0.23005821;0.23985223;0.22470343;      };
     };
     float_Data @[14] {
      name="Hidden_0_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.99919283;0.99996561;0.99991095;0.99939662;0.99932224;0.99994242;0.99994349;0.99963915;0.99995583;0.99961227;
0.99993432;0.99903172;0.99972701;0.99998319;0.9999851;0.99977368;0.9992221;0.99975282;0.99999416;0.99998426;
0.99998444;0.99946922;0.99911249;0.99985725;0.99993742;      };
     };
     float_Data @[15] {
      name="Hidden_1_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.99704421;0.99910533;0.999677;0.99993557;0.99944305;0.99975842;0.99965072;0.999111;0.99941027;0.99950385;
0.99960297;0.99945289;0.99872321;0.99858809;0.9996466;0.99866122;0.99890256;0.99917084;0.99939704;0.99706769;
0.99887437;0.99902248;0.9995203;0.99970037;0.99972743;      };
     };
     float_Data @[16] {
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       name="ar";
      [25] 0.98594415;0.98749638;0.99144608;0.98753941;0.99138474;0.99133718;0.98716176;0.98211181;0.99214798;0.99194467;
0.99157995;0.99102932;0.99189103;0.9806993;0.98807585;0.98806286;0.99581456;0.98535597;0.98783946;0.98735797;
0.96902966;0.98948711;0.99372107;0.98680663;0.9977594;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [25] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="CycleOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_132";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_1";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="quarter";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     int_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_1";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="cycle";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[8] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[9] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[10] {
      name="max_avg_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[11] {
      name="Hidden_0_ungp_1_i_val_g_i";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[12] {
      name="Hidden_1_ungp_1_i_val_g_i";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[13] {
      name="Output_ungp_1_i_val_g_i";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[14] {
      name="Hidden_0_acts_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[15] {
      name="Hidden_1_acts_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[16] {
      name="Output_acts_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[17] {
      name="Hidden_0_netin_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[18] {
      name="Hidden_1_netin_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
     float_Data @[19] {
      name="Output_netin_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [0]     };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_135";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;2;2;2;2;2;2;
2;2;2;2;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;3;3;3;3;
3;3;3;3;3;3;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;4;4;4;4;4;4;4;
4;4;4;5;5;5;5;5;5;5;
5;5;5;5;5;5;5;5;5;5;
5;5;5;5;5;5;5;5;5;5;
5;5;5;5;5;5;5;5;5;5;
5;6;6;6;6;6;6;6;6;6;
6;6;6;6;6;6;6;6;6;6;
6;6;6;6;6;6;6;6;6;6;
6;6;6;6;6;7;7;7;7;7;
7;7;7;7;7;7;7;7;7;7;
7;7;7;7;7;7;7;7;7;7;
7;7;7;8;8;8;8;8;8;8;
8;8;8;8;8;8;8;8;8;8;
8;8;8;8;8;8;8;8;8;8;
8;8;8;8;8;8;8;8;8;8;
8;8;8;8;8;8;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;9;9;9;9;9;9;9;9;
9;9;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_136";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;0;1;2;3;4;5;6;7;
8;9;10;11;12;13;14;15;16;17;
18;19;20;21;22;23;24;25;26;27;
28;29;30;31;32;33;34;35;36;37;
38;39;40;41;0;1;2;3;4;5;
6;7;8;9;10;11;12;13;14;15;
16;17;18;19;20;21;22;23;24;25;
26;27;28;29;30;31;0;1;2;3;
4;5;6;7;8;9;10;11;12;13;
14;15;16;17;18;19;20;21;22;23;
24;25;26;0;1;2;3;4;5;6;
7;8;9;10;11;12;13;14;15;16;
17;18;19;20;21;22;23;24;25;26;
27;28;29;30;31;32;33;34;35;36;
37;0;1;2;3;4;5;6;7;8;
9;10;11;12;13;14;15;16;17;18;
19;20;21;22;23;24;25;26;27;28;
29;30;31;32;33;0;1;2;3;4;
5;6;7;8;9;10;11;12;13;14;
15;16;17;18;19;20;21;22;23;24;
25;26;27;0;1;2;3;4;5;6;
7;8;9;10;11;12;13;14;15;16;
17;18;19;20;21;22;23;24;25;26;
27;28;29;30;31;32;33;34;35;36;
37;38;39;40;41;42;0;1;2;3;
4;5;6;7;8;9;10;11;12;13;
14;15;16;17;18;19;20;21;22;23;
24;25;26;27;28;29;30;31;32;33;
34;35;0;1;2;3;4;5;6;7;
8;9;10;11;12;13;14;15;16;17;
18;19;20;21;22;23;24;25;26;27;
28;29;30;31;32;33;34;35;36;37;
38;39;40;41;42;43;44;45;46;47;
48;49;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 6.1263947;5.5384412;5.5411472;4.6366572;4.4367957;3.7328269;3.2426133;2.4309249;1.9818989;1.3580242;
0.89464593;0.86202627;0.48903361;0.66042358;0.47947678;0.285642;0.30337203;0.24684925;0.20802513;0.13861673;
0.081512108;0.13257816;0.072016977;0.075207815;0.14026463;0.058461152;0.014084275;0.033542652;0.10245495;0.014530662;
0.011403176;0.067919753;0.11454382;0.12405434;0.041265745;0.030700855;0;0.035643231;0.02660092;0.038322344;
0.028971005;0.039837681;0.032855362;0;0.037911974;0;0.010176315;0.033112686;0;0;
6.3461394;5.9414606;5.2390642;4.6668758;4.0410142;3.3946235;2.8949749;2.7222624;1.8145577;1.2924877;
0.90109462;0.62037814;0.46928635;0.33291447;0.19880992;0.43416429;0.28364587;0.17208895;0.18974313;0.11631943;
0.10867529;0.047198132;0.032966413;0.049671154;0.031825121;0.025652274;0.020604677;0.023983225;0.010414612;0.011635362;
0;0;6.2316108;5.8925524;5.1310973;4.7505379;4.1951289;3.8785174;2.9215031;2.2790651;
2.0703406;1.5949483;1.1807486;1.0443174;0.58958411;0.40521142;0.22910929;0.25453591;0.07938619;0.072270796;
0.053523168;0.058221225;0.033063766;0.040782247;0.04254207;0.090511829;0.050185345;0.027428498;0.048572827;0.025671011;
0.021895418;0.023114281;0;0.011924258;0;0.013513675;0.025247861;0.026895378;0.016139738;0;
0.023963241;0.018830016;0;0;6.9677372;6.0302944;5.711813;4.7863307;4.5969987;3.4480255;
2.9895172;2.4133182;2.0538952;1.6576732;1.0971308;0.6653614;0.3327921;0.2715854;0.20733562;0.093452126;
0.032191698;0.038331598;0.012360329;0.031708822;0.01012263;0.038544342;0;0.010039339;0;0.02639061;
0;0.010197734;0.013910574;0.021590116;0;0;6.830606;6.3069334;5.5083985;4.4299679;
4.0922136;3.1788361;2.9633584;2.0791554;1.4404598;1.2291054;0.82421815;0.54139847;0.48189175;0.29298896;
0.22713299;0.19486767;0.18963322;0.12355185;0.058143377;0.029209619;0.080295585;0.01354905;0.033193037;0.048331171;
0.013950245;0;0;6.3658886;6.0284486;5.284339;4.5521345;3.8627355;3.3118789;2.6783032;
2.0427098;1.8812232;1.4384732;1.3486824;0.78851289;0.70016211;0.41462234;0.35957652;0.31764388;0.16688475;
0.11046048;0.063482404;0.089816548;0.048652399;0.02609778;0.040882912;0;0.038504921;0.012167033;0.03331431;
0.013056346;0.010618703;0.021004254;0.011146298;0.017519059;0.02175826;0;0.023881145;0.012192939;0;
0;5.7888427;5.5335121;5.1054993;4.567718;4.2192283;3.9810076;2.7778592;2.4821386;1.8454956;
1.7788744;0.97073007;0.85776186;0.56282747;0.5376631;0.38227141;0.34821475;0.19012281;0.12469486;0.14314121;
0.21900928;0.051581249;0.096705377;0.037230648;0.02244718;0.023466611;0.010836368;0.010253137;0;0.01214575;
0;0.020687765;0.010498375;0;0;6.2062397;5.2358303;4.9197526;4.4679108;4.2047024;
3.653235;3.1569104;2.7728314;2.081161;2.0769186;1.3330258;1.272874;1.0343945;0.76839906;0.4324373;
0.33863869;0.22183356;0.18395886;0.14933664;0.076314084;0.07566727;0.065749943;0.010712402;0.02352396;0.03607811;
0.025351919;0;0;6.1483202;5.2443914;4.7401247;4.5316896;4.3251195;3.388108;2.8667865;
2.4172523;1.9651788;1.4336269;1.1165807;0.73478669;0.57734913;0.32057679;0.43414438;0.27106661;0.22053806;
0.18644589;0.16780235;0.14631914;0.46578225;0.19433506;0.14204431;0.047541343;0.059641343;0.058229484;0.027204605;
0.010517784;0.013399652;0.010497527;0.048277359;0.019711327;0.025157774;0.038769223;0.013581108;0.023316421;0.013543243;
0.039092187;0.054904416;0.021925528;0.025895773;0;0;5.7533703;5.2113695;4.900363;4.6296248;
4.0321217;3.4830177;2.9796531;2.448796;2.0505912;2.0561471;1.2955217;1.3058336;0.98555398;0.83700109;
0.73983783;0.35705951;0.25097579;0.17005569;0.1503118;0.07381057;0.09929055;0.099533804;0.11184911;0.1144617;
0.054288365;0.021825762;0.060771357;0.05615003;0.034328081;0.043811779;0.045597345;0.02608254;0.012170365;0.010149231;
0;0;6.1263947;5.5384412;5.5411472;4.6366572;4.4367957;3.7328269;3.2426133;2.4309249;
1.9818989;1.3580242;0.89464593;0.86202627;0.48903361;0.66042358;0.47947678;0.285642;0.30337203;0.24684925;
0.20802513;0.13861673;0.081512108;0.13257816;0.072016977;0.075207815;0.14026463;0.058461152;0.014084275;0.033542652;
0.10245495;0.014530662;0.011403176;0.067919753;0.11454382;0.12405434;0.041265745;0.030700855;0;0.035643231;
0.02660092;0.038322344;0.028971005;0.039837681;0.032855362;0;0.037911974;0;0.010176315;0.033112686;
0;0;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 25;25;25;25;25;25;25;25;23;22;
21;20;18;18;14;18;10;10;13;8;
6;5;4;6;7;4;1;3;7;1;
1;5;7;5;3;2;0;2;2;2;
2;3;3;0;3;0;1;2;0;0;
25;25;25;25;25;25;25;25;25;23;
22;20;14;17;8;13;13;11;10;8;
8;4;3;3;3;2;2;2;1;1;
0;0;25;25;25;25;25;25;25;25;
25;23;23;24;19;16;11;11;5;5;
3;5;3;3;2;6;4;2;4;1;
2;2;0;1;0;1;2;2;1;0;
2;1;0;0;25;25;25;25;25;25;
25;25;25;24;21;20;15;14;12;6;
3;2;1;2;1;3;0;1;0;2;
0;1;1;2;0;0;25;25;25;25;
25;25;25;25;25;23;22;21;17;11;
12;8;8;7;3;2;5;1;3;4;
1;0;0;25;25;25;25;25;25;25;
25;25;23;24;21;19;17;13;14;11;
9;5;4;4;1;3;0;3;1;3;
1;1;2;1;1;2;0;2;1;0;
0;25;25;25;25;25;25;24;25;24;
25;22;22;17;17;14;13;8;6;6;
5;4;3;1;2;2;1;1;0;1;
0;2;1;0;0;25;25;25;25;25;
25;25;25;24;25;23;21;21;19;18;
13;10;9;8;5;5;4;1;2;3;
2;0;0;25;25;25;25;25;25;25;
25;25;24;23;22;18;16;18;12;11;
8;7;7;12;11;10;4;4;4;2;
1;1;1;4;1;2;2;1;2;1;
3;4;2;2;0;0;25;25;25;25;
25;25;25;25;25;25;24;24;22;21;
18;15;13;8;8;4;7;7;6;7;
3;2;4;5;2;4;4;2;1;1;
0;0;25;25;25;25;25;25;25;25;
23;22;21;20;18;18;14;18;10;10;
13;8;6;5;4;6;7;4;1;3;
7;1;1;5;7;5;3;2;0;2;
2;2;2;3;3;0;3;0;1;2;
0;0;      };
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0.079999983;0.12;
0.16000003;0.19999999;0.27999997;0.27999997;0.44;0.27999997;0.60000002;0.60000002;0.48000002;0.68000001;
0.75999999;0.80000001;0.84000003;0.75999999;0.72000003;0.84000003;0.95999998;0.88;0.72000003;0.95999998;
0.95999998;0.80000001;0.72000003;0.80000001;0.88;0.92000002;1;0.92000002;0.92000002;0.92000002;
0.92000002;0.88;0.88;1;0.88;1;0.95999998;0.92000002;1;1;
0;0;0;0;0;0;0;0;0;0.079999983;
0.12;0.19999999;0.44;0.31999999;0.68000001;0.48000002;0.48000002;0.56;0.60000002;0.68000001;
0.68000001;0.84000003;0.88;0.88;0.88;0.92000002;0.92000002;0.92000002;0.95999998;0.95999998;
1;1;0;0;0;0;0;0;0;0;
0;0.079999983;0.079999983;0.040000021;0.24000001;0.36000001;0.56;0.56;0.80000001;0.80000001;
0.88;0.80000001;0.88;0.88;0.92000002;0.75999999;0.84000003;0.92000002;0.84000003;0.95999998;
0.92000002;0.92000002;1;0.95999998;1;0.95999998;0.92000002;0.92000002;0.95999998;1;
0.92000002;0.95999998;1;1;0;0;0;0;0;0;
0;0;0;0.040000021;0.16000003;0.19999999;0.39999998;0.44;0.51999998;0.75999999;
0.88;0.92000002;0.95999998;0.92000002;0.95999998;0.88;1;0.95999998;1;0.92000002;
1;0.95999998;0.95999998;0.92000002;1;1;0;0;0;0;
0;0;0;0;0;0.079999983;0.12;0.16000003;0.31999999;0.56;
0.51999998;0.68000001;0.68000001;0.72000003;0.88;0.92000002;0.80000001;0.95999998;0.88;0.84000003;
0.95999998;1;1;0;0;0;0;0;0;0;
0;0;0.079999983;0.040000021;0.16000003;0.24000001;0.31999999;0.48000002;0.44;0.56;
0.63999999;0.80000001;0.84000003;0.84000003;0.95999998;0.88;1;0.88;0.95999998;0.88;
0.95999998;0.95999998;0.92000002;0.95999998;0.95999998;0.92000002;1;0.92000002;0.95999998;1;
1;0;0;0;0;0;0;0.040000021;0;0.040000021;
0;0.12;0.12;0.31999999;0.31999999;0.44;0.48000002;0.68000001;0.75999999;0.75999999;
0.80000001;0.84000003;0.88;0.95999998;0.92000002;0.92000002;0.95999998;0.95999998;1;0.95999998;
1;0.92000002;0.95999998;1;1;0;0;0;0;0;
0;0;0;0.040000021;0;0.079999983;0.16000003;0.16000003;0.24000001;0.27999997;
0.48000002;0.60000002;0.63999999;0.68000001;0.80000001;0.80000001;0.84000003;0.95999998;0.92000002;0.88;
0.92000002;1;1;0;0;0;0;0;0;0;
0;0;0.040000021;0.079999983;0.12;0.27999997;0.36000001;0.27999997;0.51999998;0.56;
0.68000001;0.72000003;0.72000003;0.51999998;0.56;0.60000002;0.84000003;0.84000003;0.84000003;0.92000002;
0.95999998;0.95999998;0.95999998;0.84000003;0.95999998;0.92000002;0.92000002;0.95999998;0.92000002;0.95999998;
0.88;0.84000003;0.92000002;0.92000002;1;1;0;0;0;0;
0;0;0;0;0;0;0.040000021;0.040000021;0.12;0.16000003;
0.27999997;0.39999998;0.48000002;0.68000001;0.68000001;0.84000003;0.72000003;0.72000003;0.75999999;0.72000003;
0.88;0.92000002;0.84000003;0.80000001;0.92000002;0.84000003;0.84000003;0.92000002;0.95999998;0.95999998;
1;1;0;0;0;0;0;0;0;0;
0.079999983;0.12;0.16000003;0.19999999;0.27999997;0.27999997;0.44;0.27999997;0.60000002;0.60000002;
0.48000002;0.68000001;0.75999999;0.80000001;0.84000003;0.75999999;0.72000003;0.84000003;0.95999998;0.88;
0.72000003;0.95999998;0.95999998;0.80000001;0.72000003;0.80000001;0.88;0.92000002;1;0.92000002;
0.92000002;0.92000002;0.92000002;0.88;0.88;1;0.88;1;0.95999998;0.92000002;
1;1;      };
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 1;1;1;1;1;1;1;1;0.92000002;0.88;
0.83999997;0.80000001;0.72000003;0.72000003;0.56;0.72000003;0.40000001;0.40000001;0.51999998;0.31999999;
0.23999999;0.2;0.16;0.23999999;0.28;0.16;0.039999999;0.12;0.28;0.039999999;
0.039999999;0.2;0.28;0.2;0.12;0.079999998;0;0.079999998;0.079999998;0.079999998;
0.079999998;0.12;0.12;0;0.12;0;0.039999999;0.079999998;0;0;
1;1;1;1;1;1;1;1;1;0.92000002;
0.88;0.80000001;0.56;0.68000001;0.31999999;0.51999998;0.51999998;0.44;0.40000001;0.31999999;
0.31999999;0.16;0.12;0.12;0.12;0.079999998;0.079999998;0.079999998;0.039999999;0.039999999;
0;0;1;1;1;1;1;1;1;1;
1;0.92000002;0.92000002;0.95999998;0.75999999;0.63999999;0.44;0.44;0.2;0.2;
0.12;0.2;0.12;0.12;0.079999998;0.23999999;0.16;0.079999998;0.16;0.039999999;
0.079999998;0.079999998;0;0.039999999;0;0.039999999;0.079999998;0.079999998;0.039999999;0;
0.079999998;0.039999999;0;0;1;1;1;1;1;1;
1;1;1;0.95999998;0.83999997;0.80000001;0.60000002;0.56;0.47999999;0.23999999;
0.12;0.079999998;0.039999999;0.079999998;0.039999999;0.12;0;0.039999999;0;0.079999998;
0;0.039999999;0.039999999;0.079999998;0;0;1;1;1;1;
1;1;1;1;1;0.92000002;0.88;0.83999997;0.68000001;0.44;
0.47999999;0.31999999;0.31999999;0.28;0.12;0.079999998;0.2;0.039999999;0.12;0.16;
0.039999999;0;0;1;1;1;1;1;1;1;
1;1;0.92000002;0.95999998;0.83999997;0.75999999;0.68000001;0.51999998;0.56;0.44;
0.36000001;0.2;0.16;0.16;0.039999999;0.12;0;0.12;0.039999999;0.12;
0.039999999;0.039999999;0.079999998;0.039999999;0.039999999;0.079999998;0;0.079999998;0.039999999;0;
0;1;1;1;1;1;1;0.95999998;1;0.95999998;
1;0.88;0.88;0.68000001;0.68000001;0.56;0.51999998;0.31999999;0.23999999;0.23999999;
0.2;0.16;0.12;0.039999999;0.079999998;0.079999998;0.039999999;0.039999999;0;0.039999999;
0;0.079999998;0.039999999;0;0;1;1;1;1;1;
1;1;1;0.95999998;1;0.92000002;0.83999997;0.83999997;0.75999999;0.72000003;
0.51999998;0.40000001;0.36000001;0.31999999;0.2;0.2;0.16;0.039999999;0.079999998;0.12;
0.079999998;0;0;1;1;1;1;1;1;1;
1;1;0.95999998;0.92000002;0.88;0.72000003;0.63999999;0.72000003;0.47999999;0.44;
0.31999999;0.28;0.28;0.47999999;0.44;0.40000001;0.16;0.16;0.16;0.079999998;
0.039999999;0.039999999;0.039999999;0.16;0.039999999;0.079999998;0.079999998;0.039999999;0.079999998;0.039999999;
0.12;0.16;0.079999998;0.079999998;0;0;1;1;1;1;
1;1;1;1;1;1;0.95999998;0.95999998;0.88;0.83999997;
0.72000003;0.60000002;0.51999998;0.31999999;0.31999999;0.16;0.28;0.28;0.23999999;0.28;
0.12;0.079999998;0.16;0.2;0.079999998;0.16;0.16;0.079999998;0.039999999;0.039999999;
0;0;1;1;1;1;1;1;1;1;
0.92000002;0.88;0.83999997;0.80000001;0.72000003;0.72000003;0.56;0.72000003;0.40000001;0.40000001;
0.51999998;0.31999999;0.23999999;0.2;0.16;0.23999999;0.28;0.16;0.039999999;0.12;
0.28;0.039999999;0.039999999;0.2;0.28;0.2;0.12;0.079999998;0;0.079999998;
0.079999998;0.079999998;0.079999998;0.12;0.12;0;0.12;0;0.039999999;0.079999998;
0;0;      };
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.78333336;0.72666663;0.73666674;0.63;0.59000003;0.52666664;0.46999997;0.37333336;0.31333333;0.23999999;
0.17333335;0.16;0.10333332;0.11;0.1;0.073333345;0.056666661;0.050000001;0.053333331;0.036666665;
0.02;0.023333333;0.02;0.02;0.029999999;0.016666668;0.0033333334;0.0099999998;0.023333333;0.0033333334;
0.0033333334;0.02;0.030000003;0.026666667;0.0099999998;0.0066666668;0;0.0099999998;0.0066666668;0.0099999998;
0.0066666668;0.0099999998;0.0099999998;0;0.0099999998;0;0.0033333334;0.0066666668;0;0;
0.81333333;0.7899999;0.70666665;0.63666666;0.57999998;0.49666664;0.42333335;0.39666665;0.29999995;0.21333331;
0.17;0.13333333;0.1;0.080000013;0.039999999;0.076666668;0.060000006;0.039999999;0.046666667;0.029999997;
0.026666665;0.013333334;0.0099999998;0.013333334;0.0099999998;0.0066666668;0.0066666668;0.0066666668;0.0033333334;0.0033333334;
0;0;0.79666674;0.77333331;0.69333339;0.63666666;0.57666665;0.55000001;0.43999997;0.34666672;
0.32333332;0.28666666;0.20999999;0.19000001;0.13666667;0.096666671;0.053333331;0.053333335;0.016666668;0.016666668;
0.0099999998;0.016666668;0.0099999998;0.0099999998;0.0099999998;0.023333333;0.013333334;0.0066666668;0.013333334;0.0066666668;
0.0066666668;0.0066666668;0;0.0033333334;0;0.0033333334;0.0066666668;0.0066666668;0.0033333334;0;
0.0066666668;0.0033333334;0;0;0.8499999;0.7899999;0.76333338;0.64999992;0.6400001;0.50999999;
0.43999997;0.37;0.34;0.28333333;0.19333336;0.12666667;0.070000008;0.060000006;0.050000001;0.023333333;
0.0099999998;0.0099999998;0.0033333334;0.0066666668;0.0033333334;0.0099999998;0;0.0033333334;0;0.0066666668;
0;0.0033333334;0.0033333334;0.0066666668;0;0;0.83999997;0.78666663;0.71333331;0.62333322;
0.56333333;0.45666668;0.42666668;0.33333331;0.25333333;0.22;0.15333334;0.11;0.093333319;0.056666665;
0.046666667;0.039999999;0.039999999;0.029999997;0.013333334;0.0066666668;0.02;0.0033333334;0.0099999998;0.013333334;
0.0033333334;0;0;0.79000002;0.80666661;0.70333326;0.62;0.52666664;0.47333339;0.39333332;
0.32666668;0.31333333;0.23666666;0.22666667;0.14333333;0.13666667;0.083333343;0.076666668;0.073333338;0.046666667;
0.029999997;0.016666668;0.023333335;0.013333334;0.0066666668;0.0099999998;0;0.0099999998;0.0033333334;0.0099999998;
0.0033333334;0.0033333334;0.0066666668;0.0033333334;0.0033333334;0.0066666668;0;0.0066666668;0.0033333334;0;
0;0.74666667;0.73000002;0.67666662;0.61999995;0.57666665;0.56666666;0.40333331;0.37333328;0.31000003;
0.27666667;0.16333336;0.16;0.11000001;0.11333333;0.073333338;0.070000008;0.036666665;0.026666667;0.029999997;
0.039999999;0.013333334;0.02;0.0099999998;0.0066666668;0.0066666668;0.0033333334;0.0033333334;0;0.0033333334;
0;0.0066666668;0.0033333334;0;0;0.7899999;0.71666664;0.66666663;0.63000005;0.60000008;
0.52333343;0.48333335;0.40666664;0.33000001;0.31999999;0.22666664;0.20999999;0.18666667;0.13333333;0.089999989;
0.07;0.050000001;0.043333329;0.033333331;0.02;0.02;0.016666668;0.0033333334;0.0066666668;0.0099999998;
0.0066666668;0;0;0.77999997;0.72333342;0.65333337;0.62333333;0.60000002;0.49666664;0.42666665;
0.3866666;0.33333337;0.24000002;0.18666667;0.15333334;0.12;0.07;0.086666673;0.063333333;0.056666665;
0.039999999;0.039999999;0.029999997;0.076666668;0.043333329;0.033333331;0.013333334;0.016666668;0.013333334;0.0066666668;
0.0033333334;0.0033333334;0.0033333334;0.013333334;0.0033333334;0.0066666668;0.0066666668;0.0033333334;0.0066666668;0.0033333334;
0.0099999998;0.013333334;0.0066666668;0.0066666668;0;0;0.73333335;0.69666666;0.64666665;0.64666665;
0.58333331;0.50666666;0.41666669;0.36333334;0.31000003;0.31999999;0.21666665;0.20000003;0.16000003;0.14999999;
0.13;0.073333338;0.056666665;0.036666669;0.033333331;0.016666668;0.023333333;0.026666665;0.026666667;0.029999999;
0.013333334;0.0066666668;0.016666668;0.016666668;0.0099999998;0.013333334;0.013333334;0.0066666668;0.0033333334;0.0033333334;
0;0;0.78333336;0.72666663;0.73666674;0.63;0.59000003;0.52666664;0.46999997;0.37333336;
0.31333333;0.23999999;0.17333335;0.16;0.10333332;0.11;0.1;0.073333345;0.056666661;0.050000001;
0.053333331;0.036666665;0.02;0.023333333;0.02;0.02;0.029999999;0.016666668;0.0033333334;0.0099999998;
0.023333333;0.0033333334;0.0033333334;0.02;0.030000003;0.026666667;0.0099999998;0.0066666668;0;0.0099999998;
0.0066666668;0.0099999998;0.0066666668;0.0099999998;0.0099999998;0;0.0099999998;0;0.0033333334;0.0066666668;
0;0;      };
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.35955039;0.37369403;0.3484875;0.44174516;0.46717575;0.55000001;0.60120386;0.69128466;0.7443893;0.81079024;
0.85913104;0.86515063;0.89624017;0.88372058;0.90182477;0.92892343;0.92433441;0.93560159;0.94619209;0.94867241;
0.95542145;0.94904017;0.96017921;0.96187669;0.95579112;0.96583474;0.96951997;0.97033888;0.96598846;0.97025734;
0.97454607;0.97108084;0.96911162;0.96954834;0.97502762;0.97554344;0.97815073;0.97785568;0.97885221;0.97870314;
0.98088872;0.98124909;0.98182136;0.98170602;0.98220396;0.9865877;0.98724401;0.98494017;0.98963547;0.98948991;
0.31517175;0.33043468;0.38150939;0.43398827;0.50667357;0.58572459;0.6312201;0.65892386;0.76190382;0.81555617;
0.85921317;0.89150757;0.90693361;0.92470741;0.93657106;0.91882461;0.92945135;0.94589883;0.94650596;0.95329255;
0.95894074;0.96420813;0.96693999;0.9679125;0.96847242;0.97238177;0.97321045;0.97645152;0.98096609;0.98321295;
0.98379195;0.98439193;0.34331429;0.32910097;0.3986468;0.43036309;0.49679032;0.54740953;0.64490259;0.70673889;
0.73750991;0.79365295;0.82964242;0.85021752;0.89770925;0.91110647;0.92844796;0.93206006;0.94857079;0.95589709;
0.96164614;0.9653585;0.967435;0.96776873;0.96242124;0.95884931;0.96530187;0.96492541;0.9704088;0.97719592;
0.97515702;0.97882766;0.98165083;0.98148888;0.98325467;0.98212057;0.9816187;0.98083043;0.98116112;0.98265833;
0.98191458;0.98232239;0.98432952;0.98373353;0.25862426;0.3146863;0.33669788;0.42910853;0.46803588;0.58691752;
0.6357643;0.69021761;0.73879814;0.78586107;0.83684003;0.8820253;0.91774476;0.92768168;0.93792915;0.94904482;
0.95848238;0.96037865;0.96612;0.97019494;0.97163332;0.97269088;0.9769007;0.97728711;0.97859251;0.9791646;
0.98069268;0.98164392;0.97968054;0.98007828;0.98236823;0.98314822;0.28307799;0.29025272;0.3717756;0.47387636;
0.52800965;0.61064833;0.64564407;0.73590165;0.80329514;0.82818764;0.86339194;0.89691794;0.90568805;0.92962128;
0.9387815;0.94475359;0.94797462;0.96142787;0.96464682;0.96813083;0.96966863;0.97240037;0.97491616;0.97569025;
0.978181;0.9814074;0.98097146;0.30539721;0.33488297;0.38781112;0.46671006;0.53984427;0.60127026;0.66138297;
0.73385984;0.75717866;0.80219239;0.81731546;0.87007463;0.88438886;0.9122113;0.91744405;0.92810178;0.94058937;
0.95101541;0.95401657;0.95798987;0.96120042;0.96464121;0.96812177;0.96910286;0.96958929;0.97359961;0.97513068;
0.97442627;0.97904378;0.97768021;0.97844523;0.98141187;0.98220032;0.98257446;0.98255587;0.9826597;0.98274148;
0.98441917;0.37111598;0.36675462;0.42638257;0.46903026;0.50954711;0.5369826;0.65865785;0.68698698;0.76273829;
0.76905149;0.85234016;0.86977935;0.90042174;0.9071942;0.92068017;0.92842078;0.94012725;0.95102853;0.95467246;
0.94799674;0.96637124;0.96558958;0.97117317;0.97224939;0.97664964;0.97671479;0.9774465;0.97994578;0.97925752;
0.98188287;0.98024541;0.98073852;0.98267287;0.98238814;0.32611394;0.38360769;0.40792966;0.45972854;0.48949468;
0.56392372;0.61027259;0.65394139;0.74112093;0.74149477;0.82495248;0.81940979;0.84929466;0.87545031;0.91933745;
0.92789996;0.93934625;0.94861162;0.95092559;0.95723605;0.96349519;0.96487135;0.96888709;0.97025651;0.97201699;
0.97278357;0.97580737;0.97719336;0.33820987;0.38415992;0.43629616;0.45723385;0.49780107;0.59408587;0.64079511;
0.69722033;0.75241882;0.80313802;0.84008521;0.88170546;0.90141606;0.92133325;0.91328275;0.93072975;0.9366287;
0.94156677;0.94586217;0.94944882;0.92167354;0.95060402;0.95095932;0.96453202;0.96622002;0.96909225;0.97045672;
0.9738608;0.97438139;0.97474074;0.97326064;0.97650069;0.97733098;0.97926527;0.97810829;0.97810936;0.97958517;
0.97801971;0.97454154;0.97937012;0.97992671;0.98176265;0.98515993;0.37917367;0.41176265;0.42253998;0.44699165;
0.52821946;0.58035541;0.63160461;0.69928068;0.73288155;0.74123526;0.81630445;0.82049936;0.86353421;0.87783265;
0.88509172;0.92402756;0.94016194;0.94809866;0.95467627;0.9632839;0.95699441;0.95800531;0.9546786;0.95754164;
0.96167761;0.96781003;0.96705317;0.96811628;0.97178;0.97389013;0.97252202;0.97417825;0.97458953;0.97834986;
0.97973633;0.98303336;0.35955039;0.37369403;0.3484875;0.44174516;0.46717575;0.55000001;0.60120386;0.69128466;
0.7443893;0.81079024;0.85913104;0.86515063;0.89624017;0.88372058;0.90182477;0.92892343;0.92433441;0.93560159;
0.94619209;0.94867241;0.95542145;0.94904017;0.96017921;0.96187669;0.95579112;0.96583474;0.96951997;0.97033888;
0.96598846;0.97025734;0.97454607;0.97108084;0.96911162;0.96954834;0.97502762;0.97554344;0.97815073;0.97785568;
0.97885221;0.97870314;0.98088872;0.98124909;0.98182136;0.98170602;0.98220396;0.9865877;0.98724401;0.98494017;
0.98963547;0.98948991;      };
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 21.959999;22.959999;24.440001;24.959999;24.52;24.280001;24.24;24.16;23.879999;23.68;
23.48;22.52;22.16;21.92;21.799999;21.92;21.52;21.200001;21.08;20.92;
20.280001;19.6;19.360001;19.200001;19.040001;18.719999;18.4;18;18;18;
17.719999;17.200001;17;17;16.92;16.280001;16;16;15.64;15;
15;14.44;14;14;13.96;13;13;13;13;13;
21.959999;23.16;24;24.92;24.6;25.280001;24.48;24.959999;24.76;24.200001;
24;23.48;23.32;23.200001;22.48;22.280001;21.719999;21.440001;21.120001;21.08;
20.92;20.200001;20.24;19.440001;19.280001;19.24;19.16;19;18.4;18.08;
18.040001;18;22;23.6;24.040001;24.52;23.84;23.559999;23.84;23.76;
23.280001;23.200001;23;22.92;22.639999;22.280001;22.16;21.68;21.32;21.24;
20.76;20.48;20.120001;20.200001;19.24;19;19.040001;18.959999;18.959999;18.440001;
18;18;18;18;17.6;17;17;17;16.719999;16;
16;16;15.2;15;21.76;23.559999;24.52;24.76;24.24;23.84;
23.799999;24.08;23.92;23.719999;23.559999;23.24;23.200001;22.92;22.48;22.52;
22.040001;21.76;21.6;21.200001;20.92;20.440001;20.08;19.84;19.559999;19.48;
19.360001;19;18.639999;18.08;18;18;21.639999;23.32;23.879999;24.200001;
23.719999;24.08;24.16;23.719999;23.440001;23.200001;22.719999;22.440001;22.08;22.08;
21.92;21.48;21.360001;21.08;20.84;20.52;19.799999;19.76;19.48;19.120001;
19.040001;18.559999;18.16;22.08;23.4;24.16;24.120001;23.68;23.959999;23.52;
23.639999;23.24;23.200001;22.84;22.799999;22.76;22.76;22.799999;22.639999;22.16;
21.6;21.24;21;20.719999;20.639999;20.16;19.76;19.6;19.719999;19.719999;
19.24;18.959999;18.4;18.120001;18.040001;18;18;17.6;17;17;
17;22.040001;23.32;23.200001;23.6;23.799999;23.959999;23.799999;23.440001;23.4;
23.200001;23.16;23.08;22.84;22.24;22;21.92;21.76;21.6;21.280001;
20.92;20.52;20.280001;20.120001;19.76;19.200001;19.040001;19;18.92;18.639999;
18.16;18;18;17.959999;17.76;21.719999;23.16;25.4;24.76;24.559999;
24.6;25.120001;24.559999;24.08;24.08;24.16;23.280001;22.639999;22.48;22;
21.84;21.84;21.639999;21.48;21.16;21;21;20.799999;20.120001;19.440001;
19.24;19.200001;19.200001;22.08;23.440001;24.280001;24.68;23.719999;24.040001;24.280001;
23.92;23.799999;23.639999;23.360001;23.08;22.959999;22.4;21.959999;21.719999;21.120001;
20.84;20.48;20.4;20.08;19.24;19.120001;18.959999;18.879999;18.6;18.040001;
18;18;17.879999;17.24;17;17;16.879999;16;16;15.96;
15.04;15;14.56;14;14;13.76;22.32;23.040001;23.76;24.559999;
24.040001;23.799999;23.68;23.440001;23.360001;23.440001;22.719999;23.16;22.719999;22.32;
22;21.84;21.6;21.360001;20.76;20.52;20.24;19.959999;19.4;19.200001;
19;19;18.68;18.32;18.040001;18;18;18;17.6;17.120001;
17;17;21.959999;22.959999;24.440001;24.959999;24.52;24.280001;24.24;24.16;
23.879999;23.68;23.48;22.52;22.16;21.92;21.799999;21.92;21.52;21.200001;
21.08;20.92;20.280001;19.6;19.360001;19.200001;19.040001;18.719999;18.4;18;
18;18;17.719999;17.200001;17;17;16.92;16.280001;16;16;
15.64;15;15;14.44;14;14;13.96;13;13;13;
13;13;      };
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.18000001;0.12;0.12;0.11;0.11;0.11;0.12;0.11;0.12;0.12;
0.11;0.11;0.14;0.11;0.11;0.12;0.11;0.12;0.11;0.12;
0.11;0.12;0.11;0.11;0.12;0.12;0.11;0.12;0.11;0.11;
0.11;0.12;0.11;0.11;0.11;0.1;0.11;0.11;0.12;0.11;
0.12;0.11;0.11;0.13;0.11;0.11;0.13;0.11;0.11;0.11;
0.12;0.11;0.11;0.11;0.13;0.11;0.13;0.12;0.12;0.12;
0.11;0.14;0.11;0.11;0.11;0.12;0.11;0.11;0.12;0.11;
0.11;0.12;0.11;0.12;0.12;0.12;0.11;0.11;0.12;0.11;
0.11;0.12;0.14;0.11;0.12;0.11;0.12;0.12;0.12;0.12;
0.11;0.11;0.13;0.11;0.11;0.11;0.12;0.11;0.11;0.11;
0.11;0.11;0.12;0.13;0.12;0.12;0.12;0.11;0.13;0.12;
0.12;0.12;0.12;0.12;0.11;0.11;0.12;0.11;0.12;0.14;
0.13;0.12;0.11;0.11;0.11;0.13;0.11;0.11;0.11;0.11;
0.11;0.12;0.11;0.12;0.11;0.13;0.12;0.11;0.12;0.12;
0.11;0.12;0.11;0.12;0.11;0.11;0.12;0.11;0.12;0.11;
0.12;0.11;0.12;0.12;0.12;0.11;0.12;0.1;0.11;0.11;
0.11;0.11;0.11;0.11;0.1;0.11;0.13;0.11;0.13;0.12;
0.11;0.12;0.12;0.11;0.12;0.13;0.12;0.11;0.11;0.11;
0.12;0.12;0.11;0.11;0.12;0.12;0.12;0.14;0.12;0.11;
0.11;0.12;0.11;0.11;0.12;0.11;0.11;0.12;0.11;0.13;
0.16;0.11;0.12;0.11;0.12;0.11;0.11;0.12;0.11;0.11;
0.12;0.11;0.12;0.11;0.12;0.12;0.12;0.12;0.11;0.12;
0.11;0.11;0.11;0.11;0.11;0.11;0.12;0.11;0.11;0.11;
0.12;0.12;0.11;0.12;0.12;0.11;0.13;0.11;0.12;0.12;
0.11;0.11;0.12;0.11;0.12;0.11;0.12;0.12;0.11;0.12;
0.11;0.12;0.11;0.12;0.11;0.11;0.12;0.11;0.11;0.12;
0.11;0.12;0.11;0.12;0.11;0.14;0.11;0.12;0.12;0.11;
0.12;0.12;0.11;0.11;0.12;0.11;0.12;0.12;0.11;0.12;
0.11;0.11;0.11;0.12;0.11;0.11;0.11;0.11;0.11;0.11;
0.11;0.11;0.11;0.12;0.12;0.12;0.11;0.12;0.11;0.11;
0.12;0.11;0.12;0.11;0.12;0.12;0.11;0.12;0.12;0.12;
0.11;0.12;0.13;0.11;0.12;0.11;0.11;0.12;0.11;0.16;
0.11;0.11;0.12;0.11;0.12;0.12;0.12;0.11;0.12;0.12;
0.11;0.11;0.11;0.11;0.12;0.11;0.12;0.12;0.11;0.12;
0.11;0.12;0.12;0.12;0.11;0.12;0.11;0.12;0.11;0.11;
0.12;0.11;0.11;0.12;0.11;0.11;0.12;0.12;0.12;0.12;
0.11;0.12;0.23;0.12;0.11;0.11;0.12;0.12;0.12;0.12;
0.13;0.12;0.12;0.12;0.12;0.14;0.1;0.11;0.11;0.12;
0.11;0.11;0.12;0.12;0.11;0.12;0.17;0.12;0.12;0.12;
0.12;0.15000001;0.14;0.11;0.11;0.11;0.12;0.12;0.11;0.12;
0.12;0.12;0.11;0.11;0.12;0.11;0.12;0.11;0.12;0.11;
0.12;0.11;      };
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.23;0.18000001;0.2;0.17;0.18000001;0.17;0.17;0.18000001;0.18000001;0.18000001;
0.18000001;0.17;0.2;0.17;0.18000001;0.17;0.17;0.19;0.17;0.19;
0.17;0.18000001;0.17;0.18000001;0.18000001;0.19;0.17;0.18000001;0.17;0.18000001;
0.16;0.18000001;0.17;0.17;0.17;0.16;0.18000001;0.16;0.18000001;0.18000001;
0.17;0.18000001;0.18000001;0.18000001;0.18000001;0.17;0.19;0.17;0.17;0.18000001;
0.19;0.18000001;0.17;0.17;0.19;0.17;0.2;0.18000001;0.19;0.18000001;
0.17;0.2;0.18000001;0.17;0.17;0.18000001;0.18000001;0.17;0.17;0.18000001;
0.17;0.18000001;0.18000001;0.18000001;0.17;0.19;0.17;0.17;0.18000001;0.17;
0.18000001;0.18000001;0.25;0.17;0.18000001;0.17;0.18000001;0.18000001;0.18000001;0.18000001;
0.17;0.18000001;0.19;0.17;0.17;0.18000001;0.18000001;0.18000001;0.17;0.17;
0.17;0.17;0.18000001;0.2;0.19;0.18000001;0.18000001;0.17;0.19;0.18000001;
0.18000001;0.19;0.18000001;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.19;
0.2;0.17;0.18000001;0.17;0.19;0.19;0.18000001;0.17;0.17;0.18000001;
0.18000001;0.17;0.17;0.19;0.17;0.19;0.19;0.18000001;0.17;0.19;
0.17;0.19;0.17;0.19;0.18000001;0.17;0.17;0.17;0.19;0.17;
0.18000001;0.17;0.19;0.17;0.18000001;0.18000001;0.19;0.17;0.17;0.17;
0.17;0.18000001;0.17;0.16;0.17;0.17;0.19;0.17;0.2;0.18000001;
0.18000001;0.17;0.19;0.17;0.18000001;0.2;0.17;0.17;0.18000001;0.17;
0.18000001;0.18000001;0.17;0.19;0.18000001;0.19;0.18000001;0.23;0.18000001;0.17;
0.17;0.18000001;0.18000001;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.19;
0.2;0.18000001;0.18000001;0.18000001;0.17;0.18000001;0.17;0.18000001;0.17;0.18000001;
0.17;0.17;0.19;0.17;0.18000001;0.19;0.19;0.18000001;0.17;0.18000001;
0.17;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.17;0.17;0.18000001;
0.18000001;0.19;0.17;0.2;0.18000001;0.17;0.2;0.17;0.18000001;0.17;
0.18000001;0.17;0.18000001;0.17;0.18000001;0.17;0.18000001;0.18000001;0.18000001;0.17;
0.17;0.18000001;0.17;0.18000001;0.17;0.18000001;0.19;0.17;0.17;0.18000001;
0.17;0.2;0.17;0.19;0.17;0.2;0.18000001;0.17;0.19;0.17;
0.18000001;0.18000001;0.18000001;0.17;0.18000001;0.17;0.18000001;0.19;0.17;0.18000001;
0.18000001;0.17;0.18000001;0.19;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;
0.17;0.17;0.17;0.18000001;0.18000001;0.19;0.18000001;0.17;0.18000001;0.17;
0.18000001;0.17;0.18000001;0.17;0.18000001;0.17;0.18000001;0.17;0.19;0.18000001;
0.18000001;0.18000001;0.19;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.30000001;
0.17;0.17;0.17;0.18000001;0.18000001;0.18000001;0.2;0.17;0.18000001;0.18000001;
0.18000001;0.17;0.18000001;0.17;0.18000001;0.18000001;0.17;0.19;0.17;0.18000001;
0.17;0.18000001;0.19;0.17;0.18000001;0.17;0.18000001;0.18000001;0.17;0.17;
0.18000001;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.17;0.19;0.17;
0.18000001;0.18000001;0.25;0.18000001;0.17;0.18000001;0.19;0.18000001;0.18000001;0.17;
0.2;0.19;0.18000001;0.19;0.18000001;0.2;0.17;0.17;0.18000001;0.17;
0.17;0.18000001;0.18000001;0.18000001;0.18000001;0.18000001;0.2;0.18000001;0.18000001;0.2;
0.18000001;0.23999999;0.19;0.17;0.18000001;0.17;0.18000001;0.18000001;0.17;0.19;
0.18000001;0.17;0.18000001;0.17;0.18000001;0.17;0.17;0.18000001;0.17;0.18000001;
0.18000001;0.17;      };
     };
     float_Data @[12] {
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 6.1263947;5.5384412;5.5411472;4.6366572;4.4367957;3.7328269;3.2426133;2.4309249;1.9818989;1.3580242;
0.89464593;0.86202627;0.48903361;0.66042358;0.47947678;0.285642;0.30337203;0.24684925;0.20802513;0.13861673;
0.081512108;0.13257816;0.072016977;0.075207815;0.14026463;0.058461152;0.014084275;0.033542652;0.10245495;0.014530662;
0.011403176;0.067919753;0.11454382;0.12405434;0.041265745;0.030700855;0;0.035643231;0.02660092;0.038322344;
0.028971005;0.039837681;0.032855362;0;0.037911974;0;0.010176315;0.033112686;0;0;
6.3461394;5.9414606;5.2390642;4.6668758;4.0410142;3.3946235;2.8949749;2.7222624;1.8145577;1.2924877;
0.90109462;0.62037814;0.46928635;0.33291447;0.19880992;0.43416429;0.28364587;0.17208895;0.18974313;0.11631943;
0.10867529;0.047198132;0.032966413;0.049671154;0.031825121;0.025652274;0.020604677;0.023983225;0.010414612;0.011635362;
0;0;6.2316108;5.8925524;5.1310973;4.7505379;4.1951289;3.8785174;2.9215031;2.2790651;
2.0703406;1.5949483;1.1807486;1.0443174;0.58958411;0.40521142;0.22910929;0.25453591;0.07938619;0.072270796;
0.053523168;0.058221225;0.033063766;0.040782247;0.04254207;0.090511829;0.050185345;0.027428498;0.048572827;0.025671011;
0.021895418;0.023114281;0;0.011924258;0;0.013513675;0.025247861;0.026895378;0.016139738;0;
0.023963241;0.018830016;0;0;6.9677372;6.0302944;5.711813;4.7863307;4.5969987;3.4480255;
2.9895172;2.4133182;2.0538952;1.6576732;1.0971308;0.6653614;0.3327921;0.2715854;0.20733562;0.093452126;
0.032191698;0.038331598;0.012360329;0.031708822;0.01012263;0.038544342;0;0.010039339;0;0.02639061;
0;0.010197734;0.013910574;0.021590116;0;0;6.830606;6.3069334;5.5083985;4.4299679;
4.0922136;3.1788361;2.9633584;2.0791554;1.4404598;1.2291054;0.82421815;0.54139847;0.48189175;0.29298896;
0.22713299;0.19486767;0.18963322;0.12355185;0.058143377;0.029209619;0.080295585;0.01354905;0.033193037;0.048331171;
0.013950245;0;0;6.3658886;6.0284486;5.284339;4.5521345;3.8627355;3.3118789;2.6783032;
2.0427098;1.8812232;1.4384732;1.3486824;0.78851289;0.70016211;0.41462234;0.35957652;0.31764388;0.16688475;
0.11046048;0.063482404;0.089816548;0.048652399;0.02609778;0.040882912;0;0.038504921;0.012167033;0.03331431;
0.013056346;0.010618703;0.021004254;0.011146298;0.017519059;0.02175826;0;0.023881145;0.012192939;0;
0;5.7888427;5.5335121;5.1054993;4.567718;4.2192283;3.9810076;2.7778592;2.4821386;1.8454956;
1.7788744;0.97073007;0.85776186;0.56282747;0.5376631;0.38227141;0.34821475;0.19012281;0.12469486;0.14314121;
0.21900928;0.051581249;0.096705377;0.037230648;0.02244718;0.023466611;0.010836368;0.010253137;0;0.01214575;
0;0.020687765;0.010498375;0;0;6.2062397;5.2358303;4.9197526;4.4679108;4.2047024;
3.653235;3.1569104;2.7728314;2.081161;2.0769186;1.3330258;1.272874;1.0343945;0.76839906;0.4324373;
0.33863869;0.22183356;0.18395886;0.14933664;0.076314084;0.07566727;0.065749943;0.010712402;0.02352396;0.03607811;
0.025351919;0;0;6.1483202;5.2443914;4.7401247;4.5316896;4.3251195;3.388108;2.8667865;
2.4172523;1.9651788;1.4336269;1.1165807;0.73478669;0.57734913;0.32057679;0.43414438;0.27106661;0.22053806;
0.18644589;0.16780235;0.14631914;0.46578225;0.19433506;0.14204431;0.047541343;0.059641343;0.058229484;0.027204605;
0.010517784;0.013399652;0.010497527;0.048277359;0.019711327;0.025157774;0.038769223;0.013581108;0.023316421;0.013543243;
0.039092187;0.054904416;0.021925528;0.025895773;0;0;5.7533703;5.2113695;4.900363;4.6296248;
4.0321217;3.4830177;2.9796531;2.448796;2.0505912;2.0561471;1.2955217;1.3058336;0.98555398;0.83700109;
0.73983783;0.35705951;0.25097579;0.17005569;0.1503118;0.07381057;0.09929055;0.099533804;0.11184911;0.1144617;
0.054288365;0.021825762;0.060771357;0.05615003;0.034328081;0.043811779;0.045597345;0.02608254;0.012170365;0.010149231;
0;0;6.1263947;5.5384412;5.5411472;4.6366572;4.4367957;3.7328269;3.2426133;2.4309249;
1.9818989;1.3580242;0.89464593;0.86202627;0.48903361;0.66042358;0.47947678;0.285642;0.30337203;0.24684925;
0.20802513;0.13861673;0.081512108;0.13257816;0.072016977;0.075207815;0.14026463;0.058461152;0.014084275;0.033542652;
0.10245495;0.014530662;0.011403176;0.067919753;0.11454382;0.12405434;0.041265745;0.030700855;0;0.035643231;
0.02660092;0.038322344;0.028971005;0.039837681;0.032855362;0;0.037911974;0;0.010176315;0.033112686;
0;0;      };
     };
     float_Data @[13] {
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 25;25;25;25;25;25;25;25;23;22;
21;20;18;18;14;18;10;10;13;8;
6;5;4;6;7;4;1;3;7;1;
1;5;7;5;3;2;0;2;2;2;
2;3;3;0;3;0;1;2;0;0;
25;25;25;25;25;25;25;25;25;23;
22;20;14;17;8;13;13;11;10;8;
8;4;3;3;3;2;2;2;1;1;
0;0;25;25;25;25;25;25;25;25;
25;23;23;24;19;16;11;11;5;5;
3;5;3;3;2;6;4;2;4;1;
2;2;0;1;0;1;2;2;1;0;
2;1;0;0;25;25;25;25;25;25;
25;25;25;24;21;20;15;14;12;6;
3;2;1;2;1;3;0;1;0;2;
0;1;1;2;0;0;25;25;25;25;
25;25;25;25;25;23;22;21;17;11;
12;8;8;7;3;2;5;1;3;4;
1;0;0;25;25;25;25;25;25;25;
25;25;23;24;21;19;17;13;14;11;
9;5;4;4;1;3;0;3;1;3;
1;1;2;1;1;2;0;2;1;0;
0;25;25;25;25;25;25;24;25;24;
25;22;22;17;17;14;13;8;6;6;
5;4;3;1;2;2;1;1;0;1;
0;2;1;0;0;25;25;25;25;25;
25;25;25;24;25;23;21;21;19;18;
13;10;9;8;5;5;4;1;2;3;
2;0;0;25;25;25;25;25;25;25;
25;25;24;23;22;18;16;18;12;11;
8;7;7;12;11;10;4;4;4;2;
1;1;1;4;1;2;2;1;2;1;
3;4;2;2;0;0;25;25;25;25;
25;25;25;25;25;25;24;24;22;21;
18;15;13;8;8;4;7;7;6;7;
3;2;4;5;2;4;4;2;1;1;
0;0;25;25;25;25;25;25;25;25;
23;22;21;20;18;18;14;18;10;10;
13;8;6;5;4;6;7;4;1;3;
7;1;1;5;7;5;3;2;0;2;
2;2;2;3;3;0;3;0;1;2;
0;0;      };
     };
     float_Data @[14] {
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0.079999983;0.12;
0.16000003;0.19999999;0.27999997;0.27999997;0.44;0.27999997;0.60000002;0.60000002;0.48000002;0.68000001;
0.75999999;0.80000001;0.84000003;0.75999999;0.72000003;0.84000003;0.95999998;0.88;0.72000003;0.95999998;
0.95999998;0.80000001;0.72000003;0.80000001;0.88;0.92000002;1;0.92000002;0.92000002;0.92000002;
0.92000002;0.88;0.88;1;0.88;1;0.95999998;0.92000002;1;1;
0;0;0;0;0;0;0;0;0;0.079999983;
0.12;0.19999999;0.44;0.31999999;0.68000001;0.48000002;0.48000002;0.56;0.60000002;0.68000001;
0.68000001;0.84000003;0.88;0.88;0.88;0.92000002;0.92000002;0.92000002;0.95999998;0.95999998;
1;1;0;0;0;0;0;0;0;0;
0;0.079999983;0.079999983;0.040000021;0.24000001;0.36000001;0.56;0.56;0.80000001;0.80000001;
0.88;0.80000001;0.88;0.88;0.92000002;0.75999999;0.84000003;0.92000002;0.84000003;0.95999998;
0.92000002;0.92000002;1;0.95999998;1;0.95999998;0.92000002;0.92000002;0.95999998;1;
0.92000002;0.95999998;1;1;0;0;0;0;0;0;
0;0;0;0.040000021;0.16000003;0.19999999;0.39999998;0.44;0.51999998;0.75999999;
0.88;0.92000002;0.95999998;0.92000002;0.95999998;0.88;1;0.95999998;1;0.92000002;
1;0.95999998;0.95999998;0.92000002;1;1;0;0;0;0;
0;0;0;0;0;0.079999983;0.12;0.16000003;0.31999999;0.56;
0.51999998;0.68000001;0.68000001;0.72000003;0.88;0.92000002;0.80000001;0.95999998;0.88;0.84000003;
0.95999998;1;1;0;0;0;0;0;0;0;
0;0;0.079999983;0.040000021;0.16000003;0.24000001;0.31999999;0.48000002;0.44;0.56;
0.63999999;0.80000001;0.84000003;0.84000003;0.95999998;0.88;1;0.88;0.95999998;0.88;
0.95999998;0.95999998;0.92000002;0.95999998;0.95999998;0.92000002;1;0.92000002;0.95999998;1;
1;0;0;0;0;0;0;0.040000021;0;0.040000021;
0;0.12;0.12;0.31999999;0.31999999;0.44;0.48000002;0.68000001;0.75999999;0.75999999;
0.80000001;0.84000003;0.88;0.95999998;0.92000002;0.92000002;0.95999998;0.95999998;1;0.95999998;
1;0.92000002;0.95999998;1;1;0;0;0;0;0;
0;0;0;0.040000021;0;0.079999983;0.16000003;0.16000003;0.24000001;0.27999997;
0.48000002;0.60000002;0.63999999;0.68000001;0.80000001;0.80000001;0.84000003;0.95999998;0.92000002;0.88;
0.92000002;1;1;0;0;0;0;0;0;0;
0;0;0.040000021;0.079999983;0.12;0.27999997;0.36000001;0.27999997;0.51999998;0.56;
0.68000001;0.72000003;0.72000003;0.51999998;0.56;0.60000002;0.84000003;0.84000003;0.84000003;0.92000002;
0.95999998;0.95999998;0.95999998;0.84000003;0.95999998;0.92000002;0.92000002;0.95999998;0.92000002;0.95999998;
0.88;0.84000003;0.92000002;0.92000002;1;1;0;0;0;0;
0;0;0;0;0;0;0.040000021;0.040000021;0.12;0.16000003;
0.27999997;0.39999998;0.48000002;0.68000001;0.68000001;0.84000003;0.72000003;0.72000003;0.75999999;0.72000003;
0.88;0.92000002;0.84000003;0.80000001;0.92000002;0.84000003;0.84000003;0.92000002;0.95999998;0.95999998;
1;1;0;0;0;0;0;0;0;0;
0.079999983;0.12;0.16000003;0.19999999;0.27999997;0.27999997;0.44;0.27999997;0.60000002;0.60000002;
0.48000002;0.68000001;0.75999999;0.80000001;0.84000003;0.75999999;0.72000003;0.84000003;0.95999998;0.88;
0.72000003;0.95999998;0.95999998;0.80000001;0.72000003;0.80000001;0.88;0.92000002;1;0.92000002;
0.92000002;0.92000002;0.92000002;0.88;0.88;1;0.88;1;0.95999998;0.92000002;
1;1;      };
     };
     float_Data @[15] {
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 1;1;1;1;1;1;1;1;0.92000002;0.88;
0.83999997;0.80000001;0.72000003;0.72000003;0.56;0.72000003;0.40000001;0.40000001;0.51999998;0.31999999;
0.23999999;0.2;0.16;0.23999999;0.28;0.16;0.039999999;0.12;0.28;0.039999999;
0.039999999;0.2;0.28;0.2;0.12;0.079999998;0;0.079999998;0.079999998;0.079999998;
0.079999998;0.12;0.12;0;0.12;0;0.039999999;0.079999998;0;0;
1;1;1;1;1;1;1;1;1;0.92000002;
0.88;0.80000001;0.56;0.68000001;0.31999999;0.51999998;0.51999998;0.44;0.40000001;0.31999999;
0.31999999;0.16;0.12;0.12;0.12;0.079999998;0.079999998;0.079999998;0.039999999;0.039999999;
0;0;1;1;1;1;1;1;1;1;
1;0.92000002;0.92000002;0.95999998;0.75999999;0.63999999;0.44;0.44;0.2;0.2;
0.12;0.2;0.12;0.12;0.079999998;0.23999999;0.16;0.079999998;0.16;0.039999999;
0.079999998;0.079999998;0;0.039999999;0;0.039999999;0.079999998;0.079999998;0.039999999;0;
0.079999998;0.039999999;0;0;1;1;1;1;1;1;
1;1;1;0.95999998;0.83999997;0.80000001;0.60000002;0.56;0.47999999;0.23999999;
0.12;0.079999998;0.039999999;0.079999998;0.039999999;0.12;0;0.039999999;0;0.079999998;
0;0.039999999;0.039999999;0.079999998;0;0;1;1;1;1;
1;1;1;1;1;0.92000002;0.88;0.83999997;0.68000001;0.44;
0.47999999;0.31999999;0.31999999;0.28;0.12;0.079999998;0.2;0.039999999;0.12;0.16;
0.039999999;0;0;1;1;1;1;1;1;1;
1;1;0.92000002;0.95999998;0.83999997;0.75999999;0.68000001;0.51999998;0.56;0.44;
0.36000001;0.2;0.16;0.16;0.039999999;0.12;0;0.12;0.039999999;0.12;
0.039999999;0.039999999;0.079999998;0.039999999;0.039999999;0.079999998;0;0.079999998;0.039999999;0;
0;1;1;1;1;1;1;0.95999998;1;0.95999998;
1;0.88;0.88;0.68000001;0.68000001;0.56;0.51999998;0.31999999;0.23999999;0.23999999;
0.2;0.16;0.12;0.039999999;0.079999998;0.079999998;0.039999999;0.039999999;0;0.039999999;
0;0.079999998;0.039999999;0;0;1;1;1;1;1;
1;1;1;0.95999998;1;0.92000002;0.83999997;0.83999997;0.75999999;0.72000003;
0.51999998;0.40000001;0.36000001;0.31999999;0.2;0.2;0.16;0.039999999;0.079999998;0.12;
0.079999998;0;0;1;1;1;1;1;1;1;
1;1;0.95999998;0.92000002;0.88;0.72000003;0.63999999;0.72000003;0.47999999;0.44;
0.31999999;0.28;0.28;0.47999999;0.44;0.40000001;0.16;0.16;0.16;0.079999998;
0.039999999;0.039999999;0.039999999;0.16;0.039999999;0.079999998;0.079999998;0.039999999;0.079999998;0.039999999;
0.12;0.16;0.079999998;0.079999998;0;0;1;1;1;1;
1;1;1;1;1;1;0.95999998;0.95999998;0.88;0.83999997;
0.72000003;0.60000002;0.51999998;0.31999999;0.31999999;0.16;0.28;0.28;0.23999999;0.28;
0.12;0.079999998;0.16;0.2;0.079999998;0.16;0.16;0.079999998;0.039999999;0.039999999;
0;0;1;1;1;1;1;1;1;1;
0.92000002;0.88;0.83999997;0.80000001;0.72000003;0.72000003;0.56;0.72000003;0.40000001;0.40000001;
0.51999998;0.31999999;0.23999999;0.2;0.16;0.23999999;0.28;0.16;0.039999999;0.12;
0.28;0.039999999;0.039999999;0.2;0.28;0.2;0.12;0.079999998;0;0.079999998;
0.079999998;0.079999998;0.079999998;0.12;0.12;0;0.12;0;0.039999999;0.079999998;
0;0;      };
     };
     float_Data @[16] {
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.78333336;0.72666663;0.73666674;0.63;0.59000003;0.52666664;0.46999997;0.37333336;0.31333333;0.23999999;
0.17333335;0.16;0.10333332;0.11;0.1;0.073333345;0.056666661;0.050000001;0.053333331;0.036666665;
0.02;0.023333333;0.02;0.02;0.029999999;0.016666668;0.0033333334;0.0099999998;0.023333333;0.0033333334;
0.0033333334;0.02;0.030000003;0.026666667;0.0099999998;0.0066666668;0;0.0099999998;0.0066666668;0.0099999998;
0.0066666668;0.0099999998;0.0099999998;0;0.0099999998;0;0.0033333334;0.0066666668;0;0;
0.81333333;0.7899999;0.70666665;0.63666666;0.57999998;0.49666664;0.42333335;0.39666665;0.29999995;0.21333331;
0.17;0.13333333;0.1;0.080000013;0.039999999;0.076666668;0.060000006;0.039999999;0.046666667;0.029999997;
0.026666665;0.013333334;0.0099999998;0.013333334;0.0099999998;0.0066666668;0.0066666668;0.0066666668;0.0033333334;0.0033333334;
0;0;0.79666674;0.77333331;0.69333339;0.63666666;0.57666665;0.55000001;0.43999997;0.34666672;
0.32333332;0.28666666;0.20999999;0.19000001;0.13666667;0.096666671;0.053333331;0.053333335;0.016666668;0.016666668;
0.0099999998;0.016666668;0.0099999998;0.0099999998;0.0099999998;0.023333333;0.013333334;0.0066666668;0.013333334;0.0066666668;
0.0066666668;0.0066666668;0;0.0033333334;0;0.0033333334;0.0066666668;0.0066666668;0.0033333334;0;
0.0066666668;0.0033333334;0;0;0.8499999;0.7899999;0.76333338;0.64999992;0.6400001;0.50999999;
0.43999997;0.37;0.34;0.28333333;0.19333336;0.12666667;0.070000008;0.060000006;0.050000001;0.023333333;
0.0099999998;0.0099999998;0.0033333334;0.0066666668;0.0033333334;0.0099999998;0;0.0033333334;0;0.0066666668;
0;0.0033333334;0.0033333334;0.0066666668;0;0;0.83999997;0.78666663;0.71333331;0.62333322;
0.56333333;0.45666668;0.42666668;0.33333331;0.25333333;0.22;0.15333334;0.11;0.093333319;0.056666665;
0.046666667;0.039999999;0.039999999;0.029999997;0.013333334;0.0066666668;0.02;0.0033333334;0.0099999998;0.013333334;
0.0033333334;0;0;0.79000002;0.80666661;0.70333326;0.62;0.52666664;0.47333339;0.39333332;
0.32666668;0.31333333;0.23666666;0.22666667;0.14333333;0.13666667;0.083333343;0.076666668;0.073333338;0.046666667;
0.029999997;0.016666668;0.023333335;0.013333334;0.0066666668;0.0099999998;0;0.0099999998;0.0033333334;0.0099999998;
0.0033333334;0.0033333334;0.0066666668;0.0033333334;0.0033333334;0.0066666668;0;0.0066666668;0.0033333334;0;
0;0.74666667;0.73000002;0.67666662;0.61999995;0.57666665;0.56666666;0.40333331;0.37333328;0.31000003;
0.27666667;0.16333336;0.16;0.11000001;0.11333333;0.073333338;0.070000008;0.036666665;0.026666667;0.029999997;
0.039999999;0.013333334;0.02;0.0099999998;0.0066666668;0.0066666668;0.0033333334;0.0033333334;0;0.0033333334;
0;0.0066666668;0.0033333334;0;0;0.7899999;0.71666664;0.66666663;0.63000005;0.60000008;
0.52333343;0.48333335;0.40666664;0.33000001;0.31999999;0.22666664;0.20999999;0.18666667;0.13333333;0.089999989;
0.07;0.050000001;0.043333329;0.033333331;0.02;0.02;0.016666668;0.0033333334;0.0066666668;0.0099999998;
0.0066666668;0;0;0.77999997;0.72333342;0.65333337;0.62333333;0.60000002;0.49666664;0.42666665;
0.3866666;0.33333337;0.24000002;0.18666667;0.15333334;0.12;0.07;0.086666673;0.063333333;0.056666665;
0.039999999;0.039999999;0.029999997;0.076666668;0.043333329;0.033333331;0.013333334;0.016666668;0.013333334;0.0066666668;
0.0033333334;0.0033333334;0.0033333334;0.013333334;0.0033333334;0.0066666668;0.0066666668;0.0033333334;0.0066666668;0.0033333334;
0.0099999998;0.013333334;0.0066666668;0.0066666668;0;0;0.73333335;0.69666666;0.64666665;0.64666665;
0.58333331;0.50666666;0.41666669;0.36333334;0.31000003;0.31999999;0.21666665;0.20000003;0.16000003;0.14999999;
0.13;0.073333338;0.056666665;0.036666669;0.033333331;0.016666668;0.023333333;0.026666665;0.026666667;0.029999999;
0.013333334;0.0066666668;0.016666668;0.016666668;0.0099999998;0.013333334;0.013333334;0.0066666668;0.0033333334;0.0033333334;
0;0;0.78333336;0.72666663;0.73666674;0.63;0.59000003;0.52666664;0.46999997;0.37333336;
0.31333333;0.23999999;0.17333335;0.16;0.10333332;0.11;0.1;0.073333345;0.056666661;0.050000001;
0.053333331;0.036666665;0.02;0.023333333;0.02;0.02;0.029999999;0.016666668;0.0033333334;0.0099999998;
0.023333333;0.0033333334;0.0033333334;0.02;0.030000003;0.026666667;0.0099999998;0.0066666668;0;0.0099999998;
0.0066666668;0.0099999998;0.0066666668;0.0099999998;0.0099999998;0;0.0099999998;0;0.0033333334;0.0066666668;
0;0;      };
     };
     float_Data @[17] {
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.35955039;0.37369403;0.3484875;0.44174516;0.46717575;0.55000001;0.60120386;0.69128466;0.7443893;0.81079024;
0.85913104;0.86515063;0.89624017;0.88372058;0.90182477;0.92892343;0.92433441;0.93560159;0.94619209;0.94867241;
0.95542145;0.94904017;0.96017921;0.96187669;0.95579112;0.96583474;0.96951997;0.97033888;0.96598846;0.97025734;
0.97454607;0.97108084;0.96911162;0.96954834;0.97502762;0.97554344;0.97815073;0.97785568;0.97885221;0.97870314;
0.98088872;0.98124909;0.98182136;0.98170602;0.98220396;0.9865877;0.98724401;0.98494017;0.98963547;0.98948991;
0.31517175;0.33043468;0.38150939;0.43398827;0.50667357;0.58572459;0.6312201;0.65892386;0.76190382;0.81555617;
0.85921317;0.89150757;0.90693361;0.92470741;0.93657106;0.91882461;0.92945135;0.94589883;0.94650596;0.95329255;
0.95894074;0.96420813;0.96693999;0.9679125;0.96847242;0.97238177;0.97321045;0.97645152;0.98096609;0.98321295;
0.98379195;0.98439193;0.34331429;0.32910097;0.3986468;0.43036309;0.49679032;0.54740953;0.64490259;0.70673889;
0.73750991;0.79365295;0.82964242;0.85021752;0.89770925;0.91110647;0.92844796;0.93206006;0.94857079;0.95589709;
0.96164614;0.9653585;0.967435;0.96776873;0.96242124;0.95884931;0.96530187;0.96492541;0.9704088;0.97719592;
0.97515702;0.97882766;0.98165083;0.98148888;0.98325467;0.98212057;0.9816187;0.98083043;0.98116112;0.98265833;
0.98191458;0.98232239;0.98432952;0.98373353;0.25862426;0.3146863;0.33669788;0.42910853;0.46803588;0.58691752;
0.6357643;0.69021761;0.73879814;0.78586107;0.83684003;0.8820253;0.91774476;0.92768168;0.93792915;0.94904482;
0.95848238;0.96037865;0.96612;0.97019494;0.97163332;0.97269088;0.9769007;0.97728711;0.97859251;0.9791646;
0.98069268;0.98164392;0.97968054;0.98007828;0.98236823;0.98314822;0.28307799;0.29025272;0.3717756;0.47387636;
0.52800965;0.61064833;0.64564407;0.73590165;0.80329514;0.82818764;0.86339194;0.89691794;0.90568805;0.92962128;
0.9387815;0.94475359;0.94797462;0.96142787;0.96464682;0.96813083;0.96966863;0.97240037;0.97491616;0.97569025;
0.978181;0.9814074;0.98097146;0.30539721;0.33488297;0.38781112;0.46671006;0.53984427;0.60127026;0.66138297;
0.73385984;0.75717866;0.80219239;0.81731546;0.87007463;0.88438886;0.9122113;0.91744405;0.92810178;0.94058937;
0.95101541;0.95401657;0.95798987;0.96120042;0.96464121;0.96812177;0.96910286;0.96958929;0.97359961;0.97513068;
0.97442627;0.97904378;0.97768021;0.97844523;0.98141187;0.98220032;0.98257446;0.98255587;0.9826597;0.98274148;
0.98441917;0.37111598;0.36675462;0.42638257;0.46903026;0.50954711;0.5369826;0.65865785;0.68698698;0.76273829;
0.76905149;0.85234016;0.86977935;0.90042174;0.9071942;0.92068017;0.92842078;0.94012725;0.95102853;0.95467246;
0.94799674;0.96637124;0.96558958;0.97117317;0.97224939;0.97664964;0.97671479;0.9774465;0.97994578;0.97925752;
0.98188287;0.98024541;0.98073852;0.98267287;0.98238814;0.32611394;0.38360769;0.40792966;0.45972854;0.48949468;
0.56392372;0.61027259;0.65394139;0.74112093;0.74149477;0.82495248;0.81940979;0.84929466;0.87545031;0.91933745;
0.92789996;0.93934625;0.94861162;0.95092559;0.95723605;0.96349519;0.96487135;0.96888709;0.97025651;0.97201699;
0.97278357;0.97580737;0.97719336;0.33820987;0.38415992;0.43629616;0.45723385;0.49780107;0.59408587;0.64079511;
0.69722033;0.75241882;0.80313802;0.84008521;0.88170546;0.90141606;0.92133325;0.91328275;0.93072975;0.9366287;
0.94156677;0.94586217;0.94944882;0.92167354;0.95060402;0.95095932;0.96453202;0.96622002;0.96909225;0.97045672;
0.9738608;0.97438139;0.97474074;0.97326064;0.97650069;0.97733098;0.97926527;0.97810829;0.97810936;0.97958517;
0.97801971;0.97454154;0.97937012;0.97992671;0.98176265;0.98515993;0.37917367;0.41176265;0.42253998;0.44699165;
0.52821946;0.58035541;0.63160461;0.69928068;0.73288155;0.74123526;0.81630445;0.82049936;0.86353421;0.87783265;
0.88509172;0.92402756;0.94016194;0.94809866;0.95467627;0.9632839;0.95699441;0.95800531;0.9546786;0.95754164;
0.96167761;0.96781003;0.96705317;0.96811628;0.97178;0.97389013;0.97252202;0.97417825;0.97458953;0.97834986;
0.97973633;0.98303336;0.35955039;0.37369403;0.3484875;0.44174516;0.46717575;0.55000001;0.60120386;0.69128466;
0.7443893;0.81079024;0.85913104;0.86515063;0.89624017;0.88372058;0.90182477;0.92892343;0.92433441;0.93560159;
0.94619209;0.94867241;0.95542145;0.94904017;0.96017921;0.96187669;0.95579112;0.96583474;0.96951997;0.97033888;
0.96598846;0.97025734;0.97454607;0.97108084;0.96911162;0.96954834;0.97502762;0.97554344;0.97815073;0.97785568;
0.97885221;0.97870314;0.98088872;0.98124909;0.98182136;0.98170602;0.98220396;0.9865877;0.98724401;0.98494017;
0.98963547;0.98948991;      };
     };
     float_Data @[18] {
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.9567579;0.96030748;0.94983828;0.95778877;0.95407534;0.96422255;0.9690541;0.98103088;0.98173052;0.99092221;
0.99376762;0.99354643;0.99483508;0.99226427;0.9955861;0.99717134;0.99575114;0.99704665;0.99791247;0.99741691;
0.99821359;0.99694514;0.99846125;0.99849641;0.99718022;0.99865389;0.99893743;0.99880248;0.99804664;0.99899948;
0.99904394;0.99863917;0.99846208;0.99851263;0.99906081;0.99893212;0.99936545;0.99893916;0.99926287;0.9991774;
0.9993428;0.99929202;0.99931222;0.99923867;0.99923825;0.9995836;0.99947417;0.99914247;0.99969047;0.9996177;
0.95399046;0.95211631;0.95085752;0.95203424;0.95379579;0.96422762;0.96465081;0.97212112;0.98426324;0.98952699;
0.99179751;0.9952147;0.99614853;0.99632752;0.99763262;0.99399787;0.99746889;0.99799395;0.99778962;0.99845093;
0.99851876;0.99910051;0.99900621;0.9990437;0.99895269;0.99932128;0.9993602;0.99912333;0.99884713;0.99945086;
0.99950165;0.99941909;0.94696027;0.95144516;0.94423461;0.94829196;0.95753199;0.96307433;0.9777143;0.98249549;
0.98406309;0.99003989;0.99109924;0.99344164;0.99637979;0.99628276;0.99733377;0.99740326;0.99844986;0.99865174;
0.9987272;0.99879318;0.99892735;0.99887437;0.99865234;0.99827665;0.99840218;0.99869502;0.9989807;0.99919289;
0.99915808;0.99931598;0.99954599;0.99945801;0.99957496;0.99936676;0.99921536;0.9992705;0.99928302;0.99925208;
0.99930143;0.99935937;0.99958915;0.99937308;0.94692892;0.95046705;0.9505958;0.9602446;0.96164775;0.97286773;
0.9788397;0.98064268;0.98430324;0.98818946;0.99024248;0.99360061;0.99703389;0.99764121;0.99780816;0.99848449;
0.99871743;0.99834937;0.99879533;0.99901533;0.99896151;0.99899352;0.99916995;0.99930412;0.99905336;0.99932724;
0.99926639;0.99935561;0.99930185;0.99933469;0.99942535;0.99951816;0.94487464;0.94086266;0.94347024;0.95415217;
0.95702195;0.96741021;0.96755427;0.98062044;0.98679161;0.98915559;0.99200404;0.99461752;0.99448794;0.99755377;
0.99782813;0.99749666;0.99797547;0.99858034;0.99858034;0.99875939;0.99892968;0.99876368;0.99900645;0.99910855;
0.99917489;0.99927628;0.99941534;0.95138341;0.94280362;0.94842607;0.94980019;0.96363658;0.97261584;0.97140115;
0.98516935;0.98589224;0.98898429;0.98853278;0.99406207;0.99483663;0.99684197;0.99693024;0.9973079;0.99803561;
0.99801981;0.99858546;0.99841553;0.99864125;0.9989199;0.99904323;0.99903405;0.99867702;0.99926776;0.99926203;
0.99916267;0.99934369;0.99916005;0.99911684;0.9994387;0.99949646;0.99956459;0.99933171;0.99955124;0.99952865;
0.9994989;0.95619333;0.95357221;0.95746499;0.95904398;0.96132356;0.96007842;0.97538847;0.97854948;0.98496538;
0.9837414;0.99374372;0.99361801;0.99532962;0.99522889;0.99607623;0.99576837;0.99765033;0.99791873;0.99795997;
0.9961316;0.99892217;0.99849772;0.99899101;0.99903482;0.99935454;0.99923915;0.99935806;0.99944544;0.99930197;
0.99955362;0.99948531;0.99941063;0.99948943;0.99950773;0.95984536;0.95235932;0.94980615;0.94797987;0.95000494;
0.96122724;0.96022385;0.96155435;0.97820878;0.97916365;0.98783594;0.98645782;0.98836786;0.99346948;0.9970209;
0.99642098;0.99746585;0.99774927;0.99771339;0.99866658;0.99888307;0.99892581;0.99903506;0.99912101;0.99920517;
0.99912483;0.99937087;0.99924487;0.94990522;0.9535706;0.95209348;0.95498604;0.95875186;0.97072864;0.96906388;
0.9768889;0.98362845;0.98733866;0.98834437;0.99252295;0.99584723;0.99661767;0.99622107;0.99664998;0.99699235;
0.99639493;0.99703956;0.99745965;0.98841059;0.99615699;0.99727523;0.99884504;0.99876291;0.99888015;0.99884963;
0.99925333;0.9992156;0.99901712;0.99890792;0.99919534;0.99919719;0.99911481;0.99918228;0.9992395;0.99925041;
0.99885565;0.99814779;0.99924904;0.99923462;0.99943292;0.99942011;0.96082991;0.96198457;0.96116793;0.96217674;
0.96840799;0.97024882;0.9762879;0.98043931;0.98569316;0.98006749;0.98893094;0.98808998;0.99251485;0.99306244;
0.99317396;0.99747598;0.997648;0.99838525;0.99868822;0.99895757;0.99857038;0.9986937;0.99735039;0.99771833;
0.99867195;0.99883187;0.99888277;0.99892694;0.99914545;0.99916613;0.99902421;0.99913591;0.99901289;0.99920768;
0.99929792;0.99944288;0.9567579;0.96030748;0.94983828;0.95778877;0.95407534;0.96422255;0.9690541;0.98103088;
0.98173052;0.99092221;0.99376762;0.99354643;0.99483508;0.99226427;0.9955861;0.99717134;0.99575114;0.99704665;
0.99791247;0.99741691;0.99821359;0.99694514;0.99846125;0.99849641;0.99718022;0.99865389;0.99893743;0.99880248;
0.99804664;0.99899948;0.99904394;0.99863917;0.99846208;0.99851263;0.99906081;0.99893212;0.99936545;0.99893916;
0.99926287;0.9991774;0.9993428;0.99929202;0.99931222;0.99923867;0.99923825;0.9995836;0.99947417;0.99914247;
0.99969047;0.9996177;      };
     };
     float_Data @[19] {
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.15604678;0.13586755;0.036141485;0.01631432;-0.014916914;0.087177515;-0.053802423;0.018935844;-0.034161821;0.050711941;
-0.00090773462;0.0066866083;-0.028283341;-0.010238333;0.0078170029;-0.0031461366;0.010475973;0.0014331543;-0.020327957;0.066854358;
0.027091477;0.052349802;0.02514831;-0.017539702;0.04993619;0.0064829909;0.034486018;0.043896303;-0.00457332;-0.0014879246;
0.03917674;-0.0078948038;0.032224234;0.0086944643;0.064116076;0.068021692;0.051724721;-0.019117163;-0.011941454;-0.019039609;
-0.0074225031;-0.0055803587;0.0096761771;0.094871283;-0.0022089314;0.088081166;0.018383281;0.042134836;0.023062553;0.030827262;
0.10775658;0.057988286;0.093088344;0.0051887752;0.01741622;-0.0039546937;-0.001156832;-0.054635894;-0.038646694;0.074913807;
0.035604134;0.002465663;0.012558524;0.06023702;-0.018150849;0.030325275;0.069789797;0.025142526;0.021307681;0.0049401801;
0.013557302;0.11727727;0.089128993;0.038885411;-0.0091161942;0.004793155;-0.02622251;0.093244597;0.011664487;0.044311371;
0.0012120557;-0.032724455;0.079823248;0.020804916;0.03399441;0.015642993;-0.01672326;0.02183423;0.033166964;0.027119281;
0.02418856;0.042553999;0.071149446;-0.034192346;0.048595313;-0.049131326;-0.055076562;0.02028008;0.029615996;0.0040942519;
-0.021610023;-0.01200813;0.021606106;0.023196815;0.0062228655;0.0084520951;0.02713592;-0.065755837;-0.0065842923;-0.010475762;
-0.014733554;0.030593863;0.022717703;-0.025451824;-0.0522638;0.028332997;0.041029472;0.0064360546;-0.053639077;-0.01620389;
0.029584231;-0.062820271;-0.0023354965;0.025307335;0.17699264;0.1309223;0.023445062;-0.033803221;0.010359954;0.010478093;
0.040266287;0.082177341;-0.024284726;0.00079841138;0.066732243;-0.022407344;-0.021971691;-0.049121004;0.043510508;-0.017763194;
-0.0073707532;0.011841666;0.028659908;0.027361603;0.0022635811;0.028933292;0.0023344175;0.0047463463;-0.070715904;0.01457495;
-0.0012502453;-0.035978474;0.034508944;0.067109764;0.056957692;-0.0034976273;0.1537239;0.067470491;0.12496191;0.016565226;
-0.032132257;0.017074702;-0.05208721;0.058479752;-0.021764193;0.012364059;-0.0024646597;-0.015862461;-0.055225067;-0.050234322;
-0.00055928307;0.004746628;0.041964822;-0.022681413;-0.036311068;0.016488673;0.059731226;-0.024160894;0.0055557131;-0.012011116;
0.024868505;0.0046861921;-0.055056106;0.14475197;0.039067809;0.058807611;-0.013335964;-0.0037119305;0.024727724;-0.020592118;
-0.0089040985;0.051618319;0.054228242;0.047225323;-0.0067920778;0.030496961;0.0055662775;-0.020285064;-0.058165833;0.0028711883;
0.0075875144;0.036699079;0.041107234;0.0027826619;-0.0036727923;0.042901296;0.02730958;0.046577644;0.024053449;-0.0210541;
0.0026247788;0.035376869;0.010532442;0.004271775;0.019789279;0.039860431;0.040389348;-0.011511748;0.0006126964;0.0065953266;
0.023515997;0.14469628;0.043100063;-0.0030034697;-0.037040535;-0.073238373;0.016408255;0.060171269;-0.016255252;-0.0057881149;
0.0051502781;-0.029661065;-0.072807685;-0.062562235;0.013406252;0.026386995;-0.03646772;0.044987913;0.0044280486;-0.0077651506;
-0.011842322;0.046378717;-0.0092282211;-0.017222334;-0.010817333;0.065274991;-0.023882015;-0.015419143;-0.0061595733;-0.0011671579;
0.049554739;0.040035941;-0.0039755325;-0.029124787;-0.0057030041;0.20164536;0.09042564;0.053128339;0.033413202;0.062104408;
0.025120644;0.0085169766;0.043268338;-0.029751539;-0.010159173;-0.01482856;0.021603234;0.092315644;0.0065897107;0.01246073;
0.014645428;-0.014786614;0.051318094;0.016392253;0.024494519;0.027213922;-0.0012648979;0.00017300709;0.028174846;0.013391908;
-0.010913772;0.05911931;0.0071725189;0.11561768;0.054988455;0.097061895;0.04737876;0.0052421447;0.010603819;-0.014585597;
-0.001469286;0.022620779;0.0079305628;-0.0076216804;-0.04447116;-0.038343072;-0.0045516253;0.024347005;-0.0097477678;0.078769691;
0.017504664;-0.0014016581;-0.041275054;0.0042456659;0.029689541;0.017853068;0.016586304;-0.023686185;0.019652944;0.0041443566;
-0.015167859;0.030251287;0.062715024;0.017801257;0.082191981;-0.011331055;-0.062557898;0.015984116;-0.010528278;0.014403461;
0.033216648;0.025694422;0.002278279;0.011928082;-0.049441859;0.0052475156;0.12398987;0.024116641;-0.0031252312;0.058895897;
0.046823651;0.074899495;0.039674599;0.016687276;0.042283095;0.016753301;0.038544472;-0.0073359953;-0.014773075;0.047540285;
-0.019740658;-0.040145706;0.0020707273;0.011058351;0.0095060468;0.021372601;-0.022580482;0.076694936;0.010752789;-0.033635236;
-0.016959272;0.0163975;0.033247221;-0.017180329;0.019022996;-0.021674011;0.0031138074;0.011677615;0.0040957825;0.0078943847;
0.01253897;-0.053729881;0.15604678;0.13586755;0.036141485;0.01631432;-0.014916914;0.087177515;-0.053802423;0.018935844;
-0.034161821;0.050711941;-0.00090773462;0.0066866083;-0.028283341;-0.010238333;0.0078170029;-0.0031461366;0.010475973;0.0014331543;
-0.020327957;0.066854358;0.027091477;0.052349802;0.02514831;-0.017539702;0.04993619;0.0064829909;0.034486018;0.043896303;
-0.00457332;-0.0014879246;0.03917674;-0.0078948038;0.032224234;0.0086944643;0.064116076;0.068021692;0.051724721;-0.019117163;
-0.011941454;-0.019039609;-0.0074225031;-0.0055803587;0.0096761771;0.094871283;-0.0022089314;0.088081166;0.018383281;0.042134836;
0.023062553;0.030827262;      };
     };
     float_Data @[20] {
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] -0.0013790556;1.6104268e-05;0.00073058245;0.00097979349;0.0010361396;0.0010218276;0.0011571568;0.00078640215;0.00094241521;0.00074217125;
0.000862082;-6.9316429e-06;0.00013659432;9.2376344e-05;-0.00011514413;0.00010455151;7.9154313e-05;0.00024526005;0.00025972538;0.00011111949;
5.133927e-05;0.00020109869;0.00022983985;8.1404141e-05;6.927619e-05;6.9186986e-05;0.00016935497;0.00013405186;3.8200116e-05;0.00018094215;
0.000222573;0.00012815626;-2.1134838e-05;0.00018215975;1.7851668e-05;9.328853e-05;0.00013604001;1.176477e-05;0.00010284175;-2.5261426e-07;
7.5046235e-05;0.00013352872;5.534965e-05;0.00028475569;0.00050425972;0.00052692241;0.00046286895;0.00039374788;0.00041547898;0.0003559519;
-0.0010219455;-0.00025736823;0.00067225232;0.0011679379;0.00042107873;0.00082225824;0.00099191826;0.0015569408;0.0012680333;0.0010869295;
0.0010458019;0.0010640993;0.00083845941;0.00068391091;0.00099078659;0.0004968975;0.00013927498;0.00031992752;0.00031257089;0.00024410106;
0.00026572897;0.00027672711;0.00029925109;0.00022197534;0.00027536254;0.00030926929;0.00032746579;0.00055896753;0.00082522392;0.00079766341;
0.00069882057;0.00070020685;-0.0013620376;-0.00027247763;0.00015069616;0.0010267837;0.00033921178;0.0011074126;0.0014837841;0.00091989001;
0.0013524452;0.0010331853;0.00096296228;0.00096637214;0.00076980219;0.00081102556;0.00084532215;0.00088040176;0.00065776141;0.0010434755;
0.00093824201;0.00090011815;0.00075652194;0.00067190034;0.00011337536;0.00010179347;0.00025285466;9.8058328e-05;0.00050661573;0.00065562659;
0.0003596665;0.00075602497;0.00059115083;0.00059971341;0.00062853505;0.00049742276;0.00057575922;0.00054199324;0.00037928097;0.00041719124;
0.00052012119;0.00038886443;0.00041830126;0.00034098604;-0.00073329499;0.00023632808;0.0003567166;0.00087131286;0.00020728668;0.0003362883;
0.0005942561;0.00047770099;0.00066604221;0.00062489242;0.00090023153;0.00078486657;0.00081473554;0.00087807584;0.0006802819;0.00076770852;
0.00069213263;0.00073509134;0.00065046648;0.00063798676;0.00063495821;0.00056461495;0.00058404659;0.00062134932;0.00057423045;0.00050073565;
0.00040589142;0.00056574011;0.00037564235;0.00040025037;0.00037166913;0.00039696894;-0.00078912103;-0.00028962365;0.00080585631;0.00097801804;
0.00052759936;0.00067479268;0.00081177772;0.00083874201;0.00095351064;0.0010959354;0.0008774001;0.00095223228;0.00077396102;0.00078305288;
0.00091052486;0.00070837699;0.00061837438;0.00066583382;0.00068043038;0.00059735938;0.00062820897;0.00059848942;0.00053975289;0.00052389578;
0.0005684779;0.00052408932;0.0004582257;-0.0010445516;-0.00049374125;0.0008822371;0.00071050937;0.00075274875;0.00083131634;0.00050008588;
0.00068921299;0.00080321362;0.00089164445;0.0005765924;0.00062793441;0.00071400066;0.00066609861;0.00076293503;0.00055771868;0.00062637398;
0.00053943694;0.00060924853;0.00033779431;0.0004575174;0.00042832695;0.00054538244;0.00042605068;0.00050385483;0.00055195944;0.00048508431;
0.00050515635;0.00059488026;0.00051959022;0.00052638771;0.00068367826;0.00073351781;0.00063693861;0.00067761558;0.0006469136;0.00051731255;
0.00056771189;-0.001169963;-9.3236922e-05;-0.00017989778;0.00014729825;0.00048821489;0.00045983453;0.00058213709;0.00088181352;0.0007942571;
0.00070251903;0.00063928054;0.00050066155;0.00057916681;0.00047523546;0.00038675673;0.0004910854;0.0005261795;0.00043121236;0.00058747485;
0.00048471018;0.00046774984;0.00058792753;0.00043516792;0.00045820163;0.00050385494;0.00050629332;0.00043043334;0.00051504059;0.00045956363;
0.00046034224;0.00036465866;0.00034873982;0.00034649181;0.00035038375;-0.0011983312;0.00017910302;0.0010512493;0.00045180225;0.0007042365;
0.0010670233;0.0011910213;0.00073862873;0.0012798109;0.00092585268;0.00088576885;0.00018814912;6.4083986e-05;0.00017930381;0.0002034647;
0.00033730722;0.00014955312;0.00032778419;0.00029385253;0.00031396525;0.00031223975;0.00031845868;0.00018041792;0.00023765177;0.00031938986;
0.00022984797;0.00033677567;0.00021961889;-0.00091279886;-0.00028990244;0.0005874015;0.00099831913;0.00029644047;0.00040082179;0.0012030661;
0.0010786285;0.0010942915;0.0008505655;0.00071509107;0.00065606536;0.00083788467;0.00054001517;0.00012341341;0.00016499097;0.00019545686;
0.00026375009;0.00031058886;0.00021012193;0.00011121169;0.00017689902;6.5067994e-05;0.00017922623;0.00016256832;0.00012108887;0.00021774447;
0.00019551143;0.0001641405;3.5260426e-05;4.5409528e-05;0.00018358804;8.2896513e-05;0.00019402022;5.4625674e-05;3.1798125e-05;-2.6565363e-05;
1.5307055e-06;-0.00033149985;9.7546748e-05;0.00015139478;0.00038829085;0.00041319616;-0.0011054049;-5.0027917e-05;0.00059385336;0.0007139449;
0.00043268493;0.00076131913;0.00093439588;0.0011479745;0.00075119303;0.00095881074;0.00046974345;0.0010423502;0.00085206947;0.00055020791;
0.00061370013;0.00069785409;0.00091561599;0.00057356473;0.00090388005;0.00073371193;0.00022774583;0.00015238202;-0.00010471674;1.7917813e-05;
0.00015183205;0.00012543304;9.4316427e-05;0.00016291643;0.00024194542;0.00017386643;2.0369485e-05;0.00016270347;-3.1748801e-05;0.00032096711;
0.00040906193;0.00065963581;-0.0013790556;1.6104268e-05;0.00073058245;0.00097979349;0.0010361396;0.0010218276;0.0011571568;0.00078640215;
0.00094241521;0.00074217125;0.000862082;-6.9316429e-06;0.00013659432;9.2376344e-05;-0.00011514413;0.00010455151;7.9154313e-05;0.00024526005;
0.00025972538;0.00011111949;5.133927e-05;0.00020109869;0.00022983985;8.1404141e-05;6.927619e-05;6.9186986e-05;0.00016935497;0.00013405186;
3.8200116e-05;0.00018094215;0.000222573;0.00012815626;-2.1134838e-05;0.00018215975;1.7851668e-05;9.328853e-05;0.00013604001;1.176477e-05;
0.00010284175;-2.5261426e-07;7.5046235e-05;0.00013352872;5.534965e-05;0.00028475569;0.00050425972;0.00052692241;0.00046286895;0.00039374788;
0.00041547898;0.0003559519;      };
     };
     float_Data @[21] {
      name="Hidden_0_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.98943156;0.99724722;0.99671227;0.99712163;0.99723673;0.99760604;0.99815172;0.9988932;0.99896562;0.99919164;
0.99940127;0.99927938;0.99930745;0.99907231;0.99949652;0.99951696;0.99952787;0.99942106;0.99957818;0.99968606;
0.99962747;0.99956357;0.99967283;0.99963969;0.9996556;0.99965024;0.99968672;0.99969584;0.99961168;0.99972552;
0.9996773;0.99969411;0.9995932;0.99967897;0.99967271;0.99973696;0.99976575;0.99974668;0.99969161;0.9997412;
0.99963987;0.99969667;0.99966788;0.99961144;0.99977702;0.99981439;0.99962324;0.99977565;0.99974608;0.9997052;
0.98979491;0.99711549;0.99721456;0.99694479;0.99724227;0.99723917;0.99793088;0.99832565;0.99916708;0.9994027;
0.99934691;0.99959153;0.99968874;0.99972296;0.99977767;0.99954772;0.99970847;0.99973899;0.99973023;0.99973267;
0.99978095;0.99985337;0.99982238;0.99985266;0.99979407;0.99982333;0.99981523;0.99983948;0.9997921;0.99981248;
0.99980265;0.99982345;0.98761851;0.99592966;0.99604827;0.99619234;0.99640256;0.99718928;0.99829203;0.99872261;
0.99886924;0.99920863;0.9991231;0.99939698;0.99949855;0.99938035;0.99958283;0.99955696;0.99972475;0.99966604;
0.9996385;0.99965513;0.99971503;0.99968225;0.99974227;0.99960208;0.99961114;0.99967217;0.99969214;0.99967843;
0.99964368;0.99973029;0.99977094;0.99967772;0.99965501;0.99962133;0.99960732;0.99962926;0.99968535;0.99961013;
0.99968714;0.99973905;0.99971521;0.99953079;0.98761821;0.99660224;0.99621087;0.99680555;0.99630982;0.99748182;
0.99830401;0.99833816;0.99856395;0.99878103;0.99902171;0.99926585;0.9994787;0.99953872;0.99956709;0.99955612;
0.99945903;0.99961692;0.99945676;0.99957037;0.99969697;0.99961782;0.99950081;0.99955022;0.99939924;0.99961168;
0.99945366;0.99952662;0.99955153;0.99953246;0.99963385;0.99958748;0.98712641;0.99614555;0.99568641;0.99672771;
0.99648315;0.99711281;0.99747521;0.99808621;0.99835086;0.99861044;0.99887305;0.99912649;0.99923289;0.99959558;
0.99948037;0.99946916;0.99941909;0.99949396;0.9995442;0.99943089;0.99974513;0.99935663;0.99959052;0.99965286;
0.99947023;0.99949473;0.9996224;0.98801142;0.99599355;0.99643523;0.99621308;0.99733973;0.99803811;0.99801284;
0.99887168;0.99873984;0.99911559;0.99890363;0.99947196;0.9995386;0.99964654;0.9996292;0.99964911;0.99960905;
0.99964869;0.99962544;0.99965966;0.99966794;0.99972391;0.99973899;0.99973071;0.99972665;0.99970949;0.99975395;
0.99973482;0.9998166;0.99966776;0.99970847;0.99972647;0.99973434;0.99978149;0.99970812;0.99979401;0.99972588;
0.99982041;0.98822421;0.99673873;0.99692756;0.99737394;0.9978531;0.99775857;0.99846548;0.99847633;0.99890226;
0.99876589;0.99941361;0.99921274;0.99952126;0.99938583;0.9996444;0.99952096;0.99965477;0.99960136;0.99962759;
0.99952471;0.99978048;0.99973875;0.9997384;0.99971336;0.99982047;0.99967963;0.99980283;0.99972755;0.99974841;
0.99977803;0.99977767;0.99977195;0.99973971;0.99970007;0.99049354;0.99700111;0.99728972;0.99688739;0.99687922;
0.99744171;0.9974581;0.99785185;0.99818534;0.99840045;0.99900305;0.99881124;0.99887133;0.99928683;0.99944818;
0.99944174;0.99961162;0.99962533;0.9995662;0.99965715;0.99962837;0.99969476;0.99973154;0.99968904;0.99975365;
0.99962592;0.99965698;0.99967468;0.98861742;0.99702257;0.99696726;0.99732947;0.99788237;0.9980762;0.99784666;
0.99872607;0.9989441;0.99912828;0.99908912;0.99926168;0.99952865;0.99952489;0.99955475;0.99957824;0.99957359;
0.99957061;0.99960595;0.99954379;0.99848592;0.99956965;0.99954635;0.99970794;0.99965036;0.99956965;0.99961752;
0.99971396;0.99973631;0.99965215;0.99965751;0.99971843;0.99966151;0.99966711;0.99969912;0.99975061;0.99966806;
0.99965149;0.99962729;0.99978399;0.99973673;0.99966127;0.99984187;0.98879886;0.99763435;0.99742526;0.99804151;
0.99815553;0.99789917;0.99820495;0.99837989;0.99871057;0.99869013;0.99902213;0.9989776;0.99920768;0.99905586;
0.99927467;0.99946845;0.99961358;0.99963522;0.9996897;0.9996599;0.99955332;0.99968237;0.99948305;0.99960947;
0.99971271;0.99968737;0.99962312;0.99971652;0.99966246;0.99975812;0.99973345;0.99970853;0.99967057;0.99975455;
0.9997049;0.99984682;0.98943156;0.99724722;0.99671227;0.99712163;0.99723673;0.99760604;0.99815172;0.9988932;
0.99896562;0.99919164;0.99940127;0.99927938;0.99930745;0.99907231;0.99949652;0.99951696;0.99952787;0.99942106;
0.99957818;0.99968606;0.99962747;0.99956357;0.99967283;0.99963969;0.9996556;0.99965024;0.99968672;0.99969584;
0.99961168;0.99972552;0.9996773;0.99969411;0.9995932;0.99967897;0.99967271;0.99973696;0.99976575;0.99974668;
0.99969161;0.9997412;0.99963987;0.99969667;0.99966788;0.99961144;0.99977702;0.99981439;0.99962324;0.99977565;
0.99974608;0.9997052;      };
     };
     float_Data @[22] {
      name="Hidden_1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.88597047;0.8836751;0.85280263;0.87624443;0.86498946;0.89506173;0.90901029;0.94419938;0.94622582;0.97357523;
0.98190194;0.9813602;0.9851982;0.97772104;0.98726165;0.99199706;0.98772532;0.99171913;0.99415934;0.99256462;
0.99501348;0.99127179;0.99571031;0.99584913;0.99188536;0.99631119;0.99712569;0.99671143;0.99452811;0.99727303;
0.9974547;0.99622363;0.99579316;0.99585938;0.9975096;0.99705923;0.99833083;0.99707103;0.99809629;0.99779099;
0.99838883;0.99817932;0.99826872;0.99810439;0.99793792;0.9989363;0.99879926;0.99765205;0.99932539;0.99914777;
0.87730551;0.85923392;0.85535806;0.85915816;0.86414498;0.89544374;0.89602178;0.91803741;0.95362252;0.96917856;
0.97604567;0.98605269;0.98875678;0.989259;0.99312043;0.98244607;0.99269819;0.99424279;0.99363917;0.99561989;
0.9957754;0.99744868;0.99719638;0.99727857;0.99706423;0.99814016;0.99826503;0.99753004;0.99674934;0.99853951;
0.99870253;0.99843389;0.8583914;0.85840577;0.83665568;0.84868377;0.87619328;0.89203364;0.93485093;0.94876373;
0.95332009;0.97091132;0.97417456;0.98092759;0.98964137;0.98946792;0.99241853;0.99265271;0.9956249;0.99628913;
0.99654281;0.99672407;0.99706739;0.99694085;0.99621421;0.99522799;0.99559516;0.99641317;0.99724978;0.99790037;
0.99783021;0.99821723;0.9988668;0.99869621;0.99906999;0.99847877;0.99803853;0.99818224;0.99816322;0.99814582;
0.99821746;0.99833918;0.99905205;0.99858803;0.85829765;0.85479933;0.85557663;0.883928;0.88863367;0.9211213;
0.93821502;0.94358981;0.95434606;0.96578735;0.97170603;0.98153597;0.9916231;0.99338514;0.99385703;0.99589759;
0.99669349;0.99543089;0.99692953;0.99747556;0.99718744;0.99736303;0.99800879;0.99836206;0.99776071;0.99837035;
0.99834555;0.9985401;0.99835372;0.99847162;0.99864227;0.99896681;0.85262656;0.82644218;0.83472407;0.86572862;
0.87458283;0.90511751;0.90518755;0.94377494;0.96202415;0.9688561;0.97713912;0.98472631;0.98423058;0.99306655;
0.99400407;0.99302119;0.99450761;0.99624723;0.99619693;0.99684721;0.99704397;0.99693453;0.99742854;0.99767286;
0.99805444;0.99833381;0.99862403;0.8712678;0.83241731;0.84884298;0.8531875;0.89357024;0.91980916;0.91619056;
0.95663637;0.95893717;0.96783715;0.96669525;0.98271441;0.98497128;0.9908793;0.99116117;0.992275;0.99449778;
0.99441046;0.99613053;0.99558723;0.99625564;0.99703568;0.99739069;0.99737132;0.99630445;0.99809355;0.99803215;
0.9977529;0.99821442;0.99781275;0.99764198;0.99858975;0.99875474;0.99891275;0.9982866;0.99885994;0.99885994;
0.99867636;0.8854847;0.86397797;0.87546754;0.87975812;0.88611746;0.88247675;0.92770028;0.93717229;0.95599425;
0.95245862;0.98181784;0.98164141;0.98646742;0.98630112;0.98858392;0.98778361;0.99329573;0.99415481;0.99425209;
0.98886991;0.99698591;0.99575418;0.9972344;0.99739069;0.99824315;0.99803787;0.99827123;0.99860895;0.99815804;
0.99888331;0.99867815;0.99845994;0.99872851;0.99882311;0.89417136;0.86007673;0.85212839;0.84705251;0.85313553;
0.88624001;0.8832134;0.88681138;0.93644106;0.93909091;0.96450406;0.96056223;0.966232;0.98112178;0.99161428;
0.98982131;0.99278563;0.99362266;0.9935745;0.9963423;0.99702066;0.99708247;0.99737334;0.99767423;0.9978618;
0.99774843;0.99845558;0.99805987;0.86622709;0.86368936;0.85931325;0.86762846;0.87837309;0.91410989;0.90934503;
0.93194079;0.95194155;0.96288759;0.96594393;0.97830737;0.98801303;0.99032819;0.98910886;0.990372;0.99140358;
0.98961389;0.99151284;0.99283493;0.96674609;0.98890144;0.99227953;0.99682719;0.99663854;0.99707067;0.99693125;
0.99804604;0.99791044;0.99739838;0.99706614;0.99786729;0.99793029;0.99767739;0.99784744;0.99796754;0.99808317;
0.99691576;0.99481666;0.99796343;0.99796706;0.99863726;0.99841809;0.8988198;0.88831955;0.88607866;0.88848859;
0.90706819;0.91284698;0.9306587;0.94293761;0.95836884;0.94151258;0.96777081;0.96529222;0.97833705;0.98013163;
0.98024696;0.99295968;0.9933303;0.99552053;0.99637496;0.99721223;0.99615777;0.99639875;0.99256766;0.99354583;
0.99630326;0.99680841;0.99702537;0.99706441;0.99777383;0.99774009;0.99733889;0.9976989;0.99736768;0.99786794;
0.99818909;0.99848205;0.88597047;0.8836751;0.85280263;0.87624443;0.86498946;0.89506173;0.90901029;0.94419938;
0.94622582;0.97357523;0.98190194;0.9813602;0.9851982;0.97772104;0.98726165;0.99199706;0.98772532;0.99171913;
0.99415934;0.99256462;0.99501348;0.99127179;0.99571031;0.99584913;0.99188536;0.99631119;0.99712569;0.99671143;
0.99452811;0.99727303;0.9974547;0.99622363;0.99579316;0.99585938;0.9975096;0.99705923;0.99833083;0.99707103;
0.99809629;0.99779099;0.99838883;0.99817932;0.99826872;0.99810439;0.99793792;0.9989363;0.99879926;0.99765205;
0.99932539;0.99914777;      };
     };
     float_Data @[23] {
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.065607652;0.085565187;0.051040486;0.18919732;0.23056011;0.35495061;0.43202534;0.56624395;0.64333135;0.73996222;
0.81007653;0.82034159;0.86462897;0.84508711;0.8716594;0.91036844;0.90214545;0.91839546;0.93332428;0.93679965;
0.94604105;0.93662941;0.9520424;0.95413703;0.94493341;0.95936811;0.96431577;0.965186;0.95890641;0.964656;
0.970433;0.96554464;0.96255594;0.96287215;0.97060341;0.971268;0.97482401;0.97437078;0.97551477;0.97536707;
0.97829545;0.97869825;0.97951484;0.97850776;0.97842568;0.98442429;0.98529297;0.98224938;0.98873198;0.98852098;
-0.0075987256;0.019531423;0.097336017;0.17480375;0.27950799;0.40712529;0.47241229;0.51665187;0.66852766;0.74734342;
0.81052428;0.85663885;0.87786394;0.90329713;0.91926986;0.89354867;0.91007304;0.93350893;0.93407941;0.94294089;
0.95034164;0.95779341;0.96134329;0.9624449;0.96318382;0.96813035;0.96922058;0.97242141;0.97782129;0.98055768;
0.98141152;0.98224199;0.035319187;0.011352777;0.12065318;0.17066348;0.26736188;0.34944084;0.49691591;0.58775443;
0.63433117;0.71549588;0.7677896;0.79741067;0.86546224;0.88459152;0.90873933;0.91306257;0.93654418;0.9454152;
0.95329177;0.95820445;0.96113616;0.96155798;0.95615661;0.95034224;0.9586125;0.95863813;0.96453863;0.97324425;
0.971313;0.97478485;0.97889876;0.97855431;0.98098677;0.97941417;0.97869849;0.97745603;0.97810954;0.98008698;
0.97903556;0.97973055;0.98252845;0.98186797;-0.087780647;-0.0035329533;0.030055691;0.17230074;0.22840934;0.40739876;
0.48298395;0.56296974;0.63526988;0.70512599;0.77837992;0.84311783;0.89488566;0.90768081;0.92210788;0.93724501;
0.9505406;0.95238626;0.96020812;0.9653821;0.9670192;0.96835566;0.97406554;0.9743014;0.97617513;0.97664964;
0.97884071;0.97978556;0.97710699;0.97742444;0.98070216;0.98158485;-0.045157395;-0.036150329;0.091146886;0.23873302;
0.32158196;0.44197848;0.49944589;0.63167751;0.72947204;0.76655549;0.81705505;0.86460143;0.87602448;0.91034585;
0.9225685;0.93044937;0.93449563;0.95322299;0.95739579;0.96208972;0.9638176;0.96750224;0.97082877;0.97163504;
0.97494584;0.97931665;0.97866386;-0.021208607;0.031453777;0.11452423;0.22979715;0.34231883;0.43313569;0.51989079;
0.62742257;0.66233724;0.72896445;0.75035965;0.82698303;0.84652627;0.88615495;0.89348119;0.90839928;0.92556918;
0.93985593;0.94354981;0.94898027;0.95290589;0.9575327;0.96201497;0.96335542;0.96369255;0.96911371;0.97101867;
0.97011602;0.97593337;0.97377938;0.9746595;0.97842032;0.97914696;0.97974592;0.97961998;0.97983062;0.98002708;
0.98228264;0.075285979;0.073431753;0.16235222;0.22738791;0.29257956;0.33472168;0.51696008;0.55700308;0.67112082;
0.6796338;0.80070418;0.82571101;0.86963868;0.87851298;0.89743078;0.9079209;0.92423457;0.93926644;0.94364679;
0.93376076;0.95960182;0.95792776;0.96573615;0.96720308;0.97305924;0.97287285;0.97403175;0.97728235;0.97614485;
0.97970438;0.97740197;0.97783339;0.98058164;0.9800576;0.0072013652;0.092838451;0.13836241;0.20975623;0.25871763;
0.37597641;0.44272503;0.51036787;0.63984126;0.64001852;0.76042056;0.75341368;0.79511321;0.83268458;0.89579463;
0.90752429;0.9234699;0.93606347;0.93929696;0.94807953;0.95612407;0.95783538;0.96357954;0.96507752;0.9671399;
0.96822512;0.97220308;0.9742074;0.024821365;0.091994874;0.17935973;0.21206468;0.27143317;0.41802818;0.48843849;
0.57390273;0.65481043;0.72965986;0.78337258;0.84270865;0.86985338;0.89888102;0.88726294;0.91245788;0.92091268;
0.92727697;0.93319422;0.93759125;0.89830804;0.93865126;0.93925166;0.95773333;0.95984793;0.96359366;0.96543813;
0.97000855;0.97045791;0.97108787;0.96874106;0.97299439;0.9742251;0.97656459;0.9750874;0.97517419;0.97705376;
0.97485697;0.97020757;0.97635925;0.97700047;0.97843826;0.98262519;0.090993382;0.14455479;0.16435282;0.19569391;
0.31966594;0.40001011;0.47764862;0.5792076;0.62703305;0.6401695;0.74917924;0.75473142;0.81636095;0.83656442;
0.84664172;0.9014383;0.92362684;0.93494749;0.94286954;0.95510352;0.9477458;0.94930702;0.94465262;0.94848788;
0.95373183;0.96221888;0.9607991;0.96217722;0.96702683;0.96982604;0.96789497;0.970065;0.97073203;0.97526991;
0.97630584;0.98008543;0.065607652;0.085565187;0.051040486;0.18919732;0.23056011;0.35495061;0.43202534;0.56624395;
0.64333135;0.73996222;0.81007653;0.82034159;0.86462897;0.84508711;0.8716594;0.91036844;0.90214545;0.91839546;
0.93332428;0.93679965;0.94604105;0.93662941;0.9520424;0.95413703;0.94493341;0.95936811;0.96431577;0.965186;
0.95890641;0.964656;0.970433;0.96554464;0.96255594;0.96287215;0.97060341;0.971268;0.97482401;0.97437078;
0.97551477;0.97536707;0.97829545;0.97869825;0.97951484;0.97850776;0.97842568;0.98442429;0.98529297;0.98224938;
0.98873198;0.98852098;      };
     };
     float_Data @[24] {
      name="Hidden_0_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.25725171;0.23018913;0.081982277;0.047296904;0.026851205;0.13374367;-0.021916835;0.029202022;-0.010782017;0.12037662;
0.028611975;0.038776238;0.050062843;0.031143222;0.042146206;-0.0029481493;0.045265958;0.015744638;0.045213085;0.13352066;
0.08463905;0.12212768;0.047008645;0.040322781;0.11565092;0.060362741;0.11089425;0.090141565;0.028343117;0.057351675;
0.081183463;0.04094841;0.07931529;0.052320462;0.1042895;0.13458735;0.090921119;0.01807278;0.033730272;0.044839479;
0.025207475;0.028255222;0.061999388;0.15195307;0.028620543;0.14194648;0.059344843;0.074357577;0.097311422;0.10859708;
0.11868081;0.12460245;0.17613168;0.08399763;0.052651349;0.014733686;0.01955625;0.01060995;0.009542644;0.10117974;
0.1028492;0.065923348;0.039377104;0.092680968;0.021520583;0.047117323;0.1260418;0.035140429;0.092704982;0.041960593;
0.045371067;0.16760641;0.10798294;0.067997158;0.036567733;0.021852612;-0.029346747;0.15467395;0.04562192;0.10756366;
0.027055204;-0.035676748;0.13392462;0.05849205;0.070691533;0.069604054;-0.011858918;0.049831498;0.090230577;0.085313894;
0.060387064;0.074976057;0.11657482;0.013530398;0.086657375;0.0035296921;-0.018104853;0.048425321;0.039125711;0.048473768;
0.0091310786;0.0095587978;0.049173459;0.061833154;0.042876836;0.065153793;0.079226278;-0.039937451;0.051474541;0.041135877;
0.0097541343;0.06538029;0.060526382;-0.00036789462;-0.047175243;0.076829046;0.072939374;0.040218167;-0.030837774;0.033329546;
0.055534553;-0.043384586;0.014822752;0.050229359;0.26248205;0.21986133;0.081578881;0.0097725978;0.039922427;0.033417635;
0.097537667;0.14158759;-0.0042685848;0.018322298;0.089627132;0.011970729;0.0092804199;-0.012923641;0.059533074;0.0053594694;
0.03605463;0.041309003;0.055767912;0.067639947;0.046721186;0.085861541;0.032401476;0.032814018;-0.062480159;0.012801009;
0.012130299;-0.009631562;0.051877834;0.09128774;0.11255956;0.047353659;0.22005016;0.14147246;0.20253868;0.056832865;
0.0059828367;0.056232519;-0.042677216;0.11258939;-0.015471879;0.037589565;0.026816655;0.013754373;-0.039298501;-0.028879844;
0.035219241;0.04513853;0.10578228;0.0047794031;-0.0010401332;0.062034044;0.10820947;-0.027937582;0.050872184;-0.0072137499;
0.055426024;0.034244932;-0.050789617;0.2129214;0.11320457;0.15258619;0.03608555;0.031924464;0.053939342;0.018215364;
0.032327741;0.076783374;0.12557091;0.087699339;0.029801989;0.07196293;0.030552261;0.033601265;-0.031158753;0.041910592;
0.054491378;0.085170843;0.10319621;0.017435122;0.018967135;0.089027338;0.10553815;0.10199881;0.055956058;0.02393984;
0.05246558;0.06084672;0.039387044;0.051413365;0.05493227;0.091197431;0.068337105;0.031199183;0.037659209;0.053459119;
0.08863616;0.20638341;0.092738315;0.049126569;-0.013461696;-0.030056784;0.054558329;0.12393012;0.020016946;-0.0091872802;
0.011323917;0.019733775;-0.062813349;-0.063737303;0.03079382;0.056061469;-0.012366769;0.064061038;0.029594071;0.023125732;
0.013283354;0.09877269;0.008200692;0.015522028;-0.0089698564;0.12001811;-0.017157629;0.011063669;0.030398946;0.029572487;
0.062224638;0.08344312;0.0012907897;-0.031210693;-0.0026684364;0.25277957;0.17478852;0.12911707;0.09010677;0.14696674;
0.079436533;0.044685025;0.10202572;0.0022320198;0.066390641;0.016419081;0.073059686;0.11553103;0.058320209;0.069993876;
0.08752282;0.065129131;0.1064617;0.045078464;0.05977745;0.079260565;0.045348044;0.040963225;0.070598237;0.033613976;
0.019874426;0.10638965;0.0684416;0.15806285;0.087837048;0.13017035;0.11462984;0.035853986;0.059900355;0.036867127;
-0.0052109463;0.022102475;0.014888649;0.035680629;-0.032945424;-0.019224394;0.012278664;0.062862746;-0.0045459624;0.13282764;
0.023123154;0.028115045;-0.040376343;0.034371432;0.060650591;0.057543341;0.032400373;-0.025989618;0.061828233;0.0519339;
0.010478504;0.059677143;0.12009474;0.043367963;0.10254531;-0.010113451;-0.054612074;0.032621525;0.022194838;0.05567633;
0.083401687;0.048747417;-0.01427357;0.016810279;-0.03788694;0.006405043;0.12678389;0.030257659;0.026006574;0.092757024;
0.077061914;0.1007814;0.060709711;0.049358182;0.038390122;0.067641012;0.077825889;0.0055054259;-0.037162665;0.084499165;
0.036013234;-0.01367247;0.013942595;0.046128064;-0.0053049917;0.06107175;-0.01702147;0.097677618;0.071503289;0.0081553329;
0.0082169678;0.053832725;0.078672118;-0.0024656118;0.0560969;0.0098718014;0.034183484;0.050749354;0.049436763;0.044346046;
0.051053658;-0.046478726;0.25725171;0.23018913;0.081982277;0.047296904;0.026851205;0.13374367;-0.021916835;0.029202022;
-0.010782017;0.12037662;0.028611975;0.038776238;0.050062843;0.031143222;0.042146206;-0.0029481493;0.045265958;0.015744638;
0.045213085;0.13352066;0.08463905;0.12212768;0.047008645;0.040322781;0.11565092;0.060362741;0.11089425;0.090141565;
0.028343117;0.057351675;0.081183463;0.04094841;0.07931529;0.052320462;0.1042895;0.13458735;0.090921119;0.01807278;
0.033730272;0.044839479;0.025207475;0.028255222;0.061999388;0.15195307;0.028620543;0.14194648;0.059344843;0.074357577;
0.097311422;0.10859708;      };
     };
     float_Data @[25] {
      name="Hidden_1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.25088736;0.15109834;0.026442185;0.010417875;-0.089145698;0.057613634;-0.069315165;0.018833611;-0.02152808;-0.020872328;
-0.022563253;0.03391517;-0.055965487;-0.00045472383;0.0076205898;0.019825546;0.03002161;-0.011445192;-0.036021501;0.031954709;
0.022951154;-0.04402566;0.019664358;-0.04031032;0.03415763;-0.014597982;0.018879607;0.015231579;-0.024519214;-0.061815437;
0.062662534;-0.029545104;0.017357433;7.872939e-05;0.052970987;0.060705792;0.055481121;-0.005248826;0.00062079373;-0.058098659;
-0.021159189;0.0076352824;0.010888796;0.088801123;0.017384246;0.052121576;0.030892693;0.025731187;-0.0018079632;0.010200521;
0.1919581;0.058133978;0.050502464;-0.0070283045;0.0083692241;0.0084898518;-0.0054829144;-0.078026541;-0.081623115;0.0358424;
-0.039896414;-0.014666699;0.0070703924;0.035398498;-0.023341561;0.026314622;0.030695975;0.049059097;-0.046325803;0.016719578;
-0.0046991762;0.061418325;0.080456644;0.0047994209;-0.028828604;0.0012987816;-0.04054885;0.11628788;-0.019400395;0.016598525;
-0.014647119;0.0076788501;0.18062966;0.056552969;0.0049763345;0.0036405046;-0.047082804;-0.010644535;0.00049838843;-0.021499896;
0.020950532;-0.035033323;0.079329669;-0.028388157;0.0328128;-0.054432448;-0.085721299;-0.0051289438;0.014634555;0.0076686321;
-0.0301015;-0.054355111;-0.019442851;0.034073088;0.010879488;-0.039797515;0.0021814788;-0.10469849;-0.0010519719;-0.046247378;
-0.027639003;-0.026230277;0.0076267123;0.011731726;-0.013124913;-0.018145829;0.032605175;-0.012138073;-0.051132083;-0.055625416;
-0.019413434;-0.10998854;0.0044865604;0.025692647;0.26463616;0.13781877;0.02384337;-0.041007336;-0.0088425959;0.0067885732;
0.058348831;0.034769058;-0.059813675;-0.033470921;0.075481892;-0.035333116;-0.075195506;-0.081807785;0.062226512;-0.041105188;
-0.040623039;0.0029879091;-0.031191714;0.023216801;0.012701151;0.00971027;-0.051714025;0.025284657;-0.097036019;-0.0041638939;
-0.050968766;-0.036900349;0.01656127;0.03986612;0.049541607;-0.0052149547;0.24603339;0.10479763;0.11094444;0.010406459;
-0.023432674;0.01253539;-0.060952939;0.010218341;-0.067364551;-0.026813161;-0.01666674;0.026377531;-0.056201242;-0.051647685;
-0.028125159;-0.022126717;0.028884111;-0.028963992;-0.055261493;-0.0037960988;0.053440344;-0.00068545819;-0.034205034;0.0062681176;
0.027951431;0.023673287;-0.088062912;0.29641902;0.039085921;0.07646735;-0.049777832;-0.051832184;-0.049931396;-0.071219809;
-0.067811958;0.025440065;-0.0067458171;0.027660862;-0.041406304;0.010756023;-0.01385343;-0.041824881;-0.108251;-0.033297032;
-0.031728834;0.016154479;0.037669383;0.017228661;-0.012441649;0.022132697;0.011478299;-0.014897424;-0.018883416;-0.034470558;
-0.01827546;0.036511987;0.027297996;-0.0035103334;-0.021880232;0.019611932;0.017743202;-0.0043309145;-0.035821117;-0.01612928;
-0.0093162395;0.20630303;0.05410552;-0.023049621;-0.036256991;-0.075623758;-0.005333534;0.012724126;-0.024923103;-0.025720928;
-0.0046450053;-0.01222575;-0.059118453;-0.036230132;0.044512652;0.040643353;-0.04440482;0.027043046;0.036321662;0.0062103914;
0.021365115;-0.012268126;-0.018341498;-0.049645174;-0.023482155;0.014403378;-0.036944561;-0.0046895202;-0.0050180126;0.010785698;
0.02503608;0.027892761;-0.030761236;-0.012304022;0.0031032849;0.32198238;0.096488588;0.047811441;0.02767662;0.05689026;
0.013469188;-0.019134058;0.027779307;-0.047627043;-0.017920822;0.00049873471;-0.017021906;0.1087843;-0.029779144;-0.0062959115;
-0.0084988223;-0.0568574;0.021176765;-0.022217501;0.040021911;0.0023811881;-0.049142722;-0.005356478;-0.029933365;-0.037297908;
-0.043843795;0.0095647434;-0.038152117;0.21124527;0.08590018;0.10838451;0.0099628093;0.02373191;0.0069986987;-0.027992476;
-0.0079688402;0.028216004;0.0089030452;-0.023457952;-0.05660842;-0.043173242;-0.017161619;0.010178256;-0.051013123;-0.0017817342;
0.020618914;-0.032320019;-0.048361097;0.013453289;0.019646112;0.022331661;0.0085866069;-0.027525082;-0.029185185;-0.021956969;
-0.012122434;0.0047609415;-0.019668955;-0.0075080488;0.12648675;0.037523795;-0.089201964;0.041646615;-0.0011480787;-0.021237861;
0.016248271;-0.0067518745;0.038652256;-0.016113736;-0.01394742;0.018109433;0.23255464;0.077179037;-0.017838689;0.057615031;
0.028321562;0.088829473;0.084629834;0.035791352;0.053371474;-0.026153039;0.055351388;0.0075742938;0.0016153455;0.084437475;
-0.06014749;-0.027817294;0.0098134587;-0.021724949;0.016279273;0.038133759;0.0019115937;0.071003668;-0.05678878;-0.047657527;
-0.041550931;-0.022184083;-0.0052462583;-0.022759583;0.00097206951;-0.031034188;0.01024566;0.019371193;-0.010833634;-0.029434824;
-0.030980609;-0.044535499;0.25088736;0.15109834;0.026442185;0.010417875;-0.089145698;0.057613634;-0.069315165;0.018833611;
-0.02152808;-0.020872328;-0.022563253;0.03391517;-0.055965487;-0.00045472383;0.0076205898;0.019825546;0.03002161;-0.011445192;
-0.036021501;0.031954709;0.022951154;-0.04402566;0.019664358;-0.04031032;0.03415763;-0.014597982;0.018879607;0.015231579;
-0.024519214;-0.061815437;0.062662534;-0.029545104;0.017357433;7.872939e-05;0.052970987;0.060705792;0.055481121;-0.005248826;
0.00062079373;-0.058098659;-0.021159189;0.0076352824;0.010888796;0.088801123;0.017384246;0.052121576;0.030892693;0.025731187;
-0.0018079632;0.010200521;      };
     };
     float_Data @[26] {
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] -0.022454942;-0.017543474;0.017543612;0.043859243;-0.061403167;-0.017543824;0.0087719271;-0.0087719373;0.0087719206;-0.052631564;
-0.026315784;0.078947373;-0.061403498;0.035087727;0.017543864;0.061403513;0.0087719318;-0.043859646;1.7881393e-09;0.061403513;
0.03508772;-0.061403513;-0.03508772;-0.035087716;-0.0087719206;-0.026315786;0.0087719187;0.02631579;-0.043859653;-0.052631579;
0.017543865;-0.070175439;-0.02631578;-0.0087719252;0.035087727;0.061403509;0.070175439;0.087719306;-0.03508772;0.017543864;
-0.0087719318;0.052631583;0.0087719345;-0.01754385;0.043859649;0.035087727;0.043859657;0.0087719364;-0.017543864;2.3841857e-09;
0.01263097;0.078945547;-0.070174485;-0.035087384;0.026315579;-0.0087718964;0.043859567;-0.017543841;-0.070175387;0.0087719206;
-0.070175409;6.2584875e-09;0.043859649;-0.061403502;-0.052631572;0.096491225;0.052631583;0.070175439;-0.026315784;0.043859653;
-4.1723252e-09;0.061403517;0.070175439;0.043859653;-0.026315786;3.5762786e-09;2.9802323e-09;0.1140351;-0.035087716;0.02631579;
-0.061403513;0.017543854;-0.031226961;0.043858632;-0.017543599;0.008771793;0.017543765;3.159046e-08;-0.008771915;0.0087719215;
0.017543854;-0.061403494;0.052631564;-0.026315784;8.3446503e-09;0.017543864;0.017543862;0.03508772;0.070175439;0.03508772;
0.052631587;-0.026315797;-0.026315784;0.078947365;-0.01754386;0.0087719336;5.3644182e-09;-0.078947365;0.017543864;0.02631579;
0.017543864;-0.0087719336;0.087719306;0.035087712;0.026315799;-0.0087719262;0.035087723;7.7486035e-09;-0.035087716;-0.0087719308;
0.0087719345;-0.043859649;0.0087719355;0.017543862;-0.013683765;0.0087716756;0.017543543;0.035087362;-0.061403222;-0.0087718917;
1.579523e-08;-0.017543841;-0.043859616;0.035087705;-0.043859646;0.035087723;-0.03508772;-0.087719291;0.070175432;-0.043859646;
0.026315793;-0.03508772;-0.02631578;0.07894738;-0.02631579;-0.061403502;-0.052631579;9.8347668e-09;0.026315799;-0.017543864;
-0.03508772;-0.03508772;0.0087719262;-0.035087716;-0.0087719187;0.070175417;-0.022455242;-0.0087716412;-0.043859057;0.061403017;
0.061403189;1.4901161e-09;-0.0087719038;-0.02631576;1.1920929e-09;0.017543836;-0.0087719336;0.01754386;0.017543849;0.035087716;
0.035087723;-0.035087723;0.017543854;-0.017543865;-0.0087719224;-0.061403502;0.02631579;0.043859649;0.017543865;0.043859649;
0.043859657;0.035087716;6.5565109e-09;0.091575243;0.0087716626;0.026315399;0.043859296;-0.035087559;-0.017543793;-0.017543828;
-0.035087667;0.02631576;-0.01754385;-0.0087719252;-0.035087712;-0.02631579;-0.052631572;-0.026315786;0.052631583;-0.01754386;
0.026315786;3.2782554e-09;0.017543858;0.070175439;0.026315793;-0.017543858;-0.017543854;0.0087719355;0.026315799;-0.017543854;
0.03508772;0.026315793;0.078947365;0.017543869;0.017543858;-0.035087716;0.026315793;0.061403517;-1.1920929e-09;0.061403513;
-0.061403502;-0.039998084;0.026315229;0.017543536;0.052631274;-0.0438594;0.0175438;-0.026315739;-0.017543837;0.01754385;
-0.035087716;-0.026315784;0.01754386;-0.017543862;0.0087719373;0.035087723;-0.043859649;0.052631587;0.1491228;-0.01754386;
0.061403509;-0.0087719308;0.0087719318;-0.035087716;-0.017543854;-0.043859646;-0.02631579;-0.017543854;-0.035087727;0.03508772;
0.026315784;-2.0861626e-09;-0.0087719429;0.0087719336;0.070175432;0.04771762;-0.0087717287;0.0087718125;0.043859281;-0.0087718479;
-0.017543806;0.026315723;0.026315754;0.0087719169;0.0087719262;0.026315784;8.6426732e-09;0.052631583;0.0087719318;1.1920929e-09;
-0.0087719234;-0.017543862;0.0087719252;-0.035087716;0.0087719345;-0.043859649;-0.03508772;0.03508772;-0.03508772;-0.0087719252;
-0.052631572;-0.026315782;-0.035087723;0.030174293;-0.017543301;0.035087269;0.052631237;-0.096490748;-0.087719031;-0.078947209;
-0.017543845;0.096491188;0.043859631;-0.035087716;0.026315784;0.043859657;0.03508772;0;-0.043859646;-0.008771928;
-0.017543864;-0.070175439;-0.03508772;0.026315793;-0.026315784;0.035087727;2.3841857e-09;-0.043859646;-0.0087719215;-0.043859653;
-8.9406965e-10;-0.03508772;-0.043859653;-0.061403502;0.078947365;0.087719306;-0.13157897;0.035087723;-0.017543858;-0.070175439;
-0.017543854;-0.017543856;0.070175447;-0.052631583;-0.03508772;0.02631579;-0.083856307;0.026315108;0.035087351;0.026315546;
-0.061403211;0.096490882;0.061403375;0.0087719169;0.043859623;0.061403483;0.061403498;-0.070175439;0.043859649;0.017543869;
-0.070175432;-0.017543854;-0.03508772;-0.02631579;0.052631579;-0.0087719271;-5.9604646e-09;0.052631583;-0.01754386;-0.052631572;
-0.035087716;5.9604643e-10;-0.026315786;0.026315799;-0.0087719345;-0.035087716;-0.017543854;-3.5762786e-09;-0.01754386;2.3841857e-09;
0.02631579;-0.017543852;-0.022454942;-0.017543474;0.017543612;0.043859243;-0.061403167;-0.017543824;0.0087719271;-0.0087719373;
0.0087719206;-0.052631564;-0.026315784;0.078947373;-0.061403498;0.035087727;0.017543864;0.061403513;0.0087719318;-0.043859646;
1.7881393e-09;0.061403513;0.03508772;-0.061403513;-0.03508772;-0.035087716;-0.0087719206;-0.026315786;0.0087719187;0.02631579;
-0.043859653;-0.052631579;0.017543865;-0.070175439;-0.02631578;-0.0087719252;0.035087727;0.061403509;0.070175439;0.087719306;
-0.03508772;0.017543864;-0.0087719318;0.052631583;0.0087719345;-0.01754385;0.043859649;0.035087727;0.043859657;0.0087719364;
-0.017543864;2.3841857e-09;      };
     };
     float_Data @[27] {
      name="Hidden_0_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] -0.00037745471;0.00017658494;0.00037991756;0.00051893509;0.00056783628;0.00081294408;0.00077805889;0.00067000376;0.00055410556;0.00045572477;
0.00048698936;0.00025417039;0.00029053332;0.00031694013;0.00017090887;0.0001976619;0.00012687525;0.0002861731;0.00030440651;0.00015002395;
0.00015849955;0.00023900176;0.00019645205;0.0001739592;0.00013539626;0.0001281711;0.00015606906;0.00012935302;6.876573e-05;0.00022603844;
0.00019891719;0.00022187929;4.8923222e-05;0.00022528711;6.7773697e-05;0.00010624632;0.00011036073;8.7581735e-05;7.7059885e-05;3.8164999e-05;
9.7577089e-05;0.00011054659;0.00011448084;0.00013171285;0.00027631456;0.00025290222;0.00022011762;0.00024407115;0.00019070087;0.0001839825;
-0.00041903311;-0.00020377562;0.00039805716;0.00049533113;0.00025431559;0.00042246626;0.0005192731;0.00074194814;0.00065618654;0.00052126724;
0.00039304726;0.00049040449;0.00031818595;0.0003745229;0.00044939652;0.00022743545;0.00015227555;0.00034359275;0.00018620251;0.00022880116;
0.00018512801;0.00014245698;0.00020532582;9.8115437e-05;0.00018125973;0.00019699297;0.00025028421;0.00026700238;0.00029265144;0.00030845881;
0.00024673724;0.0002958902;-0.00039662269;-0.00010560138;7.3791183e-05;0.00065164489;0.0004455556;0.00090063957;0.0010076761;0.00057490933;
0.00089025853;0.00066803;0.00066116248;0.00064473785;0.00051982008;0.00049578788;0.00046106186;0.0004434335;0.00034751586;0.00046015182;
0.00038114112;0.00037019982;0.00030233953;0.00031028767;0.00016802541;0.0002076302;0.00021878106;0.00014120588;0.00030313697;0.00029022773;
0.000230718;0.000349423;0.00023509987;0.00025568524;0.00023395063;0.00019335066;0.00028969764;0.00025813113;0.00016284322;0.00014557279;
0.00019101573;0.00014835385;0.00024711591;0.0002011668;-0.0002437716;0.00029328503;0.00021955812;0.0004884284;0.00011362228;0.0001914356;
0.00041926402;0.00020483039;0.00033297169;0.00032025267;0.00058163633;0.00033725708;0.00040895276;0.00048536365;0.00036613975;0.0003936163;
0.00034119832;0.00039196707;0.00026257514;0.00029601401;0.00027125145;0.00029371007;0.00029826761;0.00034920522;0.00028652122;0.00029813909;
0.00022156117;0.00029137742;0.00020367613;0.00025637477;0.00024189748;0.00022678565;-0.00027358806;2.7394761e-05;0.00041594039;0.00045165268;
0.00041890089;0.00069781876;0.00042689155;0.00041224959;0.00044656673;0.00068941893;0.000442922;0.00046490642;0.00039077213;0.00039236649;
0.00047841432;0.00038984828;0.0002916099;0.0003616169;0.00036495551;0.00032381434;0.00030925171;0.00034333687;0.0002582552;0.00022212828;
0.00029382424;0.00021654727;0.00020758562;-0.0004798485;-0.00012932447;0.00036195107;0.00033097964;0.00022662818;0.00050316268;0.00036920505;
0.00041246924;0.00052686699;0.00045347435;0.00041187019;0.00028123733;0.00045641712;0.00034083572;0.00042914701;0.00031554082;0.00033146102;
0.00030497916;0.0003312419;0.00015641225;0.00023328626;0.00016752476;0.00027246051;0.00022621358;0.00025473957;0.00028290221;0.00024805655;
0.00026464192;0.00033171725;0.00023880758;0.00014005037;0.00031528733;0.00028625075;0.00026894148;0.00028684441;0.00026726691;0.00015966859;
0.00025780677;-0.0002489886;3.2532374e-05;2.1979415e-05;0.00033013988;0.00043282015;0.00031678844;0.00034702697;0.00062783773;0.00053261203;
0.00038831451;0.00043199319;0.00027393433;0.00035207474;0.00030863468;0.00029631073;0.0003079921;0.00032304588;0.00024750325;0.00031483063;
0.00020055965;0.00021314545;0.00029537705;0.00018227501;0.00022141781;0.00025038785;0.00025006887;0.00020948026;0.00027697909;0.00024157221;
0.00024297804;0.00023136073;0.00018169949;0.000207124;0.00023044452;-0.00022762381;0.00019083844;0.0004897241;0.00016638107;0.00042672723;
0.00049509323;0.00069747143;0.00039047853;0.00061058952;0.00042363402;0.00038041695;0.00022846721;0.0001571475;0.00024840041;0.00024849566;
0.00026186471;0.000197937;0.00024371422;0.00028663452;0.00021318565;0.00020165143;0.00024064665;0.00012506905;0.00013784032;0.00017655311;
0.00020715283;0.00018208173;0.00014090388;-0.00037066976;-0.00015691131;0.00015933224;0.00053983525;0.00040969875;0.00043553821;0.00074180821;
0.00064171344;0.00063545746;0.00057382288;0.00030740892;0.00036843956;0.00044255544;0.00027427633;0.00024296615;0.00028068657;0.00026032055;
0.00034038015;0.00031538724;0.00028376098;0.00037680863;0.00029178619;0.00018543264;0.00021609438;0.00025027816;0.00017035738;0.00019250957;
0.00024715989;0.00016273504;9.4048672e-05;0.00012599741;0.0001970727;9.9290432e-05;0.00017565511;8.2513245e-05;6.3336978e-05;6.6707187e-05;
0.00013784162;-6.7599962e-05;0.00012583172;0.00015214067;0.00017682189;0.00021988699;-0.0002891956;4.596205e-05;0.0003390385;0.00039239466;
0.0003195593;0.00045719053;0.00050056458;0.00067432591;0.00041943273;0.00054830441;0.00028722157;0.00065328879;0.00045612588;0.00032482148;
0.00031976239;0.00044971;0.00047297138;0.0002771313;0.00034713733;0.00023386501;0.0001908683;0.00024294959;5.2535059e-05;0.000165563;
0.00016247894;0.00020355164;0.00012806244;0.00026788932;0.00020586615;0.00016502372;6.3322237e-05;0.00018467648;7.2241273e-05;0.00022669249;
0.000204688;0.00028849987;-0.00037745471;0.00017658494;0.00037991756;0.00051893509;0.00056783628;0.00081294408;0.00077805889;0.00067000376;
0.00055410556;0.00045572477;0.00048698936;0.00025417039;0.00029053332;0.00031694013;0.00017090887;0.0001976619;0.00012687525;0.0002861731;
0.00030440651;0.00015002395;0.00015849955;0.00023900176;0.00019645205;0.0001739592;0.00013539626;0.0001281711;0.00015606906;0.00012935302;
6.876573e-05;0.00022603844;0.00019891719;0.00022187929;4.8923222e-05;0.00022528711;6.7773697e-05;0.00010624632;0.00011036073;8.7581735e-05;
7.7059885e-05;3.8164999e-05;9.7577089e-05;0.00011054659;0.00011448084;0.00013171285;0.00027631456;0.00025290222;0.00022011762;0.00024407115;
0.00019070087;0.0001839825;      };
     };
     float_Data @[28] {
      name="Hidden_1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] -0.0037597131;-0.00012827218;0.0018118295;0.0024204454;0.0025405819;0.0022525387;0.0026934112;0.0016892026;0.0022731405;0.0017707895;
0.0020992565;-0.00027496525;0.00011924968;-3.9811082e-05;-0.00051634124;0.00011599254;0.00011058775;0.00044960697;0.00047476953;0.00018333459;
-4.481748e-06;0.00036429439;0.00049306755;7.0253278e-05;7.2432311e-05;7.9389851e-05;0.0003519959;0.00027280251;4.5834622e-05;0.00031678801;
0.00046880174;0.00016258948;-0.00011232775;0.00032119217;-1.4218735e-05;0.00017361921;0.00029775925;-5.2287414e-05;0.00023146546;-3.8922812e-05;
0.00012756167;0.00029003958;5.1568099e-05;0.00072255428;0.0012364644;0.0013278652;0.0011684892;0.00093717233;0.0010557361;0.0008838732;
-0.0026468032;-0.00056832907;0.0016186998;0.0030084825;0.0010089205;0.0020443085;0.0024564818;0.0039288746;0.0031479129;0.0027395217;
0.0027443583;0.0027018932;0.0021971923;0.0016772097;0.0025229633;0.0012632572;0.0002655494;0.00061618979;0.00075151009;0.00050350209;
0.00061205897;0.00068772427;0.00069242733;0.00056781044;0.00064482784;0.00073081494;0.00073211303;0.0014099001;0.0021830199;0.0020845311;
0.0018497244;0.0018047304;-0.0036894912;-0.00071183144;0.00037829715;0.0024287065;0.00057207968;0.0024215975;0.0034436763;0.0021847608;
0.0031670772;0.0024315258;0.0022277245;0.0022543787;0.0017895862;0.0019372883;0.0020749045;0.002197772;0.0016257684;0.0026702746;
0.002433585;0.0023301549;0.0019672266;0.0017054128;0.00017210071;9.7750228e-05;0.00053978298;0.00015296908;0.0012167103;0.001676652;
0.00084828166;0.0019186519;0.0015383527;0.0015434549;0.0016516544;0.0012989177;0.0014375801;0.0013678487;0.0009749998;0.0011060009;
0.0013693479;0.0010182395;0.0010077878;0.00082179124;-0.0019561129;0.00041569918;0.00085059163;0.0021255102;0.00050823786;0.00081742927;
0.0013635047;0.0012282726;0.0016651548;0.0015544246;0.0021190578;0.0020173427;0.0020352537;0.0021488639;0.001674706;0.0019095094;
0.0017351997;0.0018133067;0.001688824;0.0016179462;0.0016336229;0.0014001349;0.0014538724;0.0015148431;0.0014361703;0.0012040677;
0.00099611317;0.001405843;0.00092325098;0.00094437634;0.00087311008;0.00096412131;-0.0020937757;-0.00089626596;0.002001629;0.0024824012;
0.0011638971;0.001326559;0.0020084416;0.0021039764;0.0024139651;0.0025983872;0.0021892779;0.0023917903;0.0019311113;0.0019567921;
0.0022531601;0.0017352824;0.0015635133;0.0016358847;0.0016763353;0.0014682639;0.0015753753;0.0014521314;0.0013610034;0.0013495593;
0.0014116094;0.0013557206;0.0011670911;-0.0026538065;-0.001351899;0.0022847597;0.0018005486;0.0020316183;0.0019907863;0.0011310526;
0.0016551699;0.0018827741;0.0022214588;0.001317907;0.0016025661;0.0016855844;0.0016574602;0.001859658;0.0013576155;0.0015476608;
0.0013133315;0.0014965034;0.00085697079;0.0011392661;0.001117456;0.0013636869;0.0010519383;0.0012568247;0.0013729761;0.0012071965;
0.001250827;0.0014529235;0.0013199631;0.0014391125;0.0017357473;0.0019143026;0.0016418744;0.0017460025;0.0016734737;0.0013922692;
0.001445329;-0.003260901;-0.00031224309;-0.00056167267;0.00011175491;0.0010318246;0.0010627152;0.0013993845;0.002017603;0.0018501595;
0.0017192431;0.0014858483;0.0012280504;0.0013854257;0.0011170716;0.00086395966;0.0011652643;0.0012554929;0.0010461337;0.0014475937;
0.0012535709;0.0011901039;0.0014684052;0.0011232286;0.0011531869;0.0012611768;0.0012688112;0.0010818194;0.001268143;0.0011371189;
0.0011380486;0.00086261518;0.00086451997;0.00083235139;0.00082070666;-0.0033673695;0.00034647051;0.0026640233;0.0011890256;0.0016859822;
0.0027059766;0.0028755928;0.0018254075;0.0032288432;0.0023539239;0.0022768893;0.00033598018;3.5104404e-05;0.00028951096;0.00036189842;
0.00075005705;0.00025072231;0.00073963834;0.0005949231;0.00072870997;0.00073506788;0.00071472942;0.00041618466;0.0005751148;0.00078161637;
0.00048239104;0.00082824542;0.00051795284;-0.0023677265;-0.00071279571;0.0016028723;0.0024551218;0.00047962266;0.00076692732;0.0028673899;
0.0025941716;0.0026474167;0.0019778735;0.0018378645;0.0015997565;0.0020710989;0.0013457695;0.00012727411;0.00021428622;0.00032604992;
0.00045087011;0.00061637932;0.00034660473;-4.3173455e-05;0.00023891083;9.7713064e-06;0.0003215844;0.00023742676;0.00019290924;0.00046072382;
0.00033937447;0.00032968642;1.1732614e-05;1.023121e-05;0.00035369134;0.00014939917;0.00040640554;8.136376e-05;3.2057382e-05;-0.0001464033;
-0.00013324952;-0.00092689967;0.00016680847;0.00030204366;0.0009880506;0.0010197015;-0.0030270189;-0.00019604577;0.0014425215;0.0017494407;
0.00097849546;0.0018267669;0.0023026234;0.0027695971;0.0018341463;0.0023281279;0.0011220085;0.0024737618;0.0021000821;0.0013258022;
0.0015213382;0.0016438523;0.0022738767;0.0014435629;0.0023645025;0.0019672706;0.00049236906;0.00021419648;-0.00036668524;-0.00011180959;
0.00029301719;0.00017274747;0.00015488685;0.0002208599;0.00051997008;0.00035657556;-2.2138097e-06;0.00030343392;-0.0001674877;0.00073620898;
0.0010224979;0.0016904077;-0.0037597131;-0.00012827218;0.0018118295;0.0024204454;0.0025405819;0.0022525387;0.0026934112;0.0016892026;
0.0022731405;0.0017707895;0.0020992565;-0.00027496525;0.00011924968;-3.9811082e-05;-0.00051634124;0.00011599254;0.00011058775;0.00044960697;
0.00047476953;0.00018333459;-4.481748e-06;0.00036429439;0.00049306755;7.0253278e-05;7.2432311e-05;7.9389851e-05;0.0003519959;0.00027280251;
4.5834622e-05;0.00031678801;0.00046880174;0.00016258948;-0.00011232775;0.00032119217;-1.4218735e-05;0.00017361921;0.00029775925;-5.2287414e-05;
0.00023146546;-3.8922812e-05;0.00012756167;0.00029003958;5.1568099e-05;0.00072255428;0.0012364644;0.0013278652;0.0011684892;0.00093717233;
0.0010557361;0.0008838732;      };
     };
     float_Data @[29] {
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] -0.034872364;-0.016559012;-0.00089391053;0.0016149946;-0.0041926126;-0.0032818117;-0.0011903736;-0.0018829054;-0.00060686877;-0.00078898924;
-0.0010528353;-0.016957901;-0.014833936;-0.015565567;-0.01523256;-0.014317228;-0.014026966;-0.013589233;-0.012883445;-0.013644367;
-0.013294366;-0.013096217;-0.01313655;-0.013307719;-0.013186374;-0.013396415;-0.013156574;-0.013271209;-0.014187925;-0.0138049;
-0.013176279;-0.013871282;-0.015052337;-0.013793093;-0.014729259;-0.014688484;-0.014624716;-0.015183219;-0.014697812;-0.01579964;
-0.014884215;-0.015371096;-0.015694126;-0.009898155;-0.0046802298;-0.0049438984;-0.0054712673;-0.0064269006;-0.0065794839;-0.0071722502;
-0.030709112;-0.015947774;-0.0048439489;-0.00028199027;-0.012701533;-0.0040822821;-0.0041285991;0.0013486429;-0.00050513598;-0.0012639731;
-0.0014517702;-0.0013291336;-0.0019047589;-0.0065484196;-0.0030749789;-0.0097400537;-0.018619835;-0.017386759;-0.017487114;-0.016999869;
-0.015978739;-0.016286112;-0.015695009;-0.01621462;-0.016173927;-0.015173179;-0.015677713;-0.008078672;-0.0023272727;-0.0028454927;
-0.0037916515;-0.0042346735;-0.036512952;-0.01797905;-0.009474772;-0.0066698613;-0.017387981;-0.01308035;-0.0062625534;-0.0087706372;
-0.0082268808;-0.0087462869;-0.0079156421;-0.0061235251;-0.0085790055;-0.0070012715;-0.004865435;-0.0039287461;-0.0060829823;-0.00047032221;
-0.0013078228;-0.0015474415;-0.0034207187;-0.0061624944;-0.019082906;-0.018520094;-0.015160621;-0.018374672;-0.010366938;-0.0062146541;
-0.012000918;-0.0037620475;-0.0048047588;-0.0051559084;-0.005475543;-0.0064673107;-0.0071272887;-0.0076254182;-0.0085119484;-0.0088066924;
-0.0091076065;-0.009742476;-0.010052055;-0.011058517;-0.029800236;-0.012913115;-0.0079176212;-0.0010181485;-0.010297328;-0.010571095;
-0.0080651445;-0.0076496736;-0.0061974679;-0.0062358854;-0.005142936;-0.0053194887;-0.0047840495;-0.004191631;-0.0049523916;-0.0046418281;
-0.0050124554;-0.0052011167;-0.0053624832;-0.0053558708;-0.0057575717;-0.0064671705;-0.0064888378;-0.0068310983;-0.007548451;-0.0078318212;
-0.008410383;-0.0083048437;-0.0092845848;-0.0093877176;-0.0098439148;-0.010011379;-0.030667935;-0.01547294;-0.0054582893;-0.0014491769;
-0.013754292;-0.011128788;-0.0091117192;-0.0090254508;-0.0082555925;-0.0069269668;-0.0078617092;-0.0071981158;-0.0071102632;-0.0067893039;
-0.0061991257;-0.0062174513;-0.0065047466;-0.0060757608;-0.0060172598;-0.0067060851;-0.0064856992;-0.0070579844;-0.0072371191;-0.0074557126;
-0.0074271662;-0.0077720922;-0.0082410304;-0.029625831;-0.016765926;-0.0015529938;-0.0069857594;-0.0042221164;-0.0061725457;-0.0089158919;
-0.0086989691;-0.0080208657;-0.0064659142;-0.0067683579;-0.0070555415;-0.0064269453;-0.0063565569;-0.0061407564;-0.0064988108;-0.0064241048;
-0.0060854214;-0.0061227493;-0.0067340769;-0.006515773;-0.0068090274;-0.0067261909;-0.0070265611;-0.007439849;-0.0071560428;-0.0073985369;
-0.0082145305;-0.0053467858;-0.0061670705;-0.0049992683;-0.0039744978;-0.0034309318;-0.0042424933;-0.0046835188;-0.0054579074;-0.0063403021;
-0.0063676904;-0.035160705;-0.013287828;-0.022370119;-0.016510569;-0.012635266;-0.010499282;-0.0088983066;-0.0067581218;-0.0072252196;
-0.0065792347;-0.0066549648;-0.0062850774;-0.0053529646;-0.0061417683;-0.0057229977;-0.0050153867;-0.0051357192;-0.0055953194;-0.0046358192;
-0.0057547134;-0.0058750366;-0.0059456136;-0.0067029758;-0.0072236322;-0.0068998467;-0.0074950494;-0.0084263794;-0.008015696;-0.0087416712;
-0.0088293338;-0.0096985707;-0.0097596459;-0.0099892085;-0.010284138;-0.034031872;-0.011000982;0.0035403289;-0.0066389702;-0.0052775866;
-0.0025675118;-0.00069160858;-0.0028003035;0.00025080101;-0.0014689765;-0.00044548791;-0.012271218;-0.017761059;-0.016256407;-0.014959613;
-0.014514795;-0.014858503;-0.013102625;-0.013808162;-0.013697623;-0.012480987;-0.012570335;-0.01324221;-0.012790021;-0.012608144;
-0.013295624;-0.012912157;-0.013371099;-0.033269599;-0.016410835;-0.0065734517;-0.0044388408;-0.014562896;-0.012543083;-0.0016301449;
-0.0028659112;-0.00084519392;-0.0014098482;-0.001843621;-0.0045994162;-0.0020027889;-0.0064531155;-0.016051577;-0.015427168;-0.015935559;
-0.015331809;-0.014964184;-0.015139311;-0.016146373;-0.016193192;-0.017161716;-0.014982052;-0.015238527;-0.014916301;-0.015244996;
-0.015150695;-0.015197176;-0.016261883;-0.016093506;-0.015631989;-0.016258342;-0.015523341;-0.01654868;-0.017110934;-0.017081862;
-0.017700352;-0.019072011;-0.017140796;-0.016235089;-0.0092649916;-0.006223321;-0.034223188;-0.015141836;-0.0053194244;-0.0015210673;
-0.0090590697;-0.007090766;-0.0041424152;-0.0023211217;-0.0042936145;-0.00037101141;-0.0071036564;-0.001800425;-0.0023252151;-0.0047443705;
-0.0052308589;-0.004335267;-0.0014853578;-0.0069226637;-0.00015418349;-0.0019455961;-0.013807392;-0.016073838;-0.017882513;-0.017322235;
-0.016317384;-0.015939005;-0.016106622;-0.016362542;-0.015703626;-0.015680626;-0.016539637;-0.016489714;-0.01690438;-0.013064972;
-0.0078865895;-0.0035840399;-0.034872364;-0.016559012;-0.00089391053;0.0016149946;-0.0041926126;-0.0032818117;-0.0011903736;-0.0018829054;
-0.00060686877;-0.00078898924;-0.0010528353;-0.016957901;-0.014833936;-0.015565567;-0.01523256;-0.014317228;-0.014026966;-0.013589233;
-0.012883445;-0.013644367;-0.013294366;-0.013096217;-0.01313655;-0.013307719;-0.013186374;-0.013396415;-0.013156574;-0.013271209;
-0.014187925;-0.0138049;-0.013176279;-0.013871282;-0.015052337;-0.013793093;-0.014729259;-0.014688484;-0.014624716;-0.015183219;
-0.014697812;-0.01579964;-0.014884215;-0.015371096;-0.015694126;-0.009898155;-0.0046802298;-0.0049438984;-0.0054712673;-0.0064269006;
-0.0065794839;-0.0071722502;      };
     };
     float_Data @[30] {
      name="Hidden_0_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.34208757;0.31732011;0.30650851;0.30204201;0.30000153;0.29853678;0.29761705;0.29727781;0.29749289;0.2976054;
0.29795772;0.297616;0.29823083;0.29819909;0.29859328;0.29889491;0.29907918;0.29929271;0.29974768;0.29971373;
0.29998669;0.30012998;0.30056304;0.30049884;0.30077085;0.30111215;0.3013528;0.30132544;0.30137694;0.30185291;
0.3021079;0.30223316;0.302277;0.30273283;0.30276942;0.30320016;0.30328456;0.30349371;0.30367786;0.30378333;
0.30405033;0.30422956;0.30442476;0.30474809;0.30497295;0.30524948;0.30537426;0.30558908;0.30592996;0.30614901;
0.32298458;0.30801988;0.29802987;0.29346594;0.28966591;0.28964892;0.28858969;0.28791469;0.28779903;0.28775191;
0.28818581;0.28782418;0.28817526;0.28796646;0.2881321;0.28863797;0.28810662;0.28798974;0.2882466;0.28846923;
0.28846824;0.28883418;0.28878632;0.28893045;0.28899524;0.2892487;0.28936261;0.28979635;0.2899546;0.29029125;
0.29035521;0.29050216;0.328987;0.31442571;0.30761161;0.3037293;0.30278745;0.30118185;0.30126944;0.30142072;
0.30076236;0.30068341;0.30113447;0.30096644;0.30132106;0.30149448;0.30157554;0.30232194;0.30206099;0.30274385;
0.30271778;0.30275172;0.30314785;0.30325505;0.3037678;0.30412468;0.30378169;0.30410707;0.30411518;0.30454904;
0.3043552;0.30440301;0.30463901;0.30490506;0.30514184;0.30536595;0.30527285;0.30568144;0.3057521;0.3059653;
0.30634066;0.30631539;0.30651686;0.3065818;0.33842769;0.31056523;0.29793197;0.29342309;0.29095128;0.28996095;
0.28923488;0.28856036;0.28782126;0.28807271;0.28726962;0.28703842;0.28749102;0.28748599;0.28777331;0.28792933;
0.2882649;0.28827819;0.2886135;0.28844199;0.28885686;0.28898486;0.28920552;0.28934768;0.28957179;0.28980696;
0.29003787;0.29013112;0.29032269;0.29070657;0.2906827;0.29097241;0.31862056;0.29919747;0.2886492;0.28287122;
0.28018516;0.27890217;0.27898774;0.27883169;0.27846712;0.27859241;0.27858266;0.2785061;0.27858484;0.27879861;
0.27921569;0.27926528;0.27946252;0.27980542;0.2797201;0.28034827;0.28022546;0.28055423;0.28071621;0.28074992;
0.28095603;0.28105935;0.28121862;0.3290627;0.30411768;0.29116356;0.28452134;0.2822395;0.28064522;0.27922225;
0.2788884;0.2785303;0.27813873;0.2778022;0.27794698;0.27780196;0.27804151;0.278038;0.27807483;0.27827492;
0.27843273;0.27860436;0.27867559;0.27873826;0.27901354;0.27927205;0.27937838;0.279576;0.27976477;0.27991784;
0.28008649;0.28056231;0.28045008;0.28082445;0.28095222;0.28115964;0.28141859;0.28162786;0.28172573;0.28205046;
0.28214982;0.31043416;0.29303586;0.28442633;0.2800189;0.27860254;0.27835047;0.27744493;0.27698609;0.27717495;
0.27696937;0.27664384;0.27700841;0.2772938;0.27754068;0.27762219;0.27770171;0.27782416;0.27792597;0.2781747;
0.27811873;0.27836424;0.27844271;0.27870274;0.27892962;0.27917975;0.27933997;0.27942383;0.27953219;0.27975333;
0.27992454;0.28001362;0.28018236;0.28045347;0.28051347;0.33907753;0.32254142;0.31252182;0.30710009;0.30298463;
0.30106884;0.29935223;0.29919949;0.29879808;0.29877257;0.29885983;0.29841289;0.29851645;0.29825521;0.2991201;
0.29901624;0.2995908;0.29981685;0.29993972;0.30015048;0.30064908;0.30088094;0.3009949;0.30146304;0.3017748;
0.30201194;0.30235696;0.30272391;0.30871436;0.29603273;0.28907567;0.28561315;0.28369179;0.28316829;0.28274634;
0.28285968;0.28233823;0.28282642;0.28315935;0.28307754;0.28309476;0.28321469;0.28394747;0.28416142;0.28430715;
0.28442857;0.28475487;0.28452158;0.2839753;0.28449157;0.28477249;0.28464764;0.28470731;0.28468722;0.28474122;
0.28484279;0.28491348;0.28483954;0.28497952;0.28497624;0.28490487;0.28501597;0.28504315;0.28518209;0.28517219;
0.28521243;0.28516635;0.28517246;0.28539926;0.28509486;0.2850844;0.31798634;0.30663368;0.29763252;0.29393676;
0.29175246;0.28995055;0.28990784;0.28877503;0.28888938;0.28884515;0.28868079;0.28811917;0.28864402;0.28836751;
0.28857642;0.28868428;0.28855196;0.28898489;0.2891508;0.28925011;0.28942832;0.28970164;0.28963855;0.28969339;
0.28991908;0.28993312;0.28995436;0.28997687;0.29019904;0.29014745;0.29029715;0.29030362;0.29061633;0.29081872;
0.29055348;0.29039598;0.34208757;0.31732011;0.30650851;0.30204201;0.30000153;0.29853678;0.29761705;0.29727781;
0.29749289;0.2976054;0.29795772;0.297616;0.29823083;0.29819909;0.29859328;0.29889491;0.29907918;0.29929271;
0.29974768;0.29971373;0.29998669;0.30012998;0.30056304;0.30049884;0.30077085;0.30111215;0.3013528;0.30132544;
0.30137694;0.30185291;0.3021079;0.30223316;0.302277;0.30273283;0.30276942;0.30320016;0.30328456;0.30349371;
0.30367786;0.30378333;0.30405033;0.30422956;0.30442476;0.30474809;0.30497295;0.30524948;0.30537426;0.30558908;
0.30592996;0.30614901;      };
     };
     float_Data @[31] {
      name="Hidden_1_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.20030338;0.16423783;0.14540571;0.14136416;0.14416918;0.15260543;0.15223967;0.15707488;0.15889728;0.16084389;
0.16293937;0.16673741;0.16810982;0.170302;0.17017923;0.17087983;0.17159572;0.17387538;0.17382266;0.17553677;
0.17605881;0.17595682;0.17810738;0.17893891;0.1794565;0.18023272;0.18133952;0.18250556;0.18373556;0.18337496;
0.18520512;0.18553972;0.18646058;0.18735449;0.18795325;0.18886323;0.18943852;0.19015415;0.19053608;0.19137014;
0.1920715;0.19289652;0.19358197;0.19250108;0.19316131;0.19407979;0.19480304;0.19586985;0.19678658;0.19751436;
0.1881291;0.16278429;0.15811697;0.15799578;0.16063301;0.15727645;0.16339654;0.15896469;0.16193302;0.16733001;
0.16689292;0.16909552;0.16993479;0.17919998;0.17531972;0.17646782;0.17737803;0.17894377;0.17946476;0.18141712;
0.1822695;0.18320546;0.18457049;0.18565381;0.1866964;0.18761456;0.18841673;0.18820658;0.18848623;0.19031189;
0.19079117;0.1917924;0.18611242;0.16024065;0.16004717;0.15946056;0.16484696;0.16749689;0.16383485;0.17230883;
0.1767785;0.17964754;0.18161799;0.18122135;0.18612339;0.18279579;0.18315901;0.18371959;0.18726096;0.18144411;
0.18312307;0.18326671;0.18713889;0.18662712;0.18956119;0.18963008;0.18962069;0.19063999;0.19030961;0.19056544;
0.19224834;0.19202933;0.19306837;0.19375972;0.1949106;0.19598745;0.19683388;0.19789082;0.19812542;0.19926596;
0.1998032;0.20059669;0.20107275;0.20229168;0.1835869;0.16155733;0.15766662;0.16042523;0.16357729;0.16695616;
0.17128208;0.17336437;0.17822482;0.17972845;0.18284357;0.18142866;0.18517657;0.18633913;0.18768381;0.18920982;
0.19033712;0.19186218;0.19312036;0.1939458;0.19518906;0.19634098;0.19752164;0.19864245;0.19925505;0.20069079;
0.2008334;0.20174849;0.20275973;0.20285465;0.20468366;0.20503724;0.18851845;0.16549639;0.15898758;0.15995851;
0.1649881;0.16424881;0.17074025;0.17346007;0.17685311;0.17818232;0.18149807;0.18368973;0.18563709;0.18795292;
0.188182;0.1895341;0.19182557;0.19274986;0.19271033;0.19475441;0.19493578;0.19665955;0.19737123;0.19812992;
0.19945583;0.20005956;0.2003483;0.19159842;0.15573803;0.14787346;0.14881435;0.15168031;0.1611407;0.16767201;
0.17205083;0.17508303;0.17802893;0.17987062;0.18264629;0.18399577;0.1847979;0.18518855;0.18716896;0.18713772;
0.19031662;0.19006445;0.19216971;0.19199948;0.19388534;0.19545141;0.19601482;0.19711381;0.19822879;0.19949116;
0.20001431;0.19714989;0.197684;0.19634095;0.19397935;0.19354548;0.19449413;0.19544657;0.19572692;0.1975219;
0.19820976;0.18700093;0.16182266;0.1571334;0.15438688;0.15773076;0.16042748;0.16688022;0.16932422;0.17232168;
0.17480992;0.17791018;0.17972842;0.18093972;0.18380003;0.18535303;0.18564074;0.1862306;0.18860959;0.18911593;
0.1908353;0.19204959;0.1936326;0.19493198;0.19681306;0.19773553;0.19896311;0.19960035;0.20102111;0.20201853;
0.20301381;0.20381179;0.20486172;0.20532323;0.20646669;0.19545956;0.15561609;0.14254446;0.14672206;0.1457448;
0.14970936;0.14965515;0.15627053;0.1550744;0.15926673;0.16196899;0.16485651;0.16574821;0.16841093;0.17028709;
0.1712857;0.17332038;0.17442586;0.17488351;0.17522711;0.17664503;0.17720684;0.1786727;0.17962871;0.18040781;
0.18180706;0.18262596;0.18306622;0.1872745;0.16137332;0.15806742;0.155862;0.15965021;0.15892088;0.15107562;
0.15499918;0.15532506;0.15931462;0.16318226;0.16810498;0.16677094;0.1656843;0.1676887;0.16985117;0.16988252;
0.17241512;0.1726473;0.17447171;0.17491752;0.17857932;0.17842621;0.17991592;0.17999256;0.181123;0.18117321;
0.18203381;0.18308516;0.18382631;0.18451151;0.18447794;0.18527855;0.18691158;0.187204;0.18762651;0.18882635;
0.18930106;0.19019726;0.19014904;0.19108641;0.18953207;0.1913642;0.21303594;0.17362364;0.16465515;0.16500635;
0.16741888;0.16258933;0.16290836;0.16560788;0.16773762;0.16630289;0.17796244;0.17411026;0.17894737;0.18092194;
0.18440992;0.18414839;0.18098328;0.19206706;0.18170553;0.18356223;0.18534693;0.18709594;0.18747194;0.18773027;
0.18845464;0.18958998;0.19066538;0.19120748;0.19226199;0.19312456;0.19405064;0.19446899;0.19553213;0.19522631;
0.19620918;0.19555479;0.20030338;0.16423783;0.14540571;0.14136416;0.14416918;0.15260543;0.15223967;0.15707488;
0.15889728;0.16084389;0.16293937;0.16673741;0.16810982;0.170302;0.17017923;0.17087983;0.17159572;0.17387538;
0.17382266;0.17553677;0.17605881;0.17595682;0.17810738;0.17893891;0.1794565;0.18023272;0.18133952;0.18250556;
0.18373556;0.18337496;0.18520512;0.18553972;0.18646058;0.18735449;0.18795325;0.18886323;0.18943852;0.19015415;
0.19053608;0.19137014;0.1920715;0.19289652;0.19358197;0.19250108;0.19316131;0.19407979;0.19480304;0.19586985;
0.19678658;0.19751436;      };
     };
     float_Data @[32] {
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.13258834;0.10832524;0.095199406;0.095189534;0.097817272;0.10513708;0.10654738;0.11181246;0.11215088;0.11837363;
0.12224088;0.13675325;0.139982;0.14538841;0.14749369;0.15009035;0.1547378;0.15813254;0.1603671;0.16266027;
0.16554995;0.16742066;0.17266417;0.17352556;0.17626114;0.1795541;0.18286857;0.1850049;0.18656668;0.19055904;
0.19299664;0.19551797;0.19796264;0.20032558;0.20320815;0.20515972;0.20719986;0.20959976;0.21123625;0.21392292;
0.21671283;0.21909477;0.22035515;0.21558964;0.21026202;0.21276507;0.21426384;0.21703003;0.21861765;0.22093458;
0.13048279;0.11196223;0.1005538;0.094887301;0.097650804;0.10256543;0.1082339;0.10883117;0.11832589;0.12347911;
0.12538925;0.13296536;0.13546248;0.14207463;0.14264779;0.15109675;0.1639578;0.16511847;0.16796079;0.1714602;
0.17259626;0.17688546;0.17834182;0.18156227;0.1828599;0.18650524;0.18928175;0.18430719;0.17906684;0.18355146;
0.18627624;0.18873799;0.12997207;0.10194582;0.096785992;0.093801938;0.10054936;0.10693359;0.11003132;0.11692061;
0.12038358;0.12456118;0.12949158;0.13250861;0.13728824;0.13988632;0.14221002;0.14481024;0.14849031;0.15006708;
0.15289631;0.15605907;0.1593487;0.1643251;0.178388;0.18046175;0.18081428;0.18659246;0.1831851;0.18079759;
0.18821204;0.18179737;0.18479191;0.1869733;0.19011898;0.19193867;0.19426259;0.1967244;0.19887514;0.20126274;
0.20280002;0.20514323;0.20711678;0.20940875;0.13037238;0.10476667;0.099922456;0.096180446;0.1034013;0.10851061;
0.10914941;0.11098521;0.113365;0.12191599;0.12493803;0.12934501;0.13315693;0.13723642;0.13924758;0.14189845;
0.14508609;0.14826183;0.15094282;0.15395604;0.15752658;0.15984567;0.16229357;0.16514252;0.16647245;0.16971691;
0.17190374;0.17490882;0.17627579;0.17910521;0.18136156;0.18318596;0.13261381;0.11031944;0.10475459;0.09629482;
0.11128732;0.11195942;0.11358017;0.11976364;0.1261387;0.12872514;0.13407533;0.13570864;0.1397261;0.14198145;
0.14597514;0.14908016;0.15354823;0.15774542;0.15857333;0.1629367;0.16527519;0.16797283;0.16986062;0.17319061;
0.17642155;0.17825647;0.18091774;0.11852151;0.11245105;0.10507794;0.10929142;0.11118889;0.11026641;0.11699534;
0.12030654;0.12129664;0.1229153;0.12734717;0.13126175;0.13599886;0.13967767;0.14171451;0.14526208;0.14806952;
0.15060845;0.15462866;0.15735906;0.15965898;0.16334432;0.16615921;0.16860627;0.17072049;0.17353849;0.17526375;
0.17860833;0.17912312;0.18114465;0.18290685;0.18509471;0.18625279;0.18953066;0.19141047;0.19437659;0.19666202;
0.19819954;0.12684812;0.11226652;0.11570985;0.10766313;0.11136692;0.11133255;0.11810211;0.1171174;0.12469365;
0.1258501;0.13277823;0.13707721;0.13930725;0.14375746;0.14604035;0.1463895;0.15185133;0.15427533;0.15781271;
0.16122395;0.16529226;0.16824484;0.17095199;0.1744137;0.17649835;0.17925622;0.18176213;0.18408041;0.18723755;
0.18985093;0.19194078;0.19532849;0.19845209;0.20018518;0.12457732;0.099585861;0.092449829;0.094737507;0.10002646;
0.10474743;0.10166962;0.11504187;0.12026866;0.12726866;0.13251187;0.14183541;0.15121239;0.15578842;0.15997851;
0.16304693;0.16734643;0.17015493;0.17066699;0.1740547;0.17654662;0.1789661;0.18224643;0.18461709;0.18565792;
0.19000244;0.19228913;0.19475169;0.12591501;0.10419475;0.097634614;0.10100371;0.1076428;0.10913342;0.10639092;
0.11574898;0.11791014;0.12554851;0.12895896;0.13295247;0.13732815;0.14366131;0.15655167;0.15617366;0.15941429;
0.16299008;0.16623028;0.17121199;0.17188397;0.17591256;0.18133825;0.18384986;0.18678215;0.18905243;0.19170773;
0.19540419;0.19749902;0.19961229;0.20183773;0.20557079;0.20705633;0.20930617;0.21308742;0.21557058;0.21667188;
0.22017698;0.22177862;0.22389595;0.22523007;0.21869351;0.21551009;0.12542458;0.11370032;0.10704418;0.10201281;
0.10940638;0.11213257;0.11374405;0.12533577;0.12481073;0.12622239;0.13335088;0.13543156;0.14448756;0.14623863;
0.14869718;0.15293093;0.1551239;0.16097982;0.16125813;0.16382222;0.17753805;0.18187924;0.18418655;0.18605739;
0.1907751;0.19210823;0.19491783;0.19731896;0.19823639;0.20095083;0.20322412;0.20549364;0.20721084;0.20508328;
0.20188561;0.19808178;0.13258834;0.10832524;0.095199406;0.095189534;0.097817272;0.10513708;0.10654738;0.11181246;
0.11215088;0.11837363;0.12224088;0.13675325;0.139982;0.14538841;0.14749369;0.15009035;0.1547378;0.15813254;
0.1603671;0.16266027;0.16554995;0.16742066;0.17266417;0.17352556;0.17626114;0.1795541;0.18286857;0.1850049;
0.18656668;0.19055904;0.19299664;0.19551797;0.19796264;0.20032558;0.20320815;0.20515972;0.20719986;0.20959976;
0.21123625;0.21392292;0.21671283;0.21909477;0.22035515;0.21558964;0.21026202;0.21276507;0.21426384;0.21703003;
0.21861765;0.22093458;      };
     };
     float_Data @[33] {
      name="Hidden_0_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0.040816326;0.10204082;0.14285715;0.20408164;
0.22448979;0.24489796;0.24489796;0.26530612;0.26530612;0.2857143;0.30612245;0.30612245;0.30612245;0.30612245;
0.30612245;0.32653061;0.32653061;0.36734694;0.36734694;0.36734694;0.36734694;0.3877551;0.3877551;0.3877551;
0.3877551;0.3877551;0.3877551;0.36734694;0.36734694;0.36734694;0.36734694;0.36734694;0.36734694;0.36734694;
0.36734694;0.36734694;0.3877551;0.3877551;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;
0;0;0;0;0.020408163;0.06122449;0.081632651;0.14285715;0.18367347;0.22448979;
0.24489796;0.24489796;0.2857143;0.2857143;0.30612245;0.30612245;0.30612245;0.30612245;0.32653061;0.34693879;
0.36734694;0.3877551;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.3877551;0.3877551;
0.3877551;0.3877551;0;0;0;0;0;0;0;0;
0.020408163;0.081632651;0.14285715;0.1632653;0.20408164;0.26530612;0.30612245;0.34693879;0.34693879;0.3877551;
0.3877551;0.3877551;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;
0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.3877551;0.3877551;0.3877551;0.36734694;0.36734694;
0.36734694;0.36734694;0.36734694;0.34693879;0;0;0;0.020408163;0.020408163;0.040816326;
0.12244898;0.12244898;0.12244898;0.14285715;0.12244898;0.20408164;0.22448979;0.26530612;0.2857143;0.2857143;
0.2857143;0.2857143;0.2857143;0.2857143;0.2857143;0.30612245;0.30612245;0.30612245;0.30612245;0.32653061;
0.32653061;0.32653061;0.32653061;0.32653061;0.34693879;0.34693879;0;0;0;0;
0;0.020408163;0.06122449;0.081632651;0.12244898;0.14285715;0.14285715;0.14285715;0.1632653;0.22448979;
0.24489796;0.24489796;0.24489796;0.24489796;0.24489796;0.24489796;0.24489796;0.26530612;0.26530612;0.26530612;
0.26530612;0.2857143;0.30612245;0;0;0;0;0.020408163;0.040816326;0.040816326;
0.10204082;0.14285715;0.18367347;0.22448979;0.24489796;0.2857143;0.2857143;0.30612245;0.32653061;0.34693879;
0.34693879;0.36734694;0.36734694;0.40816328;0.40816328;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;
0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;0.40816328;
0.40816328;0;0;0;0;0;0;0.020408163;0.040816326;0.10204082;
0.12244898;0.20408164;0.22448979;0.22448979;0.24489796;0.26530612;0.26530612;0.2857143;0.2857143;0.30612245;
0.32653061;0.34693879;0.34693879;0.34693879;0.34693879;0.34693879;0.34693879;0.36734694;0.36734694;0.3877551;
0.3877551;0.40816328;0.40816328;0.3877551;0.3877551;0;0;0;0;0.040816326;
0.06122449;0.081632651;0.10204082;0.12244898;0.14285715;0.18367347;0.22448979;0.24489796;0.2857143;0.32653061;
0.32653061;0.32653061;0.34693879;0.34693879;0.36734694;0.3877551;0.3877551;0.3877551;0.40816328;0.40816328;
0.40816328;0.40816328;0.42857143;0;0;0;0;0;0;0.040816326;
0.040816326;0.10204082;0.14285715;0.18367347;0.22448979;0.26530612;0.2857143;0.2857143;0.2857143;0.30612245;
0.30612245;0.32653061;0.32653061;0.34693879;0.34693879;0.34693879;0.36734694;0.36734694;0.36734694;0.36734694;
0.36734694;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;
0.3877551;0.3877551;0.36734694;0.3877551;0.3877551;0.36734694;0;0;0;0;
0;0;0.020408163;0.020408163;0.06122449;0.06122449;0.12244898;0.18367347;0.18367347;0.20408164;
0.22448979;0.24489796;0.24489796;0.24489796;0.26530612;0.26530612;0.2857143;0.32653061;0.32653061;0.32653061;
0.32653061;0.32653061;0.32653061;0.34693879;0.36734694;0.36734694;0.36734694;0.36734694;0.36734694;0.3877551;
0.3877551;0.3877551;0;0;0;0;0;0;0.040816326;0.10204082;
0.14285715;0.20408164;0.22448979;0.24489796;0.24489796;0.26530612;0.26530612;0.2857143;0.30612245;0.30612245;
0.30612245;0.30612245;0.30612245;0.32653061;0.32653061;0.36734694;0.36734694;0.36734694;0.36734694;0.3877551;
0.3877551;0.3877551;0.3877551;0.3877551;0.3877551;0.36734694;0.36734694;0.36734694;0.36734694;0.36734694;
0.36734694;0.36734694;0.36734694;0.36734694;0.3877551;0.3877551;0.40816328;0.40816328;0.40816328;0.40816328;
0.40816328;0.40816328;      };
     };
     float_Data @[34] {
      name="Hidden_1_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.020408163;0.020408163;0.06122449;0.06122449;0.06122449;0.06122449;
0.06122449;0.06122449;0.06122449;0.06122449;0.081632651;0.12244898;0.12244898;0.14285715;0.14285715;0.14285715;
0.14285715;0.14285715;0.1632653;0.1632653;0.1632653;0.1632653;0.1632653;0.18367347;0.18367347;0.18367347;
0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.020408163;
0.020408163;0.06122449;0.081632651;0.081632651;0.081632651;0.081632651;0.081632651;0.081632651;0.081632651;0.081632651;
0.081632651;0.081632651;0;0;0;0;0;0;0;0;
0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.06122449;0.06122449;0.06122449;0.06122449;0.081632651;0.081632651;0.081632651;0.10204082;0.10204082;0.10204082;
0.10204082;0.12244898;0.14285715;0.14285715;0.12244898;0.12244898;0.12244898;0.10204082;0.10204082;0.10204082;
0.10204082;0.10204082;0.10204082;0.10204082;0;0;0;0;0;0;
0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.040816326;0.040816326;
0.06122449;0.06122449;0.06122449;0.06122449;0.081632651;0.081632651;0.081632651;0.10204082;0.10204082;0.1632653;
0.18367347;0.18367347;0.18367347;0.18367347;0.22448979;0.22448979;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.020408163;0.040816326;0.040816326;0.040816326;0.040816326;0.06122449;0.06122449;
0.06122449;0.06122449;0.06122449;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0.040816326;0.020408163;0.020408163;0.040816326;0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;
0.081632651;0.10204082;0.10204082;0.10204082;0.10204082;0.12244898;0.12244898;0.12244898;0.12244898;0.12244898;
0.12244898;0;0;0;0;0;0;0;0;0;
0;0;0.020408163;0.040816326;0.040816326;0.040816326;0.040816326;0.06122449;0.06122449;0.081632651;
0.081632651;0.12244898;0.12244898;0.12244898;0.12244898;0.14285715;0.14285715;0.1632653;0.1632653;0.1632653;
0.1632653;0.18367347;0.18367347;0.18367347;0.18367347;0;0;0;0;0;
0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;0.081632651;0.10204082;0.10204082;0.10204082;
0.10204082;0.081632651;0.081632651;0;0;0;0;0;0;0;
0;0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.040816326;0.06122449;0.081632651;0.10204082;0.10204082;0.10204082;0.10204082;0.12244898;0.12244898;0.12244898;
0.12244898;0.12244898;0.12244898;0.12244898;0.12244898;0.12244898;0.12244898;0.1632653;0.1632653;0.1632653;
0.1632653;0.1632653;0.1632653;0.1632653;0.18367347;0.18367347;0;0;0;0;
0;0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.040816326;0.040816326;0.06122449;0.040816326;0.040816326;0.081632651;0.081632651;0.10204082;0.12244898;
0.12244898;0.12244898;0.14285715;0.14285715;0.14285715;0.12244898;0.12244898;0.12244898;0.12244898;0.14285715;
0.14285715;0.14285715;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.020408163;0.020408163;0.06122449;0.06122449;
0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;0.06122449;0.081632651;0.12244898;0.12244898;0.14285715;
0.14285715;0.14285715;0.14285715;0.14285715;0.1632653;0.1632653;0.1632653;0.1632653;0.1632653;0.18367347;
0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;0.18367347;
0.18367347;0.18367347;      };
     };
     float_Data @[35] {
      name="Output_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0.039999999;0.039999999;0.079999998;0.079999998;
0.079999998;0.12;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0;0;0;0;0;0;0.039999999;0.039999999;0.079999998;0.079999998;
0.079999998;0.16;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.23999999;0.23999999;0;0;0;0;0;0;0.039999999;0.039999999;
0.079999998;0.079999998;0.079999998;0.079999998;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0;0;0;0;0;0;
0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.23999999;0.23999999;0.23999999;0;0;0;0;
0;0;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.16;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0;0;0;0;0;0;0.039999999;
0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0;0;0;0;0;0;0.039999999;0.039999999;0.079999998;
0.079999998;0.079999998;0.12;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.23999999;0.23999999;0.23999999;0;0;0;0;0;
0;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.079999998;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0;0;0;0;0;0;0.039999999;
0.039999999;0.079999998;0.079999998;0.079999998;0.12;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0;0;0;0;
0;0;0.039999999;0.039999999;0.079999998;0.079999998;0.079999998;0.16;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0;0;0;0;0;0;0.039999999;0.039999999;
0.079999998;0.079999998;0.079999998;0.12;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;0.23999999;
0.23999999;0.23999999;      };
     };
     float_Data @[36] {
      name="Hidden_0_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.040816326;0.040816326;0.040816326;
0.040816326;0.040816326;0.040816326;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;      };
     };
     float_Data @[37] {
      name="Hidden_1_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;0.020408163;
0.020408163;0.020408163;      };
     };
     float_Data @[38] {
      name="Output_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
     float_Data @[39] {
      name="Hidden_0_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.58717656;0.57002163;0.55800748;0.55607027;0.55821252;0.55695933;0.55588257;0.55637062;0.55624032;0.55683595;
0.55745769;0.56478846;0.56454384;0.56502688;0.56547642;0.56577116;0.56642294;0.56681228;0.56691605;0.56784499;
0.56816423;0.56831431;0.5689981;0.56950402;0.56978232;0.57027566;0.57064849;0.57123357;0.57160997;0.57211822;
0.572541;0.57306337;0.57364178;0.57389969;0.57482439;0.57494551;0.57532907;0.576074;0.57642168;0.5768981;
0.57713842;0.57777572;0.57832265;0.57517654;0.57229781;0.57273161;0.57344526;0.57387388;0.57456267;0.57504016;
0.57931203;0.56563509;0.55826628;0.55378437;0.55749953;0.55400068;0.55340868;0.55029738;0.55081141;0.55086428;
0.55111307;0.55125725;0.5520395;0.55463493;0.55345035;0.55700719;0.5612942;0.5615682;0.56205958;0.56270123;
0.56341428;0.56396699;0.56422067;0.56509668;0.56522191;0.56592661;0.56643188;0.56300688;0.56037629;0.56104314;
0.56158888;0.5621388;0.58591819;0.57020497;0.56242031;0.56019628;0.56404227;0.56184524;0.55902719;0.55967402;
0.56016004;0.5602209;0.55998695;0.55965292;0.56093186;0.56087774;0.56045419;0.56087607;0.56232697;0.56019396;
0.56114173;0.5614171;0.562608;0.56432319;0.57074052;0.57093251;0.57011896;0.5721314;0.56866592;0.56746995;
0.57021368;0.56661844;0.56731063;0.56783319;0.5684455;0.56907874;0.56944579;0.57029468;0.57072949;0.57134908;
0.57160163;0.57234007;0.57267755;0.57338458;0.58316171;0.55923617;0.549438;0.54486787;0.54815847;0.54749924;
0.54653603;0.54489994;0.54536474;0.54543132;0.54522306;0.5455215;0.54573268;0.54598409;0.54695678;0.54720426;
0.54779989;0.54831678;0.5490061;0.5495075;0.5500775;0.55101991;0.55142039;0.55211008;0.55283141;0.55356294;
0.55431551;0.55471933;0.55570149;0.55609012;0.55677354;0.55735701;0.57951486;0.56198496;0.55249;0.54726672;
0.55141187;0.54973269;0.54955655;0.54895055;0.54828966;0.54789716;0.54882139;0.54937887;0.54978871;0.55049098;
0.55118442;0.5514484;0.55211031;0.55252016;0.55278373;0.55380124;0.55411702;0.5547877;0.55559468;0.55606198;
0.55658978;0.55712563;0.55762053;0.59478754;0.5723123;0.55979073;0.55913496;0.55736369;0.55792004;0.55797261;
0.55802149;0.55816835;0.5583393;0.55897474;0.55933756;0.55954778;0.55986488;0.56032819;0.56072843;0.56113154;
0.56184131;0.56206268;0.56291747;0.56323481;0.5638181;0.56437933;0.56485379;0.565651;0.56599748;0.56664252;
0.5671441;0.5666638;0.5672943;0.56730026;0.56684971;0.56719571;0.56785947;0.56833816;0.56893688;0.56979728;
0.57020056;0.56835657;0.54605353;0.54477686;0.54252428;0.53939092;0.53886527;0.53765863;0.53628737;0.53677827;
0.53679246;0.5367527;0.53677988;0.53721166;0.53805679;0.5383094;0.53897715;0.53891176;0.53969973;0.53993362;
0.54048085;0.54100198;0.54137367;0.54218185;0.54270059;0.54328996;0.54398453;0.54475898;0.54518646;0.54599142;
0.54650998;0.54721224;0.54770231;0.54811013;0.5486958;0.58474332;0.56819797;0.55723107;0.55822402;0.55738664;
0.55482328;0.55428869;0.55405456;0.55313826;0.55322009;0.55324781;0.55810416;0.56089687;0.5609656;0.56175035;
0.56189424;0.5626452;0.56277031;0.56349093;0.56400245;0.56450516;0.56502938;0.56562507;0.56610727;0.56679702;
0.56732881;0.56783521;0.56834632;0.5714916;0.55747437;0.55127078;0.54800856;0.55248457;0.55112475;0.54646206;
0.54677963;0.54566854;0.54573345;0.54643714;0.54808182;0.54694784;0.54942876;0.55456388;0.555067;0.55555171;
0.5559178;0.55647856;0.55690974;0.55771464;0.55815536;0.55875462;0.55901444;0.55936754;0.56028193;0.56045008;
0.5610742;0.56166208;0.56233627;0.56278944;0.56309927;0.56374854;0.56394863;0.56456155;0.56520224;0.56555593;
0.56627893;0.56680989;0.56687719;0.5663445;0.56244314;0.5609706;0.58027327;0.56655765;0.55692905;0.55475461;
0.55716723;0.55549777;0.55425698;0.55342114;0.55411637;0.55318034;0.55635381;0.55405515;0.55484432;0.55584341;
0.55655652;0.55642223;0.55575126;0.55889207;0.55623573;0.55736631;0.56306958;0.56493306;0.56564212;0.56588697;
0.56661564;0.56689239;0.56748414;0.56806612;0.56844062;0.56892496;0.56978315;0.57016647;0.57090533;0.5693953;
0.56682783;0.56480223;0.58717656;0.57002163;0.55800748;0.55607027;0.55821252;0.55695933;0.55588257;0.55637062;
0.55624032;0.55683595;0.55745769;0.56478846;0.56454384;0.56502688;0.56547642;0.56577116;0.56642294;0.56681228;
0.56691605;0.56784499;0.56816423;0.56831431;0.5689981;0.56950402;0.56978232;0.57027566;0.57064849;0.57123357;
0.57160997;0.57211822;0.572541;0.57306337;0.57364178;0.57389969;0.57482439;0.57494551;0.57532907;0.576074;
0.57642168;0.5768981;0.57713842;0.57777572;0.57832265;0.57517654;0.57229781;0.57273161;0.57344526;0.57387388;
0.57456267;0.57504016;      };
     };
     float_Data @[40] {
      name="Hidden_1_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.59926397;0.54983187;0.50446773;0.48462325;0.48369744;0.481839;0.47847924;0.47700801;0.47459769;0.47503811;
0.47415689;0.48337528;0.48155349;0.48196524;0.48221055;0.48174965;0.4818593;0.48073828;0.48157349;0.48292655;
0.48368016;0.48397169;0.48431087;0.48534691;0.48705888;0.48803517;0.48870701;0.49026927;0.49134281;0.49238488;
0.49363387;0.4952769;0.49638504;0.49713054;0.49748585;0.49817562;0.49919754;0.50114;0.50173575;0.50258607;
0.50316519;0.50501531;0.50629568;0.50314701;0.50134522;0.50335741;0.50429356;0.50629061;0.50744325;0.50940686;
0.59059155;0.55508089;0.5364747;0.52429235;0.52594948;0.49286675;0.49833897;0.47701806;0.47806266;0.48562667;
0.48367715;0.48176247;0.48183998;0.50510502;0.48995969;0.48773968;0.49310693;0.49309334;0.49409503;0.49490011;
0.49529529;0.49642926;0.49677348;0.49743512;0.4983086;0.50018692;0.50008792;0.49747849;0.49441746;0.49632931;
0.49814188;0.49981412;0.58571863;0.54987055;0.53254092;0.519853;0.52202022;0.51091069;0.49003533;0.49828178;
0.50764489;0.50884295;0.50587976;0.50012445;0.50901729;0.50137734;0.49426565;0.49264103;0.50205117;0.47827521;
0.48170421;0.47985271;0.48923913;0.4858712;0.49453026;0.49553668;0.49411449;0.49755344;0.49390179;0.49254459;
0.49672478;0.49382618;0.49526745;0.49620286;0.49752757;0.49949989;0.50042152;0.502078;0.50412405;0.50561994;
0.50586146;0.50757116;0.5087536;0.51008725;0.5874806;0.54777396;0.52980882;0.51899356;0.5192489;0.51462603;
0.5111233;0.50721288;0.50566453;0.50579053;0.50516111;0.50399286;0.50503105;0.50584555;0.50676131;0.5074904;
0.51033378;0.51076663;0.51170701;0.51269293;0.5146659;0.51618803;0.51793021;0.51940817;0.5208959;0.52273828;
0.52436203;0.52547032;0.52692014;0.52895135;0.53065747;0.53098154;0.58875841;0.54701883;0.52643985;0.51759601;
0.52024722;0.51222008;0.50942791;0.50883228;0.50486249;0.5027889;0.50485873;0.50451994;0.50377357;0.5061878;
0.50579733;0.50639856;0.50786436;0.50821793;0.50918257;0.51100779;0.51095563;0.51336104;0.51466727;0.51565272;
0.51722699;0.51777601;0.51835358;0.59097689;0.5475471;0.50421166;0.4871268;0.47832936;0.49262723;0.50256121;
0.50614589;0.50450927;0.50453585;0.50300485;0.50563598;0.50468469;0.50590819;0.5072512;0.50808454;0.50844532;
0.50965524;0.50967383;0.51144731;0.51149809;0.51306319;0.5143308;0.51620364;0.51660746;0.51761782;0.5193671;
0.52078927;0.50974804;0.50915188;0.50179708;0.49589166;0.49223796;0.49314904;0.49518067;0.49617335;0.49908623;
0.49917305;0.58490926;0.53933585;0.52788568;0.51690871;0.51139945;0.5040822;0.50372583;0.50077963;0.49899861;
0.49930358;0.50063777;0.50195199;0.50092745;0.50253016;0.50226909;0.50256884;0.50350481;0.50465989;0.50457078;
0.50634164;0.50696582;0.50786346;0.50944757;0.51090062;0.51261163;0.51340067;0.51552534;0.51662874;0.51753592;
0.51955533;0.5207544;0.5220921;0.52292043;0.52449381;0.6012581;0.54025364;0.49494907;0.49432996;0.48621097;
0.48149705;0.4786565;0.47690904;0.47235668;0.47320512;0.47115648;0.47586253;0.47857225;0.47853249;0.47987232;
0.47996461;0.48178741;0.4808453;0.48222327;0.48307586;0.48379362;0.48492551;0.48703685;0.48787445;0.48842967;
0.4901489;0.4904322;0.4921729;0.5846135;0.54836828;0.52865124;0.51600504;0.51880324;0.51257408;0.47678992;
0.48251212;0.47493362;0.47484916;0.48047504;0.49132413;0.47997016;0.47259742;0.47897559;0.47955045;0.47952855;
0.48028207;0.48034859;0.48176169;0.48224676;0.48485279;0.48638633;0.4864437;0.48660806;0.48868597;0.48814473;
0.48996875;0.4918789;0.49315089;0.49449196;0.49447355;0.49583775;0.49637696;0.49811277;0.49952129;0.49976861;
0.50164503;0.50361133;0.50221831;0.50310075;0.4999882;0.49934152;0.60123503;0.55067569;0.52929407;0.52112025;
0.51784712;0.4981117;0.49182567;0.48506311;0.48835006;0.47920701;0.5105496;0.491409;0.49547327;0.49979895;
0.50389266;0.50095409;0.48840797;0.51547509;0.48409596;0.48763293;0.49252397;0.49473152;0.49653152;0.49709812;
0.49786142;0.49728608;0.49915349;0.50028223;0.49992639;0.50167632;0.50329828;0.50376832;0.50515306;0.50299823;
0.50248742;0.50073421;0.59926397;0.54983187;0.50446773;0.48462325;0.48369744;0.481839;0.47847924;0.47700801;
0.47459769;0.47503811;0.47415689;0.48337528;0.48155349;0.48196524;0.48221055;0.48174965;0.4818593;0.48073828;
0.48157349;0.48292655;0.48368016;0.48397169;0.48431087;0.48534691;0.48705888;0.48803517;0.48870701;0.49026927;
0.49134281;0.49238488;0.49363387;0.4952769;0.49638504;0.49713054;0.49748585;0.49817562;0.49919754;0.50114;
0.50173575;0.50258607;0.50316519;0.50501531;0.50629568;0.50314701;0.50134522;0.50335741;0.50429356;0.50629061;
0.50744325;0.50940686;      };
     };
     float_Data @[41] {
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.55518728;0.50522649;0.46557328;0.45927075;0.47447658;0.47444007;0.46994427;0.47419983;0.47236338;0.47668639;
0.48028105;0.5259701;0.52396441;0.52760106;0.52777016;0.52660596;0.53096223;0.5316574;0.53299636;0.53731173;
0.53908706;0.53936696;0.54404116;0.54416662;0.54575074;0.5495441;0.55156052;0.55577356;0.55691046;0.55917031;
0.56149572;0.56452471;0.56841362;0.56780452;0.57216525;0.57319576;0.57591581;0.58034348;0.58137262;0.5841651;
0.585787;0.58834386;0.59079152;0.56979632;0.55150664;0.55428022;0.5582459;0.56130171;0.56444293;0.56765062;
0.54421979;0.49896443;0.47385785;0.45903766;0.48931104;0.47000992;0.47188646;0.46008813;0.46380877;0.47108278;
0.47239968;0.47511724;0.47809789;0.49555182;0.48864982;0.50879222;0.5376702;0.53853446;0.54106593;0.54331803;
0.54580778;0.54961306;0.55047506;0.55524862;0.55507189;0.55803156;0.56178182;0.53961205;0.52194881;0.52632046;
0.5305028;0.53354502;0.56346101;0.50833237;0.48740888;0.47699511;0.50700301;0.49930513;0.48104495;0.49395457;
0.50030291;0.50143105;0.50201565;0.49959165;0.50789565;0.5050357;0.50250196;0.50516325;0.51253873;0.50131017;
0.50572091;0.50745523;0.51579726;0.52528751;0.56812596;0.56782693;0.56247175;0.57383955;0.55061483;0.54095882;
0.5599227;0.53468746;0.53950298;0.54271835;0.54550695;0.54874009;0.5512554;0.55391389;0.55754304;0.55986208;
0.56149447;0.56531656;0.56741804;0.57057226;0.54798096;0.49644962;0.4766967;0.46200544;0.48962688;0.49320593;
0.48733974;0.48385957;0.48273084;0.48737115;0.48671073;0.48936585;0.49210656;0.49402446;0.49775141;0.49943238;
0.50446182;0.50573438;0.50874048;0.51224673;0.51579797;0.5190658;0.52241111;0.52529109;0.52806544;0.53153688;
0.53439689;0.53710645;0.54001999;0.54245329;0.54568619;0.54782498;0.55078876;0.5041042;0.48093018;0.46534699;
0.5042913;0.49355331;0.49434271;0.49313897;0.49378666;0.49207664;0.49559698;0.49734905;0.50229722;0.50350291;
0.50656325;0.51081163;0.51246268;0.51607573;0.5175156;0.52132738;0.52390546;0.52667177;0.52978224;0.53309083;
0.53622323;0.53897947;0.54226917;0.54694706;0.50107646;0.46244007;0.4799487;0.47926962;0.48214814;0.49360946;
0.4926312;0.49077523;0.49352819;0.49854782;0.50048256;0.50129843;0.50367928;0.50516444;0.50661856;0.5093779;
0.51162469;0.51338154;0.51696146;0.51905793;0.52207059;0.52548939;0.52829421;0.53130603;0.53446037;0.53698051;
0.54048842;0.53493494;0.53880012;0.53724611;0.53540444;0.536448;0.54068667;0.54258555;0.54603213;0.55016685;
0.55238956;0.55494148;0.49493831;0.5212729;0.51034921;0.49916023;0.49313501;0.49225041;0.48634225;0.4886851;
0.49027371;0.49217534;0.49354565;0.49537095;0.49829757;0.50073367;0.50172091;0.50478613;0.50730413;0.50929332;
0.51298022;0.51631063;0.51850647;0.52335608;0.52719969;0.52936172;0.5333516;0.53692186;0.53940529;0.54407549;
0.54603094;0.5500648;0.55288196;0.55529666;0.55709261;0.55380046;0.49267247;0.45139045;0.4757584;0.47478974;
0.47172818;0.46464747;0.47147748;0.4705801;0.47433338;0.4761461;0.5038541;0.52415949;0.5281679;0.53059626;
0.53265631;0.5362398;0.53579527;0.53797072;0.54040223;0.54374456;0.5446474;0.54842591;0.55107725;0.55231291;
0.55649835;0.55889189;0.56112379;0.55161589;0.50162065;0.47823551;0.47279033;0.50163835;0.49750188;0.46657693;
0.47688159;0.47302952;0.47647014;0.48140517;0.48748577;0.48333341;0.49959546;0.52918047;0.52986294;0.53164464;
0.5331654;0.53582203;0.53951681;0.53935057;0.54340786;0.54755044;0.54892939;0.55064678;0.55368668;0.55559188;
0.55827689;0.56006014;0.56399977;0.56624311;0.56706929;0.56884181;0.57128245;0.57447898;0.5765385;0.57789391;
0.58049071;0.58431828;0.58428168;0.58014959;0.55718958;0.54633009;0.55016577;0.50060189;0.47633898;0.4662886;
0.48741767;0.48489901;0.47824964;0.47718188;0.47976506;0.47393584;0.49527782;0.48197272;0.4898243;0.4961046;
0.49935779;0.49855003;0.49269632;0.51257521;0.49702552;0.50289237;0.54103619;0.55015111;0.5533545;0.55413198;
0.55703276;0.55821466;0.5612359;0.56343287;0.56491679;0.56685477;0.57025796;0.57251549;0.57456297;0.56434745;
0.54725134;0.53504115;0.55518728;0.50522649;0.46557328;0.45927075;0.47447658;0.47444007;0.46994427;0.47419983;
0.47236338;0.47668639;0.48028105;0.5259701;0.52396441;0.52760106;0.52777016;0.52660596;0.53096223;0.5316574;
0.53299636;0.53731173;0.53908706;0.53936696;0.54404116;0.54416662;0.54575074;0.5495441;0.55156052;0.55577356;
0.55691046;0.55917031;0.56149572;0.56452471;0.56841362;0.56780452;0.57216525;0.57319576;0.57591581;0.58034348;
0.58137262;0.5841651;0.585787;0.58834386;0.59079152;0.56979632;0.55150664;0.55428022;0.5582459;0.56130171;
0.56444293;0.56765062;      };
     };
     float_Data @[42] {
      name="Hidden_0_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.25240856;0.2546674;0.25546345;0.25573727;0.2560178;0.25607133;0.25605422;0.25597;0.25591692;0.25580373;
0.2557736;0.25619668;0.25654969;0.2567929;0.25702587;0.25721741;0.25736675;0.25749034;0.25758454;0.25770906;
0.25779912;0.25790301;0.2580443;0.25811422;0.2582078;0.25832137;0.25847259;0.25858855;0.25872889;0.25888303;
0.25902107;0.25917178;0.25931829;0.25939411;0.25953117;0.25965518;0.25979549;0.25990194;0.26006475;0.26022464;
0.26034638;0.26049483;0.26062742;0.26051471;0.26022989;0.26003924;0.25992367;0.25987968;0.25985628;0.25988528;
0.24805479;0.25115952;0.25291541;0.25388327;0.25480655;0.25511584;0.25536728;0.25529063;0.2552194;0.25519872;
0.25516683;0.25510144;0.25506127;0.25520787;0.2552751;0.2555114;0.25597814;0.2563307;0.25663352;0.25689596;
0.25709838;0.25730309;0.25747743;0.25765681;0.2577979;0.25791842;0.25805843;0.25793424;0.25762799;0.25746694;
0.25734258;0.25729796;0.25102648;0.25292835;0.25378084;0.25421286;0.25482038;0.25504184;0.25498992;0.25492579;
0.25496855;0.2550315;0.25502649;0.2549735;0.25507331;0.25512311;0.25512111;0.25513428;0.25526565;0.25519699;
0.2552149;0.25521234;0.25533721;0.25553778;0.25619113;0.25671303;0.25703883;0.25744262;0.25747553;0.25742123;
0.25757769;0.25744921;0.25733134;0.25726289;0.25731489;0.2573694;0.25747105;0.25758594;0.25770676;0.2578046;
0.25792491;0.25807902;0.25826529;0.25840968;0.24959792;0.25183821;0.25284824;0.25317946;0.25349516;0.2536011;
0.25351778;0.25337189;0.25317222;0.25301778;0.25285566;0.25270507;0.25255525;0.25245818;0.25247452;0.25249377;
0.25255224;0.25268471;0.25272235;0.25282565;0.25290897;0.25306827;0.25321594;0.2533558;0.25352174;0.2537542;
0.25394723;0.25412372;0.25429219;0.25445265;0.25461406;0.2548185;0.25167277;0.25334942;0.25403219;0.25417984;
0.2545312;0.25453267;0.2544176;0.25426024;0.25406018;0.25389495;0.25374639;0.253618;0.25351453;0.2535426;
0.25355172;0.25365043;0.25369188;0.25379974;0.25387603;0.25399867;0.25414482;0.25429127;0.25443283;0.25457135;
0.25469616;0.25481284;0.25494471;0.25297371;0.25482571;0.25525048;0.25537959;0.25523537;0.25502181;0.2548171;
0.25466502;0.2544471;0.25426546;0.25411114;0.25402501;0.25391495;0.25387314;0.25388488;0.25387275;0.25390723;
0.25395858;0.25402075;0.25406519;0.25413817;0.25424036;0.25437501;0.25450993;0.25463784;0.25474799;0.2548621;
0.25501511;0.25507835;0.25516462;0.25520653;0.25522348;0.2552385;0.25526029;0.25533053;0.25538763;0.25549936;
0.25563464;0.24883349;0.25038078;0.2514807;0.25199428;0.25210306;0.25203395;0.25189993;0.25171232;0.25157082;
0.25140604;0.25130457;0.25122958;0.25118223;0.25115663;0.25119898;0.25125414;0.25126833;0.25134376;0.25141671;
0.25152037;0.25166911;0.25178882;0.25191686;0.25207075;0.25222021;0.25236812;0.25254536;0.25274456;0.25292826;
0.25311369;0.25328401;0.25344318;0.25360292;0.25375396;0.25328648;0.25571376;0.25675762;0.257566;0.25797293;
0.25805059;0.25793293;0.25781003;0.25761366;0.25736427;0.25713533;0.25720468;0.2574566;0.25768375;0.25785574;
0.25800848;0.25812539;0.25822502;0.2583304;0.25841573;0.2584964;0.25858724;0.25871935;0.25884461;0.25897849;
0.25912583;0.2592878;0.25945455;0.24840574;0.25113884;0.25265902;0.25362533;0.2545414;0.25507212;0.25513288;
0.25521165;0.2551682;0.2550841;0.2550658;0.25513449;0.25511357;0.25525197;0.25567287;0.25608474;0.25642705;
0.25669715;0.25695041;0.25718409;0.25734469;0.25755402;0.25774303;0.25792933;0.25805327;0.25819263;0.25834352;
0.25848696;0.25862113;0.25875577;0.25891405;0.25904635;0.25919867;0.25931427;0.25945145;0.25955534;0.25968623;
0.25983027;0.2599155;0.26004773;0.26008302;0.25986454;0.25958887;0.24923702;0.25193939;0.25331849;0.25402278;
0.25470322;0.25506097;0.25522402;0.2552231;0.25521415;0.25507012;0.25517112;0.25506791;0.2550154;0.25500983;
0.25506651;0.25509351;0.25504726;0.25526991;0.25520012;0.25521126;0.25565341;0.25611272;0.25648227;0.25679123;
0.25704265;0.25725958;0.25744078;0.25759885;0.25776044;0.25797337;0.25814933;0.25829104;0.25844741;0.25844589;
0.25827977;0.25797394;0.25240856;0.2546674;0.25546345;0.25573727;0.2560178;0.25607133;0.25605422;0.25597;
0.25591692;0.25580373;0.2557736;0.25619668;0.25654969;0.2567929;0.25702587;0.25721741;0.25736675;0.25749034;
0.25758454;0.25770906;0.25779912;0.25790301;0.2580443;0.25811422;0.2582078;0.25832137;0.25847259;0.25858855;
0.25872889;0.25888303;0.25902107;0.25917178;0.25931829;0.25939411;0.25953117;0.25965518;0.25979549;0.25990194;
0.26006475;0.26022464;0.26034638;0.26049483;0.26062742;0.26051471;0.26022989;0.26003924;0.25992367;0.25987968;
0.25985628;0.25988528;      };
     };
     float_Data @[43] {
      name="Hidden_1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.26320717;0.26226357;0.25798994;0.2529881;0.24883451;0.24531989;0.24231282;0.239728;0.23770203;0.23597232;
0.23455414;0.23363432;0.23285046;0.23222345;0.23166692;0.23122045;0.23087044;0.23060237;0.23038234;0.23032977;
0.23026218;0.23023356;0.23027746;0.23032545;0.2304;0.23048827;0.23064981;0.23085222;0.23110133;0.2313713;
0.23163383;0.23188305;0.23214208;0.23236507;0.23260047;0.23284033;0.23309122;0.23330578;0.23358946;0.23386121;
0.23410767;0.23434693;0.23460636;0.23478487;0.2349077;0.23506571;0.23529267;0.23553686;0.23579195;0.23610517;
0.25837058;0.25832763;0.25694138;0.25514859;0.25341997;0.24945283;0.24673565;0.24326089;0.24050546;0.23882817;
0.23734769;0.23605032;0.23495933;0.23558921;0.23521975;0.23451045;0.23415007;0.23390897;0.23378454;0.23372708;
0.23373188;0.2338081;0.2339005;0.23406911;0.2341838;0.23440823;0.23461622;0.2347398;0.234814;0.2349558;
0.23517852;0.23543307;0.25927407;0.25868416;0.25683087;0.25481269;0.25297964;0.25096473;0.24791066;0.24585111;
0.2450065;0.24431096;0.24346927;0.24236161;0.24215038;0.24138595;0.24027972;0.23929435;0.23915292;0.23750681;
0.2363669;0.23532763;0.2351107;0.23461156;0.23456249;0.23455554;0.2345458;0.23466328;0.23468372;0.23466705;
0.23480494;0.23484658;0.23493995;0.23507138;0.23528916;0.23552597;0.23579413;0.23607706;0.23638663;0.23668124;
0.23693986;0.2372556;0.23760043;0.2379296;0.26007101;0.25954115;0.25770938;0.25537071;0.2530196;0.2508544;
0.24882486;0.24699895;0.24544553;0.24417609;0.24310815;0.24223252;0.24149385;0.24095108;0.24056639;0.24030477;
0.24016564;0.24016707;0.24016866;0.24026446;0.24041224;0.24066883;0.24091047;0.24122816;0.24156328;0.24194875;
0.24235371;0.2427246;0.24307941;0.24343857;0.24383375;0.244269;0.2600219;0.25920501;0.2573306;0.25492185;
0.25281236;0.25059465;0.24865578;0.24702808;0.24565065;0.24447662;0.24350418;0.24280186;0.24223267;0.24189956;
0.24167456;0.24153194;0.24141628;0.24138081;0.24137503;0.24147637;0.24159662;0.24176681;0.24202065;0.24231055;
0.24256466;0.24287991;0.24309322;0.26037112;0.25926867;0.25537145;0.25061238;0.24645038;0.2441863;0.24297018;
0.24233745;0.24172011;0.24127199;0.24084298;0.24052922;0.24018948;0.23998468;0.2398604;0.23977458;0.23974212;
0.23970084;0.23968162;0.23966542;0.23976636;0.23992568;0.24015287;0.24037829;0.24069016;0.24102937;0.24133804;
0.24170789;0.24110997;0.24077438;0.23995915;0.23894611;0.23792759;0.23719457;0.23671694;0.23644628;0.23635757;
0.23634557;0.25593451;0.25522065;0.25394881;0.25220978;0.25013056;0.24811918;0.24632265;0.24461365;0.24321136;
0.24199325;0.24099767;0.24010944;0.23939565;0.23881829;0.23841029;0.23811944;0.2378566;0.23769476;0.23758475;
0.23762944;0.23775268;0.23790886;0.23813443;0.23840871;0.23873892;0.23908556;0.23950094;0.23988502;0.24029341;
0.24065803;0.24103075;0.24138506;0.24170689;0.24203974;0.26147634;0.26015377;0.25572088;0.25191236;0.24835415;
0.24524023;0.24243237;0.2401446;0.23816538;0.23648457;0.23508929;0.23397616;0.2331572;0.23257782;0.2321185;
0.2317332;0.23143306;0.23123221;0.23109792;0.23108153;0.23109214;0.23114485;0.23122956;0.23136874;0.23156181;
0.23177457;0.23202538;0.23227249;0.25921229;0.25867257;0.25698656;0.25493234;0.2528981;0.25080675;0.2467133;
0.24381009;0.24095534;0.23857461;0.23709077;0.23666662;0.23558623;0.23403458;0.23299812;0.23220888;0.23159784;
0.23115851;0.23084083;0.23066342;0.23055239;0.23058385;0.23067145;0.23081765;0.23092848;0.23108289;0.2312746;
0.23150688;0.23173018;0.23197356;0.23222132;0.23246442;0.23271431;0.23297803;0.23325692;0.2335255;0.23379166;
0.23406678;0.23430277;0.2345655;0.23481929;0.23496768;0.23506559;0.26146251;0.26066092;0.25853205;0.25605136;
0.25388405;0.2505618;0.2474187;0.24441487;0.24234715;0.23988549;0.23986641;0.2386729;0.23785761;0.23748174;
0.2375024;0.23715003;0.23612928;0.23710033;0.23569201;0.23481858;0.23419155;0.23375623;0.23354873;0.23339616;
0.23332004;0.23334935;0.23342136;0.2335252;0.23365842;0.23389094;0.23409429;0.23428372;0.23454015;0.23470783;
0.23482126;0.23488338;0.26320717;0.26226357;0.25798994;0.2529881;0.24883451;0.24531989;0.24231282;0.239728;
0.23770203;0.23597232;0.23455414;0.23363432;0.23285046;0.23222345;0.23166692;0.23122045;0.23087044;0.23060237;
0.23038234;0.23032977;0.23026218;0.23023356;0.23027746;0.23032545;0.2304;0.23048827;0.23064981;0.23085222;
0.23110133;0.2313713;0.23163383;0.23188305;0.23214208;0.23236507;0.23260047;0.23284033;0.23309122;0.23330578;
0.23358946;0.23386121;0.23410767;0.23434693;0.23460636;0.23478487;0.2349077;0.23506571;0.23529267;0.23553686;
0.23579195;0.23610517;      };
     };
     float_Data @[44] {
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;0.2274587;0.22757894;0.22767249;
0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;0.2279561;0.22796585;0.22797345;
0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;0.22799642;0.22799717;0.22799784;
0.22799821;0.22799858;0.22799896;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;
0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;0.2274587;0.22757894;0.22767249;
0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;0.2279561;0.22796585;0.22797345;
0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;0.22799642;0.22799717;0.22799784;
0.22799821;0.22799858;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;0.2274587;
0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;0.2279561;
0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;0.22799642;
0.22799717;0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22799924;0.22799924;0.22799924;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;
0.22730406;0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;
0.22794355;0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;
0.22799538;0.22799642;0.22799717;0.22799784;0.22799821;0.22799858;0.22485732;0.22555557;0.22609869;0.2265211;
0.22684973;0.22710529;0.22730406;0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;
0.22790672;0.22792745;0.22794355;0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;
0.22799242;0.22799408;0.22799538;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;
0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;
0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;
0.22799642;0.22799717;0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;0.2274587;0.22757894;
0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;0.2279561;0.22796585;
0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;0.22799642;0.22799717;
0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;
0.22710529;0.22730406;0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;
0.22792745;0.22794355;0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;
0.22799408;0.22799538;0.22799642;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;
0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;
0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;
0.22799642;0.22799717;0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22485732;0.22555557;0.22609869;0.2265211;
0.22684973;0.22710529;0.22730406;0.2274587;0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;
0.22790672;0.22792745;0.22794355;0.2279561;0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;
0.22799242;0.22799408;0.22799538;0.22799642;0.22799717;0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;
0.22799924;0.22799924;0.22485732;0.22555557;0.22609869;0.2265211;0.22684973;0.22710529;0.22730406;0.2274587;
0.22757894;0.22767249;0.22774526;0.22780187;0.22784591;0.22788011;0.22790672;0.22792745;0.22794355;0.2279561;
0.22796585;0.22797345;0.22797933;0.22798392;0.2279875;0.22799028;0.22799242;0.22799408;0.22799538;0.22799642;
0.22799717;0.22799784;0.22799821;0.22799858;0.22799896;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;0.22799924;
0.22799924;0.22799924;      };
     };
     float_Data @[45] {
      name="Hidden_Fm_Input_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;
0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;
0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;
0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;
0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;
0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;0.82860994;
0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;0.85857248;
0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;0.84306306;
0.85378289;0.85378289;0.82367778;0.82367778;0.82367778;0.82367778;0.82367778;0.82367778;0.82367778;0.82367778;
0.82367778;0.82367778;0.84649658;0.84649658;0.84649658;0.84649658;0.84649658;0.84649658;0.84649658;0.84649658;
0.84649658;0.84649658;0.85087639;0.85087639;0.85087639;0.85087639;0.85087639;0.85087639;0.85087639;0.85087639;
0.85087639;0.85087639;0.84906143;0.84906143;0.84906143;0.84906143;0.84906143;0.84906143;0.84906143;0.84906143;
0.84906143;0.84906143;0.84871006;0.84871006;0.82896829;0.82896829;0.82896829;0.82896829;0.82896829;0.82896829;
0.82896829;0.82896829;0.82896829;0.82896829;0.84841222;0.84841222;0.84841222;0.84841222;0.84841222;0.84841222;
0.84841222;0.84841222;0.84841222;0.84841222;0.84431809;0.84431809;0.84431809;0.84431809;0.84431809;0.84431809;
0.84431809;0.84431809;0.84431809;0.84431809;0.85010409;0.85010409;0.82553071;0.82553071;0.82553071;0.82553071;
0.82553071;0.82553071;0.82553071;0.82553071;0.82553071;0.82553071;0.84689814;0.84689814;0.84689814;0.84689814;
0.84689814;0.84689814;0.84689814;0.84689814;0.84689814;0.84689814;0.85040998;0.85040998;0.85040998;0.85040998;
0.85040998;0.85040998;0.85040998;0.83539611;0.83539611;0.83539611;0.83539611;0.83539611;0.83539611;0.83539611;
0.83539611;0.83539611;0.83539611;0.85449106;0.85449106;0.85449106;0.85449106;0.85449106;0.85449106;0.85449106;
0.85449106;0.85449106;0.85449106;0.8543753;0.8543753;0.8543753;0.8543753;0.8543753;0.8543753;0.8543753;
0.8543753;0.8543753;0.8543753;0.84894323;0.84894323;0.84894323;0.84894323;0.84894323;0.84894323;0.84894323;
0.84894323;0.81813121;0.81813121;0.81813121;0.81813121;0.81813121;0.81813121;0.81813121;0.81813121;0.81813121;
0.81813121;0.84677619;0.84677619;0.84677619;0.84677619;0.84677619;0.84677619;0.84677619;0.84677619;0.84677619;
0.84677619;0.84305668;0.84305668;0.84305668;0.84305668;0.84305668;0.84305668;0.84305668;0.84305668;0.84305668;
0.84305668;0.83947664;0.83947664;0.83947664;0.83947664;0.8263979;0.8263979;0.8263979;0.8263979;0.8263979;
0.8263979;0.8263979;0.8263979;0.8263979;0.8263979;0.86023092;0.86023092;0.86023092;0.86023092;0.86023092;
0.86023092;0.86023092;0.86023092;0.86023092;0.86023092;0.85313082;0.85313082;0.85313082;0.85313082;0.85313082;
0.85313082;0.85313082;0.85313082;0.8263846;0.8263846;0.8263846;0.8263846;0.8263846;0.8263846;0.8263846;
0.8263846;0.8263846;0.8263846;0.85384816;0.85384816;0.85384816;0.85384816;0.85384816;0.85384816;0.85384816;
0.85384816;0.85384816;0.85384816;0.8436017;0.8436017;0.8436017;0.8436017;0.8436017;0.8436017;0.8436017;
0.8436017;0.8436017;0.8436017;0.83882743;0.83882743;0.83882743;0.83882743;0.83882743;0.83882743;0.83882743;
0.83882743;0.83882743;0.83882743;0.84104282;0.84104282;0.84104282;0.82397771;0.82397771;0.82397771;0.82397771;
0.82397771;0.82397771;0.82397771;0.82397771;0.82397771;0.82397771;0.85258514;0.85258514;0.85258514;0.85258514;
0.85258514;0.85258514;0.85258514;0.85258514;0.85258514;0.85258514;0.84464002;0.84464002;0.84464002;0.84464002;
0.84464002;0.84464002;0.84464002;0.84464002;0.84464002;0.84464002;0.84143597;0.84143597;0.84143597;0.84143597;
0.84143597;0.84143597;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;0.8294881;
0.8294881;0.8294881;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;0.8556636;
0.8556636;0.8556636;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;0.84665084;
0.84665084;0.84665084;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;0.84428197;
0.84428197;0.84428197;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;0.84551352;
0.84551352;0.84551352;      };
     };
     float_Data @[46] {
      name="Hidden_Fm_Hidden_1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;
0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;
0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;
0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;
0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;
0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;0.17139012;
0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;0.1414275;
0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;0.15693694;
0.14621706;0.14621706;0.17632227;0.17632227;0.17632227;0.17632227;0.17632227;0.17632227;0.17632227;0.17632227;
0.17632227;0.17632227;0.1535034;0.1535034;0.1535034;0.1535034;0.1535034;0.1535034;0.1535034;0.1535034;
0.1535034;0.1535034;0.14912361;0.14912361;0.14912361;0.14912361;0.14912361;0.14912361;0.14912361;0.14912361;
0.14912361;0.14912361;0.15093859;0.15093859;0.15093859;0.15093859;0.15093859;0.15093859;0.15093859;0.15093859;
0.15093859;0.15093859;0.15129001;0.15129001;0.17103167;0.17103167;0.17103167;0.17103167;0.17103167;0.17103167;
0.17103167;0.17103167;0.17103167;0.17103167;0.15158774;0.15158774;0.15158774;0.15158774;0.15158774;0.15158774;
0.15158774;0.15158774;0.15158774;0.15158774;0.15568189;0.15568189;0.15568189;0.15568189;0.15568189;0.15568189;
0.15568189;0.15568189;0.15568189;0.15568189;0.14989591;0.14989591;0.17446931;0.17446931;0.17446931;0.17446931;
0.17446931;0.17446931;0.17446931;0.17446931;0.17446931;0.17446931;0.15310188;0.15310188;0.15310188;0.15310188;
0.15310188;0.15310188;0.15310188;0.15310188;0.15310188;0.15310188;0.14959;0.14959;0.14959;0.14959;
0.14959;0.14959;0.14959;0.16460389;0.16460389;0.16460389;0.16460389;0.16460389;0.16460389;0.16460389;
0.16460389;0.16460389;0.16460389;0.14550893;0.14550893;0.14550893;0.14550893;0.14550893;0.14550893;0.14550893;
0.14550893;0.14550893;0.14550893;0.14562468;0.14562468;0.14562468;0.14562468;0.14562468;0.14562468;0.14562468;
0.14562468;0.14562468;0.14562468;0.15105681;0.15105681;0.15105681;0.15105681;0.15105681;0.15105681;0.15105681;
0.15105681;0.18186881;0.18186881;0.18186881;0.18186881;0.18186881;0.18186881;0.18186881;0.18186881;0.18186881;
0.18186881;0.1532238;0.1532238;0.1532238;0.1532238;0.1532238;0.1532238;0.1532238;0.1532238;0.1532238;
0.1532238;0.15694328;0.15694328;0.15694328;0.15694328;0.15694328;0.15694328;0.15694328;0.15694328;0.15694328;
0.15694328;0.16052337;0.16052337;0.16052337;0.16052337;0.1736021;0.1736021;0.1736021;0.1736021;0.1736021;
0.1736021;0.1736021;0.1736021;0.1736021;0.1736021;0.139769;0.139769;0.139769;0.139769;0.139769;
0.139769;0.139769;0.139769;0.139769;0.139769;0.14686917;0.14686917;0.14686917;0.14686917;0.14686917;
0.14686917;0.14686917;0.14686917;0.17361541;0.17361541;0.17361541;0.17361541;0.17361541;0.17361541;0.17361541;
0.17361541;0.17361541;0.17361541;0.14615184;0.14615184;0.14615184;0.14615184;0.14615184;0.14615184;0.14615184;
0.14615184;0.14615184;0.14615184;0.15639828;0.15639828;0.15639828;0.15639828;0.15639828;0.15639828;0.15639828;
0.15639828;0.15639828;0.15639828;0.16117257;0.16117257;0.16117257;0.16117257;0.16117257;0.16117257;0.16117257;
0.16117257;0.16117257;0.16117257;0.15895711;0.15895711;0.15895711;0.17602228;0.17602228;0.17602228;0.17602228;
0.17602228;0.17602228;0.17602228;0.17602228;0.17602228;0.17602228;0.14741477;0.14741477;0.14741477;0.14741477;
0.14741477;0.14741477;0.14741477;0.14741477;0.14741477;0.14741477;0.15536001;0.15536001;0.15536001;0.15536001;
0.15536001;0.15536001;0.15536001;0.15536001;0.15536001;0.15536001;0.15856402;0.15856402;0.15856402;0.15856402;
0.15856402;0.15856402;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;0.17051186;
0.17051186;0.17051186;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;0.14433631;
0.14433631;0.14433631;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;0.15334913;
0.15334913;0.15334913;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;0.15571795;
0.15571795;0.15571795;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;0.15448642;
0.15448642;0.15448642;      };
     };
     float_Data @[47] {
      name="Hidden_Fm_Hidden_0_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;
0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;
0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;
0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;
0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;
0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;0.85927105;
0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;0.82648182;
0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;0.82319468;
0.82028985;0.82028985;0.85498953;0.85498953;0.85498953;0.85498953;0.85498953;0.85498953;0.85498953;0.85498953;
0.85498953;0.85498953;0.83756614;0.83756614;0.83756614;0.83756614;0.83756614;0.83756614;0.83756614;0.83756614;
0.83756614;0.83756614;0.82140929;0.82140929;0.82140929;0.82140929;0.82140929;0.82140929;0.82140929;0.82140929;
0.82140929;0.82140929;0.81783938;0.81783938;0.81783938;0.81783938;0.81783938;0.81783938;0.81783938;0.81783938;
0.81783938;0.81783938;0.81273097;0.81273097;0.85798502;0.85798502;0.85798502;0.85798502;0.85798502;0.85798502;
0.85798502;0.85798502;0.85798502;0.85798502;0.82650453;0.82650453;0.82650453;0.82650453;0.82650453;0.82650453;
0.82650453;0.82650453;0.82650453;0.82650453;0.82550067;0.82550067;0.82550067;0.82550067;0.82550067;0.82550067;
0.82550067;0.82550067;0.82550067;0.82550067;0.83085245;0.83085245;0.85616922;0.85616922;0.85616922;0.85616922;
0.85616922;0.85616922;0.85616922;0.85616922;0.85616922;0.85616922;0.82769078;0.82769078;0.82769078;0.82769078;
0.82769078;0.82769078;0.82769078;0.82769078;0.82769078;0.82769078;0.83001834;0.83001834;0.83001834;0.83001834;
0.83001834;0.83001834;0.83001834;0.85458493;0.85458493;0.85458493;0.85458493;0.85458493;0.85458493;0.85458493;
0.85458493;0.85458493;0.85458493;0.83312088;0.83312088;0.83312088;0.83312088;0.83312088;0.83312088;0.83312088;
0.83312088;0.83312088;0.83312088;0.83355612;0.83355612;0.83355612;0.83355612;0.83355612;0.83355612;0.83355612;
0.83355612;0.83355612;0.83355612;0.81990147;0.81990147;0.81990147;0.81990147;0.81990147;0.81990147;0.81990147;
0.81990147;0.8597855;0.8597855;0.8597855;0.8597855;0.8597855;0.8597855;0.8597855;0.8597855;0.8597855;
0.8597855;0.82772493;0.82772493;0.82772493;0.82772493;0.82772493;0.82772493;0.82772493;0.82772493;0.82772493;
0.82772493;0.8293311;0.8293311;0.8293311;0.8293311;0.8293311;0.8293311;0.8293311;0.8293311;0.8293311;
0.8293311;0.83081388;0.83081388;0.83081388;0.83081388;0.86163902;0.86163902;0.86163902;0.86163902;0.86163902;
0.86163902;0.86163902;0.86163902;0.86163902;0.86163902;0.81878805;0.81878805;0.81878805;0.81878805;0.81878805;
0.81878805;0.81878805;0.81878805;0.81878805;0.81878805;0.82656544;0.82656544;0.82656544;0.82656544;0.82656544;
0.82656544;0.82656544;0.82656544;0.85938758;0.85938758;0.85938758;0.85938758;0.85938758;0.85938758;0.85938758;
0.85938758;0.85938758;0.85938758;0.82320422;0.82320422;0.82320422;0.82320422;0.82320422;0.82320422;0.82320422;
0.82320422;0.82320422;0.82320422;0.81932217;0.81932217;0.81932217;0.81932217;0.81932217;0.81932217;0.81932217;
0.81932217;0.81932217;0.81932217;0.8163476;0.8163476;0.8163476;0.8163476;0.8163476;0.8163476;0.8163476;
0.8163476;0.8163476;0.8163476;0.83397102;0.83397102;0.83397102;0.85857302;0.85857302;0.85857302;0.85857302;
0.85857302;0.85857302;0.85857302;0.85857302;0.85857302;0.85857302;0.83068079;0.83068079;0.83068079;0.83068079;
0.83068079;0.83068079;0.83068079;0.83068079;0.83068079;0.83068079;0.82100362;0.82100362;0.82100362;0.82100362;
0.82100362;0.82100362;0.82100362;0.82100362;0.82100362;0.82100362;0.81640005;0.81640005;0.81640005;0.81640005;
0.81640005;0.81640005;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;0.85729021;
0.85729021;0.85729021;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;0.82103395;
0.82103395;0.82103395;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;0.82648277;
0.82648277;0.82648277;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;0.81877136;
0.81877136;0.81877136;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;0.82599068;
0.82599068;0.82599068;      };
     };
     float_Data @[48] {
      name="Hidden_Fm_Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;
0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;
0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;
0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;
0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;
0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;0.14072892;
0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;0.1735182;
0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;0.1768053;
0.17971015;0.17971015;0.14501053;0.14501053;0.14501053;0.14501053;0.14501053;0.14501053;0.14501053;0.14501053;
0.14501053;0.14501053;0.16243385;0.16243385;0.16243385;0.16243385;0.16243385;0.16243385;0.16243385;0.16243385;
0.16243385;0.16243385;0.17859071;0.17859071;0.17859071;0.17859071;0.17859071;0.17859071;0.17859071;0.17859071;
0.17859071;0.17859071;0.18216063;0.18216063;0.18216063;0.18216063;0.18216063;0.18216063;0.18216063;0.18216063;
0.18216063;0.18216063;0.18726905;0.18726905;0.14201503;0.14201503;0.14201503;0.14201503;0.14201503;0.14201503;
0.14201503;0.14201503;0.14201503;0.14201503;0.17349549;0.17349549;0.17349549;0.17349549;0.17349549;0.17349549;
0.17349549;0.17349549;0.17349549;0.17349549;0.17449933;0.17449933;0.17449933;0.17449933;0.17449933;0.17449933;
0.17449933;0.17449933;0.17449933;0.17449933;0.16914757;0.16914757;0.14383073;0.14383073;0.14383073;0.14383073;
0.14383073;0.14383073;0.14383073;0.14383073;0.14383073;0.14383073;0.17230916;0.17230916;0.17230916;0.17230916;
0.17230916;0.17230916;0.17230916;0.17230916;0.17230916;0.17230916;0.16998164;0.16998164;0.16998164;0.16998164;
0.16998164;0.16998164;0.16998164;0.14541501;0.14541501;0.14541501;0.14541501;0.14541501;0.14541501;0.14541501;
0.14541501;0.14541501;0.14541501;0.1668791;0.1668791;0.1668791;0.1668791;0.1668791;0.1668791;0.1668791;
0.1668791;0.1668791;0.1668791;0.1664439;0.1664439;0.1664439;0.1664439;0.1664439;0.1664439;0.1664439;
0.1664439;0.1664439;0.1664439;0.18009847;0.18009847;0.18009847;0.18009847;0.18009847;0.18009847;0.18009847;
0.18009847;0.14021455;0.14021455;0.14021455;0.14021455;0.14021455;0.14021455;0.14021455;0.14021455;0.14021455;
0.14021455;0.17227507;0.17227507;0.17227507;0.17227507;0.17227507;0.17227507;0.17227507;0.17227507;0.17227507;
0.17227507;0.17066894;0.17066894;0.17066894;0.17066894;0.17066894;0.17066894;0.17066894;0.17066894;0.17066894;
0.17066894;0.16918612;0.16918612;0.16918612;0.16918612;0.13836107;0.13836107;0.13836107;0.13836107;0.13836107;
0.13836107;0.13836107;0.13836107;0.13836107;0.13836107;0.18121195;0.18121195;0.18121195;0.18121195;0.18121195;
0.18121195;0.18121195;0.18121195;0.18121195;0.18121195;0.17343457;0.17343457;0.17343457;0.17343457;0.17343457;
0.17343457;0.17343457;0.17343457;0.14061248;0.14061248;0.14061248;0.14061248;0.14061248;0.14061248;0.14061248;
0.14061248;0.14061248;0.14061248;0.17679577;0.17679577;0.17679577;0.17679577;0.17679577;0.17679577;0.17679577;
0.17679577;0.17679577;0.17679577;0.18067788;0.18067788;0.18067788;0.18067788;0.18067788;0.18067788;0.18067788;
0.18067788;0.18067788;0.18067788;0.18365246;0.18365246;0.18365246;0.18365246;0.18365246;0.18365246;0.18365246;
0.18365246;0.18365246;0.18365246;0.16602896;0.16602896;0.16602896;0.14142697;0.14142697;0.14142697;0.14142697;
0.14142697;0.14142697;0.14142697;0.14142697;0.14142697;0.14142697;0.16931923;0.16931923;0.16931923;0.16931923;
0.16931923;0.16931923;0.16931923;0.16931923;0.16931923;0.16931923;0.17899638;0.17899638;0.17899638;0.17899638;
0.17899638;0.17899638;0.17899638;0.17899638;0.17899638;0.17899638;0.18359993;0.18359993;0.18359993;0.18359993;
0.18359993;0.18359993;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;0.14270981;
0.14270981;0.14270981;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;0.17896603;
0.17896603;0.17896603;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;0.17351718;
0.17351718;0.17351718;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;0.18122859;
0.18122859;0.18122859;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;0.17400931;
0.17400931;0.17400931;      };
     };
     float_Data @[49] {
      name="Output_Fm_Hidden_1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;      };
     };
     float_Data @[50] {
      name="mean_Hidden_0_Fm_Input_prjns_r_wt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=33;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.50166118;0.49793431;0.49572703;0.49433848;0.49317437;0.49237797;0.49172646;0.49129817;0.49091667;0.49060288;
0.49038839;0.49015775;0.48996621;0.48973489;0.48956442;0.48939285;0.4892467;0.48910072;0.48897049;0.48883939;
0.48871392;0.48856723;0.48844746;0.48833674;0.48819175;0.48807094;0.48795035;0.48781523;0.48768282;0.48758426;
0.48748046;0.48737922;0.48726463;0.48714411;0.4870334;0.48692432;0.48681605;0.48671368;0.48659703;0.48647913;
0.48637626;0.48628572;0.48616549;0.48606375;0.48598295;0.4858999;0.48581454;0.48573425;0.48563874;0.48555565;
0.4993872;0.49647614;0.4944039;0.49291682;0.49181491;0.4909789;0.49026442;0.48977554;0.48943692;0.48915198;
0.48892319;0.48875833;0.48861626;0.48848447;0.48839161;0.48823002;0.48806795;0.48794702;0.48781669;0.48770005;
0.48756981;0.48746675;0.48735964;0.48724085;0.48712885;0.48703638;0.48694456;0.48686594;0.48677963;0.48669714;
0.48661226;0.48653895;0.49544355;0.49250847;0.49062988;0.48935536;0.48840582;0.48762664;0.48712292;0.48670137;
0.4863773;0.48613182;0.48591962;0.48577872;0.48567298;0.48555145;0.4854643;0.48537168;0.48529088;0.48522335;
0.48514888;0.48507679;0.48501635;0.48494893;0.48484638;0.48474783;0.48465183;0.48455542;0.48448053;0.48441333;
0.48431969;0.48426408;0.48420337;0.4841345;0.48408189;0.48400161;0.48392025;0.48385853;0.48377436;0.48370042;
0.4836235;0.48354766;0.48347762;0.48340213;0.49192497;0.48783404;0.48557627;0.48404297;0.4829213;0.481962;
0.48129633;0.48074698;0.48026764;0.47995502;0.47971949;0.47951245;0.4793911;0.47930256;0.47920895;0.47911188;
0.47902742;0.47891501;0.47881591;0.47873634;0.47862962;0.47856382;0.47847766;0.47840446;0.47833386;0.47826821;
0.4781943;0.47812673;0.47805476;0.47798401;0.47789347;0.47782651;0.49649838;0.49284315;0.49049148;0.48899499;
0.48785445;0.48697037;0.48631802;0.48578221;0.48538077;0.48509035;0.48482737;0.48465276;0.48450944;0.48440987;
0.48431647;0.48422039;0.48411286;0.48403874;0.48394841;0.48387665;0.4837912;0.48371482;0.48363206;0.48354697;
0.4834795;0.48339516;0.48333207;0.50532478;0.50095332;0.49811557;0.4966155;0.49538988;0.49454504;0.49384198;
0.49336421;0.49289188;0.49257544;0.49230191;0.49206653;0.49191681;0.49179357;0.49167395;0.49154913;0.49142972;
0.49131075;0.49119434;0.49107012;0.49095166;0.49083507;0.49074972;0.4906275;0.49051064;0.49041772;0.49033153;
0.49024311;0.49015197;0.49006453;0.48995945;0.48988476;0.48979598;0.4897128;0.48963049;0.48955142;0.48945782;
0.48937365;0.48664182;0.48340088;0.48156101;0.48025137;0.47933534;0.47852075;0.4778983;0.47745731;0.47714016;
0.47682282;0.47663683;0.47645801;0.47633651;0.47621083;0.47610158;0.47599533;0.47589236;0.47581065;0.47572187;
0.47561619;0.47553471;0.47545525;0.47539148;0.47531733;0.47525063;0.47519267;0.47512132;0.47506058;0.47499308;
0.47493204;0.47486851;0.47480005;0.47473639;0.4746713;0.49828944;0.49513462;0.49331096;0.49184385;0.49084508;
0.49001369;0.48937175;0.48879057;0.48840445;0.48799512;0.48771843;0.48745501;0.4871735;0.4870052;0.48688027;
0.48672986;0.48660347;0.48647705;0.48634976;0.48626152;0.48616147;0.48607346;0.48597401;0.4858782;0.48578209;
0.48569945;0.48561767;0.48550805;0.49860036;0.49562407;0.49374756;0.49244112;0.49148503;0.49066108;0.4900555;
0.4895778;0.48921522;0.48894945;0.4886654;0.48847258;0.48834085;0.4882057;0.48805788;0.48791245;0.48776546;
0.48763731;0.48751703;0.48740169;0.48723358;0.48708063;0.48694739;0.48683348;0.48674545;0.48665303;0.48655194;
0.48646843;0.48639524;0.48630336;0.4861981;0.48611549;0.48602363;0.48593462;0.48582879;0.48572978;0.48563814;
0.48554111;0.48540896;0.48531026;0.48520857;0.48512998;0.48505536;0.50042981;0.49743852;0.49538854;0.49413216;
0.49313864;0.49234065;0.4916335;0.49109027;0.49067637;0.49031693;0.4899849;0.48973948;0.48954818;0.48936483;
0.48921043;0.48910919;0.48900071;0.48891881;0.48882693;0.48874453;0.48863003;0.4885385;0.48841295;0.48828933;
0.48818544;0.4880971;0.48799098;0.48790234;0.48781773;0.4877409;0.48764122;0.48755106;0.48743656;0.48734704;
0.48725799;0.48719025;0.50166118;0.49793431;0.49572703;0.49433848;0.49317437;0.49237797;0.49172646;0.49129817;
0.49091667;0.49060288;0.49038839;0.49015775;0.48996621;0.48973489;0.48956442;0.48939285;0.4892467;0.48910072;
0.48897049;0.48883939;0.48871392;0.48856723;0.48844746;0.48833674;0.48819175;0.48807094;0.48795035;0.48781523;
0.48768282;0.48758426;0.48748046;0.48737922;0.48726463;0.48714411;0.4870334;0.48692432;0.48681605;0.48671368;
0.48659703;0.48647913;0.48637626;0.48628572;0.48616549;0.48606375;0.48598295;0.4858999;0.48581454;0.48573425;
0.48563874;0.48555565;      };
     };
     float_Data @[51] {
      name="mean_Hidden_0_Fm_Hidden_1_prjns_r_wt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=36;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.49269602;0.48198754;0.47488505;0.47047412;0.46683124;0.46435937;0.46249062;0.46116313;0.46015149;0.45942312;
0.45898157;0.45835027;0.45783764;0.45729852;0.45680553;0.4564155;0.45612067;0.45581803;0.45554817;0.45527723;
0.45499876;0.45473328;0.4545244;0.45429716;0.45396662;0.45372146;0.45351699;0.45330894;0.45308188;0.4528901;
0.45270947;0.45251423;0.45228109;0.45209357;0.45187649;0.45170718;0.45154881;0.45136821;0.45118475;0.45100701;
0.45084471;0.45071757;0.45052618;0.4503971;0.45034346;0.45031118;0.45025524;0.45018423;0.45012489;0.45005763;
0.49173856;0.48205048;0.47532991;0.47065142;0.46701258;0.4644329;0.46233654;0.46111223;0.46034104;0.45967987;
0.45925868;0.45904523;0.45887643;0.45869622;0.45871231;0.45840031;0.45808551;0.45788056;0.45769182;0.45753026;
0.45734841;0.45722172;0.45708799;0.4569295;0.45679152;0.45669672;0.4566088;0.45656881;0.45656574;0.45658079;
0.45658156;0.45656666;0.48799363;0.47823504;0.47139457;0.46673977;0.46334377;0.4607859;0.45928571;0.45804319;
0.45726883;0.45665467;0.45620951;0.45595077;0.45576689;0.45560592;0.45548466;0.45539975;0.45532975;0.45536208;
0.45534566;0.45534876;0.45533928;0.45532516;0.45513573;0.45491534;0.45473847;0.45454368;0.4544808;0.45445064;
0.45432344;0.45434535;0.4543511;0.45434403;0.454382;0.45431834;0.45427611;0.45423752;0.45415077;0.45405945;
0.45398432;0.45392311;0.45386642;0.45378676;0.48829162;0.47699293;0.47017393;0.4656525;0.46213394;0.45946142;
0.45757118;0.45610613;0.45499846;0.45425296;0.45376366;0.45340025;0.45328006;0.45318875;0.45309916;0.45301396;
0.45295361;0.4528684;0.45279652;0.45274588;0.45265391;0.45260173;0.45252523;0.45250162;0.45246243;0.45241225;
0.45234236;0.45229998;0.45221788;0.45213756;0.45205647;0.45200583;0.48921639;0.47779107;0.47057623;0.46573302;
0.46212614;0.4595989;0.45776388;0.45643345;0.45560798;0.45507655;0.45455968;0.4542999;0.45405266;0.45394889;
0.4538855;0.45378765;0.45364165;0.45359677;0.45349935;0.45346433;0.45337096;0.45332861;0.45323721;0.4531523;
0.45311484;0.45306063;0.45303312;0.48383477;0.47153917;0.46430793;0.45980164;0.45655167;0.45432347;0.45249987;
0.45145187;0.45056102;0.45004582;0.44950569;0.44921306;0.44902489;0.44888219;0.44879168;0.4486697;0.44856849;
0.44843462;0.44837061;0.44824356;0.44808772;0.44798723;0.44795245;0.44783911;0.44774225;0.44770005;0.4476454;
0.44757286;0.44753107;0.44746685;0.44740835;0.4474242;0.44743186;0.44743651;0.44742283;0.44742414;0.44739556;
0.4473581;0.488601;0.47825781;0.47183877;0.46716344;0.46381092;0.46103075;0.45908752;0.45774227;0.45685482;
0.45598388;0.45547134;0.45500681;0.45465812;0.45436776;0.4540574;0.45381859;0.45361298;0.45346275;0.45330215;
0.45314842;0.4530288;0.45293835;0.45288402;0.45279646;0.45273265;0.4526962;0.45261914;0.45258817;0.4525117;
0.45247325;0.45239812;0.45232546;0.45225725;0.45218763;0.49428719;0.48409823;0.47765875;0.47257125;0.46897364;
0.46609721;0.46390349;0.46202028;0.46099383;0.45995179;0.45929867;0.45854434;0.45788324;0.4574635;0.45716903;
0.45690545;0.45662153;0.45640403;0.4561879;0.45607328;0.45594049;0.45582616;0.4556841;0.45555285;0.45543921;
0.45531592;0.45523995;0.4551034;0.49041182;0.48058677;0.47403872;0.46943727;0.4658525;0.46308714;0.46125486;
0.45991889;0.45890507;0.45816562;0.45744875;0.45697054;0.45676056;0.45650229;0.45613405;0.45576087;0.45545256;
0.45512506;0.45486799;0.4546456;0.45421448;0.45390898;0.45362011;0.45338729;0.45324627;0.45307824;0.45290455;
0.45278621;0.45268619;0.45251092;0.45231381;0.4522033;0.45206591;0.45193109;0.4517571;0.45158324;0.45141077;
0.45119721;0.45085248;0.45070341;0.45056367;0.45048186;0.45044455;0.49251798;0.48283455;0.47616878;0.47176537;
0.46843666;0.46582738;0.4638159;0.4624308;0.46132785;0.46026161;0.45934892;0.45878634;0.45841536;0.45797512;
0.45767212;0.45746255;0.45737031;0.45726019;0.45722532;0.45719242;0.45700431;0.45679566;0.45649794;0.4562;
0.45599627;0.45580435;0.45559874;0.45540234;0.45527127;0.45513141;0.45496088;0.45478895;0.45458135;0.4544628;
0.45436427;0.45436126;0.49269602;0.48198754;0.47488505;0.47047412;0.46683124;0.46435937;0.46249062;0.46116313;
0.46015149;0.45942312;0.45898157;0.45835027;0.45783764;0.45729852;0.45680553;0.4564155;0.45612067;0.45581803;
0.45554817;0.45527723;0.45499876;0.45473328;0.4545244;0.45429716;0.45396662;0.45372146;0.45351699;0.45330894;
0.45308188;0.4528901;0.45270947;0.45251423;0.45228109;0.45209357;0.45187649;0.45170718;0.45154881;0.45136821;
0.45118475;0.45100701;0.45084471;0.45071757;0.45052618;0.4503971;0.45034346;0.45031118;0.45025524;0.45018423;
0.45012489;0.45005763;      };
     };
     float_Data @[52] {
      name="mean_Hidden_0_Fm_Input_prjns_r_dwt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=34;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 6.8096699e-05;5.2672211e-05;5.0080642e-05;3.3443099e-05;2.8532142e-05;2.5570165e-05;1.4972939e-05;3.0158722e-05;1.591014e-05;7.7449367e-06;
1.7038647e-05;1.0741189e-05;1.3881671e-05;1.0344541e-05;8.8416773e-06;5.6831027e-06;7.0782894e-06;7.7410596e-06;6.8053937e-06;2.8796442e-06;
7.1485379e-06;3.9929209e-06;2.1647315e-06;1.0260072e-05;4.5540232e-06;7.1030686e-06;5.3347608e-06;2.7123735e-06;3.208035e-06;4.4781364e-06;
5.235052e-06;5.9632966e-06;1.5195993e-05;4.4821309e-06;2.7001779e-06;6.2555455e-06;3.829814e-06;3.8713843e-06;3.3923272e-06;3.1024931e-06;
3.1928528e-06;7.5012113e-06;1.8799162e-06;4.6191158e-06;2.3113578e-06;1.6112369e-06;3.6731424e-06;3.5182106e-06;2.572559e-06;3.4451948e-06;
4.25006e-05;2.7451488e-05;3.3503406e-05;3.7803638e-05;4.3803582e-05;6.2658321e-05;7.9535257e-06;1.5750275e-05;2.2704951e-05;1.1813477e-05;
2.4940904e-05;6.6753319e-06;7.6461793e-06;8.8946244e-06;6.8865061e-06;3.8539433e-06;6.3556699e-06;2.9806299e-06;3.3086847e-06;8.1677335e-06;
5.2604892e-06;5.5140658e-06;3.308804e-06;3.6117538e-06;2.449427e-06;2.87283e-06;2.1345895e-06;1.7630593e-06;3.5199701e-06;1.9419733e-06;
3.2307507e-06;3.6680576e-06;5.0254112e-05;4.9306353e-05;3.3432869e-05;2.2905553e-05;3.1759202e-05;1.4351447e-05;1.3026019e-05;5.0817848e-06;
1.5271547e-05;1.3307499e-05;1.0713412e-05;6.2808408e-06;2.1161248e-05;6.8485288e-06;5.8278019e-06;3.8372605e-06;5.2709333e-06;3.8196426e-06;
4.2555957e-06;4.6693276e-06;3.4920058e-06;9.7947895e-06;7.4751297e-06;4.5849115e-06;2.362211e-06;3.6274755e-06;3.0326712e-06;3.4076033e-06;
2.0398888e-06;2.0568793e-06;6.8097233e-06;2.3252358e-06;2.3170817e-06;1.7728356e-06;3.6372469e-06;2.3085495e-06;3.1680697e-06;1.6105275e-06;
2.5254797e-06;2.1417563e-06;2.6104872e-06;2.8365712e-06;8.7516513e-05;4.2473268e-05;3.6053683e-05;3.3039756e-05;3.0397419e-05;2.6343519e-05;
2.3945162e-05;1.9813424e-05;1.0799941e-05;1.3479306e-05;1.3717633e-05;7.2040548e-06;9.043406e-06;7.9921865e-06;1.4254457e-05;2.9835555e-06;
4.8046331e-06;8.78839e-06;4.1328135e-06;2.7061694e-06;2.2409358e-06;6.8350782e-06;5.5006844e-06;1.9733882e-06;2.6714413e-06;3.551399e-06;
3.8203489e-06;2.8715644e-06;3.1993764e-06;5.2024316e-06;1.7073677e-06;3.4771099e-06;4.5135697e-05;5.4976474e-05;6.7218105e-05;2.3298297e-05;
2.6355498e-05;2.2520409e-05;2.8933049e-05;1.6017915e-05;1.5543383e-05;1.3070117e-05;1.1869684e-05;3.6738875e-06;1.2762648e-05;6.1979736e-06;
1.9628997e-06;4.8242068e-06;4.4314102e-06;5.8125515e-06;5.0526069e-06;6.8279692e-06;5.2842074e-06;6.9349617e-06;7.8603798e-06;5.6877288e-06;
3.253489e-06;2.1575302e-06;3.2061787e-06;7.880036e-05;4.7764566e-05;4.4047978e-05;6.0844177e-05;1.2757565e-05;1.7926879e-05;1.5479027e-05;
2.9380035e-05;3.4696711e-06;4.9536843e-06;2.1339147e-05;1.1920902e-05;7.2797998e-06;2.8289589e-06;5.9469812e-06;2.9767382e-06;2.174326e-06;
7.0285264e-06;3.7411239e-06;1.31631e-05;7.8985222e-06;4.3403934e-06;7.7603845e-06;3.6550621e-06;3.6053459e-06;5.3222557e-06;4.4988033e-06;
3.1165441e-06;5.8382839e-06;2.4201631e-06;2.5797606e-06;2.1940252e-06;2.8749046e-06;2.2120175e-06;4.1805201e-06;2.3010807e-06;2.7890433e-06;
4.036036e-06;5.7724457e-05;2.3929935e-05;3.9870982e-05;2.8511746e-05;3.4530272e-05;3.8817383e-05;2.4172596e-05;9.8812516e-06;1.0203345e-05;
2.4740617e-05;4.1798558e-06;1.0449247e-05;4.9475175e-06;6.9986672e-06;6.1429291e-06;1.2037972e-05;2.9322712e-06;1.3045295e-05;2.7967096e-06;
7.5987255e-06;4.970344e-06;2.2144852e-06;3.5400294e-06;5.3594777e-06;3.5033906e-06;1.8786675e-06;4.5884858e-06;1.8936074e-06;3.5688761e-06;
1.7821019e-06;1.6687276e-06;4.6558175e-06;3.6515194e-06;2.8463455e-06;2.5691317e-05;3.1996075e-05;3.5041012e-05;2.2646385e-05;3.174863e-05;
3.3620829e-05;6.0563241e-05;9.5984124e-06;3.0115798e-05;6.9641351e-06;1.0644283e-05;1.1007814e-05;7.3320684e-06;5.0101989e-06;8.1286125e-06;
1.0307431e-05;5.529138e-06;4.6362893e-06;5.2582977e-06;1.3032996e-05;6.3348889e-06;3.0669028e-06;1.7091687e-06;3.4066406e-06;2.3419398e-06;
6.6496896e-06;1.8987917e-06;1.661396e-06;5.8681777e-05;3.044625e-05;2.9043314e-05;3.3991688e-05;2.0956581e-05;2.639328e-05;1.3562297e-05;
2.281309e-05;1.171047e-05;1.1164905e-05;5.9752729e-06;8.4474414e-06;4.6210062e-06;1.6305894e-05;9.6570602e-06;8.9236119e-06;1.5231854e-05;
5.4939669e-06;5.9103968e-06;1.1955714e-05;1.9461148e-05;7.9603205e-06;8.8610914e-06;3.5925464e-06;7.3613423e-06;3.512667e-06;3.5251051e-06;
3.975113e-06;2.8794334e-06;3.074492e-06;2.7671827e-06;2.7850363e-06;5.5700439e-06;5.841307e-06;5.3978192e-06;4.717896e-06;6.4010114e-06;
3.4736679e-06;3.4382606e-06;7.8247276e-06;2.7567226e-06;2.7254889e-06;2.6883633e-06;5.5792905e-05;4.0380259e-05;2.9827543e-05;3.3381464e-05;
1.7374306e-05;3.4900979e-05;2.2250833e-05;2.1601873e-05;1.4602156e-05;2.8304579e-05;1.0602836e-05;7.9442252e-06;9.4776087e-06;6.0818543e-06;
6.361166e-06;6.8932127e-06;3.6957422e-06;3.7224959e-06;2.9181285e-06;2.0495941e-06;2.8373763e-06;7.7452605e-06;9.3167218e-06;3.4672444e-06;
2.0801131e-06;5.1433967e-06;2.4666654e-06;3.0780902e-06;2.3293746e-06;4.7595058e-06;5.218069e-06;3.0381088e-06;6.2240538e-06;3.6023428e-06;
4.0322539e-06;4.4145881e-06;6.8096699e-05;5.2672211e-05;5.0080642e-05;3.3443099e-05;2.8532142e-05;2.5570165e-05;1.4972939e-05;3.0158722e-05;
1.591014e-05;7.7449367e-06;1.7038647e-05;1.0741189e-05;1.3881671e-05;1.0344541e-05;8.8416773e-06;5.6831027e-06;7.0782894e-06;7.7410596e-06;
6.8053937e-06;2.8796442e-06;7.1485379e-06;3.9929209e-06;2.1647315e-06;1.0260072e-05;4.5540232e-06;7.1030686e-06;5.3347608e-06;2.7123735e-06;
3.208035e-06;4.4781364e-06;5.235052e-06;5.9632966e-06;1.5195993e-05;4.4821309e-06;2.7001779e-06;6.2555455e-06;3.829814e-06;3.8713843e-06;
3.3923272e-06;3.1024931e-06;3.1928528e-06;7.5012113e-06;1.8799162e-06;4.6191158e-06;2.3113578e-06;1.6112369e-06;3.6731424e-06;3.5182106e-06;
2.572559e-06;3.4451948e-06;      };
     };
     float_Data @[53] {
      name="mean_Hidden_0_Fm_Hidden_1_prjns_r_dwt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=37;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.00025745414;0.00019592428;0.00025865756;0.00019780746;0.00011897423;0.0001497794;8.4416788e-05;0.00017501299;9.9063873e-05;5.6837154e-05;
6.5659398e-05;6.0829942e-05;5.0928375e-05;7.3239898e-05;5.3941334e-05;2.3733028e-05;4.5799698e-05;4.749445e-05;3.4445868e-05;1.5766518e-05;
2.7039736e-05;2.7911588e-05;1.8072922e-05;3.7727226e-05;2.2681705e-05;3.015842e-05;2.9336299e-05;2.0074718e-05;2.6998279e-05;2.9513345e-05;
2.5794345e-05;2.092017e-05;7.7622368e-05;2.8735883e-05;1.2851568e-05;3.7595029e-05;1.8013905e-05;2.0477559e-05;1.1523611e-05;1.8837232e-05;
2.0966776e-05;3.6359121e-05;1.5593976e-05;2.6216479e-05;1.9410934e-05;1.1105266e-05;1.7193972e-05;2.25683e-05;1.3008941e-05;1.1519192e-05;
0.00024648386;0.00020690558;0.00015949286;0.00022629053;0.00026020632;0.00027623249;6.3401894e-05;0.00011112221;0.00013875843;8.7719462e-05;
0.00014591835;2.3314746e-05;4.5718625e-05;5.500672e-05;5.4404052e-05;3.5116522e-05;3.9020837e-05;1.682063e-05;2.1475233e-05;4.4739816e-05;
2.9603099e-05;2.8370792e-05;1.5565591e-05;1.925164e-05;2.0929394e-05;2.0499812e-05;1.7725799e-05;1.2869453e-05;1.9870344e-05;1.6503884e-05;
2.3031289e-05;1.6221922e-05;0.00024165833;0.00023826434;0.00021616346;0.00022590198;0.00018402802;0.0001547292;0.00012612717;4.8474529e-05;
0.00016190359;0.00011487272;8.5747248e-05;7.0657748e-05;9.6093521e-05;6.1553932e-05;2.3792643e-05;2.090469e-05;3.1370248e-05;2.0969355e-05;
3.207332e-05;2.8821689e-05;1.4054091e-05;4.9403123e-05;3.1847652e-05;2.7656151e-05;1.2538416e-05;1.3933248e-05;2.2821683e-05;1.7839493e-05;
2.581714e-05;2.0114439e-05;2.3445986e-05;1.2260322e-05;1.5818499e-05;1.1730189e-05;1.9320149e-05;1.0850385e-05;1.5988546e-05;7.3411134e-06;
9.5921059e-06;9.1760367e-06;1.2128703e-05;1.274079e-05;0.00038320356;0.00030561467;0.00024257736;0.00017197401;0.00014142979;0.00017197875;
0.00014652238;0.00011506708;4.3407112e-05;9.6691059e-05;7.2132068e-05;4.3839016e-05;4.5114077e-05;3.036684e-05;5.8707123e-05;3.0192437e-05;
1.973721e-05;6.8754176e-05;1.9705447e-05;1.5994396e-05;2.0230671e-05;3.3254284e-05;2.4856738e-05;9.1726397e-06;2.337795e-05;2.6062988e-05;
2.5913192e-05;1.5640073e-05;1.7350678e-05;2.0301106e-05;1.3284036e-05;2.7835153e-05;0.00024489529;0.00024879392;0.00029361533;0.00024222428;
0.00016071071;0.00019027317;0.00015577534;7.9072095e-05;6.8671914e-05;9.6275129e-05;7.65597e-05;2.5236412e-05;6.2382147e-05;2.8401362e-05;
1.2152322e-05;3.2912703e-05;1.3548048e-05;2.4806386e-05;3.2361007e-05;5.1736519e-05;3.3290944e-05;2.582148e-05;3.4996239e-05;2.6045973e-05;
1.7830576e-05;1.1431965e-05;1.0562551e-05;0.00029036429;0.0002065169;0.00021630412;0.00034094646;8.6825108e-05;8.3158753e-05;9.7025797e-05;
0.00014105646;2.9091563e-05;4.7885605e-05;0.00010400025;6.5891982e-05;5.4923472e-05;1.8108873e-05;3.3964403e-05;2.2270782e-05;1.4896774e-05;
4.5553876e-05;2.8345909e-05;6.4700398e-05;3.7123202e-05;2.2872902e-05;3.4717119e-05;1.9846861e-05;2.1518759e-05;2.6520102e-05;2.7364375e-05;
1.1519661e-05;2.2305496e-05;1.4217589e-05;1.1938879e-05;1.9633972e-05;1.0960441e-05;1.4828734e-05;2.1544372e-05;1.1714249e-05;1.2446393e-05;
1.8618239e-05;0.00023698971;0.00011886162;0.0002254774;0.00013643515;0.00015465145;0.000251399;0.00013666606;5.3584954e-05;5.8297483e-05;
0.00013935057;4.8452723e-05;6.5999717e-05;3.1671494e-05;3.7730639e-05;3.9379895e-05;7.2189563e-05;2.0973006e-05;6.9724898e-05;1.6846076e-05;
5.4869884e-05;2.2613271e-05;1.2285756e-05;1.5246354e-05;2.4942143e-05;2.1472009e-05;1.1535242e-05;1.9910922e-05;9.3361714e-06;1.9838386e-05;
1.0846653e-05;7.4559157e-06;1.7454358e-05;1.7588976e-05;1.4669666e-05;0.0001441624;0.00015342874;0.00017048814;0.00015053603;0.00035727888;
0.00018621412;0.00025428052;9.1370341e-05;0.00014679885;5.4987686e-05;7.0460708e-05;6.404415e-05;6.8825531e-05;5.7375019e-05;3.4714314e-05;
3.5337696e-05;2.1390855e-05;1.8810051e-05;3.4490669e-05;6.0157454e-05;2.7290711e-05;2.1427115e-05;1.4463461e-05;2.3955696e-05;1.9095196e-05;
2.1737602e-05;9.5242985e-06;8.8369825e-06;0.000269991;0.00022288364;0.00019773148;0.00018011499;0.00013327746;0.00017384392;8.3421706e-05;
0.00014545198;7.8748431e-05;6.7738547e-05;4.0890445e-05;4.4760302e-05;4.6935682e-05;5.6243891e-05;5.6639892e-05;3.9442839e-05;7.0139358e-05;
3.5282392e-05;3.6446709e-05;4.8521673e-05;7.5516808e-05;9.0339861e-05;6.2951265e-05;1.3420151e-05;3.0435855e-05;2.8795444e-05;2.8325512e-05;
2.5565349e-05;2.0739726e-05;1.8620063e-05;1.1615569e-05;2.5098076e-05;2.5245239e-05;1.8380966e-05;2.7977831e-05;2.0711659e-05;3.3100365e-05;
1.8828478e-05;1.7118005e-05;5.2265837e-05;1.7349321e-05;9.1454285e-06;9.2208247e-06;0.00023735312;0.00019837738;0.00017396534;0.00018474952;
0.00022776543;0.00016307733;0.00012759442;0.00016345586;0.00011218841;0.00016353215;0.00010022116;5.9199265e-05;6.0026872e-05;3.7963022e-05;
6.3821004e-05;3.5176647e-05;2.4485875e-05;2.030422e-05;1.7886498e-05;2.031258e-05;2.136828e-05;3.7182857e-05;4.1823572e-05;2.657398e-05;
1.4723551e-05;2.21214e-05;2.2309428e-05;1.266829e-05;1.673426e-05;2.5862626e-05;3.956072e-05;2.0437601e-05;2.9396981e-05;1.8076234e-05;
1.4764393e-05;1.7345032e-05;0.00025745414;0.00019592428;0.00025865756;0.00019780746;0.00011897423;0.0001497794;8.4416788e-05;0.00017501299;
9.9063873e-05;5.6837154e-05;6.5659398e-05;6.0829942e-05;5.0928375e-05;7.3239898e-05;5.3941334e-05;2.3733028e-05;4.5799698e-05;4.749445e-05;
3.4445868e-05;1.5766518e-05;2.7039736e-05;2.7911588e-05;1.8072922e-05;3.7727226e-05;2.2681705e-05;3.015842e-05;2.9336299e-05;2.0074718e-05;
2.6998279e-05;2.9513345e-05;2.5794345e-05;2.092017e-05;7.7622368e-05;2.8735883e-05;1.2851568e-05;3.7595029e-05;1.8013905e-05;2.0477559e-05;
1.1523611e-05;1.8837232e-05;2.0966776e-05;3.6359121e-05;1.5593976e-05;2.6216479e-05;1.9410934e-05;1.1105266e-05;1.7193972e-05;2.25683e-05;
1.3008941e-05;1.1519192e-05;      };
     };
     float_Data @[54] {
      name="mean_Hidden_1_Fm_Hidden_0_prjns_r_dwt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=37;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.00020725348;0.00020414931;0.00026052227;0.00020616573;0.00011896664;0.00016202885;9.0998896e-05;0.00018365883;9.9571422e-05;6.4246793e-05;
6.373621e-05;6.3514781e-05;5.4951888e-05;7.7116812e-05;5.7311423e-05;2.580603e-05;4.748725e-05;4.92654e-05;3.7483405e-05;1.7539713e-05;
3.0549178e-05;3.1303869e-05;1.9588575e-05;3.9585299e-05;2.3832621e-05;3.219282e-05;3.1901538e-05;2.189901e-05;2.9063356e-05;3.1662974e-05;
2.7630871e-05;2.2928903e-05;7.9925529e-05;3.0271076e-05;1.4382764e-05;3.8602055e-05;2.0303956e-05;2.2466578e-05;1.2405448e-05;2.0187619e-05;
2.1597729e-05;3.6651676e-05;1.6828404e-05;2.8032033e-05;2.1172325e-05;1.2684261e-05;1.8925637e-05;2.3450993e-05;1.4182145e-05;1.2498718e-05;
0.00025394376;0.00022952232;0.00016715439;0.00024447512;0.00026521742;0.00028150121;7.8767407e-05;0.00012319323;0.00014813717;8.9198453e-05;
0.00015305332;2.6500889e-05;4.6859306e-05;5.7314272e-05;5.6504228e-05;3.713472e-05;3.8588722e-05;1.7627632e-05;2.4036153e-05;4.6167883e-05;
3.2300792e-05;3.0208008e-05;1.7507469e-05;1.9547339e-05;2.2282145e-05;2.1212862e-05;1.9955913e-05;1.4985316e-05;2.0734313e-05;1.8261853e-05;
2.429503e-05;1.8273229e-05;0.00024611424;0.00026455542;0.00022147884;0.00024377304;0.00019932422;0.00016700015;0.00013841981;5.9792823e-05;
0.00016330299;0.0001237371;9.2359231e-05;7.1641101e-05;0.00010269885;6.6023596e-05;2.7082175e-05;2.4419407e-05;3.5654546e-05;2.234529e-05;
3.4455334e-05;2.9762225e-05;1.5386235e-05;5.0423005e-05;3.3668526e-05;2.8925027e-05;1.437981e-05;1.5244565e-05;2.465442e-05;2.025285e-05;
2.762984e-05;2.1757602e-05;2.5066294e-05;1.4173004e-05;1.7241939e-05;1.3124373e-05;2.1218983e-05;1.2237604e-05;1.7247963e-05;8.0189193e-06;
9.977075e-06;1.0315538e-05;1.2679793e-05;1.4613974e-05;0.0003965628;0.00031181675;0.00025457956;0.00018099706;0.0001535101;0.00018889038;
0.00016560618;0.0001205828;5.052322e-05;0.00010255881;7.6064403e-05;4.6726029e-05;4.8322127e-05;3.1521013e-05;6.0634513e-05;3.2388387e-05;
2.3804569e-05;7.0498521e-05;2.1980019e-05;1.7754568e-05;2.1754096e-05;3.4811419e-05;2.5711486e-05;1.0672657e-05;2.5088057e-05;2.7950771e-05;
2.6449943e-05;1.6576185e-05;2.0185018e-05;2.1782318e-05;1.4310823e-05;2.8932516e-05;0.00026947851;0.00026050812;0.00032805619;0.00025690929;
0.00016322896;0.00020183281;0.00015779781;8.9800065e-05;7.9277459e-05;0.00010299391;8.0912818e-05;2.8567843e-05;6.6775166e-05;3.246967e-05;
1.4946691e-05;3.5431414e-05;1.5003994e-05;2.7513117e-05;3.5527435e-05;5.281921e-05;3.4686593e-05;2.7049753e-05;3.5007659e-05;2.699467e-05;
2.0091555e-05;1.3454463e-05;1.1757773e-05;0.00028772105;0.00020903927;0.00022338552;0.00036510042;0.00010139083;9.1804475e-05;0.00010365509;
0.00014638829;3.3186436e-05;5.3547792e-05;0.00010803131;6.7100569e-05;5.7136811e-05;2.2018432e-05;3.7328231e-05;2.4688261e-05;1.7908509e-05;
4.8701386e-05;2.9833183e-05;6.6343273e-05;3.9631625e-05;2.4543646e-05;3.7120921e-05;2.1087129e-05;2.3288605e-05;2.7820353e-05;2.8551201e-05;
1.1855986e-05;2.2377084e-05;1.6394997e-05;1.3936124e-05;2.1498561e-05;1.1989412e-05;1.6252992e-05;2.1802072e-05;1.2899201e-05;1.333323e-05;
2.0051311e-05;0.00022506043;0.00013697286;0.00024139188;0.00015415832;0.00017481153;0.00026013202;0.00015248892;6.2424435e-05;6.6469882e-05;
0.00014668729;5.3971373e-05;7.3798597e-05;3.4508557e-05;3.869013e-05;3.9160197e-05;7.2872375e-05;2.2793518e-05;7.3427203e-05;1.9180487e-05;
5.6066765e-05;2.3641313e-05;1.3340199e-05;1.6885386e-05;2.6594736e-05;2.2933164e-05;1.3271469e-05;2.0636964e-05;1.0600213e-05;2.1743283e-05;
1.2012674e-05;8.4141393e-06;1.8520655e-05;1.863121e-05;1.5555941e-05;0.00018179031;0.00019055502;0.00018471567;0.00016283341;0.00035790165;
0.00019630197;0.00026198852;9.5403149e-05;0.00014515592;6.2651241e-05;7.5207237e-05;7.5116579e-05;7.4419004e-05;6.2769454e-05;4.0846731e-05;
3.6959656e-05;2.5198557e-05;2.1643302e-05;3.6243178e-05;6.2878287e-05;2.8336017e-05;2.2448588e-05;1.6952439e-05;2.5406125e-05;2.1067475e-05;
2.2666842e-05;1.1877379e-05;1.0129629e-05;0.00033881821;0.00023915012;0.00021948716;0.00018743248;0.00015387819;0.00018356365;8.8478519e-05;
0.00015518161;8.6865599e-05;7.4539479e-05;4.7298112e-05;4.8196467e-05;5.3538959e-05;5.9485883e-05;5.8261729e-05;4.0404226e-05;7.4477917e-05;
3.7497157e-05;3.8393675e-05;5.1465271e-05;7.8552679e-05;9.3145361e-05;6.5084867e-05;1.6025446e-05;3.2137941e-05;3.0612759e-05;3.0533945e-05;
2.8486813e-05;2.255254e-05;1.9791829e-05;1.4154703e-05;2.6524305e-05;2.6720383e-05;1.9648833e-05;2.8501978e-05;2.3470564e-05;3.3937147e-05;
1.9221334e-05;2.0358415e-05;5.5352371e-05;1.9691892e-05;1.0268436e-05;1.128623e-05;0.0002753486;0.00020074872;0.00018728281;0.00020136699;
0.00024195776;0.0001760218;0.0001431173;0.00017741359;0.00011376409;0.00017094026;0.00010021892;6.2373751e-05;6.5678716e-05;4.2810982e-05;
6.8381923e-05;3.7800972e-05;2.6357544e-05;2.1286622e-05;1.9873374e-05;2.188221e-05;2.330644e-05;4.0119543e-05;4.1893963e-05;2.7527165e-05;
1.610519e-05;2.3711287e-05;2.3256931e-05;1.4026406e-05;1.8396751e-05;2.6747624e-05;4.053575e-05;2.2404702e-05;3.180479e-05;1.9605764e-05;
1.6096985e-05;1.8631477e-05;0.00020725348;0.00020414931;0.00026052227;0.00020616573;0.00011896664;0.00016202885;9.0998896e-05;0.00018365883;
9.9571422e-05;6.4246793e-05;6.373621e-05;6.3514781e-05;5.4951888e-05;7.7116812e-05;5.7311423e-05;2.580603e-05;4.748725e-05;4.92654e-05;
3.7483405e-05;1.7539713e-05;3.0549178e-05;3.1303869e-05;1.9588575e-05;3.9585299e-05;2.3832621e-05;3.219282e-05;3.1901538e-05;2.189901e-05;
2.9063356e-05;3.1662974e-05;2.7630871e-05;2.2928903e-05;7.9925529e-05;3.0271076e-05;1.4382764e-05;3.8602055e-05;2.0303956e-05;2.2466578e-05;
1.2405448e-05;2.0187619e-05;2.1597729e-05;3.6651676e-05;1.6828404e-05;2.8032033e-05;2.1172325e-05;1.2684261e-05;1.8925637e-05;2.3450993e-05;
1.4182145e-05;1.2498718e-05;      };
     };
     float_Data @[55] {
      name="mean_Hidden_1_Fm_Output_prjns_r_dwt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=35;
      matrix_col_width=10;
      ar {
       name="ar";
      [412] 0.00044462777;0.00041994889;0.00046334957;0.00043287963;0.00030805051;0.00034603383;0.00030188277;0.00035711125;0.00029080757;0.00018520193;
0.00010388305;0.00015265241;0.00013635374;0.00021467313;0.00015544139;9.9925448e-05;0.00011064617;0.00011714428;0.00013576266;7.8981808e-05;
7.9951147e-05;9.6458163e-05;7.3397132e-05;9.752794e-05;9.395121e-05;7.6067146e-05;9.8457713e-05;7.7177872e-05;8.9843918e-05;9.1458205e-05;
8.2372193e-05;6.5376873e-05;0.00015015036;8.7852779e-05;4.6731482e-05;7.9086349e-05;7.4739422e-05;6.008405e-05;4.8173479e-05;8.4251631e-05;
5.1686671e-05;7.3590811e-05;5.588416e-05;7.8325487e-05;6.7128174e-05;5.6055731e-05;6.0408449e-05;5.3215168e-05;4.4622877e-05;2.5869787e-05;
0.00052469713;0.00049909891;0.00035195757;0.00048077203;0.0004415799;0.00050963112;0.00021799657;0.00023659838;0.00032559785;0.00023475836;
0.00029921936;0.00012862464;0.0001093122;0.00016051918;0.00013329418;0.00012412449;8.7523062e-05;8.9903901e-05;0.00010281202;0.00010358515;
0.00011015759;9.2159651e-05;6.5538654e-05;6.5863562e-05;8.4794745e-05;7.1120572e-05;6.8597539e-05;6.9348054e-05;6.3784813e-05;6.9942325e-05;
6.1140898e-05;8.1757535e-05;0.00044466797;0.00049141364;0.00045247914;0.00050193479;0.00040393136;0.00035218394;0.00040104013;0.00020707276;
0.00037547911;0.00029666352;0.00021673575;0.00017526599;0.00021012966;0.00020566485;0.00010055765;9.7303222e-05;0.00012017047;7.161247e-05;
0.00011004082;9.3618321e-05;7.1772534e-05;0.00010275622;0.00010117763;8.9905618e-05;5.5288117e-05;7.9798752e-05;6.4442094e-05;7.6406439e-05;
9.4118281e-05;8.5828295e-05;7.9872552e-05;4.8464881e-05;5.545927e-05;4.5622281e-05;7.0221417e-05;5.8998136e-05;5.0996063e-05;4.4724547e-05;
4.1624127e-05;5.2384279e-05;6.2367923e-05;5.229863e-05;0.00054690836;0.00059114181;0.00054722128;0.00037939486;0.00034305232;0.00038254142;
0.00030914225;0.00033693135;0.00015379462;0.00020981682;0.00015217549;0.00014876739;0.00014610036;0.00015151671;0.00011502244;0.00011897228;
8.053433e-05;0.00013164265;8.083837e-05;7.2758012e-05;7.5807853e-05;0.00010011531;8.4461215e-05;8.299209e-05;8.8904933e-05;7.8069112e-05;
6.5960296e-05;5.95891e-05;7.5278716e-05;7.7199911e-05;7.9577665e-05;7.9557176e-05;0.00048589829;0.00042621259;0.00052351103;0.00051657239;
0.00035238636;0.00043492069;0.00028106532;0.00024059186;0.00021491056;0.00020218335;0.00025026646;0.00010980557;0.00015063216;0.00015440708;
9.1270442e-05;8.4444619e-05;5.3253367e-05;0.00010094069;0.00012819559;0.00011604848;0.00010798035;8.3694547e-05;7.4610922e-05;6.8114678e-05;
6.3088868e-05;7.7523488e-05;6.4978412e-05;0.00058171933;0.00048628397;0.00043511469;0.00050572294;0.00030355633;0.00025378875;0.00024966398;
0.00027063841;0.00019176042;0.00019607077;0.00027776152;0.00016458663;0.00021261863;0.00010983078;0.00012732009;0.00010910954;9.4115392e-05;
0.00010743893;9.0657915e-05;0.00013980447;0.00011017355;7.7177836e-05;0.00010885088;6.7317516e-05;7.8774799e-05;0.00011364261;0.00010989823;
7.115581e-05;5.7201622e-05;6.320075e-05;5.5951732e-05;7.8040772e-05;3.818125e-05;5.1717612e-05;5.9657061e-05;4.5092467e-05;3.0878458e-05;
5.9725673e-05;0.00046750921;0.00037093606;0.00051967468;0.00033950229;0.00039051741;0.00046459219;0.00026763769;0.00019778365;0.00018139054;
0.00033327547;0.0001715917;0.00017911417;0.00013442874;0.00013748264;0.00013994516;0.00017452391;9.9461176e-05;0.00016671585;6.7203378e-05;
0.00014376134;9.2920476e-05;6.9672802e-05;6.2098828e-05;7.4843352e-05;9.372324e-05;6.7133617e-05;7.2614981e-05;6.0735492e-05;8.600163e-05;
5.3582502e-05;5.0873718e-05;5.5119857e-05;6.8845169e-05;4.7748716e-05;0.00037291594;0.00039822643;0.00040296154;0.00040495512;0.00059604505;
0.00045378305;0.0004442379;0.00026126651;0.00029630921;0.00015283962;0.00023847033;0.00017711383;0.00017448478;0.00017350122;0.00010367826;
0.00011199255;8.188175e-05;7.8432495e-05;8.8243971e-05;0.00014143356;6.8728994e-05;9.6614807e-05;7.2664385e-05;0.00010921498;9.9654375e-05;
6.7673514e-05;6.3894884e-05;4.7624577e-05;0.0005495653;0.00048404481;0.000420189;0.00042973863;0.00027851303;0.00046106285;0.0003397149;
0.00038247235;0.00024860827;0.0002088475;0.00012218964;0.00010220132;0.00014944129;9.6753174e-05;0.00012507728;8.6056258e-05;0.00015064917;
0.00012825883;0.00014439791;0.00010848144;0.00013238221;0.00014768158;0.00015048086;7.1256633e-05;8.044039e-05;8.3517829e-05;7.6398726e-05;
9.2631271e-05;6.1792867e-05;9.8623314e-05;6.2803054e-05;7.0616341e-05;7.6853641e-05;3.265775e-05;6.6797918e-05;6.4144289e-05;8.5310065e-05;
3.0250303e-05;7.0914495e-05;9.995664e-05;6.0852723e-05;5.8517813e-05;5.7059344e-05;0.00041321598;0.00039289735;0.00040673386;0.00034853033;
0.00052040169;0.00037405622;0.00030224901;0.00035514042;0.00026816892;0.0003581834;0.00022207474;0.00013456463;0.00017535659;0.00012647692;
0.00016639057;0.00010622947;9.0453825e-05;6.1507402e-05;8.4305051e-05;8.6698165e-05;8.2946426e-05;9.8375604e-05;9.6005118e-05;0.00010388791;
7.658235e-05;7.3479016e-05;9.5167474e-05;6.1109757e-05;7.6609671e-05;6.0199993e-05;8.7726155e-05;8.271142e-05;8.1057347e-05;7.3213203e-05;
7.1367773e-05;4.7805457e-05;0.00044462777;0.00041994889;0.00046334957;0.00043287963;0.00030805051;0.00034603383;0.00030188277;0.00035711125;
0.00029080757;0.00018520193;0.00010388305;0.00015265241;0.00013635374;0.00021467313;0.00015544139;9.9925448e-05;0.00011064617;0.00011714428;
0.00013576266;7.8981808e-05;7.9951147e-05;9.6458163e-05;7.3397132e-05;9.752794e-05;9.395121e-05;7.6067146e-05;9.8457713e-05;7.7177872e-05;
8.9843918e-05;9.1458205e-05;8.2372193e-05;6.5376873e-05;0.00015015036;8.7852779e-05;4.6731482e-05;7.9086349e-05;7.4739422e-05;6.008405e-05;
4.8173479e-05;8.4251631e-05;5.1686671e-05;7.3590811e-05;5.588416e-05;7.8325487e-05;6.7128174e-05;5.6055731e-05;6.0408449e-05;5.3215168e-05;
4.4622877e-05;2.5869787e-05;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [412] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="BottomUpCons_XCalFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="MIN": value=0: val_type_fixed=0: };
       UserDataItem @[1] {name="MAX": value=1: val_type_fixed=0: };
      };
      name="SRAvg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [101] 0;0.0099999998;0.02;0.029999999;0.039999999;0.049999997;0.059999995;0.069999993;0.079999991;0.089999989;
0.099999987;0.10999998;0.11999998;0.12999998;0.13999999;0.14999999;0.16;0.17;0.18000001;0.19000001;
0.20000002;0.21000002;0.22000003;0.23000003;0.24000004;0.25000003;0.26000002;0.27000001;0.28;0.28999999;
0.29999998;0.30999997;0.31999996;0.32999995;0.33999994;0.34999993;0.35999992;0.36999992;0.37999991;0.3899999;
0.39999989;0.40999988;0.41999987;0.42999986;0.43999985;0.44999984;0.45999983;0.46999982;0.47999981;0.4899998;
0.49999979;0.50999981;0.5199998;0.52999979;0.53999978;0.54999977;0.55999976;0.56999975;0.57999974;0.58999974;
0.59999973;0.60999972;0.61999971;0.6299997;0.63999969;0.64999968;0.65999967;0.66999966;0.67999965;0.68999964;
0.69999963;0.70999962;0.71999961;0.7299996;0.73999959;0.74999958;0.75999957;0.76999956;0.77999955;0.78999954;
0.79999954;0.80999953;0.81999952;0.82999951;0.8399995;0.84999949;0.85999948;0.86999947;0.87999946;0.88999945;
0.89999944;0.90999943;0.91999942;0.92999941;0.9399994;0.94999939;0.95999938;0.96999937;0.97999936;0.98999935;
0.99999934;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="MIN": value=-1: val_type_fixed=0: };
       UserDataItem @[1] {name="MAX": value=1: val_type_fixed=0: };
      };
      name="dWt";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [101] -0;-0.084999993;-0.16999999;-0.255;-0.315;-0.30000001;-0.285;-0.27000001;-0.25500003;-0.24000001;
-0.22500001;-0.21000002;-0.19500004;-0.18000004;-0.16500002;-0.15000001;-0.13500001;-0.12;-0.10499999;-0.089999981;
-0.074999973;-0.059999965;-0.044999957;-0.029999927;-0.014999941;2.9802322e-08;0.01000002;0.020000011;0.030000001;0.039999992;
0.049999982;0.059999973;0.069999963;0.079999954;0.089999944;0.099999934;0.10999992;0.11999992;0.12999994;0.1399999;
0.14999989;0.15999988;0.1699999;0.17999989;0.18999982;0.19999984;0.20999983;0.21999985;0.22999984;0.23999977;
0.24999979;0.25999981;0.2699998;0.27999979;0.28999978;0.29999977;0.30999976;0.31999975;0.32999974;0.33999974;
0.34999973;0.35999972;0.36999971;0.3799997;0.38999969;0.39999968;0.40999967;0.41999966;0.42999965;0.43999964;
0.44999963;0.45999962;0.46999961;0.47999966;0.48999959;0.49999958;0.50999957;0.51999956;0.52999961;0.53999954;
0.54999954;0.55999953;0.56999952;0.57999957;0.5899995;0.59999943;0.60999954;0.61999947;0.62999952;0.63999945;
0.64999938;0.65999949;0.66999942;0.67999947;0.6899994;0.69999933;0.70999944;0.71999937;0.72999942;0.73999935;
0.74999928;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [101] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="HiddenLayer_INetinModFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="top_k_netin";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [41] 0;0.0099999998;0.02;0.029999999;0.039999999;0.049999997;0.059999995;0.069999993;0.079999991;0.089999989;
0.099999987;0.10999998;0.11999998;0.12999998;0.13999999;0.14999999;0.16;0.17;0.18000001;0.19000001;
0.20000002;0.21000002;0.22000003;0.23000003;0.24000004;0.25000003;0.26000002;0.27000001;0.28;0.28999999;
0.29999998;0.30999997;0.31999996;0.32999995;0.33999994;0.34999993;0.35999992;0.36999992;0.37999991;0.3899999;
0.39999989;      };
     };
     float_Data @[1] {
      name="extra_inhib";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       name="ar";
      [41] 0.0088888407;0.0088636875;0.0088372231;0.0088095665;0.0087804794;0.0087499619;0.0087178946;0.0086841583;0.008648634;0.008611083;
0.0085713863;0.0085294247;0.0084848404;0.0084375143;0.0083870888;0.0083333254;0.0082758665;0.0082142353;0.0081481934;0.0080769062;
0.0080000162;0.0079166889;0.0078260899;0.0077272654;0.0076190233;0.0075000525;0.0073684454;0.0072221756;0.0070588589;0.0068750381;
0.0066666603;0.0064285994;0.0061538219;0.0058333874;0.0054545403;0.0049999952;0.0044444799;0.0037499666;0.0028572083;0.0016666651;
0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [41] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="LeabraUnitSpec_0_ActFmNetFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Net";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [1001] 0;0.001;0.0020000001;0.003;0.0040000002;0.0050000004;0.0060000005;0.0070000007;0.0080000004;0.0090000005;
0.010000001;0.011000001;0.012000001;0.013000001;0.014000001;0.015000002;0.016000001;0.017000001;0.018000001;0.019000001;
0.020000001;0.021000002;0.022000002;0.023000002;0.024000002;0.025000002;0.026000002;0.027000003;0.028000003;0.029000003;
0.030000003;0.031000003;0.032000002;0.033;0.033999998;0.034999996;0.035999995;0.036999993;0.037999991;0.03899999;
0.039999988;0.040999986;0.041999985;0.042999983;0.043999981;0.044999979;0.045999978;0.046999976;0.047999974;0.048999973;
0.049999971;0.050999969;0.051999968;0.052999966;0.053999964;0.054999962;0.055999961;0.056999959;0.057999957;0.058999956;
0.059999954;0.060999952;0.061999951;0.062999949;0.063999951;0.064999953;0.065999955;0.066999957;0.067999959;0.068999961;
0.069999963;0.070999965;0.071999967;0.072999969;0.073999971;0.074999973;0.075999975;0.076999977;0.077999979;0.078999981;
0.079999983;0.080999985;0.081999987;0.082999989;0.083999991;0.084999993;0.085999995;0.086999997;0.088;0.089000002;
0.090000004;0.091000006;0.092000008;0.09300001;0.094000012;0.095000014;0.096000016;0.097000018;0.09800002;0.099000022;
0.10000002;0.10100003;0.10200003;0.10300003;0.10400003;0.10500003;0.10600004;0.10700004;0.10800004;0.10900004;
0.11000004;0.11100005;0.11200005;0.11300005;0.11400005;0.11500005;0.11600006;0.11700006;0.11800006;0.11900006;
0.12000006;0.12100007;0.12200007;0.12300007;0.12400007;0.12500007;0.12600008;0.12700008;0.12800008;0.12900008;
0.13000008;0.13100009;0.13200009;0.13300009;0.13400009;0.13500009;0.1360001;0.1370001;0.1380001;0.1390001;
0.1400001;0.14100011;0.14200011;0.14300011;0.14400011;0.14500012;0.14600012;0.14700012;0.14800012;0.14900012;
0.15000013;0.15100013;0.15200013;0.15300013;0.15400013;0.15500014;0.15600014;0.15700014;0.15800014;0.15900014;
0.16000015;0.16100015;0.16200015;0.16300015;0.16400015;0.16500016;0.16600016;0.16700016;0.16800016;0.16900016;
0.17000017;0.17100017;0.17200017;0.17300017;0.17400017;0.17500018;0.17600018;0.17700018;0.17800018;0.17900018;
0.18000019;0.18100019;0.18200019;0.18300019;0.18400019;0.1850002;0.1860002;0.1870002;0.1880002;0.1890002;
0.19000021;0.19100021;0.19200021;0.19300021;0.19400021;0.19500022;0.19600022;0.19700022;0.19800022;0.19900022;
0.20000023;0.20100023;0.20200023;0.20300023;0.20400023;0.20500024;0.20600024;0.20700024;0.20800024;0.20900024;
0.21000025;0.21100025;0.21200025;0.21300025;0.21400025;0.21500026;0.21600026;0.21700026;0.21800026;0.21900027;
0.22000027;0.22100027;0.22200027;0.22300027;0.22400028;0.22500028;0.22600028;0.22700028;0.22800028;0.22900029;
0.23000029;0.23100029;0.23200029;0.23300029;0.2340003;0.2350003;0.2360003;0.2370003;0.2380003;0.23900031;
0.24000031;0.24100031;0.24200031;0.24300031;0.24400032;0.24500032;0.24600032;0.24700032;0.24800032;0.24900033;
0.25000033;0.25100031;0.2520003;0.25300029;0.25400028;0.25500026;0.25600025;0.25700024;0.25800022;0.25900021;
0.2600002;0.26100019;0.26200017;0.26300016;0.26400015;0.26500013;0.26600012;0.26700011;0.2680001;0.26900008;
0.27000007;0.27100006;0.27200004;0.27300003;0.27400002;0.27500001;0.27599999;0.27699998;0.27799997;0.27899995;
0.27999994;0.28099993;0.28199992;0.2829999;0.28399989;0.28499988;0.28599986;0.28699985;0.28799984;0.28899983;
0.28999981;0.2909998;0.29199979;0.29299977;0.29399976;0.29499975;0.29599974;0.29699972;0.29799971;0.2989997;
0.29999968;0.30099967;0.30199966;0.30299965;0.30399963;0.30499962;0.30599961;0.30699959;0.30799958;0.30899957;
0.30999956;0.31099954;0.31199953;0.31299952;0.3139995;0.31499949;0.31599948;0.31699947;0.31799945;0.31899944;
0.31999943;0.32099941;0.3219994;0.32299939;0.32399938;0.32499936;0.32599935;0.32699934;0.32799932;0.32899931;
0.3299993;0.33099928;0.33199927;0.33299926;0.33399925;0.33499923;0.33599922;0.33699921;0.33799919;0.33899918;
0.33999917;0.34099916;0.34199914;0.34299913;0.34399912;0.3449991;0.34599909;0.34699908;0.34799907;0.34899905;
0.34999904;0.35099903;0.35199901;0.352999;0.35399899;0.35499898;0.35599896;0.35699895;0.35799894;0.35899892;
0.35999891;0.3609989;0.36199889;0.36299887;0.36399886;0.36499885;0.36599883;0.36699882;0.36799881;0.3689988;
0.36999878;0.37099877;0.37199876;0.37299874;0.37399873;0.37499872;0.37599871;0.37699869;0.37799868;0.37899867;
0.37999865;0.38099864;0.38199863;0.38299862;0.3839986;0.38499859;0.38599858;0.38699856;0.38799855;0.38899854;
0.38999853;0.39099851;0.3919985;0.39299849;0.39399847;0.39499846;0.39599845;0.39699844;0.39799842;0.39899841;
0.3999984;0.40099838;0.40199837;0.40299836;0.40399835;0.40499833;0.40599832;0.40699831;0.40799829;0.40899828;
0.40999827;0.41099826;0.41199824;0.41299823;0.41399822;0.4149982;0.41599819;0.41699818;0.41799816;0.41899815;
0.41999814;0.42099813;0.42199811;0.4229981;0.42399809;0.42499807;0.42599806;0.42699805;0.42799804;0.42899802;
0.42999801;0.430998;0.43199798;0.43299797;0.43399796;0.43499795;0.43599793;0.43699792;0.43799791;0.43899789;
0.43999788;0.44099787;0.44199786;0.44299784;0.44399783;0.44499782;0.4459978;0.44699779;0.44799778;0.44899777;
0.44999775;0.45099774;0.45199773;0.45299771;0.4539977;0.45499769;0.45599768;0.45699766;0.45799765;0.45899764;
0.45999762;0.46099761;0.4619976;0.46299759;0.46399757;0.46499756;0.46599755;0.46699753;0.46799752;0.46899751;
0.4699975;0.47099748;0.47199747;0.47299746;0.47399744;0.47499743;0.47599742;0.47699741;0.47799739;0.47899738;
0.47999737;0.48099735;0.48199734;0.48299733;0.48399732;0.4849973;0.48599729;0.48699728;0.48799726;0.48899725;
0.48999724;0.49099723;0.49199721;0.4929972;0.49399719;0.49499717;0.49599716;0.49699715;0.49799713;0.49899712;
0.49999711;0.50099713;0.50199711;0.5029971;0.50399709;0.50499707;0.50599706;0.50699705;0.50799704;0.50899702;
0.50999701;0.510997;0.51199698;0.51299697;0.51399696;0.51499695;0.51599693;0.51699692;0.51799691;0.51899689;
0.51999688;0.52099687;0.52199686;0.52299684;0.52399683;0.52499682;0.5259968;0.52699679;0.52799678;0.52899677;
0.52999675;0.53099674;0.53199673;0.53299671;0.5339967;0.53499669;0.53599668;0.53699666;0.53799665;0.53899664;
0.53999662;0.54099661;0.5419966;0.54299659;0.54399657;0.54499656;0.54599655;0.54699653;0.54799652;0.54899651;
0.5499965;0.55099648;0.55199647;0.55299646;0.55399644;0.55499643;0.55599642;0.55699641;0.55799639;0.55899638;
0.55999637;0.56099635;0.56199634;0.56299633;0.56399632;0.5649963;0.56599629;0.56699628;0.56799626;0.56899625;
0.56999624;0.57099622;0.57199621;0.5729962;0.57399619;0.57499617;0.57599616;0.57699615;0.57799613;0.57899612;
0.57999611;0.5809961;0.58199608;0.58299607;0.58399606;0.58499604;0.58599603;0.58699602;0.58799601;0.58899599;
0.58999598;0.59099597;0.59199595;0.59299594;0.59399593;0.59499592;0.5959959;0.59699589;0.59799588;0.59899586;
0.59999585;0.60099584;0.60199583;0.60299581;0.6039958;0.60499579;0.60599577;0.60699576;0.60799575;0.60899574;
0.60999572;0.61099571;0.6119957;0.61299568;0.61399567;0.61499566;0.61599565;0.61699563;0.61799562;0.61899561;
0.61999559;0.62099558;0.62199557;0.62299556;0.62399554;0.62499553;0.62599552;0.6269955;0.62799549;0.62899548;
0.62999547;0.63099545;0.63199544;0.63299543;0.63399541;0.6349954;0.63599539;0.63699538;0.63799536;0.63899535;
0.63999534;0.64099532;0.64199531;0.6429953;0.64399529;0.64499527;0.64599526;0.64699525;0.64799523;0.64899522;
0.64999521;0.65099519;0.65199518;0.65299517;0.65399516;0.65499514;0.65599513;0.65699512;0.6579951;0.65899509;
0.65999508;0.66099507;0.66199505;0.66299504;0.66399503;0.66499501;0.665995;0.66699499;0.66799498;0.66899496;
0.66999495;0.67099494;0.67199492;0.67299491;0.6739949;0.67499489;0.67599487;0.67699486;0.67799485;0.67899483;
0.67999482;0.68099481;0.6819948;0.68299478;0.68399477;0.68499476;0.68599474;0.68699473;0.68799472;0.68899471;
0.68999469;0.69099468;0.69199467;0.69299465;0.69399464;0.69499463;0.69599462;0.6969946;0.69799459;0.69899458;
0.69999456;0.70099455;0.70199454;0.70299453;0.70399451;0.7049945;0.70599449;0.70699447;0.70799446;0.70899445;
0.70999444;0.71099442;0.71199441;0.7129944;0.71399438;0.71499437;0.71599436;0.71699435;0.71799433;0.71899432;
0.71999431;0.72099429;0.72199428;0.72299427;0.72399426;0.72499424;0.72599423;0.72699422;0.7279942;0.72899419;
0.72999418;0.73099416;0.73199415;0.73299414;0.73399413;0.73499411;0.7359941;0.73699409;0.73799407;0.73899406;
0.73999405;0.74099404;0.74199402;0.74299401;0.743994;0.74499398;0.74599397;0.74699396;0.74799395;0.74899393;
0.74999392;0.75099391;0.75199389;0.75299388;0.75399387;0.75499386;0.75599384;0.75699383;0.75799382;0.7589938;
0.75999379;0.76099378;0.76199377;0.76299375;0.76399374;0.76499373;0.76599371;0.7669937;0.76799369;0.76899368;
0.76999366;0.77099365;0.77199364;0.77299362;0.77399361;0.7749936;0.77599359;0.77699357;0.77799356;0.77899355;
0.77999353;0.78099352;0.78199351;0.7829935;0.78399348;0.78499347;0.78599346;0.78699344;0.78799343;0.78899342;
0.78999341;0.79099339;0.79199338;0.79299337;0.79399335;0.79499334;0.79599333;0.79699332;0.7979933;0.79899329;
0.79999328;0.80099326;0.80199325;0.80299324;0.80399323;0.80499321;0.8059932;0.80699319;0.80799317;0.80899316;
0.80999315;0.81099313;0.81199312;0.81299311;0.8139931;0.81499308;0.81599307;0.81699306;0.81799304;0.81899303;
0.81999302;0.82099301;0.82199299;0.82299298;0.82399297;0.82499295;0.82599294;0.82699293;0.82799292;0.8289929;
0.82999289;0.83099288;0.83199286;0.83299285;0.83399284;0.83499283;0.83599281;0.8369928;0.83799279;0.83899277;
0.83999276;0.84099275;0.84199274;0.84299272;0.84399271;0.8449927;0.84599268;0.84699267;0.84799266;0.84899265;
0.84999263;0.85099262;0.85199261;0.85299259;0.85399258;0.85499257;0.85599256;0.85699254;0.85799253;0.85899252;
0.8599925;0.86099249;0.86199248;0.86299247;0.86399245;0.86499244;0.86599243;0.86699241;0.8679924;0.86899239;
0.86999238;0.87099236;0.87199235;0.87299234;0.87399232;0.87499231;0.8759923;0.87699229;0.87799227;0.87899226;
0.87999225;0.88099223;0.88199222;0.88299221;0.8839922;0.88499218;0.88599217;0.88699216;0.88799214;0.88899213;
0.88999212;0.89099211;0.89199209;0.89299208;0.89399207;0.89499205;0.89599204;0.89699203;0.89799201;0.898992;
0.89999199;0.90099198;0.90199196;0.90299195;0.90399194;0.90499192;0.90599191;0.9069919;0.90799189;0.90899187;
0.90999186;0.91099185;0.91199183;0.91299182;0.91399181;0.9149918;0.91599178;0.91699177;0.91799176;0.91899174;
0.91999173;0.92099172;0.92199171;0.92299169;0.92399168;0.92499167;0.92599165;0.92699164;0.92799163;0.92899162;
0.9299916;0.93099159;0.93199158;0.93299156;0.93399155;0.93499154;0.93599153;0.93699151;0.9379915;0.93899149;
0.93999147;0.94099146;0.94199145;0.94299144;0.94399142;0.94499141;0.9459914;0.94699138;0.94799137;0.94899136;
0.94999135;0.95099133;0.95199132;0.95299131;0.95399129;0.95499128;0.95599127;0.95699126;0.95799124;0.95899123;
0.95999122;0.9609912;0.96199119;0.96299118;0.96399117;0.96499115;0.96599114;0.96699113;0.96799111;0.9689911;
0.96999109;0.97099108;0.97199106;0.97299105;0.97399104;0.97499102;0.97599101;0.976991;0.97799098;0.97899097;
0.97999096;0.98099095;0.98199093;0.98299092;0.98399091;0.98499089;0.98599088;0.98699087;0.98799086;0.98899084;
0.98999083;0.99099082;0.9919908;0.99299079;0.99399078;0.99499077;0.99599075;0.99699074;0.99799073;0.99899071;
0.9999907;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="PLOT_1": value=1: val_type_fixed=0: };
       UserDataItem @[1] {name="MIN": value=0: val_type_fixed=0: };
       UserDataItem @[2] {name="MAX": value=1: val_type_fixed=0: };
      };
      name="Act";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [1001] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
2.1091949e-14;9.7231366e-14;3.1900575e-13;9.2236039e-13;2.5086678e-12;6.5791227e-12;1.6804436e-11;4.1977574e-11;1.027313e-10;2.464926e-10;
5.8004779e-10;1.3389156e-09;3.0318548e-09;6.7352985e-09;1.4679788e-08;3.1391821e-08;6.5866999e-08;1.3561117e-07;2.7397971e-07;5.4320225e-07;
1.0569381e-06;2.0184088e-06;3.7832567e-06;6.9606594e-06;1.2571716e-05;2.2291209e-05;3.8806185e-05;6.6334091e-05;0.00011134794;0.00018356218;
0.00029722479;0.00047275942;0.00073876226;0.0011343204;0.0017115838;0.0025384037;0.0037008221;0.0053050369;0.0074785654;0.010370037;
0.014147356;0.018993666;0.025101388;0.032663811;0.04186495;0.052867845;0.06580288;0.080756247;0.09775991;0.11678491;
0.1377378;0.16046223;0.18474059;0.21030818;0.23686214;0.26407725;0.29162025;0.31916711;0.3464151;0.37309471;
0.39897692;0.42387915;0.44766545;0.47024569;0.49157065;0.51162785;0.53043461;0.54803044;0.56447208;0.57982713;
0.59416884;0.60757256;0.62011272;0.63186151;0.64288527;0.65324634;0.66300201;0.67220306;0.6808967;0.68912375;
0.6969226;0.70432615;0.71136504;0.71806616;0.72445405;0.73055094;0.73637688;0.74194974;0.74728656;0.75240141;
0.75730926;0.76202238;0.76655221;0.77090961;0.77510417;0.77914518;0.78304118;0.78680015;0.79042906;0.79393452;
0.79732281;0.80060005;0.80377162;0.80684239;0.80981761;0.81270117;0.81549793;0.81821114;0.82084513;0.82340288;
0.82588792;0.82830316;0.8306517;0.83293653;0.83515966;0.83732384;0.83943158;0.84148484;0.84348607;0.84543675;
0.84733909;0.84919482;0.85100555;0.85277319;0.85449892;0.85618436;0.85783106;0.85944027;0.86101323;0.8625508;
0.86405486;0.86552602;0.86696541;0.86837459;0.86975366;0.8711043;0.87242663;0.87372226;0.87499148;0.8762356;
0.87745506;0.87865037;0.87982255;0.88097233;0.88209999;0.88320649;0.88429242;0.88535804;0.88640428;0.88743174;
0.88844025;0.88943094;0.89040434;0.89136034;0.89230001;0.89322358;0.89413118;0.89502341;0.89590073;0.89676315;
0.89761192;0.89844656;0.89926767;0.90007544;0.90087014;0.90165305;0.90242285;0.90318102;0.90392733;0.90466219;
0.90538603;0.90609896;0.90680104;0.90749252;0.90817392;0.90884525;0.90950716;0.91015899;0.91080195;0.91143531;
0.91206002;0.91267574;0.91328317;0.91388214;0.91447264;0.91505522;0.91563004;0.91619676;0.91675621;0.91730815;
0.91785276;0.9183901;0.91892058;0.91944432;0.91996115;0.92047143;0.92097509;0.92147261;0.92196393;0.92244881;
0.92292792;0.92340106;0.92386866;0.92433017;0.92478621;0.92523706;0.92568237;0.92612237;0.92655718;0.92698693;
0.92741174;0.92783147;0.9282465;0.92865658;0.92906231;0.92946297;0.92985952;0.93025142;0.93063915;0.93102247;
0.93140161;0.93177652;0.93214732;0.93251437;0.93287736;0.93323618;0.93359137;0.93394279;0.93429053;0.93463475;
0.93497509;0.93531221;0.93564552;0.93597543;0.9363023;0.93662554;0.93694562;0.93726254;0.93757612;0.93788677;
0.93819457;0.93849891;0.93880028;0.93909883;0.93939441;0.93968731;0.93997705;0.94026434;0.94054866;0.94083053;
0.94110954;0.94138592;0.94165981;0.94193113;0.94220006;0.94246614;0.94273019;0.9429915;0.9432506;0.94350737;
0.94376165;0.94401389;0.94426382;0.94451147;0.94475681;0.94500011;0.94524121;0.94548029;0.94571751;0.94595236;
0.94618523;0.9464162;0.94664496;0.946872;0.94709712;0.9473201;0.94754148;0.947761;0.9479785;0.94819432;
0.94840837;0.94862056;0.94883096;0.94903982;0.949247;0.94945234;0.94965619;0.94985801;0.95005864;0.95025748;
0.95045477;0.95065039;0.95084482;0.95103747;0.95122886;0.95141834;0.95160675;0.95179343;0.95197868;0.95216268;
0.95234519;0.95252627;0.95270592;0.9528845;0.95306122;0.95323706;0.95341152;0.95358461;0.95375663;0.9539271;
0.9540962;0.95426434;0.95443112;0.9545967;0.95476127;0.95492452;0.95508647;0.9552474;0.95540726;0.95556587;
0.95572323;0.95587963;0.9560349;0.95618904;0.95634228;0.95649415;0.95664507;0.9567951;0.95694405;0.95709205;
0.95723873;0.95738459;0.95752972;0.95767349;0.95781636;0.95795834;0.95809948;0.95823926;0.95837867;0.95851672;
0.95865428;0.95879036;0.95892584;0.95906061;0.95919436;0.95932722;0.95945895;0.95959026;0.95972049;0.95985001;
0.95997852;0.96010637;0.96023333;0.96035951;0.9604848;0.96060944;0.96073341;0.96085614;0.96097851;0.9611001;
0.96122086;0.96134073;0.96145993;0.96157831;0.96169615;0.96181315;0.96192974;0.96204531;0.96216035;0.96227455;
0.96238804;0.96250105;0.96261311;0.96272469;0.96283555;0.96294588;0.96305525;0.96316439;0.96327251;0.96338028;
0.96348715;0.9635936;0.96369934;0.96380448;0.96390903;0.96401304;0.96411633;0.96421909;0.96432108;0.96442288;
0.96452373;0.9646244;0.96472418;0.96482354;0.96492237;0.96502072;0.96511817;0.96521515;0.96531188;0.96540785;
0.96550322;0.96559811;0.96569258;0.96578652;0.96587998;0.96597284;0.96606523;0.96615714;0.96624887;0.96633953;
0.96643019;0.96652013;0.96660942;0.96669841;0.96678692;0.96687514;0.9669627;0.96704954;0.96713638;0.96722269;
0.9673084;0.96739364;0.96747828;0.96756279;0.96764696;0.9677304;0.96781337;0.96789616;0.96797842;0.96806026;
0.96814173;0.9682228;0.96830332;0.96838361;0.96846348;0.96854264;0.96862185;0.96870029;0.96877855;0.96885651;
0.9689337;0.96901089;0.96908748;0.96916366;0.96923971;0.96931523;0.96939027;0.96946514;0.96953958;0.96961373;
0.96968734;0.96976072;0.96983379;0.96990615;0.96997863;0.97005057;0.97012216;0.97019351;0.97026449;0.97033501;
0.97040504;0.97047508;0.97054476;0.97061396;0.97068286;0.97075152;0.97081989;0.97088772;0.97095543;0.97102296;
0.97108984;0.97115666;0.97122306;0.97128916;0.9713549;0.97142053;0.97148573;0.97155076;0.97161525;0.97167969;
0.9717434;0.9718073;0.97187084;0.97193384;0.97199678;0.97205943;0.97212166;0.97218382;0.97224545;0.97230709;
0.97236818;0.97242934;0.97248995;0.97255045;0.97261041;0.97267032;0.97272992;0.97278929;0.97284853;0.9729073;
0.97296584;0.97302449;0.97308236;0.97314024;0.97319776;0.97325516;0.97331238;0.97336912;0.97342592;0.97348219;
0.9735384;0.97359449;0.9736498;0.97370547;0.97376066;0.97381556;0.97387052;0.97392493;0.97397923;0.97403312;
0.974087;0.97414064;0.97419417;0.97424734;0.97430032;0.97435302;0.97440559;0.9744581;0.97450978;0.97456175;
0.97461355;0.97466505;0.97471607;0.97476715;0.97481805;0.97486866;0.97491908;0.97496939;0.97501945;0.97506922;
0.9751187;0.97516835;0.97521752;0.97526646;0.97531551;0.97536415;0.97541249;0.97546077;0.97550905;0.97555697;
0.97560453;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="PLOT_2": value=1: val_type_fixed=0: };
      };
      name="Linear";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [1001] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.039885044;0.079884529;0.11988401;0.1598835;0.19988298;0.23988247;0.27988195;0.31988144;0.35988092;
0.39988041;0.43987989;0.47987938;0.51987886;0.55987835;0.59987783;0.63987732;0.6798768;0.71987629;0.75987577;
0.79987526;0.83987474;0.87987423;0.91987371;0.9598732;0.99987268;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1001] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[3] {
    name="LeabraUnitSpec_0_ActFmVmFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Vm";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [351] 0.44999999;0.45099998;0.45199996;0.45299995;0.45399994;0.45499992;0.45599991;0.4569999;0.45799989;0.45899987;
0.45999986;0.46099985;0.46199983;0.46299982;0.46399981;0.46499979;0.46599978;0.46699977;0.46799976;0.46899974;
0.46999973;0.47099972;0.4719997;0.47299969;0.47399968;0.47499967;0.47599965;0.47699964;0.47799963;0.47899961;
0.4799996;0.48099959;0.48199958;0.48299956;0.48399955;0.48499954;0.48599952;0.48699951;0.4879995;0.48899949;
0.48999947;0.49099946;0.49199945;0.49299943;0.49399942;0.49499941;0.4959994;0.49699938;0.49799937;0.49899936;
0.49999934;0.50099933;0.50199932;0.50299931;0.50399929;0.50499928;0.50599927;0.50699925;0.50799924;0.50899923;
0.50999922;0.5109992;0.51199919;0.51299918;0.51399916;0.51499915;0.51599914;0.51699913;0.51799911;0.5189991;
0.51999909;0.52099907;0.52199906;0.52299905;0.52399904;0.52499902;0.52599901;0.526999;0.52799898;0.52899897;
0.52999896;0.53099895;0.53199893;0.53299892;0.53399891;0.53499889;0.53599888;0.53699887;0.53799886;0.53899884;
0.53999883;0.54099882;0.5419988;0.54299879;0.54399878;0.54499876;0.54599875;0.54699874;0.54799873;0.54899871;
0.5499987;0.55099869;0.55199867;0.55299866;0.55399865;0.55499864;0.55599862;0.55699861;0.5579986;0.55899858;
0.55999857;0.56099856;0.56199855;0.56299853;0.56399852;0.56499851;0.56599849;0.56699848;0.56799847;0.56899846;
0.56999844;0.57099843;0.57199842;0.5729984;0.57399839;0.57499838;0.57599837;0.57699835;0.57799834;0.57899833;
0.57999831;0.5809983;0.58199829;0.58299828;0.58399826;0.58499825;0.58599824;0.58699822;0.58799821;0.5889982;
0.58999819;0.59099817;0.59199816;0.59299815;0.59399813;0.59499812;0.59599811;0.5969981;0.59799808;0.59899807;
0.59999806;0.60099804;0.60199803;0.60299802;0.60399801;0.60499799;0.60599798;0.60699797;0.60799795;0.60899794;
0.60999793;0.61099792;0.6119979;0.61299789;0.61399788;0.61499786;0.61599785;0.61699784;0.61799783;0.61899781;
0.6199978;0.62099779;0.62199777;0.62299776;0.62399775;0.62499774;0.62599772;0.62699771;0.6279977;0.62899768;
0.62999767;0.63099766;0.63199764;0.63299763;0.63399762;0.63499761;0.63599759;0.63699758;0.63799757;0.63899755;
0.63999754;0.64099753;0.64199752;0.6429975;0.64399749;0.64499748;0.64599746;0.64699745;0.64799744;0.64899743;
0.64999741;0.6509974;0.65199739;0.65299737;0.65399736;0.65499735;0.65599734;0.65699732;0.65799731;0.6589973;
0.65999728;0.66099727;0.66199726;0.66299725;0.66399723;0.66499722;0.66599721;0.66699719;0.66799718;0.66899717;
0.66999716;0.67099714;0.67199713;0.67299712;0.6739971;0.67499709;0.67599708;0.67699707;0.67799705;0.67899704;
0.67999703;0.68099701;0.681997;0.68299699;0.68399698;0.68499696;0.68599695;0.68699694;0.68799692;0.68899691;
0.6899969;0.69099689;0.69199687;0.69299686;0.69399685;0.69499683;0.69599682;0.69699681;0.6979968;0.69899678;
0.69999677;0.70099676;0.70199674;0.70299673;0.70399672;0.70499671;0.70599669;0.70699668;0.70799667;0.70899665;
0.70999664;0.71099663;0.71199661;0.7129966;0.71399659;0.71499658;0.71599656;0.71699655;0.71799654;0.71899652;
0.71999651;0.7209965;0.72199649;0.72299647;0.72399646;0.72499645;0.72599643;0.72699642;0.72799641;0.7289964;
0.72999638;0.73099637;0.73199636;0.73299634;0.73399633;0.73499632;0.73599631;0.73699629;0.73799628;0.73899627;
0.73999625;0.74099624;0.74199623;0.74299622;0.7439962;0.74499619;0.74599618;0.74699616;0.74799615;0.74899614;
0.74999613;0.75099611;0.7519961;0.75299609;0.75399607;0.75499606;0.75599605;0.75699604;0.75799602;0.75899601;
0.759996;0.76099598;0.76199597;0.76299596;0.76399595;0.76499593;0.76599592;0.76699591;0.76799589;0.76899588;
0.76999587;0.77099586;0.77199584;0.77299583;0.77399582;0.7749958;0.77599579;0.77699578;0.77799577;0.77899575;
0.77999574;0.78099573;0.78199571;0.7829957;0.78399569;0.78499568;0.78599566;0.78699565;0.78799564;0.78899562;
0.78999561;0.7909956;0.79199558;0.79299557;0.79399556;0.79499555;0.79599553;0.79699552;0.79799551;0.79899549;
0.79999548;      };
     };
     float_Data @[1] {
      name="Act";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [351] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1.1185803e-17;1.1981122e-16;1.1858342e-15;1.0846325e-14;9.169175e-14;7.1649777e-13;5.1759816e-12;3.4572067e-11;2.1354517e-10;
1.2200194e-09;6.4482766e-09;3.1537056e-08;1.4276398e-07;5.9836435e-07;2.3227876e-06;8.3544328e-06;2.7853919e-05;8.6127024e-05;0.00024713378;
0.0006585113;0.0016307237;0.0037565366;0.0080586178;0.016119696;0.030111702;0.052622586;0.086215615;0.13275756;0.19269222;
0.26453596;0.34485206;0.42879832;0.51109952;0.58711535;0.65363944;0.70921481;0.7539587;0.78907698;0.81629598;
0.83740175;0.85395509;0.86718416;0.87798977;0.88700569;0.89467031;0.90128827;0.90707505;0.91218787;0.91674423;
0.92083395;0.92452818;0.92788357;0.93094546;0.93375206;0.93633503;0.93872035;0.94093013;0.94298363;0.94489688;
0.94668436;0.94835782;0.94992822;0.95140493;0.95279598;0.95410901;0.95535028;0.9565255;0.95763993;0.95869809;
0.95970434;0.96066254;0.96157587;0.96244729;0.96327984;0.96407598;0.96483845;0.96556884;0.96626949;0.96694189;
0.96758783;0.96820909;0.9688068;0.96938235;0.96993673;0.97047174;0.97098774;0.97148591;0.97196728;0.97243267;
0.97288269;0.97331822;0.97374004;0.97414845;0.97454447;0.97492856;0.97530103;0.97566283;0.97601402;0.97635514;
0.9766866;0.977009;0.97732252;0.97762775;0.9779247;0.97821385;0.97849548;0.97877014;0.97903776;0.97929853;
0.97955292;0.97980124;0.98004353;0.98028004;0.98051107;0.98073685;0.98095727;0.98117286;0.98138338;0.98158914;
0.98179084;0.98198789;0.98218071;0.98236936;0.98255432;0.98273522;0.98291242;0.98308611;0.98325622;0.98342276;
0.98358649;0.98374665;0.98390383;0.9840579;0.9842093;0.9843576;0.98450309;0.98464596;0.98478633;0.9849242;
0.98505932;0.9851923;0.98532283;0.9854511;0.98557711;0.98570096;0.9858228;0.98594236;0.98606014;0.98617566;
0.9862895;0.98640156;0.98651177;0.98662001;0.98672676;0.98683167;0.98693502;0.98703671;0.98713678;0.98723537;
0.98733234;0.98742795;0.98752224;0.98761511;0.98770642;0.98779655;0.9878853;0.98797268;0.98805898;0.98814404;
0.98822778;0.98831046;0.98839188;0.98847228;0.98855132;0.98862976;0.98870665;0.98878282;0.98885781;0.98893201;
0.98900473;0.98907691;0.98914808;0.98921818;0.98928761;0.98935604;0.98942375;0.98949045;0.98955625;0.9896214;
0.98968571;0.98974901;0.98981172;0.98987383;0.98993486;0.9899953;0.99005502;0.99011403;0.99017251;0.99023008;
0.99028695;0.99034339;0.990399;0.9904539;0.9905082;0.9905622;0.99061531;0.99066776;0.99071991;0.99077123;
0.99082208;0.99087238;0.99092221;0.99097133;0.99102002;0.99106824;0.99111569;0.9911629;0.99120951;0.99125558;
0.9913013;0.99134642;0.9913913;0.99143541;0.99147928;0.99152261;0.99156553;0.99160796;0.99164993;0.99169165;
0.99173301;0.99177617;0.99181658;0.99185658;0.99189615;0.99193537;0.99197417;0.99201268;0.99205077;0.9920885;
0.99212587;0.99216288;0.99219954;0.9922359;0.9922719;0.99230754;0.99234289;0.99237794;0.99241263;0.99244702;
0.99248111;0.99251485;0.99254835;0.99258149;0.99261439;0.99264693;0.99267924;0.99271125;0.99274302;0.99277443;
0.99280566;0.99283653;0.99286723;0.99289763;0.99292773;0.99295765;0.99298728;0.99301666;0.99304581;0.99307466;
0.99310333;0.99313176;0.99315995;0.9931879;0.99321562;0.99324316;0.9932704;0.99329746;0.99332434;0.99335098;
0.99337739;0.99340361;0.9934296;0.99345541;0.99348098;0.99350637;0.99353158;0.99355662;0.99358141;0.99360603;
0.99363047;0.99365473;0.99367881;0.99370265;0.99372637;0.99374992;0.99377328;0.99379641;0.99381942;0.99384224;
0.99386495;0.99388742;0.99390978;0.99393195;0.99395394;0.99397582;0.99399751;0.99401903;0.99404043;0.99406165;
0.99408275;0.99410367;0.99412447;0.9941451;0.9941656;0.99418598;0.99420619;0.99422622;0.99424618;0.99426597;
0.99428564;0.99430513;0.99432456;0.99434382;0.99436295;0.99438196;0.9944008;0.99441957;0.99443817;0.99445671;
0.99447507;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [351] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[4] {
    name="LeabraUnitSpec_0_VmFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Net";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [101] 0;0.0099999998;0.02;0.029999999;0.039999999;0.049999997;0.059999995;0.069999993;0.079999991;0.089999989;
0.099999987;0.10999998;0.11999998;0.12999998;0.13999999;0.14999999;0.16;0.17;0.18000001;0.19000001;
0.20000002;0.21000002;0.22000003;0.23000003;0.24000004;0.25000003;0.26000002;0.27000001;0.28;0.28999999;
0.29999998;0.30999997;0.31999996;0.32999995;0.33999994;0.34999993;0.35999992;0.36999992;0.37999991;0.3899999;
0.39999989;0.40999988;0.41999987;0.42999986;0.43999985;0.44999984;0.45999983;0.46999982;0.47999981;0.4899998;
0.49999979;0.50999981;0.5199998;0.52999979;0.53999978;0.54999977;0.55999976;0.56999975;0.57999974;0.58999974;
0.59999973;0.60999972;0.61999971;0.6299997;0.63999969;0.64999968;0.65999967;0.66999966;0.67999965;0.68999964;
0.69999963;0.70999962;0.71999961;0.7299996;0.73999959;0.74999958;0.75999957;0.76999956;0.77999955;0.78999954;
0.79999954;0.80999953;0.81999952;0.82999951;0.8399995;0.84999949;0.85999948;0.86999947;0.87999946;0.88999945;
0.89999944;0.90999943;0.91999942;0.92999941;0.9399994;0.94999939;0.95999938;0.96999937;0.97999936;0.98999935;
0.99999934;      };
     };
     float_Data @[1] {
      name="Vm";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [101] 0.26875001;0.27777779;0.28658536;0.29518074;0.3035714;0.31176469;0.31976745;0.3275862;0.33522725;0.34269664;
0.34999999;0.35714284;0.36413041;0.37096775;0.37765956;0.3842105;0.390625;0.39690724;0.40306124;0.40909091;
0.41500002;0.42079213;0.42647064;0.43203887;0.43750006;0.44285721;0.44811326;0.45327106;0.45833337;0.46330279;
0.46818185;0.47297299;0.4776786;0.48230091;0.48684213;0.49130437;0.49568966;0.5;0.50423729;0.50840336;
0.51249999;0.5165289;0.52049178;0.52439022;0.52822578;0.53200001;0.53571427;0.53937006;0.54296869;0.54651159;
0.54999995;0.55343509;0.55681813;0.56015033;0.56343281;0.5666666;0.56985289;0.57299262;0.57608688;0.57913661;
0.58214283;0.58510631;0.58802813;0.590909;0.59374994;0.59655166;0.59931499;0.60204077;0.60472965;0.60738248;
0.60999995;0.61258268;0.6151315;0.61764699;0.62012982;0.62258059;0.62499994;0.62738848;0.62974674;0.63207537;
0.63437492;0.63664585;0.63888884;0.64110422;0.64329261;0.64545447;0.64759028;0.64970052;0.65178561;0.65384609;
0.65588224;0.65789467;0.65988362;0.66184962;0.66379303;0.6657142;0.66761357;0.66949141;0.67134821;0.67318428;
0.67499989;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [101] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[5] {
    name="MultiHiddenNet_LayerAvgAct";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="layer";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] "Input";"Hidden_0";"Hidden_1";"Output";      };
     };
     String_Data @[1] {
      name="layer_spec";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] "Output";"HiddenLayer";"HiddenLayer";"Output";      };
     };
     float_Data @[2] {
      name="acts_m_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.22800073;0.45862409;0.35047916;0.23622857;      };
     };
     float_Data @[3] {
      name="acts_p_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.22800073;0.45864567;0.35035107;0.22800073;      };
     };
     float_Data @[4] {
      name="avg_act_init";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [4] 0.30000001;0.40000001;0.40000001;0.30000001;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [4] 0;1;2;3;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[6] {
    name="LeabraConSpec_0_SlowWtsFun";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_269";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [6000] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
2980;2981;2982;2983;2984;2985;2986;2987;2988;2989;
2990;2991;2992;2993;2994;2995;2996;2997;2998;2999;
3000;3001;3002;3003;3004;3005;3006;3007;3008;3009;
3010;3011;3012;3013;3014;3015;3016;3017;3018;3019;
3020;3021;3022;3023;3024;3025;3026;3027;3028;3029;
3030;3031;3032;3033;3034;3035;3036;3037;3038;3039;
3040;3041;3042;3043;3044;3045;3046;3047;3048;3049;
3050;3051;3052;3053;3054;3055;3056;3057;3058;3059;
3060;3061;3062;3063;3064;3065;3066;3067;3068;3069;
3070;3071;3072;3073;3074;3075;3076;3077;3078;3079;
3080;3081;3082;3083;3084;3085;3086;3087;3088;3089;
3090;3091;3092;3093;3094;3095;3096;3097;3098;3099;
3100;3101;3102;3103;3104;3105;3106;3107;3108;3109;
3110;3111;3112;3113;3114;3115;3116;3117;3118;3119;
3120;3121;3122;3123;3124;3125;3126;3127;3128;3129;
3130;3131;3132;3133;3134;3135;3136;3137;3138;3139;
3140;3141;3142;3143;3144;3145;3146;3147;3148;3149;
3150;3151;3152;3153;3154;3155;3156;3157;3158;3159;
3160;3161;3162;3163;3164;3165;3166;3167;3168;3169;
3170;3171;3172;3173;3174;3175;3176;3177;3178;3179;
3180;3181;3182;3183;3184;3185;3186;3187;3188;3189;
3190;3191;3192;3193;3194;3195;3196;3197;3198;3199;
3200;3201;3202;3203;3204;3205;3206;3207;3208;3209;
3210;3211;3212;3213;3214;3215;3216;3217;3218;3219;
3220;3221;3222;3223;3224;3225;3226;3227;3228;3229;
3230;3231;3232;3233;3234;3235;3236;3237;3238;3239;
3240;3241;3242;3243;3244;3245;3246;3247;3248;3249;
3250;3251;3252;3253;3254;3255;3256;3257;3258;3259;
3260;3261;3262;3263;3264;3265;3266;3267;3268;3269;
3270;3271;3272;3273;3274;3275;3276;3277;3278;3279;
3280;3281;3282;3283;3284;3285;3286;3287;3288;3289;
3290;3291;3292;3293;3294;3295;3296;3297;3298;3299;
3300;3301;3302;3303;3304;3305;3306;3307;3308;3309;
3310;3311;3312;3313;3314;3315;3316;3317;3318;3319;
3320;3321;3322;3323;3324;3325;3326;3327;3328;3329;
3330;3331;3332;3333;3334;3335;3336;3337;3338;3339;
3340;3341;3342;3343;3344;3345;3346;3347;3348;3349;
3350;3351;3352;3353;3354;3355;3356;3357;3358;3359;
3360;3361;3362;3363;3364;3365;3366;3367;3368;3369;
3370;3371;3372;3373;3374;3375;3376;3377;3378;3379;
3380;3381;3382;3383;3384;3385;3386;3387;3388;3389;
3390;3391;3392;3393;3394;3395;3396;3397;3398;3399;
3400;3401;3402;3403;3404;3405;3406;3407;3408;3409;
3410;3411;3412;3413;3414;3415;3416;3417;3418;3419;
3420;3421;3422;3423;3424;3425;3426;3427;3428;3429;
3430;3431;3432;3433;3434;3435;3436;3437;3438;3439;
3440;3441;3442;3443;3444;3445;3446;3447;3448;3449;
3450;3451;3452;3453;3454;3455;3456;3457;3458;3459;
3460;3461;3462;3463;3464;3465;3466;3467;3468;3469;
3470;3471;3472;3473;3474;3475;3476;3477;3478;3479;
3480;3481;3482;3483;3484;3485;3486;3487;3488;3489;
3490;3491;3492;3493;3494;3495;3496;3497;3498;3499;
3500;3501;3502;3503;3504;3505;3506;3507;3508;3509;
3510;3511;3512;3513;3514;3515;3516;3517;3518;3519;
3520;3521;3522;3523;3524;3525;3526;3527;3528;3529;
3530;3531;3532;3533;3534;3535;3536;3537;3538;3539;
3540;3541;3542;3543;3544;3545;3546;3547;3548;3549;
3550;3551;3552;3553;3554;3555;3556;3557;3558;3559;
3560;3561;3562;3563;3564;3565;3566;3567;3568;3569;
3570;3571;3572;3573;3574;3575;3576;3577;3578;3579;
3580;3581;3582;3583;3584;3585;3586;3587;3588;3589;
3590;3591;3592;3593;3594;3595;3596;3597;3598;3599;
3600;3601;3602;3603;3604;3605;3606;3607;3608;3609;
3610;3611;3612;3613;3614;3615;3616;3617;3618;3619;
3620;3621;3622;3623;3624;3625;3626;3627;3628;3629;
3630;3631;3632;3633;3634;3635;3636;3637;3638;3639;
3640;3641;3642;3643;3644;3645;3646;3647;3648;3649;
3650;3651;3652;3653;3654;3655;3656;3657;3658;3659;
3660;3661;3662;3663;3664;3665;3666;3667;3668;3669;
3670;3671;3672;3673;3674;3675;3676;3677;3678;3679;
3680;3681;3682;3683;3684;3685;3686;3687;3688;3689;
3690;3691;3692;3693;3694;3695;3696;3697;3698;3699;
3700;3701;3702;3703;3704;3705;3706;3707;3708;3709;
3710;3711;3712;3713;3714;3715;3716;3717;3718;3719;
3720;3721;3722;3723;3724;3725;3726;3727;3728;3729;
3730;3731;3732;3733;3734;3735;3736;3737;3738;3739;
3740;3741;3742;3743;3744;3745;3746;3747;3748;3749;
3750;3751;3752;3753;3754;3755;3756;3757;3758;3759;
3760;3761;3762;3763;3764;3765;3766;3767;3768;3769;
3770;3771;3772;3773;3774;3775;3776;3777;3778;3779;
3780;3781;3782;3783;3784;3785;3786;3787;3788;3789;
3790;3791;3792;3793;3794;3795;3796;3797;3798;3799;
3800;3801;3802;3803;3804;3805;3806;3807;3808;3809;
3810;3811;3812;3813;3814;3815;3816;3817;3818;3819;
3820;3821;3822;3823;3824;3825;3826;3827;3828;3829;
3830;3831;3832;3833;3834;3835;3836;3837;3838;3839;
3840;3841;3842;3843;3844;3845;3846;3847;3848;3849;
3850;3851;3852;3853;3854;3855;3856;3857;3858;3859;
3860;3861;3862;3863;3864;3865;3866;3867;3868;3869;
3870;3871;3872;3873;3874;3875;3876;3877;3878;3879;
3880;3881;3882;3883;3884;3885;3886;3887;3888;3889;
3890;3891;3892;3893;3894;3895;3896;3897;3898;3899;
3900;3901;3902;3903;3904;3905;3906;3907;3908;3909;
3910;3911;3912;3913;3914;3915;3916;3917;3918;3919;
3920;3921;3922;3923;3924;3925;3926;3927;3928;3929;
3930;3931;3932;3933;3934;3935;3936;3937;3938;3939;
3940;3941;3942;3943;3944;3945;3946;3947;3948;3949;
3950;3951;3952;3953;3954;3955;3956;3957;3958;3959;
3960;3961;3962;3963;3964;3965;3966;3967;3968;3969;
3970;3971;3972;3973;3974;3975;3976;3977;3978;3979;
3980;3981;3982;3983;3984;3985;3986;3987;3988;3989;
3990;3991;3992;3993;3994;3995;3996;3997;3998;3999;
4000;4001;4002;4003;4004;4005;4006;4007;4008;4009;
4010;4011;4012;4013;4014;4015;4016;4017;4018;4019;
4020;4021;4022;4023;4024;4025;4026;4027;4028;4029;
4030;4031;4032;4033;4034;4035;4036;4037;4038;4039;
4040;4041;4042;4043;4044;4045;4046;4047;4048;4049;
4050;4051;4052;4053;4054;4055;4056;4057;4058;4059;
4060;4061;4062;4063;4064;4065;4066;4067;4068;4069;
4070;4071;4072;4073;4074;4075;4076;4077;4078;4079;
4080;4081;4082;4083;4084;4085;4086;4087;4088;4089;
4090;4091;4092;4093;4094;4095;4096;4097;4098;4099;
4100;4101;4102;4103;4104;4105;4106;4107;4108;4109;
4110;4111;4112;4113;4114;4115;4116;4117;4118;4119;
4120;4121;4122;4123;4124;4125;4126;4127;4128;4129;
4130;4131;4132;4133;4134;4135;4136;4137;4138;4139;
4140;4141;4142;4143;4144;4145;4146;4147;4148;4149;
4150;4151;4152;4153;4154;4155;4156;4157;4158;4159;
4160;4161;4162;4163;4164;4165;4166;4167;4168;4169;
4170;4171;4172;4173;4174;4175;4176;4177;4178;4179;
4180;4181;4182;4183;4184;4185;4186;4187;4188;4189;
4190;4191;4192;4193;4194;4195;4196;4197;4198;4199;
4200;4201;4202;4203;4204;4205;4206;4207;4208;4209;
4210;4211;4212;4213;4214;4215;4216;4217;4218;4219;
4220;4221;4222;4223;4224;4225;4226;4227;4228;4229;
4230;4231;4232;4233;4234;4235;4236;4237;4238;4239;
4240;4241;4242;4243;4244;4245;4246;4247;4248;4249;
4250;4251;4252;4253;4254;4255;4256;4257;4258;4259;
4260;4261;4262;4263;4264;4265;4266;4267;4268;4269;
4270;4271;4272;4273;4274;4275;4276;4277;4278;4279;
4280;4281;4282;4283;4284;4285;4286;4287;4288;4289;
4290;4291;4292;4293;4294;4295;4296;4297;4298;4299;
4300;4301;4302;4303;4304;4305;4306;4307;4308;4309;
4310;4311;4312;4313;4314;4315;4316;4317;4318;4319;
4320;4321;4322;4323;4324;4325;4326;4327;4328;4329;
4330;4331;4332;4333;4334;4335;4336;4337;4338;4339;
4340;4341;4342;4343;4344;4345;4346;4347;4348;4349;
4350;4351;4352;4353;4354;4355;4356;4357;4358;4359;
4360;4361;4362;4363;4364;4365;4366;4367;4368;4369;
4370;4371;4372;4373;4374;4375;4376;4377;4378;4379;
4380;4381;4382;4383;4384;4385;4386;4387;4388;4389;
4390;4391;4392;4393;4394;4395;4396;4397;4398;4399;
4400;4401;4402;4403;4404;4405;4406;4407;4408;4409;
4410;4411;4412;4413;4414;4415;4416;4417;4418;4419;
4420;4421;4422;4423;4424;4425;4426;4427;4428;4429;
4430;4431;4432;4433;4434;4435;4436;4437;4438;4439;
4440;4441;4442;4443;4444;4445;4446;4447;4448;4449;
4450;4451;4452;4453;4454;4455;4456;4457;4458;4459;
4460;4461;4462;4463;4464;4465;4466;4467;4468;4469;
4470;4471;4472;4473;4474;4475;4476;4477;4478;4479;
4480;4481;4482;4483;4484;4485;4486;4487;4488;4489;
4490;4491;4492;4493;4494;4495;4496;4497;4498;4499;
4500;4501;4502;4503;4504;4505;4506;4507;4508;4509;
4510;4511;4512;4513;4514;4515;4516;4517;4518;4519;
4520;4521;4522;4523;4524;4525;4526;4527;4528;4529;
4530;4531;4532;4533;4534;4535;4536;4537;4538;4539;
4540;4541;4542;4543;4544;4545;4546;4547;4548;4549;
4550;4551;4552;4553;4554;4555;4556;4557;4558;4559;
4560;4561;4562;4563;4564;4565;4566;4567;4568;4569;
4570;4571;4572;4573;4574;4575;4576;4577;4578;4579;
4580;4581;4582;4583;4584;4585;4586;4587;4588;4589;
4590;4591;4592;4593;4594;4595;4596;4597;4598;4599;
4600;4601;4602;4603;4604;4605;4606;4607;4608;4609;
4610;4611;4612;4613;4614;4615;4616;4617;4618;4619;
4620;4621;4622;4623;4624;4625;4626;4627;4628;4629;
4630;4631;4632;4633;4634;4635;4636;4637;4638;4639;
4640;4641;4642;4643;4644;4645;4646;4647;4648;4649;
4650;4651;4652;4653;4654;4655;4656;4657;4658;4659;
4660;4661;4662;4663;4664;4665;4666;4667;4668;4669;
4670;4671;4672;4673;4674;4675;4676;4677;4678;4679;
4680;4681;4682;4683;4684;4685;4686;4687;4688;4689;
4690;4691;4692;4693;4694;4695;4696;4697;4698;4699;
4700;4701;4702;4703;4704;4705;4706;4707;4708;4709;
4710;4711;4712;4713;4714;4715;4716;4717;4718;4719;
4720;4721;4722;4723;4724;4725;4726;4727;4728;4729;
4730;4731;4732;4733;4734;4735;4736;4737;4738;4739;
4740;4741;4742;4743;4744;4745;4746;4747;4748;4749;
4750;4751;4752;4753;4754;4755;4756;4757;4758;4759;
4760;4761;4762;4763;4764;4765;4766;4767;4768;4769;
4770;4771;4772;4773;4774;4775;4776;4777;4778;4779;
4780;4781;4782;4783;4784;4785;4786;4787;4788;4789;
4790;4791;4792;4793;4794;4795;4796;4797;4798;4799;
4800;4801;4802;4803;4804;4805;4806;4807;4808;4809;
4810;4811;4812;4813;4814;4815;4816;4817;4818;4819;
4820;4821;4822;4823;4824;4825;4826;4827;4828;4829;
4830;4831;4832;4833;4834;4835;4836;4837;4838;4839;
4840;4841;4842;4843;4844;4845;4846;4847;4848;4849;
4850;4851;4852;4853;4854;4855;4856;4857;4858;4859;
4860;4861;4862;4863;4864;4865;4866;4867;4868;4869;
4870;4871;4872;4873;4874;4875;4876;4877;4878;4879;
4880;4881;4882;4883;4884;4885;4886;4887;4888;4889;
4890;4891;4892;4893;4894;4895;4896;4897;4898;4899;
4900;4901;4902;4903;4904;4905;4906;4907;4908;4909;
4910;4911;4912;4913;4914;4915;4916;4917;4918;4919;
4920;4921;4922;4923;4924;4925;4926;4927;4928;4929;
4930;4931;4932;4933;4934;4935;4936;4937;4938;4939;
4940;4941;4942;4943;4944;4945;4946;4947;4948;4949;
4950;4951;4952;4953;4954;4955;4956;4957;4958;4959;
4960;4961;4962;4963;4964;4965;4966;4967;4968;4969;
4970;4971;4972;4973;4974;4975;4976;4977;4978;4979;
4980;4981;4982;4983;4984;4985;4986;4987;4988;4989;
4990;4991;4992;4993;4994;4995;4996;4997;4998;4999;
5000;5001;5002;5003;5004;5005;5006;5007;5008;5009;
5010;5011;5012;5013;5014;5015;5016;5017;5018;5019;
5020;5021;5022;5023;5024;5025;5026;5027;5028;5029;
5030;5031;5032;5033;5034;5035;5036;5037;5038;5039;
5040;5041;5042;5043;5044;5045;5046;5047;5048;5049;
5050;5051;5052;5053;5054;5055;5056;5057;5058;5059;
5060;5061;5062;5063;5064;5065;5066;5067;5068;5069;
5070;5071;5072;5073;5074;5075;5076;5077;5078;5079;
5080;5081;5082;5083;5084;5085;5086;5087;5088;5089;
5090;5091;5092;5093;5094;5095;5096;5097;5098;5099;
5100;5101;5102;5103;5104;5105;5106;5107;5108;5109;
5110;5111;5112;5113;5114;5115;5116;5117;5118;5119;
5120;5121;5122;5123;5124;5125;5126;5127;5128;5129;
5130;5131;5132;5133;5134;5135;5136;5137;5138;5139;
5140;5141;5142;5143;5144;5145;5146;5147;5148;5149;
5150;5151;5152;5153;5154;5155;5156;5157;5158;5159;
5160;5161;5162;5163;5164;5165;5166;5167;5168;5169;
5170;5171;5172;5173;5174;5175;5176;5177;5178;5179;
5180;5181;5182;5183;5184;5185;5186;5187;5188;5189;
5190;5191;5192;5193;5194;5195;5196;5197;5198;5199;
5200;5201;5202;5203;5204;5205;5206;5207;5208;5209;
5210;5211;5212;5213;5214;5215;5216;5217;5218;5219;
5220;5221;5222;5223;5224;5225;5226;5227;5228;5229;
5230;5231;5232;5233;5234;5235;5236;5237;5238;5239;
5240;5241;5242;5243;5244;5245;5246;5247;5248;5249;
5250;5251;5252;5253;5254;5255;5256;5257;5258;5259;
5260;5261;5262;5263;5264;5265;5266;5267;5268;5269;
5270;5271;5272;5273;5274;5275;5276;5277;5278;5279;
5280;5281;5282;5283;5284;5285;5286;5287;5288;5289;
5290;5291;5292;5293;5294;5295;5296;5297;5298;5299;
5300;5301;5302;5303;5304;5305;5306;5307;5308;5309;
5310;5311;5312;5313;5314;5315;5316;5317;5318;5319;
5320;5321;5322;5323;5324;5325;5326;5327;5328;5329;
5330;5331;5332;5333;5334;5335;5336;5337;5338;5339;
5340;5341;5342;5343;5344;5345;5346;5347;5348;5349;
5350;5351;5352;5353;5354;5355;5356;5357;5358;5359;
5360;5361;5362;5363;5364;5365;5366;5367;5368;5369;
5370;5371;5372;5373;5374;5375;5376;5377;5378;5379;
5380;5381;5382;5383;5384;5385;5386;5387;5388;5389;
5390;5391;5392;5393;5394;5395;5396;5397;5398;5399;
5400;5401;5402;5403;5404;5405;5406;5407;5408;5409;
5410;5411;5412;5413;5414;5415;5416;5417;5418;5419;
5420;5421;5422;5423;5424;5425;5426;5427;5428;5429;
5430;5431;5432;5433;5434;5435;5436;5437;5438;5439;
5440;5441;5442;5443;5444;5445;5446;5447;5448;5449;
5450;5451;5452;5453;5454;5455;5456;5457;5458;5459;
5460;5461;5462;5463;5464;5465;5466;5467;5468;5469;
5470;5471;5472;5473;5474;5475;5476;5477;5478;5479;
5480;5481;5482;5483;5484;5485;5486;5487;5488;5489;
5490;5491;5492;5493;5494;5495;5496;5497;5498;5499;
5500;5501;5502;5503;5504;5505;5506;5507;5508;5509;
5510;5511;5512;5513;5514;5515;5516;5517;5518;5519;
5520;5521;5522;5523;5524;5525;5526;5527;5528;5529;
5530;5531;5532;5533;5534;5535;5536;5537;5538;5539;
5540;5541;5542;5543;5544;5545;5546;5547;5548;5549;
5550;5551;5552;5553;5554;5555;5556;5557;5558;5559;
5560;5561;5562;5563;5564;5565;5566;5567;5568;5569;
5570;5571;5572;5573;5574;5575;5576;5577;5578;5579;
5580;5581;5582;5583;5584;5585;5586;5587;5588;5589;
5590;5591;5592;5593;5594;5595;5596;5597;5598;5599;
5600;5601;5602;5603;5604;5605;5606;5607;5608;5609;
5610;5611;5612;5613;5614;5615;5616;5617;5618;5619;
5620;5621;5622;5623;5624;5625;5626;5627;5628;5629;
5630;5631;5632;5633;5634;5635;5636;5637;5638;5639;
5640;5641;5642;5643;5644;5645;5646;5647;5648;5649;
5650;5651;5652;5653;5654;5655;5656;5657;5658;5659;
5660;5661;5662;5663;5664;5665;5666;5667;5668;5669;
5670;5671;5672;5673;5674;5675;5676;5677;5678;5679;
5680;5681;5682;5683;5684;5685;5686;5687;5688;5689;
5690;5691;5692;5693;5694;5695;5696;5697;5698;5699;
5700;5701;5702;5703;5704;5705;5706;5707;5708;5709;
5710;5711;5712;5713;5714;5715;5716;5717;5718;5719;
5720;5721;5722;5723;5724;5725;5726;5727;5728;5729;
5730;5731;5732;5733;5734;5735;5736;5737;5738;5739;
5740;5741;5742;5743;5744;5745;5746;5747;5748;5749;
5750;5751;5752;5753;5754;5755;5756;5757;5758;5759;
5760;5761;5762;5763;5764;5765;5766;5767;5768;5769;
5770;5771;5772;5773;5774;5775;5776;5777;5778;5779;
5780;5781;5782;5783;5784;5785;5786;5787;5788;5789;
5790;5791;5792;5793;5794;5795;5796;5797;5798;5799;
5800;5801;5802;5803;5804;5805;5806;5807;5808;5809;
5810;5811;5812;5813;5814;5815;5816;5817;5818;5819;
5820;5821;5822;5823;5824;5825;5826;5827;5828;5829;
5830;5831;5832;5833;5834;5835;5836;5837;5838;5839;
5840;5841;5842;5843;5844;5845;5846;5847;5848;5849;
5850;5851;5852;5853;5854;5855;5856;5857;5858;5859;
5860;5861;5862;5863;5864;5865;5866;5867;5868;5869;
5870;5871;5872;5873;5874;5875;5876;5877;5878;5879;
5880;5881;5882;5883;5884;5885;5886;5887;5888;5889;
5890;5891;5892;5893;5894;5895;5896;5897;5898;5899;
5900;5901;5902;5903;5904;5905;5906;5907;5908;5909;
5910;5911;5912;5913;5914;5915;5916;5917;5918;5919;
5920;5921;5922;5923;5924;5925;5926;5927;5928;5929;
5930;5931;5932;5933;5934;5935;5936;5937;5938;5939;
5940;5941;5942;5943;5944;5945;5946;5947;5948;5949;
5950;5951;5952;5953;5954;5955;5956;5957;5958;5959;
5960;5961;5962;5963;5964;5965;5966;5967;5968;5969;
5970;5971;5972;5973;5974;5975;5976;5977;5978;5979;
5980;5981;5982;5983;5984;5985;5986;5987;5988;5989;
5990;5991;5992;5993;5994;5995;5996;5997;5998;5999;
      };
     };
     float_Data @[1] {
      name="wt";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [6000] 0.45020825;0.39359713;0.44998899;0.45867744;0.4903861;0.53645587;0.51170075;0.45509812;0.412034;0.44761482;
0.47386733;0.49060136;0.51564854;0.52720284;0.56046659;0.59296978;0.61775541;0.66493851;0.67594045;0.6830641;
0.64742625;0.65942603;0.60148638;0.56968337;0.59416765;0.60174942;0.56763953;0.56173491;0.61233294;0.56959915;
0.57859868;0.62134647;0.59120154;0.55243748;0.59340727;0.59232819;0.60913259;0.6475755;0.64128441;0.59766579;
0.59805006;0.63949347;0.64687103;0.62380767;0.65549088;0.66694599;0.67979914;0.68808925;0.67216969;0.62773055;
0.65125698;0.60028392;0.55074179;0.50929087;0.52802849;0.47353825;0.51784533;0.54299933;0.52503353;0.5752843;
0.58964354;0.56406003;0.51978868;0.50409192;0.48354575;0.47582167;0.45969659;0.517519;0.56091511;0.53574908;
0.57306707;0.55484277;0.5942564;0.5811488;0.59677064;0.53611851;0.52065289;0.4676854;0.41288435;0.42832655;
0.38003355;0.43098006;0.3906247;0.34963512;0.36364105;0.3942818;0.44977963;0.41878295;0.447348;0.41186082;
0.43904808;0.40650871;0.37581134;0.42444682;0.42009336;0.36906746;0.3480908;0.33139294;0.33135197;0.37281701;
0.37490115;0.34572241;0.32873774;0.3044323;0.27739403;0.3217876;0.31547934;0.27561045;0.27007014;0.25923923;
0.31305405;0.32257694;0.28686914;0.28573424;0.32872871;0.32392445;0.32163903;0.29384807;0.34108379;0.37430221;
0.3993012;0.34975889;0.34412035;0.35276455;0.30785638;0.36240157;0.35456404;0.39566544;0.3581287;0.37500829;
0.37151194;0.41799834;0.43459752;0.45532134;0.46275434;0.50178528;0.51825035;0.46171036;0.45077527;0.47990221;
0.48453093;0.49543002;0.5029574;0.55916029;0.59132034;0.60449553;0.60446537;0.54766738;0.59002399;0.60113579;
0.54309595;0.52844656;0.47097704;0.49024078;0.53828114;0.48912647;0.46878392;0.44933677;0.44639719;0.48544094;
0.48534337;0.43255126;0.3894369;0.34920335;0.34812301;0.32285029;0.31155029;0.31488147;0.34004131;0.36111993;
0.4044978;0.39662689;0.43893722;0.44860002;0.4589842;0.4637084;0.43971875;0.47977069;0.42088869;0.47443813;
0.48890018;0.51005828;0.4899841;0.49790671;0.53105885;0.53728265;0.53290248;0.48734024;0.48551705;0.5155074;
0.55408639;0.55373156;0.59401393;0.56830198;0.55632055;0.54532546;0.5246681;0.57268667;0.62334818;0.60938519;
0.603396;0.78225797;0.78454113;0.73919356;0.7621991;0.75684136;0.78117174;0.77215064;0.75458372;0.73410618;
0.68787706;0.63568336;0.67677253;0.67106819;0.65975213;0.66696131;0.66036522;0.68533611;0.70955306;0.74773616;
0.78681427;0.75187182;0.78243637;0.78836173;0.7863189;0.8059234;0.80874658;0.76897484;0.78443134;0.80903757;
0.77648211;0.73939574;0.75932354;0.71941215;0.74568343;0.72714561;0.68593884;0.64787328;0.61380094;0.62436116;
0.59388477;0.5777325;0.52717006;0.56680149;0.62334079;0.60306412;0.5804314;0.62162864;0.66087371;0.66377962;
0.64016694;0.68596202;0.63236922;0.6763553;0.67313361;0.65634835;0.64275634;0.68874639;0.70731318;0.71907324;
0.71723861;0.73462343;0.73427773;0.76236528;0.76442564;0.73625451;0.71092927;0.70889109;0.69130272;0.69829136;
0.67477733;0.65565997;0.61519575;0.56307679;0.59711558;0.58834195;0.56185544;0.59701324;0.63075829;0.59342802;
0.61238635;0.63203615;0.64978838;0.63336128;0.61483628;0.6350171;0.60310799;0.595411;0.61531174;0.56998444;
0.60730332;0.58871639;0.64799142;0.69523627;0.69990098;0.67771614;0.69783354;0.70212781;0.69075978;0.71181238;
0.70949793;0.54014677;0.50489014;0.49838552;0.50409514;0.51684558;0.51757467;0.55422527;0.55025554;0.60787851;
0.61424112;0.65543252;0.69690627;0.6699723;0.67686206;0.71164322;0.68223137;0.69751084;0.66729116;0.66252494;
0.63471651;0.62155581;0.63570595;0.59948468;0.58347768;0.5890069;0.614609;0.59205306;0.58390701;0.55061114;
0.59361875;0.57787526;0.5930534;0.58514047;0.63320351;0.64075899;0.62096387;0.62030542;0.57993621;0.62028116;
0.64794856;0.67208928;0.70529252;0.73173779;0.76396543;0.76689076;0.78991574;0.76768476;0.80038929;0.80511028;
0.77822268;0.72938699;0.75580263;0.72356087;0.72062558;0.72888798;0.72880089;0.68513715;0.66096503;0.61080819;
0.60227787;0.57089406;0.53868622;0.49223629;0.52859908;0.58020371;0.52006495;0.50766474;0.48023918;0.50404078;
0.51569283;0.56052613;0.58243048;0.54086959;0.57551223;0.60622698;0.61393476;0.55312377;0.56088412;0.61167634;
0.63819021;0.57738203;0.60813874;0.63893974;0.65132052;0.64428425;0.64400977;0.61948013;0.63860327;0.65732938;
0.66255993;0.68431473;0.63910747;0.57813221;0.53706288;0.54236394;0.58020061;0.59449518;0.53958333;0.53419733;
0.56076998;0.51213658;0.50999004;0.50169015;0.48236957;0.45958057;0.4733282;0.45342728;0.44160002;0.40163669;
0.39311308;0.41293466;0.46478105;0.51066047;0.5612852;0.52062112;0.46882918;0.46316144;0.44616902;0.40458661;
0.36384216;0.34603384;0.33131;0.31930605;0.30136445;0.34413442;0.33951756;0.36092144;0.37355641;0.33368728;
0.30780697;0.29760483;0.29111415;0.25675076;0.30752987;0.36553398;0.39365953;0.40167418;0.44606504;0.4241747;
0.48656902;0.43488973;0.43831024;0.406205;0.44400877;0.42747203;0.40203437;0.38518605;0.42365885;0.42971358;
0.44730482;0.44016469;0.43225449;0.38369256;0.3536391;0.37300643;0.35333392;0.35613477;0.37736598;0.36836591;
0.33894897;0.31901848;0.30643305;0.32826748;0.38535029;0.42034668;0.39489123;0.36864486;0.41524231;0.44144049;
0.45623267;0.47793183;0.44289401;0.49961802;0.5173887;0.57450634;0.52576566;0.47741783;0.50058603;0.50788325;
0.52535319;0.56740415;0.6210286;0.60596973;0.54761559;0.53722435;0.56602591;0.61452627;0.65066665;0.59129089;
0.55764049;0.541053;0.51211083;0.54339969;0.54076439;0.50133532;0.50279653;0.52403259;0.47464189;0.5021022;
0.52511203;0.56567496;0.61495769;0.55456704;0.5197069;0.5177989;0.49502376;0.49216372;0.50691068;0.45153618;
0.50977802;0.45047832;0.47278699;0.5133633;0.56508648;0.60051203;0.57093966;0.5467512;0.55588251;0.53283304;
0.53013045;0.55953103;0.53315395;0.48922676;0.53614485;0.54671854;0.4871982;0.51834679;0.5007605;0.47252628;
0.45038906;0.48707992;0.51058573;0.5015192;0.5390954;0.48102945;0.53386158;0.53641349;0.47827104;0.46939719;
0.43043891;0.40974548;0.40607119;0.37159377;0.36032403;0.37422654;0.36023614;0.41461238;0.4395268;0.42020664;
0.4197638;0.41763273;0.43531671;0.44401902;0.48205307;0.43568283;0.49747983;0.4768759;0.42511228;0.39033806;
0.38048613;0.36771736;0.32784885;0.30021799;0.33106175;0.36465698;0.37557858;0.35591364;0.36768135;0.3631328;
0.35092965;0.31231534;0.27759379;0.24796246;0.30070537;0.28246945;0.24862589;0.22208697;0.27568853;0.29882374;
0.35275784;0.35049802;0.34163332;0.34649029;0.40063471;0.43815148;0.46404472;0.51214838;0.48990884;0.50297672;
0.54517925;0.50193447;0.46697527;0.50649142;0.49758711;0.44275597;0.40503013;0.36242327;0.41355196;0.37863651;
0.32937732;0.17748329;0.18328691;0.17840277;0.18465282;0.16205914;0.1545697;0.17327961;0.17071618;0.17804033;
0.1652859;0.18092275;0.16922499;0.19519763;0.21313065;0.24855609;0.28614792;0.3252131;0.35637945;0.3180207;
0.33833724;0.35001752;0.31620145;0.29629675;0.25873631;0.29136115;0.320755;0.29606628;0.27576879;0.24142489;
0.28214023;0.29446733;0.26534182;0.24956229;0.22380365;0.20764494;0.21865505;0.19393609;0.18305206;0.15943888;
0.18972987;0.19383426;0.19652407;0.20786449;0.18446897;0.2289415;0.21860115;0.25908205;0.28326854;0.27895099;
0.28484046;0.3363145;0.31083521;0.33029756;0.36798576;0.37314186;0.42152193;0.45403823;0.39423561;0.38420218;
0.3839927;0.40220621;0.43794361;0.43617544;0.39362416;0.41944462;0.42667326;0.42026836;0.46917662;0.51729292;
0.459593;0.47389123;0.46335143;0.47679791;0.43830758;0.43508711;0.37615094;0.41950947;0.41833484;0.40718541;
0.46080759;0.50406367;0.54430437;0.49471372;0.49807149;0.52353257;0.46824226;0.41615614;0.46088934;0.43335083;
0.4156276;0.42361271;0.43270057;0.43560123;0.41392809;0.46115136;0.3977339;0.4514364;0.48632827;0.52022272;
0.45428619;0.69994259;0.67647815;0.62198186;0.61326903;0.63181806;0.68406665;0.67125332;0.65338665;0.70015687;
0.71290493;0.70171344;0.73291421;0.73506516;0.74626577;0.71436596;0.67898262;0.69092244;0.6643821;0.61987191;
0.64030105;0.64332932;0.68686384;0.73134679;0.71945977;0.75512785;0.76374078;0.77470601;0.78357112;0.81327343;
0.79918563;0.82949787;0.84792912;0.82385999;0.82656229;0.82902074;0.84378636;0.83336055;0.79406899;0.81638294;
0.83599621;0.85213631;0.85628712;0.84121203;0.84070492;0.8143366;0.81903255;0.84717548;0.84563279;0.8624568;
0.87936324;0.86693859;0.87117779;0.89097935;0.89935094;0.9057433;0.89689654;0.88662797;0.8753618;0.86160272;
0.8804782;0.86016381;0.8499704;0.83919507;0.7975111;0.75670433;0.75236434;0.77678823;0.77867472;0.73164928;
0.7411772;0.69894469;0.68007714;0.68697268;0.65300465;0.673078;0.68849993;0.67230821;0.68134809;0.6758303;
0.64773387;0.69731247;0.66928756;0.71120554;0.71624935;0.66715664;0.61122394;0.5799976;0.6114248;0.66152209;
0.62157708;0.66135013;0.68616992;0.70567125;0.69486052;0.70428568;0.66831678;0.70685434;0.66195452;0.68057323;
0.66815996;0.53160965;0.58504176;0.614995;0.64218909;0.61085653;0.5926441;0.59808898;0.63683188;0.59882015;
0.58388615;0.63751245;0.66819495;0.68116963;0.70275933;0.71939558;0.74471748;0.70516276;0.71432632;0.75100344;
0.70069569;0.70331627;0.733787;0.69987923;0.71017003;0.67639613;0.67305875;0.67779511;0.71573609;0.6734122;
0.65867442;0.7025826;0.64963955;0.60323352;0.60048759;0.61902285;0.64452547;0.5919615;0.57160729;0.54522824;
0.51659441;0.49226919;0.44322166;0.44059181;0.4076966;0.37898046;0.34381858;0.31166297;0.32653207;0.35695431;
0.3552781;0.4007276;0.4011215;0.40155688;0.46283701;0.46516481;0.46865153;0.41898003;0.44190517;0.49563602;
0.53854042;0.54872614;0.51744258;0.57680863;0.51795667;0.56637961;0.5556041;0.56600624;0.51632106;0.46085736;
0.4314597;0.48432413;0.48436001;0.49696189;0.44918564;0.45181704;0.44384807;0.43252668;0.48188376;0.49073011;
0.54051387;0.51997286;0.46873903;0.53032112;0.47942424;0.52141708;0.49616688;0.4599354;0.50538766;0.48079529;
0.44643378;0.47858274;0.47731256;0.48207879;0.51591319;0.52963144;0.48507425;0.53708315;0.47843134;0.46755093;
0.43335664;0.29679498;0.2866751;0.30689484;0.35861945;0.37713143;0.38633755;0.34844658;0.30903029;0.35619166;
0.32338655;0.29071257;0.26522094;0.27688134;0.27730939;0.26217109;0.27661967;0.24146138;0.25955102;0.22047666;
0.25720739;0.22355497;0.19190535;0.21792044;0.26567355;0.27261803;0.24451986;0.27955037;0.23743105;0.25294253;
0.29971153;0.2609295;0.24633418;0.23233888;0.21723998;0.23034029;0.25701106;0.26986995;0.24875283;0.21478741;
0.19210778;0.19066907;0.21647498;0.25157326;0.22269079;0.2418744;0.23204333;0.20088546;0.18248746;0.16508582;
0.20568508;0.18384832;0.16994222;0.15242253;0.16986212;0.146373;0.13959531;0.13738696;0.1454531;0.13272747;
0.11935765;0.13886319;0.1779139;0.15088004;0.13261867;0.11416914;0.1415371;0.13471584;0.14541866;0.16343693;
0.13852997;0.13090026;0.12791948;0.13038366;0.13060057;0.13425225;0.13772097;0.12834217;0.16638224;0.16888556;
0.1478525;0.13292362;0.11480663;0.11462699;0.099831909;0.093827643;0.095762081;0.091287881;0.1016352;0.091240056;
0.095015079;0.094514996;0.081673667;0.10469949;0.12149978;0.10678089;0.10964466;0.10406629;0.1210867;0.11122168;
0.10598724;0.026997685;0.027048348;0.022954633;0.03163461;0.029048;0.024792494;0.020937849;0.023672821;0.022868007;
0.024704009;0.032083783;0.031633686;0.03027704;0.028500859;0.039062116;0.048265293;0.040571101;0.038615573;0.033128452;
0.030925181;0.037541952;0.033591155;0.042177044;0.052530091;0.047589399;0.061661318;0.067534007;0.069940232;0.064967178;
0.072070606;0.058988784;0.048362121;0.047648758;0.052081771;0.065124609;0.062204681;0.059536312;0.055492558;0.070574276;
0.085483201;0.074440949;0.072075814;0.086901829;0.10447095;0.12725347;0.12645173;0.15001947;0.1707297;0.18381004;
0.1813114;0.20290717;0.23351546;0.21095642;0.21933711;0.24224123;0.20822331;0.2429999;0.20599528;0.17131917;
0.19591247;0.20429949;0.2202602;0.21127017;0.23842877;0.26561996;0.27289352;0.30710191;0.32237893;0.32099378;
0.35868609;0.39756921;0.38055691;0.32966921;0.29681703;0.28856725;0.26230937;0.26147771;0.27447322;0.28885472;
0.31491774;0.26892424;0.30769482;0.32150868;0.34745544;0.36534613;0.39880925;0.42433441;0.36630103;0.32778049;
0.33881047;0.36474413;0.33709088;0.36630967;0.35169187;0.2950086;0.2441216;0.22492683;0.25069091;0.21805336;
0.25395596;0.76540709;0.7534045;0.70875096;0.6667518;0.63999242;0.6312167;0.68242002;0.72378975;0.67133313;
0.68470997;0.71280664;0.69721109;0.72631842;0.70658243;0.70231545;0.71493888;0.75854206;0.71277457;0.74358094;
0.72477043;0.76157439;0.75567555;0.7574352;0.77869612;0.75298554;0.72490489;0.71893388;0.73654604;0.75276315;
0.7553615;0.77919507;0.76775068;0.73209518;0.75299281;0.77853191;0.73840797;0.74070817;0.73634744;0.74344522;
0.75197572;0.75910658;0.73593599;0.77471864;0.80115008;0.83205128;0.7926445;0.8029713;0.77932149;0.77449065;
0.73684573;0.77685821;0.79311025;0.80918109;0.80554467;0.81712914;0.83641464;0.8460626;0.86470276;0.84518218;
0.85473633;0.86779433;0.84431612;0.85585827;0.85104913;0.83661747;0.84083086;0.82530415;0.84290594;0.82666731;
0.85364324;0.83390182;0.81496209;0.84319395;0.81795883;0.82421803;0.81553435;0.77245915;0.74461603;0.77029508;
0.79466504;0.80366284;0.78078568;0.78439319;0.79670113;0.81620526;0.81310964;0.84229589;0.86388832;0.83347344;
0.85741794;0.83719707;0.82349074;0.81685829;0.79379487;0.80224812;0.82035524;0.80718923;0.81171876;0.83853394;
0.85381705;0.90148729;0.90952116;0.89171487;0.87194103;0.88699943;0.89166439;0.88677019;0.89261955;0.90186876;
0.91296715;0.92666423;0.90758961;0.91336209;0.91338068;0.92083883;0.89584547;0.86581683;0.87553406;0.88162678;
0.87077481;0.87354779;0.84763157;0.85588628;0.87164766;0.87356919;0.85767156;0.87488449;0.87365019;0.8909086;
0.90187895;0.88346791;0.88517916;0.87311375;0.84237927;0.84466553;0.8233372;0.82283539;0.82131344;0.79134518;
0.76980978;0.77921993;0.8044225;0.77944833;0.80179125;0.78608555;0.76653469;0.72745585;0.70586413;0.71202391;
0.73583204;0.70680881;0.72773468;0.76009411;0.75940746;0.72412705;0.71727508;0.75221187;0.72799915;0.69938135;
0.7361322;0.70180976;0.66017467;0.68601155;0.6854012;0.66733927;0.68740451;0.64870864;0.63421839;0.60723191;
0.58050042;0.58618116;0.5961256;0.60304284;0.61587495;0.59007078;0.63958234;0.62208533;0.58068836;0.53217399;
0.50202709;0.51393807;0.51851749;0.50867999;0.57709652;0.55505133;0.56376892;0.62000293;0.65839779;0.63229722;
0.68644714;0.71749943;0.69595647;0.65260732;0.60194778;0.61089844;0.55955851;0.60910118;0.63337225;0.68324822;
0.70117265;0.40797049;0.41271913;0.41399619;0.42098027;0.45224446;0.51110071;0.5298332;0.51531261;0.51653546;
0.48968813;0.48471808;0.496865;0.54647559;0.58108711;0.5786109;0.55532455;0.49883845;0.53361231;0.55182338;
0.52249384;0.57447767;0.58327478;0.59318924;0.615978;0.58889806;0.57240987;0.60892117;0.61743385;0.55740821;
0.5937891;0.60670167;0.58824176;0.58895457;0.5328548;0.52547061;0.52086252;0.57270032;0.6217925;0.56834483;
0.53494096;0.48001823;0.44814071;0.42767116;0.47433537;0.47018331;0.48319763;0.52984852;0.56523389;0.54876655;
0.59859174;0.53731787;0.5013414;0.44070044;0.40245783;0.3940776;0.41272694;0.46870944;0.51820779;0.56622845;
0.51595426;0.51789707;0.52742934;0.49795675;0.55432171;0.58577108;0.54761523;0.50152493;0.55368805;0.53167629;
0.47885337;0.50718015;0.47043923;0.43275714;0.40014678;0.41790256;0.42333513;0.42627195;0.39940822;0.35676181;
0.3412993;0.38815033;0.3588171;0.39617544;0.38310295;0.35730371;0.39492649;0.35050619;0.35139635;0.32873505;
0.37403378;0.37818658;0.37210885;0.32939222;0.34603465;0.34574544;0.35923889;0.32934466;0.35623756;0.30656675;
0.35140306;0.30503243;0.34974471;0.37506017;0.32953721;0.28742686;0.29874539;0.30717042;0.32623023;0.28048623;
0.27139053;0.27661291;0.2848182;0.2611883;0.27353567;0.31289995;0.30708858;0.27348563;0.24625382;0.29134542;
0.34719858;0.30065039;0.33828297;0.30144802;0.2851885;0.24895026;0.2253134;0.20597702;0.22872345;0.21159956;
0.21289633;0.20443687;0.21639229;0.25550663;0.25453773;0.25173983;0.23826359;0.26953182;0.2743921;0.29261345;
0.26226586;0.2868253;0.27099809;0.31332934;0.3028996;0.27821797;0.2494359;0.25671774;0.2911793;0.25737697;
0.2212622;0.20419674;0.24655972;0.25031453;0.27747077;0.24775706;0.27017009;0.31805232;0.29418615;0.31485856;
0.32329887;0.36837709;0.38003507;0.33479387;0.37446335;0.3395097;0.34418187;0.35386044;0.37812579;0.40726277;
0.42442566;0.38683996;0.42793635;0.39549538;0.44657233;0.42979395;0.41961023;0.45498818;0.42121172;0.39278728;
0.38264284;0.39528686;0.42462328;0.46133378;0.41812897;0.44568032;0.44940016;0.4081251;0.35264632;0.31627667;
0.31480896;0.28509554;0.32716686;0.31107351;0.34067801;0.29914388;0.32248214;0.32428119;0.30311665;0.29857153;
0.2955856;0.22394961;0.21136767;0.20384577;0.18378694;0.21023828;0.22287761;0.19256921;0.17017558;0.18115108;
0.17304288;0.17021556;0.14576246;0.15791921;0.14698376;0.14390379;0.1309036;0.14212592;0.12485746;0.11765765;
0.14513074;0.12592876;0.15102831;0.18512169;0.17287207;0.18096174;0.18637696;0.19749625;0.21150163;0.24052955;
0.24909075;0.2364914;0.28282657;0.31821665;0.29834476;0.31415918;0.26859015;0.23814183;0.26525253;0.28455094;
0.27897313;0.27436829;0.31285408;0.36587977;0.33601674;0.28721169;0.24604148;0.29458836;0.25331575;0.228903;
0.22178771;0.27013916;0.26304784;0.31448057;0.31209064;0.32324216;0.29007649;0.33687827;0.30115384;0.29539698;
0.32046703;0.31230408;0.3100825;0.2969307;0.28091103;0.31071827;0.29016224;0.2873635;0.30312803;0.33576435;
0.35374436;0.31954178;0.31956455;0.36176047;0.32946268;0.28408065;0.27738854;0.30965945;0.29870081;0.35291424;
0.31856164;0.34671184;0.30847782;0.31513578;0.27759567;0.30376101;0.26817027;0.31793037;0.30820936;0.3274956;
0.37003279;0.36332476;0.3803995;0.34232745;0.29193878;0.27845883;0.27705431;0.25580734;0.29708204;0.3264311;
0.28000656;0.27422008;0.2445568;0.24147514;0.28505832;0.28086111;0.24920721;0.21236026;0.17986293;0.20899406;
0.21815205;0.21421073;0.20348437;0.22069477;0.22043765;0.25027284;0.21992609;0.20610103;0.17577738;0.19850563;
0.23320894;0.21724427;0.18512081;0.16768529;0.2076441;0.1838311;0.20925447;0.21815106;0.255941;0.21714431;
0.19244517;0.2287844;0.24021956;0.24868883;0.23242804;0.2579681;0.25064135;0.23783556;0.20192131;0.17633857;
0.17936142;0.1594418;0.14815164;0.12768894;0.16425921;0.18884951;0.21289961;0.21104886;0.20116578;0.19508053;
0.20730469;0.2465245;0.22144496;0.22703446;0.20017977;0.22281212;0.19572982;0.23767221;0.21104993;0.23508219;
0.25180653;0.26702884;0.24901935;0.21275674;0.2134092;0.22743632;0.24790546;0.24495749;0.23697501;0.21316013;
0.24295308;0.21836826;0.21093544;0.2585358;0.30936867;0.28693536;0.24655062;0.23626265;0.22714886;0.23461126;
0.24070884;0.28595561;0.2708981;0.24930722;0.27149177;0.28555468;0.30186409;0.33335868;0.37960824;0.33295989;
0.29059148;0.3367843;0.31786761;0.27920356;0.32223436;0.34331733;0.34659246;0.40081152;0.4159303;0.36432412;
0.31983808;0.28193298;0.28058293;0.25994292;0.2402994;0.27556962;0.31618065;0.35978183;0.31082353;0.29448077;
0.32120827;0.28413713;0.29751951;0.32376021;0.29291633;0.32056302;0.32039168;0.34587365;0.38507813;0.33674809;
0.3856352;0.34813538;0.31990951;0.34788236;0.31947497;0.37412873;0.39293742;0.38180065;0.36798909;0.33611917;
0.30066246;0.26607922;0.29918563;0.27526101;0.23904009;0.21699136;0.26134881;0.2547338;0.25396785;0.24308915;
0.22717196;0.19596387;0.19026311;0.21162842;0.2117891;0.23539323;0.24504681;0.21248451;0.20850338;0.23183182;
0.26430374;0.25755149;0.29315671;0.30323052;0.34073183;0.33965257;0.36139289;0.37735856;0.36362877;0.39268991;
0.39877734;0.34399179;0.39980263;0.36858284;0.42294377;0.42712036;0.41430247;0.40870625;0.38901585;0.42260474;
0.43080452;0.46223515;0.48215881;0.49177128;0.54127902;0.55363321;0.48904872;0.50031275;0.49036947;0.4721086;
0.51119184;0.47614461;0.44082585;0.42281225;0.43911928;0.4070189;0.45899788;0.42047176;0.38720524;0.41907883;
0.44125724;0.44238183;0.42845097;0.41264299;0.40971208;0.46418884;0.47587681;0.43991041;0.46948501;0.45541289;
0.51341969;0.66895157;0.62226021;0.61366439;0.65978271;0.68854892;0.72186399;0.69619918;0.64907503;0.6167174;
0.62425625;0.57756704;0.61356592;0.58888972;0.57474846;0.60008055;0.5882414;0.54956526;0.58777392;0.63161659;
0.67241126;0.70463115;0.70780998;0.7250765;0.68900579;0.67255569;0.67465752;0.66531068;0.66560823;0.70363241;
0.71018988;0.6874212;0.66064805;0.699498;0.68060416;0.66863006;0.70176828;0.64792043;0.63324547;0.66407967;
0.68841177;0.70315325;0.71107554;0.74782217;0.70296293;0.66322196;0.69211173;0.67315096;0.71617037;0.73605132;
0.74996912;0.76409566;0.79451615;0.81435114;0.77444041;0.79651046;0.79684883;0.78454721;0.77775598;0.75701559;
0.73595613;0.71523601;0.69316167;0.72175276;0.69104862;0.71515769;0.6807431;0.69098383;0.67397285;0.62959063;
0.62598914;0.61670184;0.59268248;0.53824669;0.51911974;0.48699489;0.54212666;0.52172226;0.57838327;0.59356278;
0.54040617;0.58644372;0.60476875;0.58906138;0.61312568;0.66107368;0.66180003;0.65345484;0.68916512;0.68913746;
0.6459868;0.66579258;0.68100083;0.63905847;0.63607538;0.63425165;0.63518119;0.60264277;0.58722144;0.54425502;
0.53261876;0.35266861;0.38256162;0.36155903;0.41334602;0.42519832;0.37725669;0.33712327;0.3318302;0.31068227;
0.28050712;0.24530466;0.24538858;0.21309148;0.22787231;0.23710652;0.24618204;0.23907742;0.23005185;0.25041148;
0.28672111;0.2605572;0.27513692;0.2929351;0.26178777;0.2789979;0.27550086;0.25324878;0.27962852;0.32412881;
0.27826265;0.24791689;0.26263326;0.24524587;0.22455147;0.24604711;0.22558704;0.24298517;0.2898249;0.27812329;
0.29793304;0.28162804;0.26520479;0.26782075;0.28059632;0.2637518;0.31701085;0.35250422;0.33429343;0.2929576;
0.34392509;0.3355293;0.3191753;0.33742255;0.36418465;0.34944138;0.31933337;0.30630624;0.28592345;0.31946808;
0.33389553;0.35996851;0.40950432;0.42575565;0.44932687;0.41193971;0.39528206;0.41860205;0.3938095;0.35899368;
0.31685945;0.37471309;0.40228698;0.39191601;0.41461933;0.39857376;0.43624339;0.43328056;0.40077075;0.45029965;
0.48500243;0.50132889;0.51343364;0.47765625;0.47157905;0.45728064;0.41045466;0.46676898;0.51034898;0.48280716;
0.53242296;0.54705828;0.51215947;0.45093003;0.48885173;0.44048989;0.48606095;0.44289544;0.41883069;0.46558949;
0.50053418;0.60622561;0.63548476;0.58144325;0.55010122;0.56130636;0.54362714;0.56849337;0.55448574;0.55863929;
0.54922581;0.54769927;0.60307336;0.62159091;0.60405391;0.65586787;0.62986702;0.57244843;0.52238029;0.53949839;
0.54566205;0.514907;0.50873929;0.52184606;0.57585353;0.53610712;0.52194029;0.55065858;0.58653748;0.58885193;
0.61303186;0.61389947;0.58231765;0.60558313;0.65819961;0.6260435;0.66524386;0.67881668;0.70454729;0.69668519;
0.71961784;0.70973921;0.74303824;0.74899256;0.78338617;0.7347976;0.7188105;0.69907534;0.69981736;0.69230336;
0.65215087;0.68913281;0.70331985;0.7056551;0.72135127;0.74665171;0.78381467;0.74206841;0.73295063;0.76170963;
0.76572263;0.75628078;0.72603148;0.72058934;0.66363287;0.68229485;0.6697526;0.61869568;0.62241113;0.61874706;
0.5610494;0.5781706;0.60169584;0.54806709;0.59196943;0.53595906;0.51437062;0.52569604;0.51548737;0.46221435;
0.40905291;0.45260215;0.49715719;0.52020377;0.55637956;0.60306376;0.54562908;0.54551673;0.59418803;0.57727474;
0.60483515;0.6545558;0.6958524;0.73256886;0.75746697;0.7934553;0.81027502;0.77494264;0.786538;0.74926162;
0.762025;0.83754259;0.83269238;0.80606633;0.82285172;0.81791711;0.84781182;0.84016544;0.86177301;0.88342851;
0.85963732;0.84148645;0.84343618;0.86025423;0.83353287;0.80240357;0.76150024;0.72636908;0.72455639;0.70274305;
0.66791719;0.62695676;0.68333125;0.72184461;0.71584088;0.68617302;0.68645704;0.7169705;0.73366773;0.7454586;
0.74844092;0.76674402;0.78221601;0.77298456;0.74465686;0.73601043;0.68691176;0.64984775;0.6100449;0.60627007;
0.60058308;0.63043594;0.5972386;0.54790205;0.50691783;0.45830169;0.42644966;0.42925236;0.42315197;0.37958783;
0.33843166;0.34120056;0.36991569;0.36914143;0.43120161;0.39693475;0.37490702;0.37329513;0.33280945;0.32498673;
0.30998194;0.37575421;0.34679177;0.40136835;0.38491055;0.41263273;0.43688315;0.39916435;0.39861804;0.35642269;
0.34287655;0.39911216;0.36874598;0.35108292;0.32902324;0.34576428;0.32006189;0.31145862;0.35460305;0.32649437;
0.36755231;0.3956776;0.43031451;0.38531482;0.34882009;0.32111087;0.31895638;0.28621021;0.31315786;0.29827824;
0.28358674;0.26358554;0.23960088;0.21252738;0.19771372;0.25488457;0.29378241;0.34438035;0.33815727;0.39870283;
0.4147644;0.069848001;0.085222669;0.08622954;0.080580324;0.068350941;0.081994541;0.081219263;0.076106526;0.068942085;
0.069593072;0.076589905;0.080679946;0.071517274;0.066624574;0.075433306;0.070353746;0.072568595;0.065072872;0.081004612;
0.081601359;0.10535361;0.10192873;0.10708899;0.12112525;0.10357508;0.12702772;0.15431286;0.14375871;0.17850769;
0.14691302;0.12450466;0.13559449;0.17017579;0.17145793;0.18538164;0.201166;0.18397363;0.15807481;0.1398391;
0.11997618;0.11201806;0.11263969;0.12237152;0.12821731;0.15360269;0.12657975;0.11111612;0.12416938;0.10707192;
0.09904889;0.091966398;0.090373807;0.095221862;0.099606298;0.095340513;0.094521843;0.11094613;0.13032052;0.12351175;
0.11622871;0.1103969;0.12440281;0.14332561;0.16264988;0.15279365;0.16042079;0.13985053;0.1363835;0.11976653;
0.11920952;0.1150827;0.11153673;0.12698728;0.11277906;0.094338894;0.085820064;0.07242617;0.064305604;0.06337975;
0.073777713;0.070407078;0.058707342;0.064184368;0.066138886;0.076280162;0.064553477;0.054029375;0.052470483;0.047575269;
0.051768925;0.050315555;0.063880615;0.075871423;0.088750564;0.10449901;0.094760068;0.11327825;0.096493334;0.10731155;
0.13641009;0.25614935;0.2492809;0.28295219;0.28038049;0.27189648;0.26265514;0.31355208;0.32499319;0.31498933;
0.26793379;0.24598366;0.28054577;0.33184773;0.34161395;0.36135879;0.3766003;0.41067278;0.37473392;0.32135922;
0.3210946;0.33854651;0.32630596;0.29754657;0.29634294;0.25240871;0.23121865;0.20453703;0.18312642;0.2197434;
0.24668477;0.2699824;0.31012645;0.33816049;0.29555479;0.31349415;0.33192983;0.29662406;0.25115505;0.25040743;
0.27168036;0.25435454;0.28012443;0.24831387;0.2357863;0.27595732;0.2810761;0.2540459;0.26887748;0.2592189;
0.23805659;0.26369327;0.29245961;0.27506095;0.24727094;0.2298426;0.25536096;0.29506361;0.30355933;0.3467375;
0.4023388;0.4087213;0.38642433;0.37940586;0.41109982;0.40992716;0.41094327;0.45919397;0.47999787;0.47197473;
0.51706821;0.55892855;0.5973323;0.63087875;0.65925032;0.69667608;0.71159416;0.74368203;0.70321512;0.66532797;
0.62762368;0.63973403;0.64955729;0.60259271;0.63464803;0.65886533;0.61959225;0.66438562;0.68241286;0.70909637;
0.72918671;0.75645506;0.74600136;0.77684164;0.77739197;0.76776719;0.71704292;0.74743515;0.75146878;0.77526706;
0.79543036;0.98499787;0.98182625;0.98377496;0.98133224;0.98359311;0.98510671;0.98316801;0.98156899;0.98175436;
0.9806807;0.98137009;0.98401684;0.98432213;0.98159015;0.98323441;0.9851898;0.98313826;0.98492903;0.98607671;
0.98190194;0.98271209;0.97609413;0.97922355;0.98092556;0.97332513;0.96646774;0.96494114;0.95511746;0.95883834;
0.96598339;0.96339393;0.96758854;0.96035188;0.94921833;0.95228565;0.9383595;0.94785702;0.94583905;0.94874799;
0.9512471;0.95701319;0.95130473;0.94325775;0.93773299;0.92594665;0.93445081;0.92738134;0.92652011;0.91494447;
0.91955435;0.92338312;0.92586148;0.93377942;0.94402945;0.94525975;0.93691397;0.9309572;0.93365544;0.94163978;
0.93880117;0.92857605;0.94151652;0.95120096;0.95563531;0.95732123;0.95838326;0.95731735;0.94841838;0.93731588;
0.94151485;0.94982892;0.95235342;0.95813024;0.96485817;0.96507484;0.96079493;0.95422375;0.9547208;0.94213217;
0.9254986;0.92585123;0.93900025;0.93989813;0.92632115;0.90758318;0.8965863;0.88474536;0.87686449;0.8926788;
0.87088817;0.84774297;0.87464875;0.87329429;0.87261301;0.86272633;0.88720107;0.87778753;0.88004649;0.8807286;
0.88236314;0.47735003;0.47554082;0.48297328;0.51794028;0.53023595;0.57265025;0.60896242;0.6129483;0.63815176;
0.66200304;0.62182313;0.65857834;0.61404651;0.64055163;0.59233785;0.61223429;0.57313365;0.60117322;0.56246459;
0.54255331;0.58926302;0.54924989;0.60602927;0.60417247;0.62796706;0.58042443;0.63048673;0.61951828;0.65545064;
0.64595044;0.59490168;0.61934841;0.59435582;0.53326076;0.56785595;0.55556947;0.59623623;0.5875324;0.58568984;
0.59831721;0.53880179;0.51559532;0.52620518;0.47351134;0.53243297;0.56608361;0.61292112;0.59174728;0.56259704;
0.54288673;0.51800311;0.57460469;0.57340425;0.59460974;0.62300074;0.62318808;0.66082871;0.65042692;0.63353431;
0.67664689;0.68826377;0.7104131;0.70303345;0.69327593;0.70627129;0.71939003;0.75757807;0.71121526;0.72245407;
0.71498114;0.71378517;0.72733849;0.6700561;0.70076722;0.73560172;0.76524436;0.79123539;0.79937416;0.74873817;
0.71334046;0.6818437;0.69898885;0.68167454;0.63310438;0.675372;0.71805876;0.74324608;0.72318929;0.72902513;
0.75247622;0.76023775;0.79254806;0.81118119;0.8262279;0.81480414;0.8410334;0.79645133;0.80730844;0.76148659;
0.72424209;0.85254139;0.82517797;0.85199338;0.83988076;0.82823592;0.84092706;0.84887058;0.8731432;0.88974327;
0.87049764;0.88229024;0.85329807;0.85958362;0.88038671;0.89608324;0.9067688;0.91627842;0.92549491;0.93642765;
0.9448787;0.94901603;0.95258945;0.95649469;0.95961618;0.96266097;0.95805323;0.95945829;0.95224285;0.93715835;
0.94176507;0.94222945;0.92498147;0.90739685;0.91073352;0.89690924;0.90126514;0.91186541;0.92494088;0.90658039;
0.90733117;0.89872253;0.90149492;0.8989085;0.91075528;0.90363395;0.91592431;0.92711353;0.93168426;0.93872809;
0.93266588;0.94003046;0.9439438;0.94034231;0.9300999;0.92161226;0.92201996;0.92818093;0.93508965;0.92027849;
0.93003505;0.92768961;0.92549264;0.92871624;0.91350573;0.91650534;0.90141362;0.91079807;0.925188;0.93649101;
0.93943977;0.92413092;0.91883421;0.92567414;0.91894096;0.89837831;0.88606495;0.88803613;0.86764175;0.84823751;
0.84952372;0.8576206;0.87445921;0.88717937;0.87594509;0.84264779;0.85629416;0.86333215;0.87444627;0.8493312;
0.82657814;0.82250851;0.84678161;0.85307908;0.85850424;0.87425929;0.88750082;0.89700115;0.91010523;0.9145698;
0.91668421;0.95109373;0.95405829;0.94511992;0.95383126;0.95010477;0.94002873;0.92339158;0.9350878;0.93590528;
0.92124063;0.92406946;0.93320137;0.91635329;0.89747721;0.91144818;0.92374825;0.90888745;0.92496699;0.9360978;
0.92298847;0.92340571;0.93321919;0.93793142;0.93626845;0.94658422;0.94932026;0.9474209;0.94962299;0.95058024;
0.95100683;0.95414543;0.94934541;0.93220639;0.91811353;0.93069029;0.91161799;0.91793954;0.92230743;0.935812;
0.93410224;0.91895658;0.91768801;0.92246127;0.93407369;0.91318637;0.89981538;0.91378665;0.90183157;0.87482309;
0.8512283;0.83611572;0.86239511;0.84923738;0.85404593;0.87292051;0.89581019;0.8705492;0.83853257;0.80179077;
0.83075869;0.85849768;0.83455473;0.80236518;0.78049999;0.74171537;0.77586883;0.77998763;0.75260091;0.77917665;
0.73708868;0.72195125;0.76254344;0.78475523;0.80818737;0.82176125;0.80937958;0.81014723;0.80623049;0.77822888;
0.75855523;0.78645903;0.76313978;0.77654058;0.80796009;0.82066363;0.84291989;0.86803889;0.84560841;0.86402667;
0.83049941;0.84706247;0.83462214;0.81028616;0.77132994;0.73887622;0.72228163;0.76152354;0.7595259;0.77201962;
0.77785999;0.42192072;0.45267341;0.45427537;0.40639865;0.35397571;0.35290146;0.33819371;0.35770345;0.33400038;
0.31961107;0.31175053;0.35353273;0.32858104;0.29761115;0.2754325;0.25124547;0.22682121;0.22985117;0.27104276;
0.27528918;0.25553158;0.23215476;0.23025706;0.24559356;0.25990188;0.26475769;0.2299895;0.25775069;0.2880027;
0.32478407;0.32469809;0.32684803;0.29863295;0.35095152;0.30959314;0.32232094;0.30443826;0.26899648;0.26163417;
0.24340774;0.25404084;0.2424705;0.23944531;0.26527724;0.25851867;0.25942576;0.27768791;0.28307283;0.27852726;
0.30919802;0.33815712;0.34276256;0.32542393;0.31655872;0.30914354;0.2672053;0.2862415;0.31666639;0.35767016;
0.33936203;0.30569804;0.30520973;0.28411868;0.27113321;0.23836243;0.20552813;0.22110228;0.21573305;0.25390264;
0.25439447;0.22638386;0.2151234;0.18610205;0.15999481;0.17797333;0.19583796;0.22190429;0.21875864;0.26135898;
0.24229556;0.27444169;0.2389393;0.2286699;0.21127161;0.18251488;0.21519828;0.22884446;0.20104092;0.17527294;
0.16116256;0.15318339;0.18099354;0.17349002;0.20129803;0.19194561;0.23830739;0.24942347;0.24287708;0.24186566;
0.23302941;0.11239393;0.10285039;0.11214186;0.11642128;0.098506331;0.083153903;0.10902448;0.12357867;0.15695035;
0.16068758;0.18394254;0.2225917;0.20845269;0.2188118;0.20209189;0.21441299;0.20767939;0.17316435;0.19801188;
0.19953485;0.20256948;0.2140889;0.21597663;0.23151816;0.2101143;0.21296486;0.18037549;0.18407558;0.20405748;
0.24312502;0.24167238;0.22125423;0.21139543;0.18425162;0.16376005;0.13891903;0.13118897;0.11037865;0.097166032;
0.097013362;0.11191494;0.11315098;0.1290077;0.15977593;0.14312208;0.15965864;0.1555485;0.16064532;0.14487983;
0.12364267;0.12037303;0.15404664;0.14937694;0.14219475;0.14959484;0.15038513;0.13715063;0.16068631;0.18408386;
0.17265934;0.14334321;0.13041846;0.13646051;0.13690312;0.17107989;0.20987551;0.18430558;0.16926825;0.18608686;
0.18669547;0.17795376;0.21655332;0.23147024;0.23333009;0.22390439;0.2423878;0.22618546;0.24424361;0.2653935;
0.24163854;0.207995;0.19071978;0.18097878;0.15564257;0.15792309;0.1918923;0.22608435;0.23172492;0.23410687;
0.23691846;0.28188649;0.31112018;0.33258379;0.34648365;0.38666937;0.41011909;0.41845432;0.4616988;0.47336066;
0.50828272;0.90127099;0.90092498;0.91598111;0.90020007;0.90082014;0.90026754;0.87846082;0.87881613;0.87065566;
0.85695988;0.8640275;0.88507175;0.90430421;0.88265437;0.89046144;0.89566141;0.87150323;0.88830078;0.90058064;
0.91176784;0.9186312;0.9230631;0.92862725;0.90600646;0.91868067;0.92453146;0.92417175;0.93528062;0.94067103;
0.93299139;0.9376027;0.92143017;0.89720756;0.90365881;0.91573113;0.91663587;0.92539638;0.93725508;0.93247211;
0.92217463;0.89803606;0.89208615;0.90418315;0.89064664;0.89577913;0.90993828;0.92157334;0.9230873;0.90021551;
0.90561396;0.90072441;0.90265578;0.91746628;0.9194454;0.90617001;0.905177;0.90785664;0.91301394;0.90117055;
0.91052181;0.92395878;0.90589488;0.89296097;0.89594573;0.9117626;0.91879499;0.91573894;0.92523193;0.92757052;
0.92400807;0.93309122;0.92437941;0.92916888;0.93866998;0.94672477;0.93416554;0.93556583;0.93925399;0.94869518;
0.95533627;0.95714796;0.95676827;0.94100291;0.92829537;0.93318772;0.94263279;0.94518971;0.9457919;0.93548006;
0.93415898;0.91733378;0.92714888;0.91762573;0.90982699;0.91200721;0.91066396;0.88321859;0.89185268;0.89231253;
0.89355254;0.88333869;0.89095026;0.88578922;0.90506363;0.91590434;0.92634565;0.91766751;0.91596484;0.90669799;
0.8815586;0.89177126;0.87578952;0.89642346;0.8822118;0.90201658;0.89074737;0.90318716;0.8804208;0.88187605;
0.88208181;0.85879165;0.83276242;0.81578642;0.81001639;0.81291622;0.78526896;0.75561559;0.75126505;0.7478143;
0.7020244;0.6910007;0.64176321;0.64876521;0.62381643;0.60176313;0.55161524;0.53806847;0.50147837;0.55294687;
0.59783423;0.60191244;0.5536077;0.52041614;0.50331259;0.56070793;0.56915867;0.5929929;0.57308847;0.57662129;
0.5431456;0.52598506;0.51346081;0.53382879;0.59749287;0.61755437;0.67271405;0.65751839;0.65182835;0.68965787;
0.67171264;0.65120649;0.61454761;0.63053882;0.64168769;0.68419302;0.6401788;0.68745023;0.67145765;0.62491482;
0.60690081;0.57443076;0.59980237;0.58540148;0.61322147;0.60732448;0.62935871;0.6426006;0.69634712;0.69133031;
0.66734982;0.65009022;0.69788659;0.71046251;0.7449798;0.69967693;0.6593464;0.66258979;0.6220361;0.58199793;
0.53750199;0.57768673;0.60221988;0.58265793;0.5747667;0.59482503;0.55864495;0.57823378;0.6284706;0.6545493;
0.63086104;0.24878249;0.21585257;0.24602917;0.29502475;0.26163834;0.22943062;0.19776551;0.22218299;0.22130767;
0.21537668;0.20577835;0.22885123;0.19531721;0.19652568;0.1732423;0.21729964;0.21826139;0.23483573;0.27460787;
0.2404101;0.28887925;0.33888984;0.39184758;0.38734412;0.37694147;0.42652968;0.43007642;0.42289346;0.40934178;
0.42594114;0.38123074;0.4186714;0.4121443;0.37306342;0.41570234;0.42961466;0.40856954;0.41167518;0.45394954;
0.42933246;0.40362519;0.34936163;0.37666994;0.32636213;0.29312694;0.26725382;0.30314171;0.25805309;0.23947752;
0.26696214;0.30506685;0.2950612;0.32889789;0.2852439;0.24863492;0.24638213;0.29358971;0.26233473;0.25845924;
0.30627543;0.26309475;0.22801673;0.26366279;0.29863217;0.32775548;0.30761603;0.29210579;0.28647491;0.24888089;
0.24179813;0.23520385;0.21221867;0.26063496;0.28287739;0.30116594;0.32911864;0.30630261;0.27552876;0.27420729;
0.30855185;0.30569515;0.34189638;0.37417337;0.32436219;0.2843602;0.26687995;0.29098028;0.32522663;0.36817083;
0.34980604;0.39482313;0.34937027;0.36146468;0.33218291;0.37888566;0.37114599;0.34008479;0.3270185;0.33202121;
0.33598107;0.37732017;0.39744094;0.38738048;0.37396398;0.40555736;0.43399966;0.47799003;0.43748975;0.483787;
0.44399995;0.42463273;0.44110522;0.48954517;0.49297911;0.4648768;0.52213115;0.5328843;0.54038239;0.59428954;
0.61173928;0.61621124;0.6383239;0.63241822;0.64673764;0.6525982;0.63746607;0.66762477;0.62890929;0.6035462;
0.59255493;0.58325845;0.61493498;0.62419444;0.57432717;0.52457356;0.54020894;0.49809223;0.46969792;0.51952797;
0.56157738;0.60110003;0.60393882;0.55746466;0.51687956;0.50447565;0.46917909;0.46985435;0.45937625;0.45980835;
0.44509822;0.39267471;0.40017942;0.3652125;0.33705273;0.34312668;0.31800094;0.32827079;0.35351813;0.40942973;
0.38413203;0.44379932;0.48088729;0.44687018;0.42499754;0.47157371;0.48848391;0.45738524;0.45874548;0.49165276;
0.45308527;0.45221663;0.42186031;0.47160542;0.42568952;0.3839049;0.35102963;0.41039625;0.40050244;0.42707568;
0.46037033;0.47981012;0.53023881;0.55582708;0.56626534;0.52307677;0.56719553;0.50430936;0.55641729;0.57821947;
0.55775523;0.53478342;0.53022385;0.48394772;0.49795032;0.54112476;0.51782566;0.52038938;0.54740858;0.59610254;
0.62863791;0.75547135;0.72204858;0.74879187;0.77319354;0.73930633;0.69012827;0.69015777;0.69578302;0.66894525;
0.69049203;0.70464188;0.71196729;0.75127316;0.77324528;0.7785269;0.7593832;0.7618019;0.76028407;0.75777745;
0.77673352;0.73494142;0.72177875;0.75294721;0.75101018;0.7232011;0.72433442;0.74555814;0.76573354;0.77369618;
0.73573619;0.69403368;0.72812808;0.74359411;0.77346218;0.74160683;0.74559343;0.78487575;0.78589052;0.75006187;
0.75396502;0.77262163;0.78937161;0.80206853;0.821473;0.80585676;0.79650533;0.76360476;0.76286018;0.73244965;
0.72560358;0.72319764;0.74721473;0.75289911;0.70831728;0.72387153;0.73235619;0.73699039;0.75459498;0.75880176;
0.76782691;0.77683312;0.72800261;0.74779224;0.78293872;0.74572605;0.70327723;0.66870826;0.62511122;0.64958078;
0.65048039;0.68967694;0.65048105;0.60716182;0.59779948;0.63241589;0.57789898;0.56276643;0.61148167;0.59391862;
0.61963952;0.63528383;0.6673345;0.66495645;0.66914457;0.63418913;0.65416378;0.66298538;0.69866085;0.70952994;
0.74824554;0.74304324;0.78362459;0.81266689;0.83535701;0.84544784;0.85188848;0.81725615;0.83869255;0.83995813;
0.83328086;0.88234264;0.88033903;0.88801581;0.86535287;0.88357377;0.89492112;0.86525363;0.83872175;0.85997009;
0.87039912;0.88147652;0.89420873;0.89397907;0.87973171;0.86915648;0.88094383;0.89705491;0.90878534;0.90884954;
0.91701102;0.89996409;0.87123907;0.87606668;0.85380518;0.83627743;0.85924268;0.85000062;0.85089564;0.85478276;
0.86273152;0.86291277;0.85877568;0.85461104;0.81664145;0.7818445;0.7961936;0.75690138;0.7895931;0.78906572;
0.79347098;0.76271921;0.76468605;0.77230114;0.74730766;0.74018061;0.75115132;0.70862949;0.67459768;0.62645853;
0.66665614;0.65559065;0.6870029;0.6814357;0.64405018;0.59973228;0.6307075;0.6757381;0.72500223;0.701823;
0.66000211;0.65364355;0.61868417;0.59314501;0.59438205;0.63986683;0.60929316;0.58884811;0.58229256;0.61035329;
0.62726253;0.58219647;0.62987566;0.60893655;0.62462568;0.64995444;0.69001943;0.64164847;0.63804454;0.66697657;
0.65933031;0.66397625;0.71261632;0.74904817;0.76502055;0.71999919;0.68017304;0.66942894;0.68795818;0.64374536;
0.62545002;0.6055879;0.64995188;0.65130323;0.60701764;0.5569883;0.50603431;0.51477444;0.55957192;0.52073503;
0.58236712;0.22930175;0.19895996;0.1742678;0.16853441;0.15950188;0.17108548;0.20657311;0.21908343;0.20622028;
0.23094991;0.26607782;0.25260893;0.25663906;0.24256644;0.25744268;0.28106156;0.32122236;0.29368573;0.30224881;
0.2864446;0.24502425;0.22981487;0.19686373;0.20730075;0.21723197;0.21928711;0.1922459;0.19822539;0.19124612;
0.22713491;0.22348395;0.24599679;0.28362474;0.33555827;0.28968909;0.29523364;0.27173612;0.24426052;0.25974223;
0.26930702;0.27711979;0.28122956;0.29855934;0.28613028;0.32697302;0.28822845;0.26252353;0.26004872;0.2549403;
0.23555833;0.24743922;0.23116997;0.24195847;0.26044041;0.23469062;0.28358412;0.33140662;0.28836796;0.31738693;
0.28277197;0.2817829;0.26319507;0.3085652;0.34609911;0.38048056;0.43196103;0.46366322;0.42317188;0.44221243;
0.47472984;0.50572425;0.55640459;0.59198499;0.59401947;0.56770593;0.59467256;0.5741266;0.55784982;0.60741329;
0.55616379;0.60145408;0.55001378;0.52854562;0.496326;0.51128256;0.49796802;0.52637714;0.5550068;0.55918038;
0.55797094;0.53613275;0.50821406;0.4646326;0.50120085;0.51632071;0.49868569;0.4421083;0.47557098;0.45832336;
0.47979388;0.72645241;0.70604533;0.66243219;0.67359948;0.68089879;0.67437196;0.67170823;0.66795349;0.69323438;
0.66187584;0.66427851;0.71194577;0.65704203;0.6067977;0.60444206;0.54783118;0.58066916;0.61504143;0.58704233;
0.60708702;0.57599586;0.62420654;0.62002087;0.62547755;0.6556108;0.60967094;0.65551776;0.62544197;0.65024519;
0.62587237;0.64186084;0.66595352;0.66453946;0.61146188;0.6235947;0.66726279;0.68211555;0.70549655;0.72651559;
0.74344796;0.71655911;0.6797263;0.6780898;0.66023743;0.67016941;0.64678645;0.60131639;0.56016982;0.50861955;
0.45726821;0.4194324;0.45222974;0.48941454;0.55114865;0.58248132;0.64014775;0.67391801;0.69021118;0.67447847;
0.65089542;0.60135692;0.63499123;0.58455187;0.62565148;0.65276474;0.68403989;0.65849775;0.6606046;0.63873756;
0.6603958;0.67087549;0.65931547;0.60791439;0.6297524;0.66938001;0.66779453;0.66928148;0.63706255;0.64415342;
0.6745652;0.71509671;0.67386949;0.70091522;0.66783661;0.67993784;0.65417451;0.65702683;0.69224215;0.70607042;
0.72392243;0.7487154;0.72351736;0.67359471;0.69420129;0.70592445;0.73596901;0.76082665;0.78583944;0.73624891;
0.75846249;0.76727462;0.79485315;0.80843794;0.77944809;0.73620915;0.72040349;0.71596849;0.66466194;0.65454054;
0.62303942;0.61526293;0.61602378;0.66474122;0.63093615;0.68411225;0.66466129;0.62103635;0.58903533;0.57263201;
0.59503311;0.64522129;0.63117963;0.58076257;0.53546822;0.5389899;0.58226472;0.5817135;0.55997825;0.56136346;
0.53409761;0.55087531;0.58213204;0.61868083;0.58233851;0.54270422;0.57323903;0.6177175;0.60681546;0.59533608;
0.5427891;0.58700484;0.62546819;0.61725479;0.63009119;0.58189976;0.60131127;0.58729404;0.63197213;0.67524385;
0.70023167;0.7231729;0.69015193;0.68310827;0.68718594;0.65075856;0.65159446;0.67471683;0.66021812;0.62351429;
0.56942576;0.57265723;0.59175909;0.56031227;0.52852637;0.53589642;0.48337597;0.465139;0.49094018;0.47474214;
0.49189016;0.52140313;0.52621335;0.58656424;0.56429619;0.62076735;0.56822962;0.54900897;0.54016984;0.55075777;
0.57211626;0.60342652;0.65399694;0.60563105;0.60441434;0.60067862;0.62914747;0.57776284;0.54703307;0.59453869;
0.5746848;0.54058778;0.59214085;0.57251918;0.58315748;0.63010526;0.5786643;0.53754073;0.53621602;0.51934296;
0.57316303;0.3823325;0.39794049;0.42792389;0.47274899;0.49095878;0.4826439;0.53875345;0.49437487;0.51019454;
0.51109964;0.48856288;0.48737633;0.48146379;0.49159446;0.50423676;0.48433858;0.49397895;0.49981979;0.50373429;
0.49712911;0.47770104;0.47977674;0.42869917;0.39186293;0.39392132;0.44080907;0.42942029;0.3915562;0.35273147;
0.40480804;0.4411768;0.49194971;0.50715762;0.54948163;0.52736765;0.56604773;0.57886535;0.55637777;0.57678908;
0.59533298;0.64262629;0.66688287;0.70970243;0.720438;0.67773491;0.71323282;0.65618914;0.64182556;0.6761784;
0.67930186;0.66763467;0.68199968;0.68336296;0.71628618;0.74733377;0.76508337;0.78950644;0.74916422;0.69848746;
0.66301584;0.61277914;0.63973767;0.6597988;0.62783611;0.66606975;0.62815487;0.66725737;0.66218543;0.69809508;
0.69545126;0.68883574;0.69210774;0.72092855;0.66916424;0.70840281;0.72382313;0.71818429;0.74728203;0.72323281;
0.72444052;0.73158705;0.74780202;0.72308421;0.75577813;0.74673814;0.7727077;0.75192004;0.72126502;0.75106144;
0.76026279;0.76747715;0.79004931;0.78868353;0.80979609;0.81531096;0.81760776;0.79570848;0.81335098;0.78390914;
0.78714043;0.95710331;0.95003229;0.95189422;0.94076079;0.93994743;0.93571001;0.94256693;0.93076491;0.93542314;
0.93709368;0.93778342;0.94163686;0.94631612;0.95251477;0.95912832;0.94642633;0.93928665;0.93621343;0.94257379;
0.93012422;0.92128825;0.91303623;0.90980422;0.89665639;0.90329874;0.89541358;0.90677685;0.92004192;0.92360932;
0.91431731;0.91106993;0.91708344;0.93110818;0.93976706;0.93808872;0.93003535;0.92804778;0.9371559;0.94531685;
0.95461571;0.95385778;0.94621456;0.92916805;0.93232775;0.91436231;0.90934938;0.90268052;0.89417171;0.8889659;
0.90206563;0.8829962;0.89649343;0.86895323;0.85497838;0.85598594;0.87968469;0.85040385;0.8333565;0.80948222;
0.80295956;0.78535533;0.77625811;0.7657032;0.79646468;0.7869094;0.80665946;0.79869485;0.79575932;0.76789594;
0.79546976;0.83197981;0.85526991;0.86969799;0.86112148;0.85544395;0.86963767;0.8774305;0.85185862;0.83612651;
0.81442529;0.81494194;0.79343873;0.8057878;0.77383536;0.77433181;0.80678529;0.77226943;0.7448011;0.73190022;
0.74536258;0.75759584;0.7155568;0.68572867;0.63961965;0.66027284;0.62365359;0.61712182;0.65574968;0.6483025;
0.70071924;0.21270916;0.18490556;0.18975465;0.22548746;0.22820428;0.19629955;0.17734386;0.14967079;0.16927409;
0.15595654;0.13279517;0.11405331;0.11356288;0.10963558;0.1169139;0.099550605;0.093188882;0.099649064;0.1220599;
0.13707352;0.14763528;0.17696369;0.16970091;0.1570479;0.17484154;0.16418038;0.14764503;0.146991;0.18348944;
0.21152213;0.18979651;0.1927561;0.23339032;0.25743029;0.23728034;0.24593696;0.20912859;0.21764185;0.26515958;
0.30854541;0.34461579;0.35536745;0.30594572;0.35476202;0.32602635;0.36159313;0.38329899;0.4260661;0.46951032;
0.41014335;0.37204671;0.37359798;0.31858972;0.34227914;0.31963903;0.29083693;0.26694775;0.2679964;0.2628403;
0.23921372;0.2460008;0.21492566;0.20284621;0.19499195;0.17874269;0.20498142;0.21895932;0.18358505;0.18164831;
0.21343327;0.18107177;0.16202888;0.14177348;0.12492996;0.11643635;0.13763055;0.16163331;0.14135019;0.12664178;
0.11794477;0.14670391;0.14798115;0.13000451;0.15450069;0.14529094;0.12886475;0.15012054;0.14700712;0.14292881;
0.14570038;0.13784897;0.13086258;0.16476847;0.18547593;0.22899021;0.23501743;0.27211773;0.27087221;0.24194576;
0.26564696;0.43236759;0.48801613;0.54249007;0.58453274;0.6282118;0.67397225;0.6767025;0.70793992;0.68677175;
0.71330756;0.74729943;0.76250392;0.76314634;0.78621769;0.79729515;0.79525071;0.7628696;0.73722774;0.68039703;
0.69087577;0.71619731;0.69449842;0.70137239;0.71789414;0.68120116;0.63980144;0.67299432;0.68550152;0.64843923;
0.62239158;0.62896514;0.65065426;0.67793369;0.6802358;0.65452111;0.68361229;0.69939345;0.7097671;0.71631891;
0.69825685;0.69004464;0.63471949;0.67295009;0.70488131;0.68822062;0.66979384;0.67182469;0.64714372;0.68070316;
0.6980511;0.71007288;0.64914656;0.66929805;0.64963597;0.64771098;0.64785266;0.65602267;0.68645829;0.67351013;
0.67783213;0.71235818;0.68669355;0.7001285;0.69898099;0.73782587;0.73065501;0.74627149;0.74963003;0.75234932;
0.7317903;0.74039745;0.76384556;0.76625657;0.77934611;0.7324689;0.70752943;0.67048365;0.67715508;0.6869961;
0.65945119;0.68985647;0.69245648;0.64345992;0.62977177;0.64181072;0.61433285;0.66276807;0.60540658;0.59364778;
0.56130284;0.50500524;0.54253018;0.56595767;0.61320311;0.58364886;0.59114099;0.59206414;0.62772822;0.57495004;
0.56565249;0.70697415;0.73070061;0.75823087;0.79031044;0.7967068;0.7569136;0.765607;0.76971167;0.77758139;
0.77580369;0.78996956;0.76478112;0.77276582;0.80805016;0.822007;0.83634484;0.81290895;0.77416807;0.80526954;
0.77116084;0.76969784;0.76544416;0.74563336;0.69550723;0.68133593;0.69602096;0.64312041;0.64682382;0.69647074;
0.67530024;0.63041461;0.59143144;0.5421707;0.591703;0.6086064;0.57245439;0.54415029;0.49804184;0.4519549;
0.4223538;0.39666459;0.4577409;0.45893073;0.50271934;0.52407789;0.53026801;0.49700838;0.50837821;0.52675354;
0.51276255;0.54000425;0.49956796;0.50390381;0.56387949;0.55245727;0.56553286;0.60639662;0.63906842;0.58895284;
0.56177998;0.57875329;0.57225919;0.55083317;0.53693086;0.56157422;0.52081144;0.52103072;0.55346376;0.59149957;
0.59868562;0.58699238;0.55978888;0.54743409;0.55023003;0.54175907;0.51966584;0.50758892;0.50935411;0.53471684;
0.51575494;0.46992421;0.51752472;0.56279737;0.591721;0.54895544;0.56567711;0.54047656;0.57484609;0.54872543;
0.55138123;0.53774554;0.56470495;0.5438841;0.59607565;0.55630153;0.59627724;0.61829942;0.61825341;0.67142218;
0.61577493;0.45164302;0.44437367;0.44032711;0.4437449;0.45238891;0.47210842;0.4466508;0.50242162;0.47973695;
0.46243092;0.52178258;0.5246371;0.5083124;0.52267486;0.4823274;0.52041012;0.54512358;0.5629825;0.51247263;
0.53428775;0.56412089;0.50827342;0.51306206;0.48653954;0.44808906;0.48208931;0.4525153;0.49013066;0.5121938;
0.53048438;0.5833016;0.57426661;0.58209825;0.5458259;0.59946305;0.58199275;0.55113798;0.49760428;0.48047268;
0.53291637;0.54933745;0.57765359;0.61081469;0.59259295;0.62116379;0.61892283;0.63927537;0.62071645;0.59536302;
0.5654217;0.60364419;0.61348337;0.64248765;0.62443709;0.64820242;0.66432905;0.69733614;0.70556372;0.66984975;
0.69916034;0.70580381;0.68410856;0.69294828;0.66485184;0.68912697;0.64352405;0.6508407;0.61901677;0.58990288;
0.60846031;0.64308721;0.67846113;0.65503711;0.69172353;0.69371343;0.63639599;0.65771037;0.70023108;0.67881447;
0.65506303;0.60762441;0.55656385;0.58608949;0.54426813;0.56727386;0.59405881;0.6315946;0.58827955;0.57983994;
0.59453523;0.59965521;0.54625571;0.5673613;0.59412652;0.57346308;0.62687737;0.64216602;0.6070351;0.62737745;
0.65953624;0.80263019;0.79818487;0.81658053;0.8073355;0.82755023;0.821069;0.79647058;0.75900334;0.77489376;
0.80245274;0.80757517;0.82087737;0.83721018;0.85350108;0.85811222;0.86487526;0.87728649;0.84989887;0.85908806;
0.82870644;0.80511916;0.79518414;0.81284112;0.8327843;0.85129458;0.84290403;0.83871621;0.84011173;0.86061621;
0.8789131;0.87714225;0.86471683;0.86356741;0.87040144;0.87056345;0.88236326;0.8951351;0.90334588;0.88144779;
0.86609322;0.85820544;0.87917328;0.85129011;0.87322348;0.88759899;0.88004309;0.87930679;0.8474021;0.84248847;
0.85641581;0.84910172;0.86742795;0.83290464;0.84333169;0.84903896;0.87281346;0.87546492;0.84147865;0.82210845;
0.79743224;0.82178378;0.8257426;0.83839881;0.85830152;0.87013549;0.8575806;0.82579243;0.78287458;0.78782976;
0.77752405;0.76328224;0.72779661;0.7388162;0.75933462;0.73732716;0.75020742;0.71675956;0.72770184;0.71672976;
0.7401002;0.76063418;0.76446807;0.75951242;0.79225636;0.76995802;0.72266883;0.70447755;0.6973604;0.68767703;
0.70050174;0.68537891;0.73179793;0.77389109;0.8053146;0.77590758;0.79118532;0.752581;0.77948165;0.79213166;
0.80063266;0.81118739;0.78430259;0.78735763;0.78633863;0.74585807;0.72388333;0.72797436;0.7114982;0.73780167;
0.76655954;0.78750008;0.78700453;0.79216051;0.80620599;0.80007356;0.78919679;0.82085258;0.82112449;0.79354149;
0.81445384;0.81472963;0.81753528;0.82634878;0.83442581;0.82225239;0.84588063;0.82069319;0.82808876;0.83287144;
0.8450554;0.86337203;0.84595275;0.85298103;0.8696174;0.8583563;0.86557418;0.885198;0.90275067;0.90758115;
0.90676308;0.87742811;0.89501554;0.90341514;0.91833192;0.91433972;0.92711079;0.91737014;0.9110285;0.88793635;
0.88031065;0.88305682;0.87932193;0.88587391;0.90139222;0.91586745;0.92834103;0.93106335;0.93795997;0.93043852;
0.9136014;0.91620529;0.92191768;0.91067171;0.90497053;0.89269435;0.8898083;0.90282625;0.88939476;0.89690351;
0.89118749;0.89331484;0.90890121;0.9162693;0.92250371;0.92229706;0.93056595;0.93134874;0.91495025;0.92402047;
0.92705363;0.91561162;0.92770052;0.92894459;0.93362522;0.92108941;0.93228674;0.91776717;0.92287755;0.92145741;
0.91057479;0.92192721;0.92590773;0.92463219;0.92679006;0.91598451;0.91722369;0.9039858;0.91416019;0.92360824;
0.90408236;0.9628073;0.95526946;0.95894378;0.94837421;0.93306279;0.91690534;0.90606612;0.889489;0.8771522;
0.84600651;0.86517417;0.87238759;0.87220252;0.85737967;0.85776919;0.87373608;0.8931188;0.89765608;0.89799654;
0.91566038;0.92890173;0.93439454;0.92716283;0.91374755;0.91664964;0.92293686;0.9213531;0.92889404;0.94131052;
0.92842841;0.93352419;0.94419265;0.94839799;0.93183935;0.91943079;0.90362668;0.88762707;0.89988726;0.8914209;
0.89083922;0.89928818;0.87999278;0.87604594;0.87560958;0.8618902;0.84026152;0.8659904;0.8720336;0.87232941;
0.84342462;0.82181531;0.81932187;0.81997544;0.84524292;0.85635895;0.8345803;0.84172738;0.84342849;0.8184486;
0.83870614;0.85957551;0.88097697;0.86608523;0.87583655;0.85350984;0.83229965;0.85181469;0.84321654;0.81674409;
0.80054814;0.7840606;0.80560333;0.83354175;0.85816026;0.85442352;0.82624209;0.84977436;0.87066454;0.86825114;
0.88444179;0.86283445;0.88324296;0.89829266;0.89118707;0.89874083;0.91111159;0.92063463;0.91862363;0.90583169;
0.90580374;0.91471034;0.91892785;0.91759676;0.8979131;0.87695366;0.89271683;0.88278353;0.86897898;0.86925167;
0.85410058;0.61150682;0.62834942;0.63489652;0.58195198;0.56347317;0.60874152;0.58927792;0.60612571;0.56714284;
0.52749181;0.47351846;0.46523368;0.44594306;0.51014054;0.51912403;0.53699881;0.49816588;0.49180079;0.48812336;
0.54744649;0.59602225;0.59562451;0.54874814;0.55660975;0.57482404;0.59411824;0.6024816;0.54828745;0.50437587;
0.54667461;0.54593509;0.51338434;0.51467723;0.53668964;0.57666183;0.55654091;0.50515711;0.45557719;0.47348994;
0.43396571;0.38311428;0.4228484;0.45229444;0.42906272;0.45610151;0.44265464;0.47465971;0.47779971;0.50117439;
0.48989794;0.5349474;0.52523082;0.5356921;0.55620933;0.54989982;0.55712497;0.57497102;0.60174769;0.65288055;
0.61546707;0.60859889;0.63442421;0.65666968;0.61360329;0.62255865;0.60556293;0.59233683;0.63006616;0.66069978;
0.61733335;0.61651927;0.65138566;0.62824029;0.64614981;0.66356552;0.71141022;0.66733962;0.61913562;0.56735533;
0.60068065;0.64561641;0.64566237;0.64042222;0.59149128;0.64456493;0.60977048;0.62638974;0.61840498;0.67011392;
0.69369787;0.6857627;0.71299499;0.7042551;0.6861248;0.72673517;0.69522047;0.68801469;0.70794559;0.6598742;
0.6874314;0.78822136;0.80259293;0.78102285;0.80586582;0.82598495;0.78263164;0.75669795;0.77496558;0.80912751;
0.81982934;0.82766736;0.84089607;0.82362872;0.84401286;0.84048355;0.8605305;0.874318;0.88848954;0.86710936;
0.88376695;0.88860679;0.87637043;0.88678896;0.88972086;0.8858909;0.90070242;0.8841188;0.87938553;0.84735209;
0.83595324;0.79867083;0.78005689;0.81456357;0.77975702;0.80523199;0.76880485;0.75400007;0.763771;0.75571394;
0.72353119;0.68230796;0.71376991;0.71052349;0.67185003;0.67497838;0.62303233;0.62551486;0.64635706;0.65444189;
0.59882498;0.61724836;0.60921681;0.55332756;0.50515676;0.48824948;0.52346081;0.47843099;0.50233078;0.56732023;
0.59071553;0.57102871;0.53938287;0.55051553;0.60074419;0.57475162;0.52994299;0.48320585;0.43101692;0.46005219;
0.4107492;0.459232;0.4973473;0.4777551;0.42624569;0.43790343;0.43658635;0.40071881;0.45173925;0.40847477;
0.47208738;0.50749201;0.50477862;0.53124052;0.4878152;0.43688315;0.41118875;0.47372714;0.45161006;0.40353316;
0.41792205;0.37512922;0.37259206;0.42994553;0.45785952;0.51642221;0.46891043;0.44587073;0.45629001;0.43941256;
0.44529489;0.16966131;0.2051453;0.1781076;0.21030699;0.21220197;0.18656327;0.22803225;0.20069218;0.20930298;
0.22107051;0.24847254;0.21448337;0.20422511;0.20536005;0.23299997;0.22649169;0.26769522;0.29172093;0.31644762;
0.2878682;0.27148822;0.24395616;0.23366736;0.24986465;0.28624651;0.26052749;0.29522869;0.25156853;0.24351141;
0.26072454;0.22989835;0.21243608;0.2450555;0.21432184;0.19276118;0.20214579;0.23210721;0.210623;0.19894169;
0.2360985;0.26850131;0.26553562;0.24471331;0.20501128;0.23248447;0.22957133;0.24349704;0.26789734;0.24292734;
0.24399053;0.28021005;0.26241505;0.23846389;0.22702965;0.25038412;0.28428608;0.31464469;0.36210874;0.34469715;
0.39900741;0.35857496;0.31906685;0.30840254;0.34794322;0.34084931;0.38399085;0.32838744;0.28864193;0.24658021;
0.26376718;0.22922678;0.20206957;0.22307856;0.19109222;0.16610977;0.14484505;0.16609725;0.16915277;0.19819383;
0.24339738;0.25860935;0.30929932;0.34472451;0.31990388;0.30935487;0.31282797;0.30055383;0.2973235;0.34877038;
0.30621973;0.26574397;0.29476139;0.31721637;0.3693541;0.34241983;0.33321756;0.30260676;0.29276294;0.27043742;
0.30138022;0.5077377;0.50299674;0.53907692;0.48385772;0.5414452;0.54458302;0.52051044;0.47749957;0.46059909;
0.44809118;0.47196582;0.50172949;0.45858032;0.48984376;0.43927404;0.47886837;0.46194261;0.50388592;0.53613627;
0.58998179;0.58668965;0.61654705;0.64334476;0.60937536;0.62505418;0.59359527;0.64149314;0.64702296;0.62073737;
0.66066796;0.61914104;0.60869545;0.61428732;0.66006875;0.64569944;0.661933;0.69132239;0.670178;0.67369992;
0.69933605;0.68970215;0.63660133;0.68024331;0.7076202;0.65709794;0.66215593;0.6479044;0.67689067;0.67223358;
0.65695512;0.63826728;0.5865733;0.6052019;0.60424268;0.6454556;0.63778812;0.64171374;0.62984592;0.5778501;
0.59504312;0.6281569;0.63224185;0.62983757;0.56739575;0.53674906;0.52164447;0.52137494;0.49984339;0.4986288;
0.50831097;0.47947243;0.52154136;0.54833281;0.49872398;0.49669391;0.48577759;0.4390606;0.46936584;0.4850094;
0.51099676;0.45839012;0.47542948;0.51865542;0.47867236;0.53015685;0.57042164;0.56922537;0.52474666;0.54845887;
0.55057007;0.53882599;0.48721519;0.45910767;0.50178421;0.52476376;0.57319319;0.5662657;0.51443923;0.55489475;
0.49339706;0.57520741;0.53049827;0.54362887;0.59790826;0.61594856;0.59673518;0.54989094;0.56134933;0.53905988;
0.48045841;0.49442369;0.50208038;0.54017878;0.5267272;0.51216912;0.51966977;0.51828283;0.53351545;0.57282537;
0.59830517;0.5517391;0.52023733;0.55766028;0.53922689;0.55909288;0.53322053;0.56173563;0.59292865;0.56933242;
0.5511536;0.58106059;0.62613881;0.61366439;0.57588601;0.52998787;0.50238621;0.50380331;0.55203998;0.53268319;
0.53531623;0.47985294;0.47702205;0.53315467;0.54180557;0.56790864;0.61554337;0.57211906;0.61148912;0.6583994;
0.61265135;0.59764171;0.57590634;0.5426861;0.56158584;0.52464384;0.48565286;0.45859772;0.4119052;0.46098283;
0.50300926;0.49843991;0.45280901;0.41603303;0.40518579;0.37539256;0.43568814;0.41519991;0.44274503;0.46633095;
0.43225342;0.39512002;0.35692042;0.37842199;0.36974764;0.34953532;0.39459628;0.39994988;0.35254842;0.38509476;
0.35774627;0.34669852;0.31719521;0.30213764;0.29432672;0.29150918;0.25822151;0.29118523;0.26549822;0.27331343;
0.25239825;0.2503067;0.21606986;0.22607574;0.26369888;0.25148356;0.22153467;0.19997799;0.17949462;0.17567395;
0.16477528;0.035925299;0.038118843;0.033880707;0.029766934;0.038357425;0.036754083;0.043530658;0.036819652;0.044275776;
0.043108776;0.039454158;0.046952009;0.049332675;0.047189172;0.049037509;0.045945331;0.039723985;0.035967279;0.038006362;
0.037698191;0.03441624;0.035749123;0.037567236;0.037476618;0.033391301;0.03844703;0.042915799;0.046270791;0.039331745;
0.03735891;0.033102795;0.044461332;0.038897917;0.036226861;0.039772015;0.052617818;0.066678174;0.073851384;0.08994586;
0.088072956;0.085014649;0.08156465;0.097286351;0.09490487;0.1091209;0.094839558;0.11818051;0.13692129;0.15065746;
0.13030922;0.12151618;0.10844019;0.10432959;0.093811944;0.11203483;0.093233019;0.11672554;0.13185556;0.13342988;
0.11864642;0.097168759;0.082774326;0.1000132;0.12649104;0.11421924;0.104722;0.09721718;0.11521985;0.14333962;
0.13744369;0.14795269;0.17977309;0.17219025;0.19026144;0.21123396;0.23834434;0.26477158;0.29662061;0.30959514;
0.28410846;0.29777089;0.2900134;0.31576338;0.31645894;0.35223174;0.33638805;0.29408976;0.2949847;0.24516805;
0.21910323;0.25116199;0.23836231;0.2223815;0.23063073;0.21264739;0.23659377;0.24841096;0.28895095;0.31071812;
0.32233191;0.83930796;0.8524248;0.86721981;0.8522619;0.84594989;0.8638733;0.87950182;0.85069054;0.83568126;
0.83266824;0.80305988;0.77108634;0.80070907;0.83242816;0.82692605;0.85228765;0.81713307;0.7872622;0.76491928;
0.7320658;0.75669318;0.71608436;0.67437446;0.64036441;0.65343273;0.65754455;0.69516563;0.67743981;0.63949543;
0.61423266;0.59334028;0.58997315;0.57671845;0.52848685;0.51164287;0.51145375;0.47105756;0.4687964;0.44976476;
0.43310472;0.47583845;0.50679809;0.48399305;0.45523298;0.45108008;0.43749079;0.40704274;0.36753315;0.36502185;
0.38509136;0.40613386;0.38728055;0.3497377;0.32540533;0.33280388;0.30299658;0.29511771;0.27690294;0.28412426;
0.27516049;0.25774738;0.29350352;0.33446917;0.29833061;0.35708469;0.39732295;0.4618713;0.49798071;0.55950314;
0.55527186;0.61342764;0.66878146;0.71030277;0.738406;0.69689107;0.7421335;0.73750514;0.75837004;0.77649921;
0.80524498;0.80916137;0.81834519;0.82252485;0.80325007;0.8206889;0.8433128;0.84335893;0.86719835;0.85007846;
0.87034714;0.87288487;0.85293287;0.86288625;0.87624395;0.84640712;0.85754573;0.85458922;0.87845892;0.85219043;
0.85021317;0.80070239;0.82406408;0.82346261;0.78756452;0.81588942;0.81289726;0.82153845;0.82006705;0.79462677;
0.82625091;0.84025192;0.84250277;0.86446315;0.87501591;0.89327598;0.86646187;0.85487324;0.84761423;0.8584587;
0.87546647;0.85654169;0.87563384;0.89165515;0.88335705;0.89920366;0.90598267;0.91633707;0.92559165;0.92940438;
0.9070006;0.90332443;0.87657183;0.87177533;0.8843171;0.88764864;0.89884102;0.89100718;0.90269083;0.90422314;
0.90814602;0.91105813;0.92487276;0.90165097;0.90663791;0.88343608;0.89464033;0.86313772;0.85518873;0.85606802;
0.87472588;0.89306247;0.8983444;0.87933719;0.85554069;0.87718946;0.8826654;0.88758576;0.89464951;0.90959394;
0.9202925;0.93011063;0.93995351;0.92264557;0.92746502;0.93602997;0.94120592;0.94801855;0.93367451;0.93399072;
0.93609518;0.93818659;0.91708207;0.92019755;0.90352184;0.89100975;0.86613488;0.87576014;0.87611508;0.88678539;
0.88849688;0.86347091;0.85025781;0.87256908;0.86827093;0.86934447;0.89032882;0.89771575;0.89723194;0.87502778;
0.88250953;0.89392233;0.8685323;0.84495354;0.84344679;0.80984795;0.81872189;0.8372888;0.8247155;0.81215107;
0.80680609;0.76674765;0.75812656;0.74568123;0.69906205;0.73665369;0.69488424;0.64222467;0.67062443;0.7065174;
0.73970872;0.72647613;0.73162323;0.76913017;0.74529392;0.70858639;0.71948767;0.7369675;0.72969282;0.69156879;
0.71516883;0.75838959;0.75787365;0.70865828;0.72128212;0.73441041;0.77499861;0.76364595;0.71601647;0.75938374;
0.73260814;0.74839419;0.77647358;0.77789593;0.78226835;0.76042277;0.74352711;0.74137187;0.77437526;0.80150783;
0.80729759;0.80890924;0.81871498;0.78529191;0.80790895;0.80328816;0.82622999;0.85291159;0.86931086;0.85829264;
0.83049816;0.79098588;0.76864862;0.8039068;0.82810515;0.78560758;0.73875618;0.77858526;0.78402042;0.80795604;
0.82796377;0.85091162;0.86399519;0.86656523;0.87093359;0.87408483;0.87234873;0.88719106;0.8675015;0.85546798;
0.8298077;0.8050884;0.79899848;0.81413925;0.80238473;0.79184091;0.8182196;0.8400318;0.81053329;0.80754536;
0.82753944;0.83440447;0.8495295;0.83522463;0.85375738;0.84766948;0.84840649;0.82861757;0.84568232;0.8479749;
0.83899438;0.80348933;0.79870999;0.787269;0.78157955;0.75110763;0.7284627;0.73141724;0.70347047;0.68496919;
0.68172878;0.59316128;0.56794375;0.55193877;0.54087883;0.49149829;0.54101282;0.49329886;0.44133008;0.38747346;
0.40500683;0.43454477;0.46413618;0.43780804;0.39291146;0.44680279;0.50215405;0.56029499;0.51135296;0.50606972;
0.50995678;0.4840636;0.53101116;0.51405531;0.46389958;0.45970458;0.4664529;0.48228866;0.48165092;0.49797857;
0.52354074;0.47368753;0.50642771;0.56367528;0.51774997;0.48019937;0.54220164;0.5241524;0.55503649;0.58891225;
0.61539721;0.61035913;0.59337068;0.61171442;0.58422887;0.59948266;0.54628086;0.5880819;0.53205252;0.54171079;
0.57229108;0.53882241;0.56283683;0.51915014;0.51962727;0.5393303;0.52901328;0.47245246;0.46807262;0.52010316;
0.50916433;0.48390788;0.47678095;0.48117661;0.45855528;0.49536279;0.52084142;0.56502777;0.53826374;0.56817204;
0.6038624;0.58213234;0.58227968;0.57019567;0.57990831;0.58530277;0.53415602;0.48863438;0.46380424;0.52639103;
0.58510327;0.5686236;0.58089399;0.59354621;0.61537111;0.589764;0.58432239;0.61919338;0.60100353;0.61242276;
0.58723986;0.60228336;0.6229701;0.63054353;0.57806379;0.52781558;0.57351661;0.54117668;0.55014896;0.50075299;
0.47386733;0.41581675;0.36465481;0.42228499;0.37915826;0.39973697;0.38424185;0.3700881;0.42064586;0.37428913;
0.38256076;0.33328295;0.31752169;0.29366872;0.25779429;0.29099959;0.30422458;0.33304468;0.37900493;0.39380777;
0.36251003;0.39041531;0.3580341;0.34411159;0.30821884;0.27397707;0.30636093;0.28348535;0.32826826;0.32836166;
0.29848802;0.28731602;0.29230961;0.33193907;0.31560299;0.33258745;0.30597016;0.29110941;0.32813913;0.38718164;
0.37271628;0.36623797;0.38540679;0.37398395;0.42307302;0.41129863;0.40260938;0.35601443;0.4063665;0.35277307;
0.35270888;0.32406387;0.30831477;0.36160901;0.36803779;0.42798752;0.41549182;0.37621418;0.36765301;0.31921962;
0.28380066;0.33521253;0.30517501;0.36365366;0.41652361;0.41801992;0.37708583;0.35349602;0.40580732;0.35899302;
0.34776911;0.3130272;0.27488115;0.23837633;0.20604317;0.2307381;0.22426029;0.23241876;0.22695217;0.19916712;
0.18749285;0.20766628;0.25539279;0.29869691;0.35361105;0.38773212;0.39767572;0.38661334;0.33909661;0.31084523;
0.35604599;0.39936474;0.37003848;0.34185168;0.37800363;0.35637748;0.35362664;0.32161021;0.37840313;0.42247778;
0.40070644;0.442682;0.46591291;0.49733835;0.52125639;0.56615251;0.5203737;0.57210219;0.54916662;0.59101081;
0.59754145;0.58513772;0.62770277;0.60979539;0.60109007;0.60862958;0.63927931;0.61058897;0.56442994;0.5631085;
0.53579998;0.52916372;0.49969423;0.53325152;0.51709461;0.57010728;0.5944531;0.62576497;0.64710939;0.67245489;
0.65744501;0.59825319;0.55048043;0.60311484;0.62478852;0.6142931;0.60660976;0.60557836;0.54698557;0.52370924;
0.53087437;0.47722495;0.4260008;0.39452612;0.4344753;0.42842731;0.48130843;0.44060734;0.38733393;0.36028802;
0.34804052;0.35016081;0.38824001;0.42162198;0.47720477;0.48864743;0.51342398;0.54378933;0.583359;0.59116453;
0.61243498;0.58718884;0.62952513;0.62258965;0.66639119;0.63490516;0.58147639;0.61969423;0.66883743;0.7121461;
0.68386137;0.68287438;0.68984264;0.6477136;0.63654858;0.67384356;0.6419208;0.64405382;0.65623832;0.68674207;
0.70096463;0.64855045;0.67864603;0.65537614;0.65355814;0.69492507;0.64378351;0.68028486;0.68977284;0.72149718;
0.6700834;0.66447228;0.67640966;0.68542099;0.65016103;0.69498169;0.64564925;0.66388786;0.65321189;0.68873805;
      };
     };
     float_Data @[2] {
      name="fwt";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [6000] 0.48334908;0.4806484;0.49992624;0.50284612;0.51344591;0.52882385;0.52055192;0.50164437;0.48702931;0.4991267;
0.50793231;0.51351768;0.52186871;0.52572727;0.53690279;0.54799527;0.55663228;0.573704;0.57783908;0.58055443;
0.56725311;0.57165682;0.55094266;0.54002661;0.54840863;0.55103403;0.53933257;0.53733176;0.55472666;0.53999811;
0.54306334;0.55789983;0.54738581;0.53419286;0.54814625;0.54777414;0.55360639;0.56730747;0.56502515;0.54961807;
0.54975104;0.5643785;0.56705099;0.55877113;0.57020497;0.57445347;0.57930619;0.58248895;0.57641405;0.56016457;
0.56865144;0.55052531;0.53362167;0.51974827;0.52600324;0.50782233;0.5226019;0.53101844;0.52500224;0.54193252;
0.54684937;0.53811896;0.52325046;0.51801497;0.51116419;0.50858533;0.50318807;0.52249283;0.53705454;0.5285871;
0.54117727;0.53500366;0.5484392;0.543935;0.5493083;0.52871084;0.52353913;0.50586474;0.48732153;0.49259871;
0.47588974;0.49350056;0.47961059;0.46497667;0.4700518;0.48088706;0.49985579;0.48934337;0.49903679;0.48696977;
0.49623492;0.48512655;0.47439566;0.49127764;0.48979148;0.47199565;0.46441177;0.45822653;0.45821115;0.47333214;
0.47407269;0.4728193;0.4665058;0.45717925;0.44631073;0.46387634;0.46146467;0.44557247;0.44326076;0.43865594;
0.46053073;0.46417639;0.45018604;0.44972584;0.46650237;0.46468776;0.46381989;0.45299301;0.47111002;0.48313645;
0.49190897;0.4742983;0.47223023;0.47539464;0.45851639;0.47888246;0.47604892;0.49064535;0.47734097;0.48338708;
0.48214394;0.49835131;0.50400436;0.51099575;0.51348966;0.52652246;0.53201348;0.51313972;0.50946724;0.51922452;
0.52076936;0.52440393;0.52691311;0.54573762;0.55670303;0.56126523;0.56125474;0.5418635;0.55625683;0.56009734;
0.54032731;0.5354194;0.51624238;0.52267385;0.53871208;0.52230221;0.51550877;0.50898302;0.50799268;0.52107298;
0.52104044;0.50331032;0.48847151;0.47409526;0.47369996;0.46428028;0.45994979;0.46123484;0.47072431;0.47842088;
0.49370861;0.49097994;0.50547379;0.50873494;0.51222545;0.51380938;0.50573808;0.5191806;0.49933967;0.51739943;
0.52222675;0.52928054;0.52258825;0.52522957;0.53629321;0.53837734;0.53691024;0.52170652;0.52109838;0.53109801;
0.54402494;0.54390526;0.55763191;0.54883379;0.54477865;0.54107624;0.5341565;0.55032414;0.56788474;0.56297112;
0.56088269;0.5452885;0.54639697;0.52571505;0.53587818;0.53345597;0.54476398;0.5404759;0.53244573;0.52354556;
0.50487345;0.48547384;0.50062114;0.49846593;0.49424383;0.49692559;0.4944708;0.50389349;0.5134148;0.52941859;
0.54750878;0.53124046;0.54537475;0.54827058;0.54726583;0.55720836;0.55869961;0.53899413;0.54634345;0.55885416;
0.54251999;0.52580172;0.53457361;0.51741892;0.52852136;0.52061862;0.5041256;0.48988229;0.47770792;0.48143372;
0.47077736;0.46523401;0.44818264;0.46151453;0.48107213;0.4739573;0.4661561;0.48046595;0.49465933;0.4957386;
0.48708779;0.50413454;0.48428604;0.50046289;0.49924409;0.49298704;0.48802382;0.50520957;0.51251584;0.51728004;
0.51652926;0.52376503;0.52361834;0.53595388;0.53689545;0.52445859;0.51396877;0.51314873;0.50620109;0.50893474;
0.49986511;0.49273366;0.47819793;0.46025237;0.47189406;0.46886817;0.45983905;0.47185859;0.48371032;0.4706198;
0.47721168;0.48416692;0.49058086;0.48464116;0.47807151;0.48523474;0.47397256;0.47130448;0.47823873;0.46259528;
0.47543389;0.46899691;0.48992535;0.50773561;0.50956923;0.50097948;0.50875467;0.51045024;0.50599009;0.51432526;
0.51339257;0.50001782;0.48823744;0.48606935;0.4879725;0.49222469;0.49246794;0.50475192;0.50341457;0.52312481;
0.52535254;0.54013997;0.55588037;0.54554409;0.54814529;0.56174707;0.550192;0.55611789;0.54453909;0.54276222;
0.53261703;0.52793044;0.5329721;0.5202046;0.51468891;0.51658696;0.52548188;0.51763564;0.51483601;0.50353426;
0.51817566;0.51277298;0.51798075;0.51525885;0.53207481;0.53479171;0.52772099;0.52748835;0.51347703;0.52747983;
0.53739983;0.54634041;0.55919862;0.5700345;0.58417481;0.58551949;0.59652966;0.58588636;0.60182101;0.60427201;
0.59083909;0.56904614;0.58048058;0.56661892;0.56540757;0.56883711;0.56880051;0.55130708;0.54218328;0.52414912;
0.52117413;0.51039457;0.49952796;0.48401931;0.49615064;0.5135684;0.49329928;0.48916259;0.48001722;0.48795438;
0.49183998;0.50687951;0.51433027;0.50026029;0.51196688;0.52254862;0.52524501;0.50438058;0.50700051;0.5244531;
0.53386527;0.51260448;0.52321565;0.53413534;0.5386312;0.53606772;0.53596818;0.52719694;0.53401417;0.54083884;
0.54277515;0.55099094;0.53419572;0.51286066;0.4989838;0.50076175;0.51356733;0.51847833;0.49982879;0.4980239;
0.506962;0.49708432;0.49636841;0.49360135;0.48715883;0.47953627;0.4841392;0.47746986;0.47348461;0.45982939;
0.45686671;0.46372584;0.4812794;0.49659202;0.51356673;0.49991551;0.48263463;0.48073679;0.47502646;0.46085;
0.44651106;0.4400444;0.43458256;0.43004128;0.423085;0.43934608;0.43764102;0.44545999;0.44998211;0.43547213;
0.4256078;0.42159909;0.41900873;0.40469173;0.42549983;0.44711825;0.45705724;0.45984238;0.47499135;0.46757188;
0.48855996;0.47121412;0.47237241;0.46140885;0.47429779;0.46869504;0.45996705;0.45409164;0.46739593;0.46945745;
0.47540936;0.47299951;0.47032028;0.45356646;0.44282347;0.44978663;0.44271252;0.44372973;0.45133361;0.44813207;
0.43743029;0.4299314;0.42507225;0.43343937;0.45414931;0.4662652;0.45748645;0.44823182;0.46451774;0.47343072;
0.47841251;0.48567733;0.47392157;0.49291068;0.49883643;0.51805454;0.50163388;0.48550567;0.49323326;0.49566594;
0.50149608;0.5156399;0.53417444;0.52888954;0.50895667;0.50546849;0.5151723;0.53188336;0.54482257;0.52380365;
0.51233488;0.50675231;0.49707571;0.50753999;0.50665551;0.49348307;0.49397027;0.50105476;0.48457819;0.49373877;
0.50141549;0.52059984;0.53758138;0.51684433;0.50515676;0.50451988;0.49692568;0.49597219;0.50088823;0.48238045;
0.50184429;0.48202449;0.48950478;0.50303996;0.5204004;0.53253806;0.52238715;0.51421255;0.51728791;0.50954425;
0.50863975;0.51852018;0.50965166;0.49499282;0.51065332;0.51420164;0.49431631;0.50470275;0.49883789;0.4894177;
0.48199445;0.49427685;0.50211364;0.49909088;0.51164228;0.4922581;0.50988853;0.51074326;0.49133709;0.4883711;
0.47525039;0.46817574;0.4669092;0.45483026;0.45079109;0.45576674;0.45075944;0.46984822;0.47833037;0.47176382;
0.47161239;0.47088337;0.47690529;0.47984779;0.4925997;0.47702935;0.49774447;0.49087113;0.47343802;0.46144396;
0.45798308;0.45344675;0.43882823;0.4281795;0.44003594;0.4523502;0.45624667;0.44919604;0.45343387;0.45180258;
0.44738308;0.43290275;0.41905043;0.40638804;0.42837179;0.42105326;0.40668163;0.39450067;0.41826206;0.42762849;
0.44804937;0.44722542;0.44397017;0.44575846;0.4650287;0.47786519;0.48657933;0.5026347;0.49522036;0.49957687;
0.51368421;0.49922931;0.48756069;0.50074846;0.49778017;0.47942147;0.46654969;0.45154744;0.46948436;0.4573296;
0.4394035;0.43349656;0.4367165;0.43401197;0.43746305;0.42453012;0.41993529;0.43111414;0.42963955;0.43380904;
0.42645878;0.4354142;0.42877391;0.44309312;0.45217797;0.4686628;0.4845629;0.49984509;0.51137686;0.49710843;
0.50476182;0.50906193;0.49641123;0.48863813;0.47310844;0.48666641;0.49815252;0.48854646;0.48030731;0.46547797;
0.48293072;0.4879095;0.47593406;0.46910733;0.45732951;0.44945917;0.45486632;0.4424316;0.43658772;0.4229418;
0.44020271;0.44237804;0.44378531;0.44956896;0.43736282;0.45974898;0.45484036;0.47325748;0.48339155;0.48162204;
0.48403195;0.5040102;0.49434227;0.5017612;0.51555473;0.51739323;0.53422529;0.54523379;0.52481651;0.52130431;
0.52123058;0.52758503;0.53980684;0.53920817;0.52460343;0.53351521;0.53598166;0.53379697;0.55030936;0.56636304;
0.54709888;0.5518859;0.54835898;0.5528571;0.53993005;0.53883946;0.51846159;0.53353739;0.53313571;0.52930564;
0.54750627;0.56195104;0.57540238;0.55883437;0.55995375;0.56844634;0.54999679;0.53238958;0.54753363;0.5382508;
0.53220832;0.53493869;0.53803015;0.53901368;0.53162539;0.54762149;0.52603394;0.54435885;0.55603814;0.56734103;
0.54531705;0.52515131;0.51607513;0.4961566;0.49308687;0.49965468;0.5189712;0.51410115;0.50746381;0.52523595;
0.53033262;0.52585167;0.53860664;0.53951812;0.54434109;0.53092504;0.51702696;0.52161896;0.51152861;0.4954108;
0.50270188;0.50379705;0.52004784;0.53794527;0.53300422;0.54825431;0.55214751;0.55724418;0.56149071;0.57669055;
0.5692783;0.58576381;0.5969162;0.58253944;0.58407485;0.58548766;0.59432089;0.58802038;0.56668019;0.57838207;
0.58958346;0.59961003;0.6023283;0.59273529;0.59242535;0.57726657;0.57984054;0.59644002;0.59547073;0.60648775;
0.61872196;0.60960525;0.61263382;0.62798154;0.6351862;0.64104068;0.63302261;0.62441999;0.61570448;0.60590297;
0.61957759;0.6049245;0.5982157;0.59150714;0.56842291;0.54896003;0.54702443;0.55823106;0.55913067;0.53807265;
0.54213363;0.52475768;0.51744425;0.52008975;0.50732356;0.51478869;0.52067989;0.51449835;0.51792955;0.51582944;
0.5053972;0.5241155;0.51336253;0.52964592;0.53169125;0.5125643;0.49237016;0.48157346;0.49244046;0.51046538;
0.4960134;0.51040167;0.51978034;0.52742529;0.52315408;0.52687305;0.51299858;0.52789801;0.51062584;0.51763362;
0.51293987;0.49761042;0.51567775;0.52607012;0.53576142;0.52461863;0.51829219;0.52017373;0.53382927;0.52042711;
0.5152815;0.53407413;0.54533017;0.55023855;0.55864352;0.565355;0.57604373;0.55959958;0.56328607;0.57879913;
0.55782604;0.55886459;0.57135314;0.55750352;0.56160575;0.54842126;0.54715866;0.54895246;0.56385922;0.54729199;
0.54178822;0.55857342;0.53846931;0.52195901;0.52100521;0.52748835;0.53660792;0.51805681;0.51108992;0.50217628;
0.49259362;0.48448297;0.46805435;0.46716604;0.45594552;0.44592687;0.43325195;0.42112616;0.42680717;0.43804878;
0.43744102;0.45353651;0.45367301;0.45382383;0.47465017;0.47543007;0.47659731;0.45982003;0.46760976;0.48560545;
0.49993178;0.50335246;0.49287659;0.51286149;0.49304825;0.50931436;0.50566959;0.50918776;0.49250239;0.47398654;
0.46407264;0.48183313;0.48184514;0.48604748;0.47006497;0.47095051;0.46826571;0.4644348;0.48101881;0.48396981;
0.5005936;0.49372122;0.4766266;0.49717921;0.4801977;0.49420342;0.48578238;0.4736774;0.4888562;0.48065555;
0.46913782;0.47991675;0.47949257;0.48108396;0.49236628;0.4969486;0.48208347;0.49944326;0.47986624;0.47622895;
0.46471643;0.46352321;0.45946366;0.46749797;0.48687473;0.49349612;0.49674156;0.48317462;0.46832913;0.48599589;
0.47384003;0.46109301;0.45056981;0.45545503;0.45563203;0.4492704;0.45534682;0.44018146;0.44814646;0.43042946;
0.44713506;0.43189859;0.41604713;0.42919862;0.45076185;0.45368367;0.44155473;0.45655572;0.43835419;0.44527951;
0.46467859;0.44873866;0.44236401;0.43601564;0.42886934;0.43508831;0.44705012;0.45253298;0.44343689;0.42767632;
0.41615427;0.41539061;0.42849824;0.44467944;0.43148753;0.44036755;0.43587884;0.42072454;0.41096461;0.40102711;
0.42316243;0.41171092;0.40387815;0.39327276;0.4038316;0.38938743;0.38487872;0.38337144;0.38878542;0.38012561;
0.3702625;0.38438115;0.40842527;0.39229396;0.38004875;0.36618641;0.38618815;0.38152194;0.38876283;0.40004435;
0.38415402;0.3788273;0.37667724;0.3784577;0.378613;0.38119793;0.38360074;0.3769846;0.40179437;0.40326315;
0.3903493;0.38026416;0.36669549;0.36655226;0.35405001;0.34852076;0.35033455;0.34608984;0.35565493;0.34604344;
0.34963793;0.34916887;0.33632129;0.35832733;0.37190232;0.36010483;0.36250305;0.35778058;0.37158802;0.36380118;
0.35943058;0.35042891;0.35057604;0.33778295;0.36293864;0.35618669;0.34376732;0.33068296;0.34017247;0.33749008;
0.34348863;0.364059;0.36293629;0.35946104;0.35468781;0.3798348;0.3970947;0.38290337;0.37890601;0.36661005;
0.36113885;0.37663192;0.36771643;0.3860566;0.40409711;0.39593381;0.41751209;0.42522699;0.42821652;0.42193168;
0.43078819;0.41378143;0.3972598;0.39603636;0.40338573;0.42213714;0.4182528;0.41455796;0.40866488;0.42898914;
0.44559172;0.43357167;0.43079439;0.44703606;0.46341622;0.48147702;0.48088911;0.49703017;0.50962025;0.51697582;
0.51560205;0.52704233;0.54184479;0.53107923;0.53516793;0.54581857;0.52972114;0.54615957;0.52860445;0.50996089;
0.52343953;0.52774882;0.53561145;0.53123432;0.54409426;0.55602503;0.55908453;0.57286447;0.57874334;0.57821643;
0.5921846;0.60594964;0.59999293;0.58149815;0.56881785;0.56551474;0.55461538;0.55425954;0.55974245;0.56563079;
0.57589084;0.55742115;0.57309556;0.57841235;0.58809739;0.59458226;0.60638028;0.61515784;0.59492457;0.58078742;
0.58491039;0.59436643;0.58427191;0.59492767;0.58964592;0.56809825;0.54666239;0.53783464;0.54957759;0.5345487;
0.55100805;0.54722053;0.54179513;0.5229671;0.50672191;0.49689955;0.49374869;0.51264876;0.52909821;0.50844014;
0.51352733;0.52460188;0.51838458;0.53014833;0.52209818;0.52039921;0.5254668;0.54409558;0.52458888;0.5374819;
0.52950478;0.54546857;0.54280823;0.54359728;0.55344993;0.54160899;0.52956057;0.52709752;0.53445739;0.54151028;
0.54266787;0.55368865;0.54830134;0.53256983;0.54161221;0.55337143;0.53525287;0.53624064;0.53437269;0.53742307;
0.54116112;0.54435033;0.53419745;0.55155921;0.56459761;0.58156002;0.56027418;0.56554067;0.5537492;0.5514515;
0.53458518;0.55257326;0.5605076;0.56880516;0.56688428;0.57310021;0.58414239;0.59004909;0.60234857;0.58949816;
0.59561443;0.60451919;0.58895868;0.59635353;0.59321713;0.58426374;0.5868113;0.57766682;0.58808529;0.578444;
0.59489858;0.58264881;0.57191551;0.58826321;0.57355654;0.57705086;0.57222736;0.55049533;0.53793132;0.54948312;
0.56128943;0.56590044;0.5544526;0.55619943;0.56231999;0.57259387;0.57091111;0.58770931;0.60178334;0.58239597;
0.59738874;0.58461106;0.57664007;0.57295161;0.5608514;0.5651654;0.57488352;0.56774974;0.57016176;0.58541608;
0.59501219;0.58741117;0.59496826;0.5789001;0.56349266;0.57502437;0.57885784;0.57483947;0.57966006;0.58775777;
0.59838861;0.6132735;0.59310013;0.59878832;0.59880704;0.60666806;0.58241439;0.55912191;0.56613755;0.57077068;
0.56264734;0.56466764;0.54703289;0.55236781;0.56327939;0.56468344;0.5535537;0.56565475;0.56474298;0.57822746;
0.58776712;0.57220978;0.57356447;0.56434906;0.54375648;0.54517186;0.53254932;0.53226686;0.53141367;0.51562083;
0.50525296;0.50969648;0.52229255;0.50980598;0.52092481;0.51302207;0.50373548;0.48661846;0.47780713;0.48028126;
0.49014917;0.47818455;0.48673499;0.5007928;0.50048214;0.48523375;0.48241463;0.49726161;0.48684546;0.47523472;
0.4902769;0.47619459;0.46027076;0.47002417;0.46978909;0.4629375;0.47056141;0.45605731;0.45081872;0.44127953;
0.4320502;0.43399644;0.4374221;0.43982038;0.44430724;0.43533334;0.45274749;0.44649807;0.43211451;0.41572684;
0.40566343;0.40963504;0.41116306;0.40788141;0.43088743;0.42341083;0.42635721;0.44576192;0.4596135;0.45013079;
0.47019196;0.48250625;0.47388813;0.45748281;0.43943983;0.44256106;0.42493272;0.44193235;0.45051566;0.46896201;
0.4759424;0.4930374;0.49467143;0.49510992;0.49750128;0.50809181;0.52775848;0.53401351;0.5291633;0.52957141;
0.52061981;0.51896214;0.52301264;0.5395931;0.55132061;0.55047429;0.5425728;0.52367043;0.53527814;0.54139251;
0.53156048;0.5490644;0.55206954;0.55547774;0.56341326;0.5539996;0.54836029;0.56093913;0.56392568;0.54327601;
0.55568463;0.56016427;0.55377394;0.55401903;0.53502458;0.53255492;0.53101569;0.54845917;0.5654642;0.54697871;
0.53572309;0.51739359;0.50671053;0.49978244;0.51549536;0.51410723;0.51845479;0.53401858;0.54592347;0.54036349;
0.55734539;0.53651935;0.52450472;0.50420016;0.49113324;0.48822254;0.49467412;0.51361418;0.53012955;0.5462606;
0.5293774;0.53002578;0.53320968;0.52337652;0.5422346;0.55292541;0.53997624;0.52456588;0.54202092;0.53463018;
0.51700455;0.52645123;0.51419276;0.50151044;0.49033257;0.49644887;0.49830517;0.4993062;0.49007642;0.47497654;
0.46931994;0.48615131;0.47572014;0.48895314;0.48437852;0.4751727;0.48851836;0.47270149;0.47302637;0.46463504;
0.48117137;0.48264357;0.48048687;0.46488219;0.4710643;0.47095811;0.47587249;0.46486431;0.47478655;0.45614401;
0.47302881;0.45845804;0.475337;0.48444942;0.46785033;0.45145565;0.45598421;0.45929295;0.46660423;0.44862783;
0.44485822;0.44703165;0.45039761;0.4405373;0.44575405;0.46151516;0.45926109;0.44573316;0.43401584;0.45303479;
0.47440505;0.45673674;0.47111636;0.45705116;0.45054811;0.43521178;0.42441916;0.4149971;0.42602175;0.41779879;
0.41843751;0.41422009;0.42014572;0.43808505;0.43766347;0.43644014;0.43042099;0.44407853;0.44611049;0.45354319;
0.44099849;0.45121211;0.44469392;0.46168086;0.45762205;0.44769469;0.43542624;0.43861061;0.45296809;0.43889609;
0.42249334;0.41409853;0.43415195;0.43581364;0.44738635;0.43468362;0.44434667;0.46349519;0.45417199;0.46226984;
0.46549436;0.48206928;0.48621055;0.46981829;0.48423755;0.47157127;0.47329673;0.47683716;0.48553565;0.49570701;
0.50159067;0.4886055;0.50278628;0.49163005;0.50909561;0.50341791;0.49994659;0.51192766;0.500494;0.49068621;
0.48713017;0.49155748;0.50165808;0.51405734;0.4994399;0.50879484;0.51004827;0.49600431;0.47639546;0.46281481;
0.46225083;0.45051035;0.46695775;0.46080917;0.47200382;0.45614186;0.46518427;0.46586692;0.45770729;0.45591536;
0.45472988;0.44207245;0.43598321;0.43221965;0.42166388;0.43542439;0.44156301;0.42638481;0.41400003;0.42021415;
0.4156523;0.41402325;0.39897475;0.40668505;0.39977202;0.39775118;0.3888163;0.39656892;0.38441163;0.37893012;
0.39856035;0.38520473;0.40237486;0.42239201;0.41555443;0.42010942;0.42307329;0.42896405;0.43604934;0.44974735;
0.45357272;0.44791171;0.46788481;0.48185703;0.47412449;0.48029959;0.46198118;0.44866452;0.46056977;0.46858776;
0.46630475;0.46439946;0.47979638;0.49947432;0.48857296;0.46966758;0.45222023;0.47263137;0.45542917;0.44440466;
0.44104341;0.46263254;0.45963147;0.48042336;0.47950155;0.48377177;0.47082368;0.48889357;0.47523421;0.47295371;
0.48271632;0.47958401;0.47872412;0.47356364;0.46710098;0.47897059;0.47085819;0.46972895;0.47601065;0.48847899;
0.49509382;0.4823634;0.48237205;0.49799439;0.48612121;0.46839634;0.46565127;0.47856;0.47426549;0.49479187;
0.48198897;0.4925254;0.4781009;0.48067543;0.46573684;0.47625896;0.46180424;0.48174748;0.47799647;0.48538065;
0.50095946;0.49855727;0.50463814;0.49091214;0.47157177;0.46609291;0.46551317;0.45651463;0.47362372;0.484979;
0.46672976;0.45233795;0.43955791;0.43817437;0.45679426;0.45508069;0.44162431;0.42447284;0.40750003;0.42280614;
0.4272972;0.42538106;0.42003644;0.42852071;0.42839742;0.44209433;0.42815191;0.42135847;0.40520874;0.41748679;
0.43440425;0.42685813;0.41039169;0.40054777;0.42213246;0.40968817;0.42293578;0.42729673;0.44457284;0.4268097;
0.41431937;0.43234935;0.43760729;0.44139522;0.43404353;0.44545069;0.4422566;0.4365252;0.41924092;0.40552577;
0.4072209;0.39561734;0.38852948;0.37449589;0.39852202;0.41240534;0.42473814;0.4238258;0.41885477;0.41570553;
0.42196256;0.44043535;0.4288798;0.43152907;0.41834921;0.42953199;0.41604501;0.43645084;0.42382631;0.43526644;
0.44276848;0.44932252;0.44154128;0.42466792;0.42498836;0.43171781;0.44104853;0.43973693;0.43613282;0.42486617;
0.43883938;0.42740163;0.42376971;0.44569579;0.46644723;0.45755577;0.44044697;0.43580723;0.43158278;0.43505013;
0.43782857;0.45715863;0.45095104;0.44166845;0.45119962;0.4569959;0.463514;0.47558159;0.49235877;0.47543249;
0.45903096;0.47685876;0.46972355;0.45439968;0.4713892;0.47927731;0.48048168;0.49977571;0.50498587;0.48691639;
0.47047663;0.45177278;0.45121968;0.44255483;0.43389654;0.44915166;0.46533009;0.48153436;0.46326461;0.45684174;
0.46725205;0.45267257;0.45805061;0.46822155;0.45621657;0.46700621;0.46694085;0.47647095;0.49053907;0.47309843;
0.49073476;0.47730049;0.466757;0.47720784;0.46659112;0.48667082;0.49329075;0.48938555;0.48448274;0.47286436;
0.45929372;0.44517365;0.45871055;0.44902363;0.43332601;0.42298865;0.44315827;0.44030103;0.43996722;0.43515357;
0.42784682;0.41242027;0.40941417;0.42036518;0.42044452;0.4316622;0.43602997;0.4207871;0.41881481;0.43002066;
0.44441989;0.44152382;0.45631281;0.46030414;0.47457585;0.47417641;0.48211524;0.48781636;0.48291984;0.49320441;
0.49532318;0.47577891;0.49567896;0.48469502;0.50363743;0.50506073;0.50068074;0.49875674;0.49192023;0.50352174;
0.50631344;0.51691169;0.52357388;0.52678019;0.54331356;0.54746825;0.52587235;0.52962762;0.52631283;0.52021688;
0.53325456;0.52156568;0.50970834;0.50359255;0.50913143;0.49817502;0.51582611;0.50279331;0.49128574;0.50231707;
0.50985414;0.510234;0.50551349;0.50011104;0.49910313;0.51756644;0.52147621;0.50939894;0.51933938;0.51462257;
0.53399765;0.52455592;0.50757438;0.50454509;0.52114016;0.53201818;0.54531264;0.53499776;0.51720548;0.5056181;
0.50828153;0.49206257;0.50451046;0.49594152;0.49110138;0.49980614;0.49571854;0.482577;0.4955579;0.51090211;
0.52585661;0.5383299;0.53960007;0.54664224;0.53219497;0.52591109;0.52670485;0.52319419;0.52330518;0.53793252;
0.54055595;0.53158236;0.52146065;0.53629524;0.52896476;0.52443546;0.53719264;0.51678455;0.51148468;0.52273536;
0.53196514;0.53774214;0.54091287;0.55634135;0.53766656;0.52241623;0.53340083;0.52613568;0.54297847;0.55125701;
0.55728483;0.56362921;0.57822478;0.5885939;0.56843823;0.57923353;0.57940531;0.57328498;0.57001132;0.5604192;
0.55121654;0.54259801;0.53381002;0.54526681;0.53298736;0.54256624;0.52901781;0.53296226;0.52644598;0.51017869;
0.50889677;0.50561261;0.49724773;0.47877547;0.47237861;0.46166638;0.480077;0.4732475;0.49234125;0.49755138;
0.4794997;0.49510115;0.50143534;0.49600056;0.50435603;0.52161843;0.5218879;0.51880825;0.53225672;0.53224599;
0.51608086;0.5233739;0.52911633;0.51357305;0.51249969;0.51184523;0.51217866;0.50069582;0.49536809;0.48079175;
0.4768903;0.47254205;0.48324007;0.47576141;0.49393883;0.49799255;0.4813666;0.4668242;0.46484914;0.4567962;
0.4447749;0.42973143;0.4297688;0.41467193;0.42176178;0.42603227;0.43012241;0.42692927;0.42278013;0.4319948;
0.44730842;0.43640512;0.44255844;0.44981042;0.43693253;0.4441545;0.44270948;0.43323949;0.44441399;0.46194765;
0.44385159;0.43089303;0.4372941;0.42970514;0.42019731;0.43006235;0.42068687;0.42869326;0.448562;0.44379419;
0.45180091;0.44523433;0.43838909;0.4394964;0.44481149;0.43777126;0.45923486;0.4724822;0.46577018;0.44981942;
0.46934068;0.46623099;0.46006298;0.46693546;0.47670585;0.47136468;0.46012339;0.45509452;0.44698504;0.46017483;
0.46562159;0.47518802;0.49261793;0.49818248;0.50616205;0.49345571;0.48769426;0.49574029;0.48718122;0.47483605;
0.45917681;0.48046473;0.49012622;0.48652062;0.4943758;0.48883885;0.50174445;0.50074017;0.48960108;0.50648957;
0.51810908;0.52355272;0.52758861;0.51565701;0.51362616;0.50883603;0.49294502;0.51201683;0.52655989;0.51737654;
0.53393209;0.53884107;0.52716362;0.50670171;0.51939303;0.5031811;0.51846224;0.50399381;0.49581856;0.51162183;
0.52328765;0.51265299;0.52299762;0.50409722;0.49346739;0.49724835;0.49129084;0.49968386;0.49494463;0.49634665;
0.49317273;0.49265927;0.51155555;0.51804769;0.51189661;0.5304051;0.52098727;0.50102812;0.48417735;0.4899053;
0.49197432;0.48168278;0.47962567;0.48399889;0.50218803;0.48876846;0.48403043;0.49365503;0.50584334;0.50663853;
0.51503313;0.51533753;0.5043965;0.51242918;0.5312649;0.51962596;0.53387928;0.5389933;0.54900664;0.5458985;
0.55509841;0.5510847;0.56496716;0.56756502;0.58343029;0.56143397;0.55476737;0.5468387;0.5471313;0.54418546;
0.5290401;0.54295421;0.54851824;0.54944825;0.55581135;0.56653905;0.58363843;0.5645476;0.56065148;0.57325041;
0.57508606;0.57079959;0.55774927;0.55549765;0.533279;0.54032123;0.53556651;0.51702517;0.51833779;0.51704323;
0.49716139;0.50297868;0.51107675;0.49278295;0.50771183;0.48871887;0.48150387;0.48528501;0.48187637;0.46409366;
0.44606513;0.46086678;0.47576475;0.48345056;0.49558353;0.51155221;0.49196327;0.49192551;0.50847715;0.50267279;
0.51216847;0.52992249;0.54557186;0.56049013;0.57133198;0.58840114;0.59710866;0.57938534;0.58496833;0.56768334;
0.573394;0.56243271;0.55955023;0.54477215;0.55389422;0.55114764;0.56876504;0.56401956;0.57794249;0.59379703;
0.57649171;0.56482643;0.56602693;0.57690895;0.560045;0.54286009;0.52304882;0.50778347;0.50702995;0.49818292;
0.48477188;0.46984428;0.49061194;0.50590825;0.50344789;0.49170452;0.49181393;0.50390851;0.51084846;0.51591212;
0.51721627;0.52545023;0.53275681;0.52835613;0.51556319;0.5118432;0.49198934;0.47809127;0.46388051;0.46256211;
0.46058422;0.471084;0.45942521;0.44262105;0.42891213;0.41267508;0.40191507;0.40286863;0.40079108;0.38568735;
0.37080643;0.3718318;0.38225353;0.38197711;0.4035309;0.39176562;0.38402987;0.38345721;0.36871201;0.36576891;
0.36002102;0.38433045;0.37389058;0.39330438;0.38756278;0.39719018;0.40545735;0.39254013;0.39235052;0.37740207;
0.37245059;0.39252204;0.38183594;0.37546048;0.3672919;0.37351337;0.36389771;0.36059305;0.37674186;0.36633876;
0.38140923;0.39132828;0.40322959;0.38770485;0.37463376;0.3642976;0.36347568;0.35059768;0.36124951;0.35543397;
0.34953085;0.34119675;0.33066291;0.31789085;0.31041273;0.33744931;0.35364547;0.37300459;0.37070453;0.39237994;
0.39792183;0.38961241;0.40683296;0.40786296;0.40194234;0.38776118;0.4034577;0.40262979;0.39698979;0.38849649;
0.38929975;0.39753708;0.4020499;0.39163557;0.38558117;0.3962225;0.39022994;0.39288843;0.38357839;0.40239936;
0.40303868;0.42568374;0.42270845;0.42716002;0.43841198;0.42414913;0.44282049;0.4612563;0.45446321;0.47555229;
0.45653406;0.44095725;0.44892818;0.47080827;0.47154957;0.47934145;0.48766282;0.47857401;0.46358863;0.45183852;
0.43753314;0.43124539;0.43174985;0.43935743;0.44368854;0.46081099;0.44249195;0.43050942;0.44070736;0.42714557;
0.42013997;0.41353947;0.41199517;0.4166258;0.42064211;0.41673654;0.41596997;0.43037006;0.44520697;0.44021547;
0.43461719;0.4299188;0.44088149;0.45417601;0.4663671;0.4603017;0.46502107;0.45184627;0.44947475;0.437372;
0.43694282;0.4337098;0.43085328;0.4427909;0.43186268;0.4157978;0.40744537;0.39271954;0.38257232;0.38134396;
0.39430955;0.39029482;0.37488857;0.38241234;0.38495883;0.39718673;0.38289854;0.36794582;0.36551163;0.35741812;
0.36439475;0.36203679;0.38201046;0.39672253;0.41039661;0.42494914;0.41619363;0.43226564;0.4178066;0.42734784;
0.44949311;0.46189991;0.45889351;0.47317287;0.47212014;0.46860555;0.46470064;0.48530251;0.48967221;0.48585588;
0.46694127;0.45743123;0.47218794;0.49225286;0.49588543;0.50308651;0.50853127;0.52041721;0.5078693;0.48829302;
0.48819229;0.4947499;0.49016851;0.47904485;0.47856688;0.46026909;0.45071992;0.4378064;0.42653891;0.44530082;
0.45774329;0.46780351;0.483978;0.49460661;0.47825328;0.48528016;0.49228364;0.47867864;0.45971912;0.45939022;
0.46851519;0.46111938;0.47201493;0.45846602;0.45282581;0.47029585;0.47240543;0.4609848;0.46733895;0.4632268;
0.45386246;0.4651435;0.47701722;0.46992409;0.4580037;0.45007986;0.46155745;0.47805771;0.48141667;0.49777159;
0.51754135;0.51974547;0.51199532;0.50952393;0.52056408;0.52016068;0.52051026;0.53687543;0.54383606;0.54115564;
0.55619848;0.57023895;0.58335859;0.59514284;0.60544777;0.61968958;0.62562674;0.63904077;0.62227124;0.60770518;
0.59398258;0.5983212;0.60188603;0.58518302;0.59649181;0.60530549;0.5911361;0.60735387;0.61416095;0.6246208;
0.63286173;0.64467227;0.64004964;0.65408033;0.65434235;0.64982396;0.62783897;0.64067632;0.64245152;0.65333337;
0.6631909;0.6720348;0.65753239;0.66613328;0.65548831;0.66529095;0.67258114;0.66335595;0.65646136;0.65723187;
0.65286744;0.65564305;0.66726732;0.66872072;0.65654892;0.6636554;0.67300135;0.66322231;0.67169088;0.67762369;
0.65785027;0.66133046;0.63644516;0.64729065;0.65384257;0.62789273;0.60980189;0.60624307;0.58624899;0.59330255;
0.60865694;0.60277802;0.61251122;0.59633946;0.57608765;0.58122879;0.55989492;0.57389539;0.57073885;0.5753243;
0.57945561;0.58977306;0.57955313;0.56685233;0.5590412;0.54425657;0.55468959;0.54593956;0.54492593;0.5322262;
0.53709048;0.54131973;0.54415762;0.55382341;0.5679971;0.56985223;0.55793643;0.55026609;0.55366445;0.56449646;
0.56050152;0.54736364;0.56431943;0.57937759;0.58719796;0.59035909;0.59240931;0.5903517;0.57479304;0.55847692;
0.56431705;0.5770883;0.58134598;0.5919168;0.60605365;0.60654896;0.59724838;0.58463418;0.58552873;0.56520706;
0.54373688;0.54414576;0.56077617;0.56202525;0.54469317;0.52491516;0.51487851;0.50504076;0.49895427;0.51153129;
0.49455053;0.47892457;0.49730137;0.49630275;0.49580386;0.48879907;0.50700849;0.49965003;0.5013715;0.50189668;
0.5031653;0.48927966;0.48867527;0.49115697;0.50281739;0.50692534;0.52121913;0.53373075;0.53512621;0.54407871;
0.55279559;0.53825217;0.55152714;0.53551155;0.54494411;0.52796125;0.53487587;0.52138364;0.53101766;0.51776248;
0.51105261;0.52690226;0.51330322;0.53270686;0.53206021;0.54043251;0.52387106;0.54133081;0.53743774;0.55037403;
0.54690003;0.52884597;0.53737783;0.52865738;0.50793767;0.51958978;0.51543254;0.52930719;0.52630723;0.52567464;
0.53002739;0.50979394;0.50203472;0.50557756;0.48799708;0.50766045;0.51898861;0.53511655;0.52775753;0.5178073;
0.51116449;0.50283825;0.52188474;0.52147585;0.52874506;0.53866893;0.53873539;0.55236;0.54853159;0.54242051;
0.55829096;0.56274033;0.57147819;0.56852692;0.56468695;0.56981665;0.5751273;0.59150434;0.57180154;0.57638854;
0.57332683;0.57284105;0.57841641;0.55580282;0.56762892;0.58189803;0.59498852;0.60741299;0.61152679;0.58757561;
0.5726608;0.56027085;0.56692684;0.56020612;0.54226649;0.55780762;0.57458192;0.58517951;0.5766924;0.57912183;
0.58922577;0.59270465;0.6080687;0.61771601;0.62603569;0.61967236;0.63477772;0.61003578;0.6156553;0.59327132;
0.57712829;0.56806129;0.55147481;0.56770623;0.560112;0.55322385;0.56074977;0.56570262;0.58225459;0.59514654;
0.58033121;0.58917105;0.56855333;0.57272106;0.58769584;0.60050416;0.61020023;0.61967224;0.62979525;0.64334905;
0.65533644;0.66182113;0.66781694;0.67485821;0.68091279;0.68724561;0.67782986;0.68059653;0.66721773;0.64432734;
0.65073943;0.65141082;0.62920314;0.61079943;0.61404234;0.60122252;0.60509378;0.61516649;0.62915647;0.61002123;
0.61073661;0.60281682;0.60530198;0.60298169;0.61406386;0.60726076;0.61930317;0.63168585;0.63723272;0.64646351;
0.6384666;0.64827329;0.65393209;0.64871204;0.63527358;0.6254037;0.62585574;0.63295299;0.64158374;0.62393916;
0.6351943;0.63236779;0.62979263;0.63359481;0.61681777;0.61990947;0.6052283;0.61410618;0.62944084;0.64343345;
0.64744812;0.62822992;0.6223774;0.63000292;0.62249202;0.60251218;0.59215641;0.59374857;0.57829076;0.56530035;
0.56611896;0.57140356;0.5832237;0.59305358;0.58432806;0.56180584;0.57052165;0.57527876;0.58321422;0.56599605;
0.55227268;0.54996705;0.56438047;0.56841081;0.57199496;0.58307588;0.59331375;0.6013028;0.61342394;0.61790371;
0.6200968;0.62229061;0.62743264;0.61273378;0.62702829;0.62063795;0.60530239;0.58442342;0.59861284;0.5996874;
0.58202493;0.58519167;0.59617823;0.57678187;0.55875075;0.57178223;0.58482677;0.56926686;0.58621806;0.59994233;
0.58396947;0.5844394;0.59620076;0.60240471;0.60016888;0.61498606;0.61934805;0.61629814;0.61984372;0.62142873;
0.62214416;0.62758827;0.61938906;0.59491861;0.57863861;0.59303063;0.57195133;0.57845372;0.58320725;0.59956425;
0.59733295;0.57954025;0.57818669;0.58337897;0.59729612;0.57352573;0.560821;0.57413495;0.5626393;0.54052454;
0.52424371;0.51487511;0.53166568;0.52296776;0.52607316;0.539123;0.5572992;0.53739995;0.51632643;0.49583995;
0.51171631;0.52902198;0.51394653;0.49613735;0.48522639;0.46758601;0.48301485;0.48498011;0.47234946;0.48459119;
0.46560007;0.45924947;0.47682092;0.48728725;0.49918872;0.50657952;0.49982208;0.50023144;0.49815568;0.48413774;
0.47501275;0.4881205;0.47709307;0.48333362;0.49906832;0.50596648;0.51900512;0.53560382;0.52067584;0.53279042;
0.51156533;0.52158886;0.51398641;0.50030547;0.48087761;0.46636471;0.4593859;0.4763566;0.47545099;0.48120043;
0.48396176;0.48980314;0.50021666;0.50075519;0.48447594;0.46594608;0.46555534;0.46015027;0.46729803;0.45858932;
0.45315796;0.45013812;0.46578503;0.45655766;0.4446018;0.43560967;0.42529017;0.41419682;0.4156152;0.43377966;
0.43555012;0.42716292;0.4166851;0.41580424;0.42278877;0.42905205;0.43112773;0.4156796;0.42812473;0.44075555;
0.45512447;0.45509189;0.45590451;0.44500673;0.46484473;0.44930238;0.45419005;0.44729254;0.43292037;0.42979532;
0.42181137;0.42651391;0.42139044;0.42002463;0.43134841;0.42845637;0.42884722;0.43654302;0.43875346;0.43688926;
0.44914898;0.46013674;0.46184084;0.45536655;0.45199001;0.44912779;0.43216509;0.44004261;0.45203131;0.46728599;
0.4605836;0.44778541;0.44759443;0.43917996;0.43381754;0.41953292;0.40383813;0.41148385;0.40889207;0.42645368;
0.42666811;0.413991;0.40859497;0.39369255;0.37872225;0.38921329;0.39886948;0.41186717;0.41035804;0.42967749;
0.42131183;0.43519816;0.41979507;0.4150638;0.40670389;0.39173436;0.40863147;0.4151454;0.40155885;0.38769102;
0.37943071;0.37450734;0.39089513;0.3866761;0.40169042;0.39682314;0.41950795;0.42448777;0.42157319;0.42111835;
0.4170894;0.41238308;0.40434989;0.41217849;0.41560137;0.40048137;0.38551557;0.40961525;0.42109802;0.44372854;
0.44601539;0.45938945;0.47906736;0.47217676;0.47725603;0.46896836;0.47512037;0.47179052;0.45336229;0.46687168;
0.46765798;0.4692117;0.47496179;0.47588301;0.48326254;0.47300336;0.47441062;0.45742506;0.45946217;0.46996745;
0.48855695;0.48790368;0.47842887;0.4736374;0.45955831;0.44786453;0.43204623;0.42666045;0.4107362;0.39925832;
0.39911813;0.41199392;0.41299537;0.42509395;0.44546139;0.43487331;0.44538993;0.44285968;0.44598979;0.43603578;
0.42114598;0.41866988;0.44192204;0.43895939;0.43425545;0.43909931;0.43960518;0.43083599;0.44601464;0.4594667;
0.45307294;0.43502018;0.42610967;0.43036041;0.43066564;0.4521639;0.4728848;0.45958778;0.45111322;0.46055672;
0.46088612;0.45607466;0.47616333;0.48324031;0.48410052;0.47969148;0.48822561;0.48076993;0.4890582;0.49827006;
0.48788837;0.47194827;0.46304464;0.45775932;0.44291827;0.44432789;0.46366721;0.48072231;0.48335838;0.48445845;
0.48574734;0.50514102;0.51676667;0.52493221;0.53008211;0.54448503;0.55263042;0.55549067;0.57011914;0.57402265;
0.58567178;0.59655559;0.59624279;0.6108188;0.59559053;0.59614813;0.59565103;0.57767957;0.57794976;0.57190168;
0.56241995;0.5672161;0.58281946;0.59933895;0.58091193;0.58719671;0.59159571;0.57251483;0.58542061;0.59593236;
0.60652566;0.61361641;0.61847842;0.62494427;0.60093409;0.61366928;0.62014359;0.61973304;0.63329023;0.64063293;
0.63033599;0.63638371;0.61665899;0.59293962;0.59874034;0.61055881;0.61150265;0.6211378;0.63591397;0.62967843;
0.61748433;0.59366691;0.58855176;0.59922642;0.58735025;0.59169745;0.60471666;0.61681724;0.61850566;0.59560424;
0.60056418;0.59606177;0.59781718;0.61237693;0.61449176;0.60108876;0.6001538;0.60269678;0.6077764;0.59646481;
0.60529;0.61949074;0.60082889;0.58928859;0.59184152;0.60652041;0.61379176;0.61056691;0.62094808;0.62368292;
0.61954677;0.63046288;0.61996967;0.62559742;0.63784003;0.64963013;0.63183975;0.63366479;0.63864678;0.65275806;
0.66416806;0.66754824;0.66682923;0.64110428;0.62454635;0.63058585;0.64345443;0.64726484;0.64818549;0.63355184;
0.63183129;0.61223698;0.62318403;0.61254561;0.60460764;0.60676467;0.60543019;0.5813542;0.58835584;0.58874196;
0.58978969;0.57733071;0.58348471;0.57927412;0.59592968;0.60662097;0.61812299;0.60847199;0.60668391;0.59747154;
0.57594031;0.58416981;0.57155061;0.58813798;0.5764485;0.59311509;0.58331597;0.59418714;0.57506067;0.57618695;
0.57634717;0.55952644;0.54319566;0.53358328;0.5304687;0.53202498;0.51784509;0.50399977;0.50206494;0.5005458;
0.48150221;0.4771767;0.45875758;0.46130043;0.4523336;0.4445982;0.42747515;0.42292368;0.41070315;0.4279238;
0.44323567;0.44465002;0.42814651;0.41701946;0.41131455;0.4305439;0.43340787;0.44156271;0.43474391;0.4359479;
0.42462701;0.41887957;0.41469824;0.42150334;0.4431175;0.45012081;0.47017878;0.46451148;0.46241999;0.47665563;
0.46980131;0.46219236;0.44906315;0.45472503;0.45873025;0.47454715;0.45818511;0.47580156;0.46970537;0.45272318;
0.44638649;0.43520108;0.44391763;0.43895131;0.44859755;0.44653431;0.45430386;0.45906046;0.47926387;0.47730494;
0.46816385;0.46178421;0.47986847;0.48487368;0.49930796;0.48057383;0.46518677;0.46638915;0.45170313;0.43778515;
0.42273387;0.43631139;0.44475684;0.43801102;0.43531558;0.44219512;0.42984644;0.43649819;0.45398739;0.4634181;
0.45484003;0.45332634;0.43807197;0.45210457;0.47269529;0.45891881;0.44454083;0.42899346;0.441122;0.44070384;
0.43784019;0.4330858;0.44427028;0.42771915;0.42834961;0.41565627;0.43877468;0.43923974;0.447043;0.46438894;
0.44958317;0.47023121;0.48953038;0.50854701;0.50697106;0.5033052;0.52049631;0.52170271;0.51925689;0.5146122;
0.52029592;0.50482124;0.51781434;0.51557624;0.50192881;0.51679742;0.52154583;0.5143463;0.51541495;0.52976745;
0.5214498;0.51263952;0.49338576;0.50320899;0.48484278;0.47193748;0.46130729;0.47590587;0.45737714;0.44916093;
0.46118402;0.47666025;0.4727098;0.48579869;0.46875942;0.45326111;0.45226169;0.47212243;0.45921674;0.45755246;
0.47713274;0.45954138;0.44387978;0.45978355;0.47412816;0.48536849;0.47765538;0.47152853;0.4692589;0.45336992;
0.45020962;0.44721195;0.4362928;0.45848876;0.4677954;0.47512883;0.48588169;0.47714332;0.46477127;0.4642224;
0.47801957;0.47690603;0.49064282;0.50232327;0.48408636;0.46840006;0.46114931;0.47107694;0.48441362;0.50018436;
0.49354818;0.50958472;0.49338889;0.4977777;0.48703152;0.50399321;0.50124627;0.4899731;0.48509058;0.4869709;
0.48844954;0.46982983;0.47688609;0.47337425;0.4686394;0.47969773;0.48942485;0.50420916;0.49060714;0.50614423;
0.49280733;0.48624057;0.49182984;0.50806504;0.50921005;0.49982396;0.51893222;0.52252734;0.52503979;0.54335028;
0.54941809;0.55098814;0.55885655;0.55673677;0.56190199;0.56404215;0.55854774;0.56960696;0.55548382;0.54655808;
0.54275185;0.5395568;0.55053937;0.55380774;0.53650594;0.51974809;0.52498168;0.51091462;0.50143766;0.51806301;
0.53217804;0.54570812;0.5466947;0.53078794;0.51717907;0.51304233;0.50126415;0.50149;0.49798018;0.49812508;
0.49317783;0.47522616;0.47783676;0.46551543;0.45523873;0.45748729;0.44805479;0.45195305;0.46129191;0.48103297;
0.47223359;0.49273956;0.5051766;0.49377534;0.48636484;0.50206506;0.50771105;0.49731192;0.49776849;0.50876772;
0.49586734;0.49557528;0.4852947;0.50207573;0.4866007;0.47215366;0.46038547;0.48136565;0.47794878;0.48707259;
0.49831358;0.50481695;0.52164203;0.53023517;0.53376597;0.51924801;0.53408152;0.51298696;0.53043437;0.53783351;
0.53088611;0.52316308;0.52163696;0.50619787;0.51086724;0.52528882;0.5174948;0.5183506;0.5273996;0.54397672;
0.5553872;0.53833783;0.52399933;0.53537738;0.54646111;0.53125888;0.51124048;0.51125199;0.51344526;0.50316399;
0.51138169;0.51694477;0.51988333;0.53647095;0.54648548;0.54898983;0.54009616;0.54119283;0.54050374;0.53937203;
0.54813486;0.5293954;0.52388787;0.53721279;0.53635472;0.52447534;0.52494472;0.53396231;0.5429914;0.54669774;
0.52973336;0.51276082;0.52652442;0.53310853;0.54658753;0.53224885;0.53397769;0.55205572;0.55255151;0.53593624;
0.53766555;0.54619241;0.55426538;0.56069338;0.57112783;0.56266892;0.55784136;0.54201519;0.54167503;0.52834028;
0.52547181;0.52447402;0.53468579;0.53719151;0.51841384;0.52475286;0.52830076;0.53026772;0.53794634;0.53983361;
0.54395753;0.54818219;0.52647197;0.53493863;0.55111367;0.53403544;0.51640189;0.50307512;0.48719546;0.49600053;
0.49632925;0.5110656;0.49632946;0.48088005;0.47762617;0.48979822;0.47078645;0.46564272;0.48239017;0.47628453;
0.48525858;0.49082589;0.50256062;0.50167257;0.50323874;0.49043331;0.49767894;0.50093877;0.51457578;0.51890087;
0.53513736;0.53286976;0.55144656;0.56629312;0.5791325;0.58528501;0.58937949;0.56879085;0.58113271;0.58190024;
0.57790333;0.5884369;0.58688408;0.5929569;0.57590628;0.58940202;0.59872669;0.57583696;0.55863416;0.57220709;
0.57948506;0.58776307;0.59811682;0.59792095;0.58641768;0.57859343;0.58735043;0.60057467;0.61136138;0.61142361;
0.61966509;0.60314739;0.58009189;0.58364379;0.5681091;0.55716515;0.57171613;0.56564873;0.56622308;0.56874961;
0.57409018;0.57421488;0.57140201;0.56863678;0.54593742;0.52806795;0.5351671;0.51646221;0.53185886;0.53159773;
0.53379333;0.51909453;0.51999426;0.52352589;0.51221025;0.50911826;0.513901;0.49602297;0.48277661;0.46515781;
0.47979081;0.47568744;0.48751521;0.48537683;0.47147211;0.45577967;0.4666715;0.48320827;0.50270563;0.49330872;
0.47731572;0.47497186;0.46240538;0.45350152;0.45392844;0.46995893;0.45910832;0.45202148;0.44977227;0.45947903;
0.46544382;0.44973946;0.46637473;0.45898366;0.46450689;0.47362095;0.48868218;0.47060239;0.46930212;0.47991067;
0.47706714;0.47879124;0.49762964;0.51297385;0.52014774;0.50063932;0.4848946;0.48082933;0.4878841;0.47136158;
0.46479952;0.45781505;0.47362;0.47411406;0.45831361;0.4411734;0.42410815;0.42702284;0.44204608;0.42901224;
0.44979775;0.44952297;0.43465337;0.42128387;0.41797683;0.41258603;0.41945878;0.4385277;0.44467857;0.43835044;
0.45029041;0.4658519;0.4600521;0.46180761;0.45559767;0.46215558;0.47209483;0.48793629;0.47720313;0.48059738;
0.47428891;0.45669881;0.44976228;0.43356779;0.4388926;0.44378418;0.44477668;0.43114603;0.43427384;0.43061614;
0.44850826;0.44678357;0.45713246;0.47314262;0.49333435;0.47559991;0.47782081;0.46823388;0.45635742;0.46314743;
0.46721509;0.47047234;0.47216371;0.47914156;0.47416148;0.4901157;0.47501081;0.46433973;0.46327919;0.46106985;
0.45241681;0.45777375;0.45039266;0.45532411;0.46344751;0.45201865;0.47312605;0.49178299;0.47506711;0.48647153;
0.47279468;0.47239029;0.46462643;0.48306707;0.49723262;0.50959885;0.52738494;0.53806919;0.52439415;0.53085566;
0.54177183;0.55211043;0.56908184;0.58120704;0.58190876;0.57290649;0.58213437;0.57508945;0.56956983;0.58655727;
0.5690006;0.58448285;0.56692791;0.55972749;0.54897755;0.55396384;0.54952496;0.55900246;0.56861031;0.57001936;
0.56961071;0.56226695;0.55294049;0.53839397;0.55060256;0.55564445;0.54976416;0.53082049;0.54205292;0.53627861;
0.54346329;0.53774887;0.52942836;0.51265699;0.51683933;0.51961166;0.51713121;0.5161261;0.51471621;0.5243727;
0.5124504;0.51334375;0.5317986;0.51066214;0.49267694;0.49185601;0.47252795;0.48365688;0.49556312;0.48584092;
0.49277791;0.482061;0.49879825;0.49731711;0.49924934;0.51013488;0.49368039;0.51010066;0.49923676;0.50816727;
0.49938965;0.50511926;0.51396835;0.51344103;0.49430716;0.4985815;0.51445776;0.52007693;0.52920932;0.53777528;
0.54496902;0.53367126;0.51916414;0.51854098;0.51184297;0.51554734;0.50690591;0.49076948;0.47668818;0.45941013;
0.44225889;0.42945129;0.44056594;0.4530077;0.47364444;0.48427695;0.50450033;0.51695955;0.52319664;0.51717162;
0.50840491;0.49078354;0.50264484;0.48498636;0.49931112;0.50908935;0.52081472;0.51119936;0.51197892;0.50399184;
0.51190156;0.51581281;0.51150179;0.49306664;0.50077081;0.51525098;0.51465678;0.51521403;0.50338882;0.50594956;
0.51720434;0.53307581;0.51694125;0.52738941;0.5146724;0.51924479;0.50960672;0.51065654;0.52398598;0.52943844;
0.53669792;0.54726768;0.53653026;0.5168376;0.52475023;0.52938014;0.54175639;0.55267364;0.56445038;0.54187548;
0.55160439;0.54748487;0.56078804;0.56781393;0.5532136;0.53371751;0.5271045;0.52528948;0.50534558;0.50160021;
0.49024352;0.4874998;0.48776734;0.50537515;0.4930521;0.51270139;0.50534534;0.48953488;0.47838491;0.47277397;
0.48045227;0.49819595;0.49313909;0.4755477;0.46023771;0.46141794;0.47606167;0.47587299;0.4684824;0.46895084;
0.45977867;0.46541128;0.47601628;0.48870313;0.47608694;0.46266413;0.47298053;0.48836365;0.48454207;0.48055699;
0.46269268;0.477687;0.4911049;0.48820066;0.4927505;0.47593674;0.48262659;0.4777863;0.49342236;0.50932002;
0.51897824;0.52824652;0.51503253;0.51231611;0.51388478;0.5002138;0.50051957;0.50912052;0.50369465;0.49041194;
0.4716838;0.47278243;0.47932252;0.4685953;0.45791453;0.46038112;0.44285226;0.43675691;0.44537535;0.4399693;
0.44569206;0.45553422;0.45714116;0.47753569;0.46994367;0.4894397;0.47127762;0.46478304;0.46181372;0.46537179;
0.47259849;0.48336166;0.50140047;0.4841291;0.48370531;0.48240703;0.49241382;0.47452277;0.46411848;0.48028153;
0.47347289;0.46195391;0.47945413;0.47273555;0.47636732;0.49275547;0.47483048;0.46093214;0.4604882;0.45484638;
0.47295469;0.48709494;0.49255449;0.50285614;0.51795292;0.52403122;0.5212577;0.53998834;0.52517021;0.53044403;
0.53074574;0.52323228;0.52283657;0.52086383;0.52424318;0.52845758;0.52182317;0.52503824;0.52698523;0.52829015;
0.52608836;0.51960754;0.52030063;0.50311983;0.49043766;0.4911558;0.50722462;0.50336504;0.49033052;0.47650057;
0.49493378;0.5073489;0.52436161;0.52943146;0.54359174;0.53617668;0.54918694;0.55354887;0.54591596;0.55284005;
0.55920553;0.57590479;0.58482426;0.60140288;0.60576838;0.58891475;0.60282785;0.58085632;0.57561511;0.58832377;
0.58951104;0.58510554;0.59054124;0.59106344;0.60406858;0.61717045;0.62512523;0.63676459;0.61797351;0.59693998;
0.58338255;0.56527734;0.57486099;0.58218908;0.57059652;0.58452046;0.57071;0.58496433;0.58307391;0.59678549;
0.59574777;0.59317207;0.59444231;0.60597026;0.5856787;0.60088068;0.60716546;0.60484385;0.61714774;0.60692108;
0.60742122;0.6104089;0.61737543;0.60685956;0.62090749;0.61690986;0.62866539;0.6191898;0.60610878;0.61880988;
0.62292665;0.62622821;0.63703376;0.63635749;0.64718604;0.65015894;0.65141654;0.63986993;0.64909488;0.63401723;
0.63559705;0.61753821;0.60501778;0.60815036;0.59083492;0.5896883;0.58392936;0.59343314;0.57762235;0.58355182;
0.58577144;0.58670342;0.59208614;0.59906924;0.60921884;0.62147027;0.59924018;0.58876669;0.5845955;0.5934431;
0.57683456;0.56657714;0.55787373;0.55466014;0.5425334;0.54848272;0.5414567;0.5517391;0.56521285;0.56916916;
0.55917615;0.55590641;0.56204772;0.57804704;0.5894357;0.58711874;0.57672596;0.57432526;0.58585525;0.59753311;
0.61293286;0.61157519;0.598912;0.57567108;0.57957107;0.5592221;0.55421585;0.54791456;0.5403915;0.53603894;
0.54735237;0.53125453;0.54239154;0.52075458;0.51118451;0.51184893;0.52868789;0.50821334;0.49773803;0.48437637;
0.48094568;0.4720799;0.46769917;0.46276763;0.47761092;0.47284117;0.48288122;0.47874704;0.47725332;0.46377957;
0.47710684;0.49692923;0.51137638;0.5212875;0.51529485;0.511491;0.52124423;0.52697426;0.50915033;0.4993813;
0.48703474;0.48731565;0.47608352;0.48242274;0.46655345;0.46678752;0.4829475;0.46581727;0.45342281;0.4478986;
0.45366719;0.45908055;0.44112918;0.42933023;0.41217613;0.4197222;0.4064686;0.40416116;0.41805226;0.41532433;
0.43517822;0.45619607;0.44182611;0.44444129;0.46235192;0.46362948;0.44789368;0.43764353;0.42105922;0.4330278;
0.42502448;0.40971166;0.39563182;0.39523828;0.39203379;0.39789975;0.38333565;0.37745303;0.38342416;0.40186539;
0.41269413;0.41974676;0.43742976;0.43327615;0.42569989;0.43622971;0.43002659;0.41975307;0.41932836;0.44105271;
0.45561117;0.44446361;0.44603527;0.46603951;0.47676972;0.46782368;0.47172534;0.45442468;0.45860216;0.48008195;
0.49767888;0.511307;0.51523513;0.49666581;0.51501536;0.50437778;0.5174858;0.52521175;0.54000026;0.55464625;
0.53454995;0.52122891;0.52178067;0.50155133;0.51044595;0.50195217;0.49068117;0.48083982;0.48128259;0.47909454;
0.46870315;0.47175381;0.45728198;0.45126376;0.44721076;0.4384273;0.45234585;0.45923829;0.44110507;0.44004053;
0.45655176;0.43972194;0.42873716;0.41588476;0.40401712;0.39752445;0.41307691;0.42849863;0.41560093;0.4052811;
0.39870563;0.41914147;0.41997075;0.40772372;0.42411739;0.41821721;0.40690166;0.42134723;0.41933885;0.41665593;
0.41848576;0.41322669;0.40833864;0.43037674;0.44213638;0.4639971;0.46678823;0.48301294;0.48249173;0.46993792;
0.4802888;0.4970319;0.51571578;0.53390783;0.54815435;0.56339622;0.5801546;0.5811885;0.59336096;0.58504057;
0.59552401;0.6098212;0.61661094;0.61690408;0.62781024;0.63334113;0.63230431;0.61677772;0.6054675;0.58259463;
0.58662915;0.59669822;0.58804077;0.59074479;0.59739101;0.5829016;0.56754994;0.57978541;0.58455104;0.57068247;
0.56132972;0.5636645;0.57149124;0.5816561;0.582533;0.57290852;0.58382505;0.58996296;0.59409475;0.59674776;
0.58951503;0.58630645;0.56572181;0.57976872;0.59213841;0.58560008;0.5785808;0.57934439;0.57021052;0.58271134;
0.58943409;0.59421772;0.57094049;0.57839471;0.57111913;0.57041705;0.57046872;0.57346094;0.58491963;0.57998008;
0.58161747;0.59513974;0.58501035;0.59025306;0.58980036;0.60572302;0.60268241;0.60937184;0.61084425;0.61204588;
0.60316044;0.60682613;0.61722362;0.61833066;0.62448031;0.60344678;0.59319645;0.5788399;0.58136028;0.58512706;
0.5747264;0.5862335;0.58724397;0.56887269;0.56395215;0.56827569;0.55848861;0.57595628;0.55536652;0.5512895;
0.54024589;0.52137959;0.5339213;0.54182237;0.558092;0.54785126;0.55042529;0.55074334;0.56322396;0.54487884;
0.5417189;0.53154397;0.54127145;0.55324435;0.56839925;0.57161188;0.55265212;0.55660152;0.55850065;0.5622068;
0.56136185;0.56822997;0.5562222;0.55992842;0.57749391;0.58509511;0.59338987;0.58009189;0.56058848;0.57602906;
0.55917645;0.55849415;0.55652678;0.54766339;0.52700543;0.521523;0.52720672;0.50731957;0.50866401;0.52738309;
0.51922691;0.50275135;0.48909515;0.47237054;0.4891887;0.49505267;0.48259896;0.47303525;0.45762843;0.44221792;
0.43219382;0.42334685;0.44416192;0.44456127;0.4591876;0.46631303;0.46838245;0.45728388;0.46107408;0.46720725;
0.46253622;0.4716436;0.45813709;0.45958239;0.47968799;0.47582969;0.48024821;0.49428135;0.50585538;0.48824194;
0.4789772;0.4847464;0.48253262;0.47528261;0.47061315;0.47890759;0.46522221;0.46529534;0.47616881;0.4891187;
0.49160141;0.48756823;0.47830382;0.47413883;0.47507954;0.4722324;0.46483964;0.46081102;0.4613995;0.46987149;
0.46353441;0.44824407;0.46412492;0.47932151;0.48919499;0.47465059;0.48029715;0.47180209;0.48341337;0.47457319;
0.47546715;0.47088632;0.47996762;0.47294584;0.49069804;0.47712597;0.49076775;0.49845421;0.49843788;0.51776284;
0.49756536;0.48626652;0.48381758;0.48245105;0.48360541;0.4865174;0.49312806;0.48458552;0.50324184;0.49567667;
0.48988855;0.5097;0.51065356;0.50520563;0.50999802;0.49654138;0.50924176;0.51751566;0.52353781;0.50659299;
0.51388139;0.52392328;0.5051927;0.50678957;0.49794677;0.48507014;0.49646196;0.48655993;0.49914446;0.50650007;
0.51260835;0.53045577;0.5273695;0.53004372;0.51775175;0.53602433;0.5300076;0.51953882;0.50163609;0.49592233;
0.51342231;0.51893258;0.52852446;0.53997856;0.53364909;0.54361892;0.54282755;0.55008358;0.54346073;0.53460526;
0.52436411;0.53747636;0.54091382;0.55124396;0.54477799;0.55331963;0.55926049;0.57187647;0.5751341;0.56132525;
0.5725944;0.57522994;0.56673896;0.57015908;0.55945539;0.56867427;0.55161929;0.55428278;0.54286063;0.53272241;
0.53915519;0.55146104;0.56458026;0.55582184;0.56968218;0.57045764;0.54904717;0.55680662;0.573017;0.56471467;
0.55583131;0.53886336;0.52136809;0.53141183;0.51722842;0.52499223;0.53415483;0.54732645;0.53216404;0.52927125;
0.53431928;0.53609097;0.51789623;0.52502197;0.53417814;0.52709579;0.54564464;0.55112755;0.53865772;0.54582268;
0.55748129;0.55889028;0.55660218;0.56632608;0.56135368;0.57247663;0.56880808;0.55572969;0.53783047;0.54516858;
0.55879825;0.56148022;0.56870115;0.57814568;0.58833259;0.59137911;0.59599531;0.60498136;0.58600569;0.5920341;
0.57314211;0.56018794;0.55507827;0.56429297;0.57551688;0.58690196;0.58161098;0.57905287;0.57989949;0.59306723;
0.60621417;0.60487276;0.5958851;0.5950883;0.59990883;0.60002559;0.6088751;0.61933255;0.62664199;0.60816276;
0.59684646;0.59144157;0.60641265;0.5868991;0.60196036;0.61304051;0.60707855;0.60651457;0.58441883;0.58135456;
0.59024936;0.58549666;0.59778649;0.57558781;0.58187515;0.58545673;0.60166013;0.60361695;0.58073437;0.56938964;
0.5562185;0.56920761;0.57144314;0.57886124;0.59150594;0.59971744;0.59102398;0.57147151;0.54898846;0.55140972;
0.54641712;0.5397737;0.52429175;0.52895445;0.53798002;0.52831739;0.53390628;0.51973516;0.52425212;0.51972288;
0.52950567;0.53856838;0.54031622;0.53806043;0.55360669;0.54285282;0.52216125;0.51478517;0.51196998;0.50819749;
0.51320803;0.50731134;0.52597111;0.54469532;0.5602904;0.54564869;0.55307209;0.53495616;0.54735279;0.5535444;
0.55785763;0.56302696;0.54930574;0.55080098;0.5503006;0.53162265;0.52228737;0.52398968;0.51722342;0.52814388;
0.54090154;0.55087101;0.55062741;0.55318248;0.56038201;0.55719352;0.5517084;0.56831098;0.56846279;0.55387449;
0.56478971;0.5649395;0.56647384;0.57141232;0.57610929;0.56909394;0.58308542;0.56822222;0.57240969;0.57519186;
0.58256942;0.59457701;0.5831306;0.58761764;0.59896904;0.59116638;0.59610659;0.61073411;0.62571824;0.63024652;
0.62946546;0.60471189;0.61885351;0.6263296;0.6411106;0.63693851;0.65095329;0.64008951;0.63360494;0.61293799;
0.60690796;0.60904145;0.60614973;0.611274;0.62447953;0.63851464;0.6524151;0.6557309;0.66468269;0.6549595;
0.63618565;0.63886654;0.64501286;0.63325197;0.6277746;0.61687768;0.61447084;0.62578756;0.61413032;0.62048817;
0.61561435;0.61740214;0.6315195;0.6389333;0.64566547;0.64543486;0.65511638;0.65608513;0.63756555;0.64737499;
0.65088588;0.6382491;0.65165138;0.65314054;0.65895891;0.64409775;0.65725893;0.64050972;0.64608407;0.64450324;
0.63315642;0.64502352;0.64954466;0.64807308;0.6505757;0.63863641;0.63993484;0.62685728;0.63675499;0.64690739;
0.62694687;0.63774323;0.62277061;0.62975484;0.61096615;0.58915162;0.57051051;0.55971545;0.54511869;0.53541464;
0.5140751;0.52673799;0.53188336;0.53174829;0.52142429;0.52168417;0.53287154;0.54814702;0.55205762;0.55235702;
0.56921035;0.58399975;0.59086066;0.58192545;0.56724513;0.57024193;0.57706136;0.57529891;0.5839904;0.60026842;
0.58343053;0.5897404;0.60448521;0.61100429;0.58760786;0.573201;0.55743551;0.54359764;0.55403513;0.54671973;
0.54623514;0.55350053;0.53757441;0.53458476;0.53425914;0.52446967;0.51052517;0.5273087;0.53162533;0.53184086;
0.51246703;0.49975967;0.49837095;0.49873346;0.51359737;0.52074599;0.50711155;0.51142132;0.51246935;0.49788797;
0.50958127;0.52289701;0.53833246;0.52737534;0.53442842;0.51887274;0.50576681;0.51777214;0.51233834;0.49695027;
0.48834851;0.48009881;0.49097615;0.50649738;0.52194577;0.51947033;0.50226223;0.51646042;0.53063297;0.52890444;
0.54104406;0.5251174;0.54009837;0.55261797;0.5465247;0.55301446;0.5645979;0.57450974;0.57233316;0.5594942;
0.55946791;0.56822944;0.57265925;0.57123989;0.55228359;0.53526527;0.5478074;0.539738;0.529423;0.52961797;
0.51925874;0.51852751;0.52447522;0.52681547;0.5083003;0.50201052;0.51755995;0.51081395;0.51664704;0.50325435;
0.48991418;0.4719061;0.46913427;0.46265355;0.48412189;0.48711899;0.49309617;0.48012996;0.47800791;0.47678158;
0.49660313;0.51313972;0.51300228;0.49704096;0.49969018;0.50586611;0.51248199;0.51537877;0.49688601;0.48219994;
0.49634367;0.49609503;0.48520371;0.48563498;0.49299252;0.50649261;0.49966699;0.48246035;0.46589562;0.47189656;
0.45860416;0.44106621;0.45482275;0.46479228;0.4569394;0.46607175;0.46154407;0.47228745;0.47333649;0.48113272;
0.47737345;0.49240887;0.48915854;0.49265838;0.49955502;0.49742857;0.49986416;0.50591606;0.51512372;0.5333364;
0.51991731;0.51751012;0.52664602;0.53472936;0.51926255;0.52241892;0.516451;0.5118674;0.52508724;0.53621876;
0.52057397;0.52028733;0.53278887;0.52443635;0.53087902;0.53728294;0.55578679;0.53869104;0.52120918;0.50332654;
0.5147534;0.53068525;0.53070194;0.52880394;0.51157588;0.53030336;0.51791984;0.52377796;0.52095157;0.53973109;
0.54875815;0.54568166;0.55642742;0.55291915;0.54582125;0.56207126;0.5493533;0.54655045;0.55439323;0.53591305;
0.54632515;0.56275886;0.57002723;0.5592497;0.57173562;0.58273727;0.56002682;0.54794919;0.55635875;0.57345957;
0.57927394;0.5837;0.5915339;0.58140081;0.59345329;0.59128225;0.60416508;0.61392248;0.62492126;0.6087175;
0.62113243;0.62501705;0.61544925;0.62354171;0.6259312;0.62282008;0.63538861;0.62141019;0.61773098;0.59554332;
0.58854979;0.56800669;0.55878508;0.57638174;0.55864108;0.57140321;0.55347276;0.54674327;0.55115318;0.5475083;
0.533674;0.51728874;0.52967501;0.52836281;0.51331764;0.51449871;0.49552026;0.49640074;0.50388801;0.50684309;
0.48704338;0.49347764;0.49065977;0.47151664;0.45539388;0.44975728;0.46150076;0.44648084;0.45445177;0.47624817;
0.48424238;0.4775078;0.46682903;0.4705694;0.48770902;0.47877496;0.46366742;0.44807479;0.43053702;0.44033131;
0.42361143;0.44005617;0.45279062;0.44625512;0.42891449;0.43287161;0.43242571;0.42014816;0.4375391;0.42282853;
0.4443613;0.45617244;0.4552677;0.46410161;0.44961241;0.43252614;0.42376262;0.44490936;0.43749568;0.42112261;
0.42607278;0.41117758;0.41027609;0.4301731;0.43959552;0.45915082;0.44329861;0.43556273;0.43906859;0.43338212;
0.43536854;0.43306276;0.45223826;0.43788174;0.4548198;0.4557561;0.44253546;0.46335855;0.44997332;0.45432112;
0.46006185;0.47266078;0.45687562;0.45177314;0.45234653;0.46566901;0.46263507;0.4809652;0.49084577;0.50054061;
0.48929444;0.48255938;0.4706504;0.46597689;0.47327569;0.48863786;0.47791407;0.49224803;0.47402528;0.47045112;
0.47799867;0.46423039;0.45587137;0.4711419;0.45679665;0.44584763;0.45071667;0.46525636;0.45497635;0.44907317;
0.46709335;0.48130515;0.48005128;0.47098914;0.45217061;0.46543086;0.46407792;0.47044468;0.48105052;0.47018903;
0.47066584;0.48617473;0.4787226;0.46817234;0.46288803;0.47350457;0.48784134;0.49984786;0.51748115;0.51114661;
0.53051114;0.5162065;0.50154334;0.49743301;0.51233822;0.50972742;0.52526492;0.50507802;0.48960701;0.47182137;
0.47929955;0.4639172;0.45067781;0.46102005;0.4449636;0.43098143;0.41773382;0.43097401;0.4327668;0.44868669;
0.47039995;0.47708872;0.49778149;0.51115668;0.50186294;0.49780306;0.49914765;0.49435896;0.49308091;0.51264101;
0.49658245;0.48013961;0.49206176;0.50083542;0.52007854;0.51030755;0.50689006;0.49516726;0.4912633;0.48211911;
0.4946847;0.50789475;0.50631422;0.51836687;0.49993265;0.51916128;0.52021474;0.51215589;0.49781024;0.49215513;
0.48795149;0.49596104;0.50589186;0.49147791;0.50192946;0.4849757;0.49826732;0.4926056;0.50661069;0.51738113;
0.53563023;0.53449851;0.54487115;0.55443496;0.54235566;0.54787767;0.53687555;0.55376494;0.55577064;0.54634881;
0.56078094;0.54578519;0.54211795;0.54407674;0.56055909;0.55528939;0.56125015;0.57240671;0.56432921;0.56565583;
0.57554442;0.57177788;0.5520016;0.56813997;0.57883692;0.55946141;0.56133288;0.55609167;0.56686407;0.56510252;
0.55940861;0.55260098;0.53445852;0.54089928;0.54056519;0.55520087;0.55242848;0.55384463;0.54958266;0.53147227;
0.53737551;0.54898071;0.55043852;0.54957974;0.52791435;0.51758653;0.5125345;0.51244456;0.50526309;0.50485826;
0.50808585;0.498469;0.51250005;0.52147537;0.50488997;0.50421327;0.50057328;0.48490351;0.49509147;0.50031704;
0.50898153;0.49141404;0.49711868;0.51153666;0.49820185;0.51537943;0.52894181;0.52853549;0.51357079;0.52151781;
0.52222818;0.51828271;0.5010528;0.4916549;0.50591004;0.51357651;0.52988464;0.52753097;0.51012963;0.52368557;
0.50311416;0.52214122;0.5070641;0.51146489;0.52993679;0.53623104;0.52953094;0.51357019;0.51743633;0.50993168;
0.49036881;0.49502698;0.49757928;0.51030695;0.50580317;0.50094301;0.50344563;0.5029828;0.50807399;0.52132988;
0.5300743;0.51419234;0.50363517;0.51618946;0.50998771;0.51667345;0.50797528;0.51756692;0.52821606;0.52014244;
0.51399517;0.52413982;0.53983343;0.53542852;0.52237266;0.5068934;0.49768114;0.49815366;0.51429367;0.50779539;
0.50867707;0.49016663;0.48922127;0.50795323;0.51085275;0.5196588;0.53608865;0.52108967;0.53466594;0.55151218;
0.5350731;0.52984458;0.52237958;0.51114821;0.51751631;0.50510693;0.49210218;0.48305428;0.46721995;0.48385438;
0.49788898;0.49636582;0.48110986;0.46863672;0.46490479;0.45448199;0.47533247;0.46835104;0.4777191;0.48564625;
0.47416776;0.46141398;0.44786224;0.45555508;0.4524734;0.44517508;0.4612315;0.46309254;0.44627443;0.45790738;
0.44816113;0.44413623;0.43308166;0.42723721;0.42414272;0.42301521;0.40917566;0.42288509;0.41228983;0.41557604;
0.40664348;0.40572479;0.38990358;0.39469349;0.41152483;0.40624228;0.39253828;0.38186112;0.37091067;0.36876574;
0.36244482;0.37007859;0.37484685;0.36538747;0.35510299;0.37535033;0.37191072;0.38561633;0.37205401;0.38700232;
0.38482201;0.37762803;0.39181104;0.39588404;0.39222506;0.39538884;0.39003217;0.37817958;0.37017238;0.37460861;
0.37395236;0.36664075;0.36968413;0.37367192;0.3734774;0.36422601;0.37553862;0.38445631;0.39061111;0.37737677;
0.37322411;0.36353403;0.38734412;0.37648019;0.3707498;0.37827742;0.40122142;0.42112669;0.42987245;0.44705316;
0.4451988;0.44209588;0.4384765;0.45401332;0.45180637;0.46434003;0.45174524;0.47162253;0.48532277;0.49442363;
0.48067591;0.47418642;0.46377248;0.46027988;0.45077753;0.46673608;0.45022836;0.47048524;0.48177963;0.48289248;
0.47198427;0.45390543;0.4397606;0.45648408;0.47790378;0.46849811;0.46061829;0.45394984;0.46929583;0.48966238;
0.48568207;0.49268571;0.51173502;0.5074482;0.51744509;0.52820224;0.54104167;0.55265057;0.56572556;0.57082009;
0.56069273;0.56618214;0.56308335;0.57320166;0.57346869;0.58682847;0.58099627;0.56471747;0.5650745;0.5441159;
0.53204101;0.54677045;0.54104984;0.53361183;0.53749502;0.52889907;0.54024357;0.54555726;0.56265533;0.57125556;
0.57571119;0.56118143;0.56940269;0.57940942;0.56929719;0.56527525;0.57706976;0.5884338;0.56828332;0.55900162;
0.55721891;0.54088366;0.52514935;0.53966707;0.55707783;0.55388886;0.56931376;0.54839933;0.53290045;0.52229345;
0.50785428;0.51856095;0.50122982;0.48488429;0.4723306;0.47708666;0.47859958;0.49287945;0.48604599;0.47201705;
0.46303102;0.45576108;0.45460072;0.45005941;0.43379441;0.42817044;0.42810747;0.4146308;0.41387445;0.40748867;
0.40185964;0.4162288;0.42655501;0.41895133;0.40932754;0.40793133;0.40334591;0.39294869;0.37908518;0.37818539;
0.38530919;0.39263511;0.38607761;0.37265205;0.36361012;0.36639273;0.35497773;0.35186115;0.34446928;0.34743282;
0.34374729;0.33637384;0.35121682;0.36701486;0.35313752;0.3753247;0.38958341;0.41155517;0.42361572;0.444215;
0.44278634;0.46274844;0.48277867;0.4988879;0.51054895;0.49355584;0.51215225;0.51016361;0.51931483;0.52769959;
0.54202402;0.54409146;0.54906648;0.55139339;0.54098254;0.55036616;0.56363356;0.56366199;0.57939428;0.5678907;
0.58163983;0.58348244;0.56973279;0.57638878;0.58596861;0.56556219;0.57277077;0.57081473;0.58763862;0.56925088;
0.56797695;0.54739785;0.55999482;0.55965531;0.54078346;0.55545235;0.55382758;0.55857474;0.55775428;0.54430127;
0.56123704;0.5694893;0.57086772;0.58521301;0.59278756;0.60725003;0.58660954;0.57873547;0.57405704;0.58111572;
0.59312242;0.57983702;0.59324723;0.60588539;0.59915793;0.61239517;0.61860651;0.62888473;0.63905847;0.64357746;
0.61957228;0.6161266;0.59394848;0.59040731;0.59991533;0.60258502;0.61207318;0.60534477;0.61554414;0.61695844;
0.62066996;0.62351483;0.63822949;0.61459488;0.61922717;0.5992201;0.60841233;0.58429611;0.57894295;0.57952327;
0.59257251;0.60706925;0.61163348;0.59604216;0.57917488;0.59441262;0.59861535;0.602534;0.60842013;0.6220746;
0.63310575;0.64443803;0.6573168;0.63570487;0.64125264;0.65197235;0.65908873;0.66936672;0.64890277;0.64930916;
0.65205872;0.65487242;0.62966627;0.63300222;0.61630875;0.60534686;0.58638;0.59334129;0.59360635;0.60188699;
0.60327542;0.58452594;0.57573992;0.59098572;0.58788854;0.58865422;0.60478163;0.61107993;0.61065578;0.59279627;
0.59849358;0.60779905;0.58807451;0.57238662;0.57145059;0.5521915;0.55700874;0.56769723;0.56036371;0.55342525;
0.55057865;0.5482673;0.54433775;0.5388245;0.51954234;0.53493267;0.5179019;0.49813551;0.50860304;0.52250171;
0.53624016;0.5306434;0.53280014;0.54937035;0.5386557;0.52333033;0.52775407;0.53506649;0.53198838;0.5166086;
0.52598965;0.54445618;0.54422385;0.5233593;0.5284918;0.53397864;0.5521208;0.54684252;0.52633476;0.54490489;
0.5332157;0.54001111;0.55281991;0.55349696;0.55559754;0.54537517;0.53788793;0.53695607;0.55182642;0.56521165;
0.56823623;0.56909013;0.57440329;0.55706733;0.56855947;0.56613481;0.57862353;0.59485143;0.60602844;0.59840268;
0.5810827;0.55987543;0.54914677;0.56645703;0.57969815;0.55722159;0.53583145;0.55382633;0.55644745;0.56858432;
0.57961667;0.59355795;0.60228682;0.60408056;0.60719562;0.60949671;0.6082232;0.61961269;0.60474116;0.59652525;
0.58068168;0.56707442;0.56392092;0.57189798;0.56566566;0.56030178;0.57412982;0.58675361;0.56995577;0.56836724;
0.57937306;0.58337557;0.59267223;0.5838623;0.59540254;0.59149033;0.59195733;0.57999337;0.59024012;0.59168357;
0.58612382;0.56623948;0.56377321;0.55803627;0.55526477;0.5412063;0.53147292;0.53271335;0.52128714;0.51405644;
0.51281357;0.51859695;0.50997138;0.50456023;0.50084227;0.48435226;0.50088727;0.48495257;0.46754178;0.44904286;
0.45514354;0.46524563;0.47521186;0.46635091;0.45094478;0.46938857;0.4879044;0.50738031;0.49097142;0.48920974;
0.49050581;0.4818725;0.49753642;0.49187285;0.47513258;0.47372627;0.47598764;0.48128027;0.48106739;0.48651269;
0.49503905;0.47840771;0.48932913;0.50852418;0.49310553;0.48058289;0.50128621;0.49524325;0.50560457;0.51713336;
0.52633792;0.52457082;0.51866913;0.52504534;0.51552534;0.52078289;0.50265646;0.51684791;0.49788484;0.50112146;
0.51144874;0.50015253;0.50824022;0.49357283;0.49373206;0.50032294;0.4968681;0.47799489;0.4765299;0.49389103;
0.49024156;0.48182052;0.47944134;0.48090908;0.47334066;0.48564067;0.49413747;0.50898242;0.49996531;0.51004893;
0.52230412;0.51480722;0.51485765;0.51073623;0.51404643;0.51589358;0.4985891;0.48339728;0.47510061;0.49599132;
0.51582515;0.51020223;0.51438344;0.51872963;0.52632868;0.51742637;0.51555741;0.52767479;0.52131057;0.52529365;
0.51655853;0.52175498;0.52900988;0.53170276;0.51341623;0.49646759;0.51186579;0.50094217;0.50395763;0.48743737;
0.47846779;0.49320894;0.47529709;0.49542144;0.48046178;0.48766503;0.48225391;0.47724125;0.49486163;0.47873664;
0.48166224;0.46381527;0.45785311;0.44852626;0.43363753;0.44745693;0.45270282;0.46372622;0.48040757;0.48560315;
0.47452638;0.48441866;0.47291166;0.46783188;0.45426226;0.44049886;0.4535383;0.44441572;0.46193385;0.46196908;
0.4504433;0.44597191;0.44798243;0.46331239;0.45711705;0.46355519;0.45338574;0.44750103;0.46188527;0.48328626;
0.47817764;0.47586474;0.48266336;0.47862825;0.49569035;0.49165779;0.48866031;0.47218025;0.48995882;0.47100264;
0.47097924;0.46034554;0.45429957;0.47420192;0.47650898;0.49736464;0.49309751;0.47941971;0.47637141;0.45850241;
0.44454437;0.4645355;0.45307481;0.47493759;0.49345118;0.49396366;0.47972861;0.47126564;0.48976576;0.47325826;
0.46917519;0.45612526;0.4408747;0.42503321;0.40959135;0.42152199;0.41848189;0.4223012;0.41975233;0.40609014;
0.3999382;0.41040558;0.43259656;0.45052603;0.47130749;0.48347935;0.48694941;0.48308697;0.46597922;0.45528182;
0.47219175;0.48753592;0.47722352;0.46699855;0.48005342;0.47231188;0.47131312;0.45941383;0.48019478;0.49548727;
0.48800123;0.49281079;0.50061923;0.51111156;0.51908839;0.53417599;0.51879376;0.53619689;0.52843928;0.54266798;
0.54492283;0.54064929;0.55550253;0.54918599;0.54615295;0.54877847;0.55964905;0.54946357;0.53359205;0.53314459;
0.52395201;0.52173072;0.51189685;0.52309859;0.51769906;0.53551853;0.54385507;0.5548135;0.56248552;0.57186955;
0.5662728;0.54516929;0.52888155;0.5468564;0.55446684;0.55076218;0.54807341;0.54771394;0.52770567;0.51990753;
0.52230293;0.50440198;0.48715502;0.47632006;0.4900344;0.48798087;0.50576544;0.49210986;0.47380623;0.46419236;
0.45974118;0.4605166;0.4741239;0.48566169;0.50439525;0.50821394;0.51647449;0.52663171;0.54003954;0.54272085;
0.55011022;0.5413534;0.55615169;0.55368751;0.56959391;0.55807602;0.53939497;0.55266386;0.57050949;0.58734155;
0.57620829;0.57582957;0.57851577;0.56270564;0.55866617;0.5723936;0.56060308;0.5613755;0.56582791;0.57731658;
0.58287114;0.56301057;0.5742147;0.56551063;0.56484252;0.5804953;0.56127751;0.57483935;0.57848865;0.59115773;
0.57097715;0.56887805;0.57336497;0.57680756;0.56359851;0.58051741;0.56195456;0.56866044;0.56471556;0.57808781;
      };
     };
     float_Data @[3] {
      name="swt";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [6000] 0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;0.48334908;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;0.47407269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;0.56088269;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;0.51339257;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;0.506962;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;0.50141549;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;0.4394035;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;0.54531705;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;0.51293987;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;0.46471643;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;0.35943058;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;0.55100805;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;0.59501219;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;0.4759424;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;0.47302881;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;0.45472988;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;0.46672976;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;0.47047663;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;0.53399765;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;0.4768903;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;0.52328765;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;0.573394;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;0.39792183;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;0.44949311;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;0.6631909;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;0.5031653;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;0.57712829;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;0.6200968;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;0.48396176;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;0.4170894;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;0.58567178;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;0.58978969;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;0.45484003;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;0.48844954;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;0.5553872;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;0.57790333;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;0.44979775;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;0.54346329;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;0.55160439;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;0.47295469;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;0.63559705;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;0.43517822;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;0.4802888;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;0.5417189;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;0.49756536;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;0.55748129;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;0.55785763;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;0.62694687;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;0.51925874;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;0.54632515;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;0.43536854;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;0.4946847;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;0.50311416;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;0.36244482;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;0.57571119;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;0.56797695;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;0.55057865;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;0.51281357;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;0.47846779;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;0.48800123;
      };
     };
     float_Data @[4] {
      name="dwt";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [6000] -0.03330186;-0.0055874703;0.037119035;0.0058388794;0.021320995;0.031605836;-0.015642133;-0.036322087;-0.029134294;0.023583028;
0.017580474;0.011350778;0.017166181;0.0080701588;0.023563432;0.023952834;0.019108286;0.038504727;0.0096999528;0.0064320229;
-0.022911349;0.010176125;-0.036235321;-0.019813424;0.018222833;0.0058136871;-0.021235486;-0.0037097393;0.037596859;-0.026550945;
0.006663559;0.032469403;-0.018845716;-0.024101738;0.02995529;-0.00067885953;0.012896744;0.030692842;-0.0040231091;-0.027267953;
0.00029523845;0.032487422;0.0061349343;-0.014601662;0.025913686;0.0098848827;0.011403434;0.0075655659;-0.010429219;-0.028190587;
0.019295497;-0.031875599;-0.03070456;-0.025998607;0.013024414;-0.034564264;0.030028896;0.017630057;-0.011329496;0.035642896;
0.010733919;-0.015964929;-0.027630461;-0.010005743;-0.013225006;-0.0050450293;-0.010612344;0.038857263;0.030495249;-0.015766473;
0.026707316;-0.011407754;0.028893832;-0.008212748;0.011781828;-0.03749707;-0.0097817378;-0.033759441;-0.03665648;0.010293388;
-0.033920046;0.03360134;-0.028145801;-0.030512111;0.0094858259;0.020445857;0.036540642;-0.021030908;0.018982273;-0.024180613;
0.018059671;-0.022385288;-0.022119768;0.032119151;-0.0030250771;-0.036333513;-0.016067686;-0.013318414;-3.3570246e-05;0.027909363;
0.0014061128;-0.0026438669;-0.013352911;-0.01999232;-0.02377297;0.031724695;-0.0051989313;-0.034438599;-0.005188195;-0.010388515;
0.038968608;0.0067578414;-0.030140175;-0.001022262;0.03048759;-0.0038898247;-0.0018676171;-0.023342837;0.03312023;0.022739001;
0.016972616;-0.035800647;-0.0043603037;0.0059958296;-0.035503659;0.037611626;-0.0059169703;0.027858382;-0.027116099;0.011567997;
-0.0025717341;0.031297043;0.011268998;0.014095674;0.0051000314;0.026788309;0.011597179;-0.035476048;-0.0071569397;0.019891135;
0.0032132419;0.0075841937;0.0052758441;0.039790869;0.024138868;0.010291497;-1.871966e-05;-0.034549832;0.031417083;0.0086547872;
-0.03529752;-0.0090831602;-0.035816833;0.013294842;0.033600178;-0.030461347;-0.013006675;-0.012658841;-0.0019457336;0.026585635;
-6.2459236e-05;-0.034028303;-0.029482417;-0.02943108;-0.00083382207;-0.019885316;-0.0093272999;0.0023794959;0.017613376;0.014541689;
0.029310461;-0.0055269082;0.028474085;0.0065944698;0.0071051316;0.0032472666;-0.015708704;0.02719716;-0.038215861;0.036071893;
0.010002775;0.01476394;-0.01264412;0.0055325427;0.023303103;0.0044945725;-0.002725018;-0.028317012;-0.0011656573;0.020880338;
0.027568579;-0.00022001946;0.030096015;-0.015777672;-0.0073886574;-0.0067961183;-0.012788842;0.034706179;0.039051753;-0.0086524822;
-0.0037096548;-0.027802929;0.0024377771;-0.037851401;0.021428369;-0.0045200661;0.024237789;-0.0078714322;-0.014857641;-0.016715627;
-0.035664745;-0.038424689;0.029439263;-0.004305094;-0.0084701544;0.005302466;-0.0049399552;0.01863924;0.019192033;0.032889973;
0.038442232;-0.02971331;0.03015258;0.0063697766;-0.0018325455;0.021961125;0.0033677893;-0.035270274;0.01594189;0.027577549;
-0.029228007;-0.030815909;0.018498331;-0.032090399;0.023006411;-0.01495256;-0.031679679;-0.028253511;-0.024851639;0.0071335407;
-0.022134619;-0.01177491;-0.036651175;0.024159962;0.036319621;-0.014789509;-0.016459739;0.026805332;0.027319456;0.0021357033;
-0.017450372;0.033235263;-0.039371412;0.031367891;-0.0024353391;-0.012533056;-0.01006767;0.033567488;0.014766441;0.0097729983;
-0.001451347;0.014966297;-0.000280031;0.025894221;0.002029093;-0.023164434;-0.020001218;-0.0015955291;-0.013539219;0.0055359793;
-0.017820777;-0.014266751;-0.029500188;-0.037527461;0.021568777;-0.0064122309;-0.019257249;0.022251803;0.022440441;-0.027062716;
0.012452065;0.013304102;0.012434132;-0.012107497;-0.013555721;0.01372455;-0.023209745;-0.0056292098;0.01311581;-0.032710537;
0.023890004;-0.013539148;0.039413035;0.034916904;0.003724819;-0.016856901;0.015580897;0.0034516344;-0.0087376796;0.016872477;
-0.0018134513;-0.026051665;-0.023559924;-0.004440648;0.0037031015;0.0083046472;0.00047902018;0.024203302;-0.0026495743;0.039691515;
0.0046715392;0.031154528;0.034228612;-0.018594433;0.0057237498;0.030102044;-0.020569865;0.013174241;-0.020820722;-0.003263063;
-0.018691793;-0.0087992325;0.01067992;-0.023955295;-0.010602934;0.0039109518;0.018400243;-0.014931551;-0.0054084533;-0.021952102;
0.0294913;-0.01042635;0.010688571;-0.0052547851;0.034690619;0.0058062202;-0.013221409;-0.00044082227;-0.026562365;0.028781364;
0.020993788;0.019326851;0.028343331;0.024582218;0.032887071;0.0032338162;0.026563788;-0.01784201;0.038478967;0.0061555495;
-0.022229895;-0.03688471;0.026532879;-0.023879604;-0.0021378947;0.0078914016;-6.4320273e-05;-0.030754978;-0.016549455;-0.03326207;
-0.005675796;-0.020683192;-0.021290638;-0.031046608;0.02351119;0.034569364;-0.039467257;-0.0083857235;-0.018695977;0.015264263;
0.0075883926;0.029596094;0.015109365;-0.027355943;0.02342535;0.02168238;0.0056474325;-0.039723225;0.0052862093;0.035400834;
0.019792335;-0.039824277;0.021771185;0.022902731;0.0096505145;-0.0047591901;-0.00018569066;-0.01636523;0.014418714;0.014645602;
0.0042170198;0.017968806;-0.03048181;-0.039938722;-0.027057765;0.0035487299;0.025650192;0.010095906;-0.03596979;-0.0036110186;
0.017805798;-0.019484058;-0.0014402245;-0.0055746231;-0.013052084;-0.01564699;0.0088439304;-0.013775679;-0.0083466163;-0.028839836;
-0.0064429743;0.01262878;0.032732449;0.029519971;0.033719625;-0.026581215;-0.034567621;-0.0039322819;-0.011878272;-0.029843517;
-0.031114094;-0.014482649;-0.012412055;-0.010449742;-0.016175849;0.028186249;-0.0038808919;0.01390385;0.0081547126;-0.032245666;
-0.02265206;-0.0094187586;-0.0061441399;-0.034168776;0.034953486;0.037629958;0.017976677;0.0051297224;0.028045474;-0.015620187;
0.039419528;-0.035504054;0.0021904716;-0.023209572;0.023930829;-0.011812694;-0.018621881;-0.01277354;0.02437092;0.0038706381;
0.011218544;-0.0050689811;-0.0056643612;-0.035622157;-0.023685565;0.012497226;-0.015727738;0.0018252817;0.013669413;-0.0070935176;
-0.023880875;-0.017143048;-0.011302135;0.014553326;0.036553796;0.022196334;-0.018827811;-0.020229289;0.029515907;0.016644767;
0.0094608637;0.013928304;-0.024204858;0.036095578;0.011685802;0.038346998;-0.03169683;-0.032151386;0.015019762;0.0048003532;
0.011560108;0.028372522;0.038266007;-0.0098935859;-0.037688158;-0.006853546;0.01962227;0.034468032;0.027640961;-0.038579434;
-0.021895221;-0.010896378;-0.019095313;0.020806907;-0.0017426574;-0.025998818;0.00096189225;0.014000145;-0.032883797;0.017772948;
0.015163559;0.038477585;0.035422511;-0.038574725;-0.022613361;-0.0012607102;-0.015052334;-0.0019188153;0.0097534992;-0.036949888;
0.037602596;-0.03949393;0.014441425;0.026513839;0.034933303;0.025307931;-0.01906139;-0.015648535;0.0063306661;-0.014969771;
-0.0017750707;0.020108329;-0.01710354;-0.028762482;0.03101046;0.0072511896;-0.038672257;0.02053934;-0.011620414;-0.018884275;
-0.015167521;0.023710929;0.015496249;-0.0060200477;0.025057286;-0.03788618;0.034723207;0.0017440083;-0.037995946;-0.0060365903;
-0.026866302;-0.014886161;-0.0027052497;-0.025869992;-0.008880592;0.0090596797;-0.010986561;0.034754872;0.01599949;-0.013728089;
-0.00032099412;-0.0015457914;0.011381062;0.0056251804;0.024515737;-0.031608492;0.039610457;-0.013808971;-0.035514623;-0.025333943;
-0.0075001172;-0.0099050496;-0.032238655;-0.024266306;0.020734528;0.021991156;0.0071148803;-0.015453579;0.0076938816;-0.0035976616;
-0.0097819529;-0.032366712;-0.03199869;-0.030216815;0.037033841;-0.017084533;-0.034132551;-0.029952092;0.039242651;0.016100781;
0.035677649;-0.0018389355;-0.0072787516;0.003216183;0.034768645;0.023994692;0.016689427;0.031271424;-0.014750925;0.0086304964;
0.028190829;-0.028139638;-0.023373293;0.02573527;-0.0059276768;-0.036881171;-0.026848556;-0.032155734;0.032704595;-0.025889615;
-0.039197326;-0.013443097;0.0056838859;-0.0061928737;0.0060974443;-0.029563455;-0.010823351;0.019271718;-0.0034204249;0.0073102703;
-0.016943561;0.015614248;-0.015250497;0.025067482;0.016313029;0.030091584;0.029924724;0.029648991;0.023056377;-0.027901981;
0.015218722;0.0086829504;-0.024851013;-0.015658615;-0.031781577;0.025731975;0.022375513;-0.019283373;-0.01686462;-0.030874694;
0.032651108;0.0096288137;-0.024544399;-0.014343842;-0.025106864;-0.017209338;0.0098215332;-0.027337084;-0.013208556;-0.031255823;
0.029911924;0.0038859388;0.0025236863;0.010398241;-0.02715075;0.039787941;-0.010676755;0.033783011;0.019239161;-0.0036606127;
0.0046489285;0.038719915;-0.01918201;0.014671878;0.027684622;0.0037950175;0.034877367;0.023634817;-0.037446797;-0.0066922251;
-0.00014140012;0.013272526;0.02587099;-0.0011090416;-0.027085554;0.018745996;0.0052872486;-0.004076039;0.035418939;0.035699435;
-0.034013826;0.010569669;-0.0063906847;0.0099594975;-0.02338223;-0.0020199118;-0.037818048;0.031307627;-0.00075284432;-0.0071840417;
0.038667664;0.031922601;0.030707402;-0.028793802;0.0025372577;0.019299353;-0.032456134;-0.032013316;0.032386042;-0.016953874;
-0.011226137;0.0058366633;0.0066473559;0.0021289762;-0.013707099;0.034152348;-0.039420623;0.038662974;0.025632598;0.025459111;
-0.038819671;-0.036979806;-0.017282978;-0.038596172;-0.0061870092;0.012956466;0.038606443;-0.0093840407;-0.012910606;0.036082875;
0.010735119;-0.0084492983;0.026900809;0.0019754716;0.010473684;-0.024646429;-0.026177129;0.0095078005;-0.019344326;-0.031509139;
0.014449496;0.0022022827;0.032750338;0.037289973;-0.0091849891;0.032655716;0.0086181564;0.011380211;0.0095911231;0.034662575;
-0.012853108;0.038274109;0.026922781;-0.024085103;0.0036779996;0.0033967188;0.021309914;-0.010601188;-0.036291599;0.027005175;
0.026567554;0.024430223;0.0067889877;-0.015926588;-0.00052290101;-0.025587687;0.0060889116;0.039507594;-0.0016251532;0.027234145;
0.031089818;-0.014734712;0.0077577638;0.03962069;0.019366337;0.016047899;-0.0125079;-0.013589791;-0.013957732;-0.015919197;
0.034698613;-0.023650121;-0.011090271;-0.011214332;-0.039026145;-0.034240138;-0.0035259759;0.024740053;0.0020364302;-0.037662119;
0.0087913387;-0.032051086;-0.013936749;0.0054822159;-0.02454615;0.015152153;0.012141466;-0.011872072;0.0070673805;-0.0040548043;
-0.020224223;0.037845124;-0.020516373;0.033461086;0.0043485127;-0.035973802;-0.03939826;-0.021928012;0.020961501;0.035512947;
-0.028311389;0.02854885;0.019155866;0.015919661;-0.0080982307;0.007799149;-0.026333654;0.030594219;-0.0327188;0.014319895;
-0.0090677207;-0.029885454;0.035962749;0.021457564;0.020448741;-0.02079808;-0.012059122;0.0039059257;0.028459372;-0.025105722;
-0.0098872827;0.038770139;0.024158467;0.010795501;0.018687606;0.015206509;0.024591802;-0.028546678;0.0083707012;0.035522215;
-0.036235534;0.0023487741;0.028309954;-0.024240034;0.0092707137;-0.023476364;-0.0023022427;0.0039611668;0.033049189;-0.029381851;
-0.010056354;0.036632013;-0.035991833;-0.030661508;-0.0018273566;0.013534891;0.019300183;-0.034571089;-0.013448091;-0.017440444;
-0.01908228;-0.01646515;-0.033909604;-0.0018978947;-0.024018245;-0.021973349;-0.028423773;-0.027987847;0.0098138936;0.019612296;
-0.0013874392;0.028611194;0.00024977367;0.0002760599;0.038131163;0.0014845392;0.0022251443;-0.035202228;0.014420629;0.033801697;
0.027850861;0.0068404195;-0.020812219;0.039408375;-0.038632739;0.032086048;-0.0071562547;0.007116986;-0.0327686;-0.03759547;
-0.02091597;0.033139743;2.3168659e-05;0.0081101675;-0.03288262;0.0016710741;-0.0057008206;-0.0081810793;0.030965436;0.0056861201;
0.032214802;-0.013728479;-0.034624022;0.039269481;-0.0341557;0.026944315;-0.017039582;-0.024918545;0.028839348;-0.016775174;
-0.023962559;0.020304579;-0.00088387;0.0030573979;0.021742115;0.0090268012;-0.029912822;0.033518542;-0.039197691;-0.0075798077;
-0.024174325;-0.0025676657;-0.0087580532;0.014863616;0.036388125;0.012904017;0.0064075408;-0.027311869;-0.030724879;0.033228751;
-0.025012299;-0.026901525;-0.022822263;0.0088914558;0.00032501866;-0.013962227;0.011033384;-0.033305056;0.01422781;-0.039533928;
0.029330153;-0.034075767;-0.036701825;0.022521524;0.037777115;0.0053197765;-0.026734356;0.026862089;-0.039867051;0.012330401;
0.034970898;-0.034303136;-0.01420573;-0.014351001;-0.016390007;0.010888892;0.021174688;0.0099156359;-0.020100391;-0.035541888;
-0.026941041;-0.0018350577;0.022421177;0.028313464;-0.02966612;0.015619738;-0.010193113;-0.034767222;-0.023197921;-0.024180878;
0.036955442;-0.02706171;-0.01902491;-0.026258912;0.017402969;-0.035767805;-0.011578978;-0.0039162538;0.0087799821;-0.022273971;
-0.025946945;0.022419864;0.039056856;-0.039496396;-0.031214349;-0.03647517;0.031557754;-0.012082752;0.011707582;0.018456871;
-0.039721385;-0.013866081;-0.0056755948;0.0028563777;0.00024985484;0.0041599264;0.0038830091;-0.0172475;0.039822083;0.0024552969;
-0.032023374;-0.025836181;-0.035682194;-0.00039056188;-0.034107734;-0.015617161;0.0027841113;-0.01211616;0.01462751;-0.02702477;
0.0054965015;-0.0013415598;-0.036794756;0.033157684;0.021155627;-0.031721991;0.0037478448;-0.013027409;0.021499574;-0.0209556;
-0.012013712;-0.025044259;0.00022652012;-0.036491655;0.037987091;-0.018603571;-0.034867588;-0.038061637;0.014177896;-0.007885403;
0.0090542622;0.031332854;-0.0030838985;-0.0095753679;-0.013278821;0.03896872;0.027831126;-0.035737924;-0.010439602;-0.032451183;
-0.014923791;0.024251064;-0.023671607;0.029006252;0.02938465;-0.020201307;0.035721716;0.013244721;0.0052012498;-0.014676797;
0.015320853;-0.039478216;-0.039928403;-0.0030797359;0.012168568;0.031429712;-0.0092016375;-0.0088339439;-0.014215371;0.034370147;
0.029075783;-0.026975488;-0.0064055505;0.028533909;0.029622449;0.033658881;-0.0012210743;0.031093668;0.025031505;0.014999774;
-0.0026572829;0.023617569;0.031297669;-0.019868325;0.0087194052;0.022912879;-0.029492287;0.03495463;-0.032142822;-0.035269447;
0.027505213;0.0090425406;0.016649209;-0.0081721991;0.027433608;0.0261693;0.0068911472;0.031253014;0.013763536;-0.00091042672;
0.033116914;0.033753071;-0.0098303314;-0.03082501;-0.021806205;-0.005807024;-0.019273331;-0.00064162462;0.012300637;0.013374812;
0.023620548;-0.032071531;0.035416096;0.012454229;0.022972839;0.015743719;0.029100912;0.022299657;-0.032891199;-0.023762964;
0.0098349778;0.022780722;-0.016983684;0.025631586;-0.0088779945;-0.036543459;-0.037732668;-0.016148452;0.025408508;-0.027346296;
0.03536218;-0.0068737599;-0.0099144569;-0.034751218;-0.031063486;-0.019384136;-0.0063410406;0.037333366;0.033752825;-0.039043896;
0.010349078;0.022765046;-0.011851453;0.024425605;-0.015184715;-0.0032541289;0.010566242;0.039257057;-0.035851594;0.027119679;
-0.014841684;0.033929791;-0.004877171;0.0017258531;0.021587657;-0.021394795;-0.022245608;-0.0046511544;0.015563221;0.015149863;
0.0025248018;0.02409797;-0.0097298734;-0.028691323;0.019344861;0.0256534;-0.032742117;0.0021254346;-0.0034834724;0.006551167;
0.0080808783;0.0069506261;-0.018651314;0.03727277;0.029074911;0.03895795;-0.036601286;0.01197669;-0.020849915;-0.0041493019;
-0.030585364;0.03864957;0.017733235;0.018879851;-0.0033769899;0.01435163;0.025866006;0.014203715;0.030002348;-0.02133387;
0.014899455;0.022020513;-0.02574032;0.017990474;-0.005259315;-0.015092898;0.006127886;-0.015583348;0.024668787;-0.01639442;
0.039032966;-0.020591356;-0.018421581;0.038188051;-0.025000123;0.0081941616;-0.0083588567;-0.037978008;-0.022823093;0.025000127;
0.026206205;0.010510346;-0.02022941;0.0039206017;0.01379118;0.023473438;-0.0029388128;0.039148588;0.034136117;-0.032216486;
0.035901833;-0.021389242;-0.013634738;-0.0063964562;-0.021119056;0.0098235952;0.02234903;-0.012409094;0.0055801417;0.035488572;
0.023146413;-0.012774528;0.018316263;-0.027006734;-0.026615027;0.026418092;0.0090205166;-0.0069418731;0.011338206;0.019264629;
0.025787808;0.037062868;-0.032894623;0.013979308;4.6715024e-05;0.019594036;-0.039978504;-0.039993018;0.015912935;0.010678742;
-0.014232234;0.0046194312;-0.031230291;0.011777747;0.024376193;0.0032149937;-0.019709667;0.02710524;-0.0016119096;0.030980453;
0.022618096;-0.026468512;0.0031667831;-0.016066941;-0.036489017;0.0031022551;-0.023153309;-0.00053044502;-0.0016029745;-0.0297185;
-0.020107539;0.0089814467;0.025690386;-0.023907213;0.022682501;-0.015170646;-0.01810177;-0.03398018;-0.01810726;0.0047379765;
0.018986996;-0.024410173;0.016385917;0.027389025;-0.0006203829;-0.03046738;-0.0058098277;0.028685108;-0.020947047;-0.023848906;
0.028664589;-0.028723162;-0.033439774;0.018070905;-0.00050012901;-0.014584403;0.014195598;-0.030823011;-0.011486713;-0.021159675;
-0.020914953;0.0034267579;0.00605238;0.0042630117;0.0080096824;-0.020197516;0.030839728;-0.013803373;-0.032214124;-0.037924353;
-0.024206756;0.0066823973;0.0025882693;-0.0079814233;0.038853757;-0.017351653;0.0051100268;0.03382716;0.024992108;-0.020631928;
0.036483519;0.02324293;-0.017861156;-0.034618527;-0.039439704;0.0055680559;-0.03983257;0.029561119;0.015380397;0.033570301;
0.013144777;0.032620486;0.0032231838;0.00086771633;0.0047363993;0.021075722;0.039980367;0.0132454;-0.0090826079;0.00086680212;
-0.016903464;-0.0031840161;0.00842035;0.034760863;0.025472064;-0.0015350436;-0.014353988;-0.034838334;0.024369121;0.013156977;
-0.018160624;0.037366424;0.0066642105;0.0076087629;0.017851764;-0.016708236;-0.010179223;0.027851438;0.0068020741;-0.036617734;
0.027168693;0.010082119;-0.011407942;0.00054926838;-0.034284819;-0.0046160175;-0.0028902791;0.037194163;0.037659965;-0.032690842;
-0.020577786;-0.034214459;-0.020647801;-0.013672695;0.031412132;-0.0026928366;0.0089475336;0.032320477;0.025547992;-0.010184582;
0.03694633;-0.037366536;-0.022393635;-0.038711868;-0.025916146;-0.0059264991;0.012606188;0.037480876;0.03395528;0.034330852;
-0.030906858;0.0013776959;0.0067746839;-0.018441398;0.039565962;0.023354368;-0.023419386;-0.028538987;0.036713883;-0.013635552;
-0.032967899;0.019558584;-0.023285143;-0.024664568;-0.022288423;0.012000569;0.003686432;0.0019953162;-0.018485218;-0.030811308;
-0.011909251;0.03171663;-0.02145661;0.025240356;-0.0093559502;-0.019005429;0.025428658;-0.032377217;0.00061613758;-0.017739663;
0.030887922;0.0028375764;-0.0044685416;-0.032476772;0.011552803;-0.00022544451;0.009289206;-0.023132587;0.01854156;-0.039265133;
0.031046433;-0.030803116;0.031168342;0.017368162;-0.034263793;-0.035042576;0.0082555795;0.0060820696;0.013521727;-0.038526006;
-0.0084025245;0.0039150557;0.0060870773;-0.021892432;0.0093245544;0.028437015;-0.0048840907;-0.029455874;-0.026287766;0.033603314;
0.039070625;-0.037243053;0.026468962;-0.029855074;-0.014228252;-0.034039278;-0.024798512;-0.022199869;0.018845474;-0.019301746;
0.0010970818;-0.01007894;0.010115806;0.030937666;-0.00096233032;-0.0027951468;-0.013791461;0.0239783;0.0036550972;0.013419115;
-0.027659297;0.018271172;-0.014445942;0.030590221;-0.0087913517;-0.021693368;-0.027403619;0.0056403219;0.0255749;-0.031066224;
-0.037372746;-0.019869659;0.034226596;0.0029366235;0.020512231;-0.028393235;0.017093144;0.034461293;-0.020114992;0.014835932;
0.0059965625;0.031009806;0.0079957815;-0.033714332;0.027196823;-0.026157185;0.0032652961;0.0067218645;0.016626766;0.019770768;
0.01166718;-0.025887985;0.027729671;-0.022188837;0.034355979;-0.011152508;-0.0068954681;0.023959557;-0.022334496;-0.019596234;
-0.0072471006;0.0086324178;0.019865755;0.024880972;-0.02843542;0.018688988;0.0025517503;-0.027534578;-0.039533641;-0.028507067;
-0.001218577;-0.025398478;0.029932119;-0.013167283;0.020761944;-0.033605557;0.016626429;0.0012764025;-0.01751497;-0.0039150226;
-0.0026002149;-0.02783508;-0.013774316;-0.0086323144;-0.024422249;0.02379328;0.010872981;-0.034373797;-0.02904602;0.010604301;
-0.010855992;-0.0039192997;-0.036347009;0.012828607;-0.016998485;-0.0050549945;-0.022463506;0.01268461;-0.030656196;-0.014259517;
0.031607121;-0.033509668;0.02792819;0.033494495;-0.016187755;0.0077936971;0.0051110862;0.010210557;0.012407788;0.024289396;
0.0069520148;-0.012480919;0.036177393;0.02625791;-0.016047399;0.011742513;-0.038139556;-0.028825138;0.021593492;0.014863818;
-0.0048721139;-0.0040859208;0.028747033;0.037827402;-0.021825654;-0.038695097;-0.037148301;0.037261572;-0.036396652;-0.024206875;
-0.0075635272;0.038623955;-0.0064869062;0.038477231;-0.0019187718;0.0082041221;-0.026764877;0.034147229;-0.027939307;-0.0047987164;
0.018523244;-0.0064889421;-0.0017930114;-0.010779649;-0.013646903;0.022273665;-0.016937139;-0.0023982341;0.011846208;0.023795011;
0.012931707;-0.025713157;1.6670945e-05;0.030180642;-0.023842003;-0.036461834;-0.0058605503;0.024157848;-0.008973808;0.039043266;
-0.025875321;0.020340195;-0.02928685;0.0049330159;-0.031078346;0.019694651;-0.030350564;0.037055738;-0.0077862581;0.014145857;
0.03027254;-0.004795169;0.012126702;-0.027199699;-0.039396808;-0.011618284;-0.0012438197;-0.019330369;0.031480324;0.021572538;
-0.037628926;-0.030835425;-0.028253276;-0.0031476072;0.033141777;-0.0037513324;-0.029569235;-0.038837265;-0.039985623;0.0258331;
0.0077808583;-0.004484361;-0.012564334;0.014628978;-0.00028772597;0.023962304;-0.031537183;-0.015866885;-0.038327772;0.02064262;
0.029042223;-0.017371226;-0.038575903;-0.023986643;0.036007334;-0.029479561;0.022441691;0.0075571067;0.030165877;-0.03995553;
-0.02926443;0.030784691;0.0092626251;0.0067353891;-0.016655587;0.020155577;-0.0071704914;-0.012959467;-0.039595112;-0.032714255;
0.0028514576;-0.028494505;-0.017915975;-0.036119763;0.038410835;0.023082018;0.020988591;-0.0021479782;-0.01172891;-0.0075187152;
0.010708713;0.031957779;-0.026236657;0.0046387292;-0.030542264;0.019225949;-0.031399239;0.03494418;-0.028925411;0.01985533;
0.013284246;0.011761758;-0.017317705;-0.038214702;0.00055697432;0.011703176;0.016419185;-0.0029737989;-0.0081960689;-0.025833089;
0.024295568;-0.026063604;-0.0084976805;0.03805089;0.037436944;-0.0190621;-0.037391704;-0.010534203;-0.0096933628;0.0061000227;
0.0049180496;0.034384623;-0.013578595;-0.020584445;0.017070804;0.010561708;0.012003774;0.022493782;0.031992;-0.034377936;
-0.034498144;0.032955296;-0.014962978;-0.032623202;0.031139173;0.014922337;0.0023128993;0.037138268;0.010415662;-0.03578217;
-0.03376301;-0.039755091;-0.0012242588;-0.019203141;-0.019564319;0.026947591;0.029370017;0.030307034;-0.037940703;-0.013864388;
0.01916624;-0.031202592;0.0098259831;0.01876732;-0.025639515;0.0198418;-0.0001399379;0.017878098;0.026871737;-0.03555407;
0.033471778;-0.027375812;-0.022089871;0.019598626;-0.022247583;0.037644085;0.01289605;-0.007916647;-0.010018324;-0.023980983;
-0.028698808;-0.030742982;0.024398433;-0.021117711;-0.034959469;-0.023855809;0.034955334;-0.0064474563;-0.00075814954;-0.01094089;
-0.016791238;-0.036056262;-0.0072889575;0.018542614;0.00013684786;0.019355692;0.0076851621;-0.03495831;-0.0046871062;0.019281056;
0.025262732;-0.0065165148;0.026480978;0.0073412117;0.02644396;-0.00084167352;0.015097908;0.011008481;-0.010037661;0.019889697;
0.0041806889;-0.039457619;0.037961189;-0.022159386;0.036759589;0.0028674304;-0.0086722225;-0.0038428081;-0.013707062;0.022834076;
0.0056229983;0.021467611;0.013790831;0.006729973;0.034938052;0.0090974895;-0.039446864;0.0079203313;-0.006258694;-0.011582324;
0.027174097;-0.021919893;-0.022734124;-0.011998662;0.01115788;-0.021519784;0.035173822;-0.025265872;-0.022887265;0.021684755;
0.015144265;0.00077501731;-0.0092515983;-0.010687101;-0.0020153839;0.036860459;0.0081042638;-0.023159754;0.020261791;-0.0090822885;
0.039917596;-0.017681239;-0.032373205;-0.0059681553;0.033494662;0.022716513;0.028408052;-0.01891554;-0.033256765;-0.022403821;
0.0053874142;-0.03190938;0.024506772;-0.016984653;-0.0097594736;0.017105104;-0.0081783924;-0.026510101;0.025087623;0.030418143;
0.030575698;0.02630705;0.0027512491;0.015295728;-0.02642915;-0.011807452;0.0016743188;-0.006665322;0.00023282043;0.030684872;
0.0056776116;-0.016600687;-0.019040676;0.030999715;-0.013668709;-0.0085625239;0.02682529;-0.037990313;-0.010255459;0.023030289;
0.019338911;0.012343131;0.0068592308;0.033606891;-0.033567149;-0.028363917;0.023000326;-0.013620483;0.035543449;0.018114112;
0.013432733;0.014330634;0.033447661;0.024584496;-0.034243714;0.025014495;0.00040821152;-0.010563156;-0.0057103951;-0.016827952;
-0.016421068;-0.015635425;-0.016196096;0.024575353;-0.022520032;0.020510953;-0.024971001;0.008374963;-0.012226516;-0.03090019;
-0.0025127137;-0.0064534829;-0.016544076;-0.037149005;-0.013360893;-0.02267723;0.034199268;-0.014225852;0.036248032;0.010263039;
-0.036281072;0.029973947;0.012545479;-0.010838441;0.016578341;0.034828275;0.00056329742;-0.0059010298;0.027948223;-2.0182046e-05;
-0.030371528;0.015070756;0.012048119;-0.029375967;-0.002090038;-0.0012770059;0.00068306108;-0.022419615;-0.010640658;-0.029425282;
-0.0081146508;-0.0091178939;0.020282198;-0.015476082;0.034673952;0.008010325;-0.033385895;-0.030210657;-0.0042308494;-0.017323799;
-0.02631657;-0.033822652;6.5529028e-05;-0.035127878;0.012112628;0.0073853596;0.0071260887;-0.0074238097;-0.0097185662;0.015963897;
0.026960338;-0.024375321;0.010917989;0.013009422;-0.028629601;0.012826112;-0.0032534415;-0.021390961;0.019716453;0.031558871;
-0.039173421;-0.029195691;0.011247539;-0.017354351;-0.022126433;0.017014513;-0.021800317;0.01382049;0.034777686;-0.01062908;
0.014395237;-0.014534228;-0.015374479;0.0019716653;0.0094826929;-0.015827483;0.038175914;0.024497379;-0.014205888;-0.03424599;
0.035481554;-0.0066256481;-0.013229536;0.012728295;0.018328702;-0.011204354;-0.023848379;-0.010929384;-0.017819334;0.02385067;
0.01008985;0.017901957;0.033211756;0.010967158;0.015901336;-0.025103316;-0.011675726;0.01570552;-0.017265249;-0.025339987;
-0.032978222;0.039362069;0.018596416;-0.0073565021;0.015297918;-0.011199852;0.025247563;-0.0020015489;-0.022245273;0.033088829;
0.023544608;0.011296377;0.0084708165;-0.0226153;-0.0039384025;-0.0093261208;-0.031230116;0.037612874;0.029802382;-0.017440258;
0.034303188;0.010532776;-0.021671413;-0.038815092;0.025727469;-0.031213222;0.030757947;-0.027906438;-0.016220927;0.031344406;
0.023886817;-0.020322837;0.021226348;-0.036138531;-0.021086844;0.0074643902;-0.01198095;0.016498635;-0.0094844559;0.0027759706;
-0.0063945535;-0.0010411465;0.037245765;0.013291417;-0.011873629;0.037919149;-0.017755874;-0.0383102;-0.033632386;0.011104516;
0.0040561436;-0.020918889;-0.0042706616;0.0084039923;0.035250202;-0.026722189;-0.0096938033;0.018653454;0.024071159;0.001609187;
0.017015066;0.00062770763;-0.021230852;0.016207932;0.038631767;-0.02190798;0.029671267;0.010971447;0.021720637;-0.005661367;
0.020259617;-0.0072306255;0.030924404;0.0059716394;0.036688168;-0.037701745;-0.011874211;-0.014291907;0.00064567814;-0.0053841858;
-0.02783121;0.029544096;0.012173925;0.0020598669;0.014122888;0.02415129;0.039448489;-0.032710031;-0.0069013024;0.028676344;
0.0043014321;-0.0074536572;-0.022863211;-0.0040370347;-0.039997749;0.015088673;-0.0087997895;-0.034620002;0.0027177092;-0.0024975627;
-0.038452968;0.011568918;0.016293209;-0.035794616;0.029432945;-0.037408959;-0.014763078;0.0072925286;-0.0070240092;-0.036903065;
-0.038846739;0.026720935;0.027633218;0.014661013;0.023488514;0.031657696;-0.038293168;-7.6725519e-05;0.032577176;-0.011415215;
0.019093381;0.036393702;0.033291046;0.032828704;0.024668096;0.039819099;0.021155329;-0.02968186;0.013273442;-0.029548604;
0.0132094;-0.019116497;-0.0051250234;-0.026410587;0.020038471;-0.0049587199;0.039249826;-0.0083434805;0.031934697;0.037564922;
-0.029143456;-0.020234987;0.0027587237;0.025075309;-0.029231533;-0.030684849;-0.036494218;-0.029185358;-0.0014839685;-0.017448708;
-0.026919935;-0.030793058;0.039172735;0.030028744;-0.0048632836;-0.023325907;0.00021520902;0.023799546;0.01398923;0.010351901;
0.0026940119;0.017055223;0.015396884;-0.0082602026;-0.024212755;-0.0072153909;-0.038788941;-0.028248738;-0.029723922;-0.0028421006;
-0.0042759157;0.019465085;-0.024748823;-0.036576487;-0.03097214;-0.037856389;-0.026073772;0.0015943516;-0.0051568719;-0.037684791;
-0.03858291;0.0016296655;0.016590673;-0.00072311767;0.034875359;-0.029155806;-0.019745871;-0.0014911462;-0.038453326;-0.0079821376;
-0.015714556;0.037984736;-0.027163789;0.031007044;-0.014598356;0.015719807;0.013714384;-0.0318584;-0.00048297606;-0.038099766;
-0.013119908;0.03198383;-0.02722422;-0.016696865;-0.021756181;0.0098330816;-0.025743835;-0.0090812873;0.025255922;-0.027613342;
0.023783157;0.016034914;0.019552929;-0.038501009;-0.033714041;-0.02759007;-0.002256182;-0.035430126;0.016402503;-0.016098354;
-0.016608255;-0.023843696;-0.030873191;-0.038625579;-0.023524208;0.039206907;0.024445174;0.029951237;-0.0061662914;0.03444393;
0.0091206301;-0.02088202;0.02821249;0.0017364298;-0.014516192;-0.035281587;0.025637921;-0.0020520149;-0.014007895;-0.021394288;
0.0013135852;0.013488349;0.0074906149;-0.025903087;-0.01545928;0.017319355;-0.01512421;0.0043598237;-0.023696395;0.030532617;
0.0010697886;0.037933871;-0.0069894171;0.0077111451;0.0196424;-0.032532994;0.032423947;0.033087708;-0.014727329;0.038657479;
-0.039991885;-0.034119692;0.014258154;0.039704632;0.0014008454;0.014744742;0.015982423;-0.01863749;-0.031312548;-0.02534597;
-0.031660393;-0.014370908;0.00088695396;0.01338774;0.0077252882;0.030778499;-0.039753906;-0.027079659;0.017907148;-0.030772777;
-0.01640098;-0.015710209;-0.0037343274;0.0078751501;0.0068846415;-0.0092847468;-0.0018394443;0.024656428;0.026046554;-0.011211658;
-0.012717118;-0.010810396;0.019230055;0.023777651;0.022335215;-0.013005628;0.0087444475;-0.028331621;-0.005248521;-0.026926445;
-0.00098126242;-0.0073991534;-0.0065862737;0.020974584;-0.024680296;-0.03719905;-0.020087723;-0.036141858;-0.025838349;-0.003210827;
0.020957679;-0.010181695;-0.039473396;0.012035875;0.0041232631;0.019881405;-0.035973497;-0.039051399;-0.0066156145;-0.022142934;
0.010857214;-0.006470928;0.031308506;0.023806348;0.022666339;0.024681883;-0.020603653;0.027529707;-0.033449426;0.01638845;
0.038671393;0.022537051;-0.0065087695;0.026389202;-0.0022248756;-0.0074442565;-0.0083330097;0.038486607;0.0084898295;-0.0077936309;
-0.038930517;-0.020366659;0.027197866;0.038015254;0.0071543008;0.014284601;0.010957197;0.024184505;-0.024111222;-0.038545888;
-0.00020631029;0.012812666;-0.0092600072;-0.022693513;-0.00099776953;-0.038234573;-0.020746902;-0.028650893;-0.025736192;0.032716937;
0.022431031;0.018552516;0.030391956;0.020597212;-0.033063319;0.013467973;0.013606375;-0.027636508;-0.039608009;-0.00071543758;
0.016879041;-0.015785638;0.020218836;-0.028704414;-0.012302354;0.031927723;0.0039826035;-0.024175487;0.011788451;-0.0087990901;
-0.020215478;0.020656046;0.022199815;-0.014869737;-0.025366614;-0.01730082;0.020871364;0.030644441;0.0064355088;0.031537712;
0.03936404;0.0045684827;-0.014911409;-0.0048270156;0.022509104;-0.00077490206;0.00072848337;0.034130327;0.015029696;-0.0049287258;
0.032784168;0.031636771;0.030527694;0.028283997;0.025453277;0.036096137;0.015611419;0.035830632;-0.02624175;-0.023407867;
-0.02258103;0.010685829;0.008874814;-0.027751159;0.02726209;0.02184259;-0.023408679;0.039665375;0.017336503;0.027109316;
0.021953566;0.032169174;-0.0071705626;0.038979519;0.00075750065;-0.0069052102;-0.033832207;0.034494139;0.0049403985;0.03043461;
0.028435212;0.026257949;-0.021579849;0.025114389;-0.015980244;0.028453695;0.021780638;-0.013716055;-0.010393518;0.0022427898;
-0.0066405926;0.0079957871;0.033756521;0.0043680263;-0.018201642;0.020691341;0.027786788;-0.014530474;0.025145864;0.018070774;
-0.02918057;0.010171519;-0.037629157;0.029831806;0.018575938;-0.039688181;-0.028812017;-0.0058360309;-0.032980297;0.017047811;
0.03775391;-0.0096588153;0.024503149;-0.026402393;-0.033960182;0.012127903;-0.036704797;0.03181164;-0.0055001993;0.010682119;
0.0097281234;0.024533518;-0.017328629;-0.02191478;-0.013779779;-0.026446452;0.022892259;-0.015774596;-0.0018566927;-0.023305418;
0.010398787;0.0091362335;0.0061870888;0.021204207;0.031767;0.0042942315;-0.020910351;-0.013747677;0.007556315;0.024268741;
-0.0070770099;-0.023439471;0.037460104;0.03456245;0.018592376;0.0076576718;0.0050049098;-0.0034732516;-0.026354883;-0.028386088;
0.013227174;0.029313112;0.010067582;0.02524958;0.034642063;0.0012573039;-0.015333617;-0.021120524;0.0021536879;-0.034706555;
-0.037986372;0.00089621014;0.036481917;0.0028438161;-0.030838599;-0.036310334;-0.019120499;-0.019106902;-0.012051492;0.025101587;
-0.033195972;-0.031596269;0.035267033;-0.0020080577;-0.0010052128;-0.01412816;0.035620835;-0.014513476;0.0034405401;0.0010532379;
0.00254691;-0.027596591;-0.0012352919;0.0048534563;0.022915559;0.0082624825;0.028989121;0.026132176;0.0029927767;0.019257968;
0.019119268;-0.026308807;0.028749341;-0.029038662;0.020307446;-0.031164434;0.014648393;-0.02522498;0.020128896;-0.024961799;
-0.01295938;0.032415912;-0.025809413;0.039868023;-0.0012138453;0.017891807;-0.030644778;0.036670201;-0.0071916743;0.027966648;
-0.0063121049;-0.033011645;0.018108411;-0.016227772;-0.039193098;0.023680096;-0.0080010258;0.028633052;-0.0056676865;-0.0012019646;
0.0091766883;-0.038174406;-0.015220293;0.0071146507;-0.03477307;0.03840477;0.023008795;0.033529226;-0.013752154;-0.01885381;
-0.012828745;-0.01628875;0.038310483;-0.00078353577;0.015190821;0.021058394;0.00014409043;0.029537551;-0.0069309468;-0.011140851;
0.034683499;0.010073023;0.01998323;-0.0051643099;-0.0067542712;0.011783892;0.012345149;0.038545672;-0.033309646;0.010712333;
-0.0053118966;-0.00084732962;0.01305216;-0.039095677;0.026623558;0.033002075;0.031309258;0.030676855;0.010478755;-0.03916619;
-0.025383644;-0.021635737;0.015136511;-0.011854675;-0.03202327;0.033952381;0.037934378;0.024910975;-0.014503416;0.0057391073;
0.024006838;0.0084691131;0.037722141;0.024614861;0.021763122;-0.01016447;0.039716665;-0.038977366;0.014410293;-0.036357962;
-0.027210215;-0.015710538;-0.029198447;0.036188412;-0.013377045;-0.012297763;0.016844999;0.011275638;0.038112048;0.030860834;
-0.024893634;0.021063905;-0.034994423;0.0096599748;0.035046868;0.031065235;0.024270816;0.0242997;0.026616614;0.036611695;
0.033610933;0.018814512;0.017729618;0.021196965;0.018621327;0.019846568;-0.013700697;0.0085875234;-0.01965744;-0.034307227;
0.018027989;0.0019222597;-0.034091704;-0.029249223;0.0083322776;-0.020877762;0.0097078905;0.025506642;0.036353346;-0.030414123;
0.0018344629;-0.012967573;0.0062569496;-0.0038332359;0.027913462;-0.011078825;0.030662652;0.032526433;0.015060235;0.025445431;
-0.012370208;0.027125336;0.01608872;-0.0079825893;-0.020715605;-0.015536437;0.0012068026;0.018969238;0.023513958;-0.02750165;
0.029929113;-0.0044498425;-0.0040722871;0.010270354;-0.026479172;0.0080685206;-0.023682706;0.022488598;0.039738093;0.037760835;
0.011259177;-0.029683048;-0.0093158744;0.020193527;-0.011922053;-0.032096494;-0.017187634;0.0039038509;-0.026034288;-0.022463419;
0.0018831755;0.012179822;0.027578663;0.023585564;-0.014712838;-0.038543772;0.019890254;0.011076455;0.018683909;-0.029522898;
-0.024246454;-0.0041748304;0.032027405;0.0092519363;0.0083044656;0.025889631;0.024555696;0.0196443;0.03040188;0.011588313;
0.0057396372;0.0057746791;0.013613802;-0.023426969;0.036911298;-0.010191455;-0.024709366;-0.034493405;0.034143981;0.0026771002;
-0.029452739;0.0075763199;0.026485924;-0.032534476;-0.031261545;0.029533165;0.030462366;-0.026606053;0.039354336;0.033167817;
-0.02662394;0.0011295592;0.028302466;0.015363991;-0.003711473;0.037058555;0.011329432;-0.0049244179;0.0092404019;0.0041693863;
0.0018897943;0.01440786;-0.013064654;-0.039507437;-0.027365051;0.034156062;-0.035545055;0.015190799;0.011276343;0.039244995;
-0.003721551;-0.029786916;-0.0023355507;0.012309422;0.033404831;-0.039796647;-0.022152025;0.030315584;-0.020022575;-0.039305411;
-0.030120386;-0.017870683;0.034610797;-0.016359786;0.0065098391;0.027535558;0.039438289;-0.035706542;-0.039213821;-0.039677367;
0.03149071;0.035441823;-0.028496845;-0.03465182;-0.021991812;-0.036354922;0.028979015;0.0038013519;-0.026043609;0.023200411;
-0.039189983;-0.013639607;0.032494541;0.020005254;0.02321277;0.014757661;-0.013339344;0.00081846223;-0.0041496148;-0.028139655;
-0.018847903;0.024967758;-0.022591578;0.011934355;0.030454278;0.013770724;0.026392212;0.034509066;-0.027871316;0.025274269;
-0.039837603;0.020521721;-0.014575587;-0.026617263;-0.038831979;-0.030180044;-0.014964294;0.031391524;-0.0019011293;0.010960743;
0.0053225732;0.011319635;0.020410746;0.0010775334;-0.032509375;-0.03824722;-0.00083861913;-0.011609917;0.013240276;-0.018636346;
-0.011843625;-0.0066639986;0.028456045;-0.01981036;-0.026186943;-0.020225149;-0.023689762;-0.026084203;0.0024212371;0.031083051;
0.0031268341;-0.019256568;-0.024528829;-0.0021139809;0.011955832;0.010850959;0.0036354931;-0.03583191;0.021298457;0.02208668;
0.025693474;-7.1592891e-05;0.0014913207;-0.023903672;0.03574457;-0.033435572;0.0088754045;-0.015186411;-0.032131463;-0.0072184899;
-0.018576197;0.0081332;-0.012012437;-0.0032411769;0.019524574;-0.0067046927;0.00068388053;0.013474152;0.0039230059;-0.0042488743;
0.02177145;0.019946899;0.0031565444;-0.014018437;-0.0074150283;-0.0063324743;-0.037768099;0.013872919;0.02141002;0.027838608;
-0.014343243;-0.027786875;-0.00042645686;-0.018799318;-0.012210103;-0.032927673;-0.037410155;0.012824901;-0.0062986659;0.02970966;
0.0003738596;-0.02971188;-0.013034208;-0.036472306;-0.038025331;0.016886216;0.015809435;0.02162208;-0.0036640975;0.032764722;
-0.019469656;0.023996245;-0.035393286;-0.011270402;-0.020141257;-0.036806926;0.02777916;0.011014979;-0.032727189;-0.034534942;
-0.021306416;-0.012975659;0.026199823;-0.010793275;0.024480227;-0.012117039;0.037608869;0.0085786264;-0.0068660979;-0.0010789169;
-0.0095672403;-0.011283731;-0.019479908;0.013142951;0.0058230194;-0.036381006;-0.03736956;0.039219353;0.019449662;0.039092138;
0.0041110585;0.024141561;0.036399398;-0.014383325;0.0096230479;-0.017365241;0.011585002;-0.0070084413;-0.039060228;0.024713615;
0.0014749034;0.0029186481;0.010833119;0.001754596;0.014079914;-0.021229031;0.0026703235;-0.035803512;0.003754545;0.019434882;
0.035072353;-0.0013371537;-0.019419424;-0.010015002;-0.029725494;-0.025445685;-0.035319395;-0.012465791;-0.037322987;-0.027944703;
-0.00035109397;0.021428175;0.0017031393;0.02061072;0.035427444;-0.023768786;0.018609328;-0.0056809848;0.0056181885;-0.022318937;
-0.034148119;-0.0058794329;0.039998189;-0.0067039905;-0.010716135;0.0085619465;0.00090187666;-0.019947892;0.026668329;0.024282349;
-0.013915618;-0.039845169;-0.020482952;0.0074068638;0.0005358255;0.037760362;0.037823185;-0.028118966;-0.018439457;0.017204821;
0.00061061175;-0.010439608;0.036932759;0.01350992;0.0016646194;-0.0091077248;0.016402045;-0.015270937;0.015962632;0.018029209;
-0.020835463;-0.032671608;-0.018865699;-0.011414304;-0.032421071;0.0025303711;0.03480348;0.031799436;0.0050764321;0.0021292535;
0.0025000724;0.037712365;0.023492845;0.01689777;0.010840403;0.030649832;0.017881714;0.0063934238;0.032909237;0.0090804389;
0.027346801;0.026268506;-0.00052437512;0.036100905;-0.02493087;0.0013788566;-0.00083384581;-0.030171119;0.00063971366;-0.010464706;
-0.016579257;0.010960595;0.036053468;0.03959788;-0.030745575;0.014996333;0.010656469;-0.032253224;0.030189997;0.025355263;
0.026216628;0.018020865;0.012583305;0.016947607;-0.038419701;0.031912565;0.016758468;-0.00066200178;0.035651803;0.020023135;
-0.016073067;0.016360071;-0.030994995;-0.038464345;0.01425033;0.02945349;0.0024236089;0.024801029;0.039001409;-0.0098056672;
-0.019365553;-0.038571674;-0.0086161625;0.025944168;-0.019819183;0.010534812;0.031886209;0.030612355;0.0044063353;-0.037026983;
0.012265001;-0.0074969907;0.0043458147;0.036201883;0.0054558427;-0.021811532;-0.0015554407;0.0063599222;0.0127852;-0.018611459;
0.021869691;0.035977736;-0.030124543;-0.019207267;0.0062158541;0.035963722;0.018479601;-0.0052539534;0.026657047;0.0072149169;
-0.006631841;0.028692324;-0.016643684;0.014808647;0.032699052;0.032554947;-0.027385427;0.0049571022;0.01359956;0.039051212;
0.032858923;0.010065116;-0.0010771281;-0.038578037;-0.025827181;0.016085826;0.034835063;0.01068704;0.0026101156;-0.022576375;
-0.0027157024;-0.03101193;0.0282313;-0.017071065;-0.012958993;0.005455459;-0.0021993842;-0.039766774;0.016724424;0.00093794108;
0.0025476406;-0.02112446;0.014559876;-0.0072162533;0.039587691;0.026459033;0.029238971;-0.015613384;-0.0029385928;-0.015184757;
-0.036037248;0.019406399;-0.021601904;0.038714953;-0.019875424;0.039349586;-0.016521415;0.026089761;-0.032189291;0.0026505147;
0.00037803914;-0.029185111;-0.029186819;-0.017696034;-0.005837088;0.0033145;-0.026652632;-0.026736386;-0.0038389803;-0.0030257704;
-0.038045678;-0.008983355;-0.038600225;0.0046981717;-0.01943819;-0.017101076;-0.038513534;-0.010647361;-0.028895393;0.029222354;
0.026765451;0.0025403299;-0.037115727;-0.025988866;-0.013680191;0.032664888;0.0050293221;0.014392761;-0.015442451;0.0021299764;
-0.025968429;-0.013535232;-0.0099821975;0.011626635;0.037362654;0.012575897;0.036477085;-0.012053492;-0.0045025474;0.026480963;
-0.014380043;-0.016196093;-0.028406346;0.010276794;0.0073453183;0.029221822;-0.034479283;0.032513794;-0.012812452;-0.036155015;
-0.013996814;-0.025057685;0.015433045;-0.01118751;0.017193226;-0.0045993468;0.01403798;0.0087165898;0.037348751;-0.0040873797;
-0.01915147;-0.013626927;0.033600364;0.0096229557;0.028020853;-0.037520215;-0.032018065;0.002248235;-0.031488791;-0.030812254;
-0.03438054;0.023520401;0.014982472;-0.015167412;-0.0061538196;0.012182968;-0.027925856;0.011666622;0.031036606;0.017271932;
-0.018510446;-0.0033279906;-0.033649888;0.024972258;0.03758147;-0.029144518;-0.031330142;-0.034973983;0.021240644;-0.00094792398;
-0.006497914;-0.010858746;0.019728728;-0.037254684;0.0011016818;-0.029633142;0.039563008;0.00082866306;0.013915511;0.031369418;
-0.03188226;0.037513427;0.03642945;0.037253231;-0.0030989524;-0.0072308583;0.034611057;0.0025159484;-0.0046881647;-0.0089448588;
0.011709706;-0.029742032;0.02623925;-0.0043221475;-0.026470218;0.029852407;0.0098269628;-0.0138042;0.002200475;0.029618114;
-0.015700517;-0.016895745;-0.037558068;0.019390007;-0.036498185;-0.026617508;-0.022524567;0.027100017;-0.03893362;-0.017963724;
0.02182686;0.028722674;-0.0082877427;0.024822921;-0.035074763;-0.03306241;-0.0022049597;0.036259562;-0.027335491;-0.003624178;
0.036096148;-0.036868889;-0.034080904;0.028597746;0.026553452;0.021374641;-0.015891222;-0.012826953;-0.0048133619;-0.033859748;
-0.0069706724;-0.0066584125;-0.024416059;0.039375007;0.017186413;0.013779318;0.020486632;-0.017984549;-0.025929404;-0.001180946;
0.025751684;-0.002329495;0.026260661;0.022931702;-0.036305092;-0.032403909;-0.015479819;0.018423723;0.02521481;0.030587941;
-0.013267472;0.031664506;-0.031782404;0.0086630788;-0.021588307;0.033065792;-0.0054503446;-0.022490285;-0.0099648619;0.0036517587;
0.0028822061;-0.038120043;0.013309457;-0.0073641199;-0.010002335;0.020811319;0.018695135;0.028956234;-0.026976923;0.030501168;
-0.026350018;-0.013325233;0.010879192;0.03194835;0.0023275404;-0.018432679;0.038203128;0.0074731996;0.0052619479;0.03855167;
0.013287663;0.0034844412;0.017523767;-0.0037930808;0.011652764;0.0048851823;-0.0097411135;0.025051918;-0.024794515;-0.016068378;
-0.006963972;-0.0058867363;0.023852138;0.0072717159;-0.031241477;-0.031235166;0.010897632;-0.026795285;-0.018549059;0.033346534;
0.029288154;0.028921466;0.0021716782;-0.02909619;-0.025639016;-0.0079987124;-0.022957521;0.00045284;-0.0069987802;0.00028865479;
-0.0099317618;-0.036400005;0.0049746968;-0.025785619;-0.02207597;0.0041276123;-0.020618072;0.0070627611;0.017040242;0.036645185;
-0.018292636;0.038854245;0.024518015;-0.022568874;-0.015007822;0.030566841;0.01133877;-0.02048238;0.00090825191;0.021900678;
-0.025356119;-0.00058901816;-0.020744735;0.032603156;-0.03082213;-0.029689703;-0.024924522;0.038879957;-0.0070982468;0.017476855;
0.02191538;0.012962997;0.033977486;0.017963791;0.0075161164;-0.027199063;0.030854754;-0.039496869;0.035825334;0.015757397;
-0.012917432;-0.014547404;-0.0029171074;-0.029597379;0.0094559919;0.029483972;-0.014837546;0.0017737277;0.01878747;0.035076387;
0.025021657;-0.03069816;-0.026634738;0.02390345;0.023855342;-0.02781946;-0.037681095;2.3531207e-05;0.0044875904;-0.020024078;
0.016540058;0.011385318;0.0060832822;0.034549106;0.021604955;0.0055220472;-0.016200095;0.0023845558;-0.0012733005;-0.0020938269;
0.019023642;-0.034187734;-0.010403384;0.027986951;-0.0015972853;-0.022148427;0.00098709809;0.01898214;0.019374132;0.008109997;
-0.031030579;-0.032039821;0.02824817;0.013905934;0.0288697;-0.026233049;0.0036961078;0.038792241;0.0011068392;-0.030070122;
0.0037264803;0.018443022;0.017789416;0.014421104;0.023752095;-0.014810868;-0.0085797692;-0.028370341;-0.00062756235;-0.024617637;
-0.0054291813;-0.0018988461;0.021474622;0.0053849649;-0.034955289;0.01316283;0.0074654045;0.00416996;0.016346756;0.004084528;
0.0089617576;0.0092637911;-0.039604016;0.017879903;0.034780398;-0.030988524;-0.033019412;-0.02580696;-0.031565189;0.017170388;
0.00065223279;0.029257927;-0.028834134;-0.0311273;-0.0067664771;0.023301408;-0.038815513;-0.010925836;0.031341299;-0.012657069;
0.017135352;0.01081576;0.023046598;-0.0017670995;0.0031428947;-0.025446041;0.014219201;0.0064895526;0.027325347;0.0089099007;
0.03374869;-0.0042374707;0.039767869;0.033098754;0.029603802;0.014618651;0.0098729311;-0.034932762;0.028621562;0.0018323398;
-0.006868701;0.024955358;-0.0026388592;0.014699988;-0.028755244;0.031822491;0.022710036;-0.038230699;-0.029874446;0.030752134;
0.017012764;0.019685483;0.025115993;-0.00032750599;-0.019238783;-0.013342401;0.020780355;0.032047156;0.027005622;0.00016011085;
0.021209463;-0.026655849;-0.038225334;0.008458823;-0.026616771;-0.019263789;0.032858744;-0.010612576;0.001322376;0.0058244145;
0.012383984;0.0002928141;-0.0048986333;-0.0048393845;-0.039918922;-0.032731675;0.015042742;-0.034951501;0.03184168;-0.00049100321;
0.0046873782;-0.027536454;0.0018708821;0.0073574637;-0.021614272;-0.0060365605;0.009743195;-0.034788858;-0.026705153;-0.036494762;
0.027359447;-0.0085523855;0.022558611;-0.00438629;-0.028647244;-0.033283949;0.020013612;0.031006705;0.037727658;-0.018692683;
-0.032419849;-0.0049105319;-0.026457304;-0.019255528;0.00078119856;0.029356036;-0.023088448;-0.015436074;-0.0049759084;0.017641356;
0.011035254;-0.03374061;0.030231619;-0.015847938;0.010209016;0.017019939;0.028612889;-0.036997017;-0.0027629787;0.019989841;
-0.0059251413;0.0032969965;0.036143705;0.030543664;0.014729946;-0.037505589;-0.031449232;-0.0083838459;0.01358857;-0.033865664;
-0.013921498;-0.015026841;0.029150443;0.00093863317;-0.033326261;-0.037398428;-0.038681526;0.005061185;0.026219605;-0.029485269;
0.036402721;-0.00061086332;-0.033078611;-0.030758994;-0.0078498935;-0.012897328;0.011699992;0.032846827;0.010954911;-0.014230832;
0.02125874;0.028308585;-0.012449886;0.0032512646;-0.013447045;0.012046096;0.018479794;0.030008124;-0.021997044;0.0064924997;
-0.013126289;-0.037087299;-0.015188413;-0.036006752;0.0094006034;0.0087177148;0.0017843728;-0.030646063;0.0054984433;-0.0084225442;
0.031423669;-0.0038454179;0.018706741;0.029491864;0.038324852;-0.035948083;0.0042351251;-0.02006384;-0.025364414;0.012489838;
0.0075768596;0.0061136037;0.0031940935;0.013219719;-0.010393786;0.030340523;-0.030819032;-0.022464924;-0.0022840141;-0.0047689378;
-0.018767297;0.0097828582;-0.016123889;0.0089726923;0.014914178;-0.024660528;0.038518492;0.035410631;-0.033990342;0.021725489;
-0.028114401;-0.00085531862;-0.016435284;0.034444451;0.027403051;0.024596393;0.036268417;0.022606662;-0.025415013;0.01358583;
0.023268305;0.022562107;0.037891928;0.028138086;0.0016755417;-0.015470201;0.02160625;-0.012101863;-0.0095978277;0.03946615;
-0.029931754;0.0359217;-0.030034965;-0.012700769;-0.01920563;0.01105551;-0.0080129113;0.021038933;0.021786617;0.0032663622;
-0.00071689388;-0.012892628;-0.016587211;-0.026307588;0.026448069;0.011219253;-0.01058282;-0.034457847;0.023940638;-0.010652678;
0.015493481;-0.010514848;-0.015472827;-0.031678218;0.0085819708;0.005737938;-0.0047736894;-0.0019436155;-0.0027316783;0.019898694;
-0.02273632;0.0018323937;0.037921775;-0.039745275;-0.035219338;-0.0016662549;-0.039296195;0.021098625;0.023058752;-0.019618513;
0.013491906;-0.021747982;0.032315087;-0.0029694485;0.0038438651;0.021738429;-0.032255165;0.032430597;-0.021297572;0.017833795;
-0.017273061;0.011445248;0.017881306;-0.0010259454;-0.037265975;0.0084524378;0.031662725;0.011572927;0.019028859;0.018194869;
0.015563286;-0.02073098;-0.027183566;-0.0012003812;-0.01291706;0.007588435;-0.016761674;-0.031833187;-0.0286923;-0.036246013;
-0.037333172;-0.028959533;0.019480646;0.022239912;0.037727647;0.020200236;0.039213669;0.025144795;0.012912197;-0.011515831;
-0.01695122;-0.034660093;0.023293234;-0.035131086;0.027814323;0.019529607;0.02388495;-0.018462179;0.0015948104;-0.015600469;
0.01594671;0.0080132764;-0.0083577018;-0.036041204;0.015197625;0.029005071;-0.0011532768;0.0011480914;-0.022952054;0.0051564705;
0.022780625;0.032874048;-0.030266905;0.021629214;-0.024113182;0.0094212759;-0.018561693;0.0021407357;0.02723949;0.011454418;
0.015427263;0.022814007;-0.019620093;-0.036703676;0.016376799;0.0097420327;0.02629775;0.023824152;0.026326954;-0.039994504;
0.02123636;-0.0074682883;0.029398287;0.015996559;-0.025713267;-0.035241529;-0.01239053;-0.0034433943;-0.03796738;-0.0074114809;
-0.022640914;-0.0055966284;0.00052199949;0.034374595;-0.024383994;0.038760051;-0.014347679;-0.031286433;-0.022776671;-0.011728907;
0.014563602;0.03415218;-0.010150366;-0.035672277;-0.032194417;0.0021865615;0.027189432;-0.00039632621;-0.015530594;0.0008813098;
-0.01955889;0.010426459;0.019837672;0.02421231;-0.025815656;-0.028194074;0.019199181;0.029188924;-0.0078253048;-0.0082244137;
-0.037174199;0.027906429;0.025689393;-0.0059136967;0.0088898446;-0.034122255;0.012765369;-0.010029069;0.029941875;0.031382494;
0.019683329;0.019267874;-0.02501478;-0.0052742502;0.0032165735;-0.02660322;0.00061175303;0.01721975;-0.010657385;-0.026370553;
-0.038188573;0.002079501;0.012404931;-0.022379983;-0.022793157;0.0045501925;-0.038074691;-0.013763834;0.015301487;-0.012138207;
0.01021867;0.017755773;0.0029513894;0.037568748;-0.015898341;0.036781065;-0.037107907;-0.013780825;-0.0063886298;0.0066112247;
0.013517266;0.020407919;0.034915719;-0.034446254;-0.00087535795;-0.0026840428;0.01933332;-0.036333356;-0.021925813;0.030161625;
-0.014176332;-0.024328711;0.032525532;-0.014012964;0.0068879463;0.031297006;-0.036377028;-0.029270142;-0.00096315524;-0.012251842;
0.033216882;0.026829284;0.010644368;0.020301012;0.030367063;0.012609394;-0.0052926219;0.039124668;-0.027441528;0.01110675;
0.00064259302;-0.014156466;-0.00075632898;-0.0037731803;0.0070530497;0.0088583361;-0.012554344;0.0067236694;0.004099254;0.0027587062;
-0.00416773;-0.012318858;0.0014426878;-0.033020921;-0.025207059;0.0014093132;0.031578995;-0.0076091583;-0.025894776;-0.028205348;
0.035211518;0.024581159;0.034532983;0.01065903;0.030091887;-0.013640909;0.02805005;0.0096756397;-0.013789034;0.015248456;
0.014235341;0.037884485;0.021031776;0.03993151;0.010952182;-0.027821926;0.033844829;-0.036447473;-0.0090232091;0.029946031;
0.0028840192;-0.0074731684;0.013101372;0.0012753546;0.031802386;0.033091336;0.020778941;0.0310486;-0.029510228;-0.03403626;
-0.022711542;-0.031034911;0.022045502;0.017236931;-0.019912003;0.032426272;-0.023626952;0.033204492;-0.003231731;0.03288734;
-0.0017388777;-0.0043234834;0.0031222275;0.028424986;-0.033486068;0.036691248;0.015746646;-0.0038236671;0.031136768;-0.016570844;
0.0012724049;0.0076104058;0.017881624;-0.017033212;0.035732515;-0.0064383904;0.030686073;-0.015072522;-0.021126049;0.032245129;
0.010799794;0.0087557686;0.028909421;-0.0010616315;0.02977795;0.0084262025;0.0035947827;-0.017725427;0.025615543;-0.023228755;
0.0043166876;-0.028412377;-0.020274723;0.007930994;-0.028472321;-0.0019406306;-0.0097660264;0.02284169;-0.026642947;0.014038312;
0.0053298767;0.0022499021;0.013023922;0.017119033;0.025315098;0.031351171;-0.03577017;-0.017477999;-0.0070846616;0.021298749;
-0.027986737;-0.017782275;-0.015361425;-0.0057604029;-0.021863399;0.013004901;-0.012809945;0.022424104;0.030057784;0.009099368;
-0.01755717;-0.0058473628;0.013828817;0.036532063;0.026990306;-0.003930789;-0.017701326;-0.0041626054;0.027086297;0.028197542;
0.038263395;-0.0022150567;-0.02070581;-0.03880519;0.0091909645;-0.035110392;-0.0089521753;-0.011369726;-0.013730318;-0.0080544883;
0.024384482;-0.029410435;0.02375924;-0.03989175;-0.018377282;0.0013592908;0.034495454;-0.038727131;-0.02061205;-0.026844779;
-0.0070826793;-0.018434014;-0.0092796134;-0.010544269;0.027629144;-0.0099866726;0.019045595;-0.0085614696;-0.0031200682;-0.028231869;
0.024854083;0.037909031;0.028717907;0.020283781;-0.011495862;-0.0073819277;0.019965304;0.011968622;-0.033823136;-0.019186925;
-0.024723699;0.00054765661;-0.02304901;0.012099688;-0.032894969;0.00043877654;0.030306842;-0.03547018;-0.026607975;-0.01218335;
0.010448456;0.0099085206;-0.039102875;-0.02674715;-0.039955497;0.01283731;-0.031577069;-0.0056767999;0.023313519;-0.0065253549;
0.033957124;0.037211485;-0.031499505;0.0046852333;0.032238927;0.0023762349;-0.03394049;-0.022885254;-0.037894532;0.02067323;
-0.018482236;-0.036028069;-0.034365233;-0.00099471828;-0.0081077479;0.0096484823;-0.03660243;-0.015345881;0.0095914602;0.029909106;
0.018104168;0.012008457;0.030474607;-0.0094954679;-0.017486;0.018335037;-0.014219856;-0.023890441;-0.0010117971;0.037412424;
0.026046196;-0.024467239;0.0028290504;0.036111057;0.020095525;-0.018763842;0.0073314975;-0.036675323;0.0076570213;0.039674699;
0.03384557;0.027130319;0.0080380514;-0.036040466;0.03645606;-0.020654831;0.026447609;0.016011918;0.031147605;0.031839106;
-0.036232661;-0.024920112;0.0011525075;-0.038769785;0.017844608;-0.016639885;-0.02245431;-0.020056505;0.00085288734;-0.0045463317;
-0.021689622;0.0057418775;-0.030676672;-0.013160828;-0.0089814533;-0.019640509;0.02478493;0.012585388;-0.039485414;-0.0024133285;
0.0294865;-0.036862925;-0.024981221;-0.029977344;-0.02853588;-0.016070275;0.025814274;0.026275532;-0.030099744;-0.024831086;
-0.016224451;0.033986423;0.0014276664;-0.02916164;0.027679088;-0.013911689;-0.027056625;0.024356099;-0.0047665522;-0.0063979807;
0.0031367894;-0.012566867;-0.011828998;0.037247814;0.02064457;0.039186519;0.005207344;0.030428275;-0.0010790782;-0.026018737;
0.019527653;0.032216169;0.037147291;0.037564814;0.030565888;0.033732481;0.038383495;0.0024626274;0.029064249;-0.014022443;
0.025263796;0.035347406;0.017401688;0.00076464185;0.028468419;0.014860356;-0.0016370539;-0.02455554;-0.018337561;-0.037777193;
0.0096657043;0.024358502;-0.014508975;0.006563867;0.016239718;-0.024254523;-0.026336629;0.028293304;0.011340994;-0.023725145;
-0.016388657;0.0053224266;0.017937435;0.023721486;0.0020961987;-0.016521746;0.02556017;0.01474838;0.010076654;0.0065360242;
-0.012120214;-0.0054427506;-0.035109006;0.032345466;0.029435433;-0.011041862;-0.011986457;0.0018120012;-0.015765842;0.029085888;
0.016110582;0.011651319;-0.03917288;0.017373346;-0.012578888;-0.0012293388;0.00012034483;0.0069662523;0.026864348;-0.0084448224;
0.0038983256;0.032320306;-0.017020157;0.012633314;-0.00076693884;0.038816821;-0.0050198538;0.016836425;0.0037693819;0.0030877362;
-0.014517614;0.0092372252;0.026444977;0.0028921787;0.016112581;-0.033681665;-0.016986327;-0.024202071;0.0059843948;0.0089976583;
-0.017775031;0.027058102;0.0024421348;-0.031283941;-0.0086496715;0.0099152708;-0.017222458;0.039563347;-0.035748858;-0.007341106;
-0.020032285;-0.034921687;0.026203902;0.016952246;0.035509448;-0.018349506;0.005692848;0.00070746633;0.027780531;-0.032571603;
-0.0057992912;-0.018782729;0.020765025;0.026100166;0.033922158;0.0074435836;-0.033168957;0.0088285292;0.0042830678;0.0083945179;
-0.0015029059;0.015657771;-0.021131871;0.008351529;0.0399151;0.017990708;0.019991919;-0.022410227;-0.03362127;0.035139177;
-0.029256536;-0.0012201431;-0.0035226177;-0.015926261;-0.037720136;-0.010402989;0.01187875;-0.037721749;0.0027287859;0.038098354;
-0.01546535;-0.031730942;-0.027162926;-0.034195025;0.031874944;0.011479711;-0.025156338;-0.019817116;-0.032570139;-0.033674713;
-0.022667794;-0.020469885;0.036096361;0.0007184681;0.026332917;0.013175447;0.0038775851;-0.023695543;0.0069837421;0.011380342;
-0.0099978084;0.016945133;-0.028637087;0.0026672664;0.03720383;-0.0080433423;0.0084295804;0.026999675;0.02288634;-0.03481913;
-0.018975705;0.0110728;-0.0045668464;-0.015024889;-0.0098245954;0.015667977;-0.028576262;0.00013675234;0.020335473;0.024721464;
0.0048596519;-0.00820415;-0.019001247;-0.0087078698;0.0017889021;-0.0059929686;-0.015654938;-0.0086666727;0.0010914056;0.015729632;
-0.013486815;-0.032986466;0.028782366;0.028358439;0.018962707;-0.02973129;0.010748167;-0.017687071;0.0219828;-0.018286977;
0.0017013904;-0.0096343802;0.017163247;-0.014629726;0.033681914;-0.027658684;0.026089981;0.015094213;-3.279221e-05;0.0385295;
-0.03900915;-0.02270826;-0.0050362223;-0.0028244744;0.0022304608;0.0056390762;0.012874153;-0.01732317;0.036196716;-0.015032897;
-0.011677212;0.038837481;0.0019448586;-0.010668577;0.0096856831;-0.026385695;0.025226299;0.016859394;0.0124816;-0.032365993;
0.014771519;0.020657303;-0.035750572;0.0032273026;-0.01744863;-0.025859427;0.02212307;-0.019945215;0.024510248;0.014686106;
0.012377515;0.036618259;-0.0058181407;0.0056582186;-0.023190526;0.037890404;-0.011224702;-0.01975219;-0.034458943;-0.011390274;
0.034716796;0.011324594;0.019938793;0.024294164;-0.011721747;0.02137842;-0.0014557041;0.015871599;-0.012039742;-0.016294539;
-0.019156469;0.027567796;0.0074319472;0.022501474;-0.011729798;0.018763661;0.01329998;0.028624585;0.007609142;-0.024009801;
0.025689138;0.0061663897;-0.014761014;0.0078939116;-0.018773103;0.020926047;-0.029990789;0.0059401919;-0.020607116;-0.018675556;
0.013766528;0.026702821;0.029248746;-0.015513124;0.031204537;0.0018020706;-0.037532091;0.017206768;0.036576264;-0.01448883;
-0.01573072;-0.03052715;-0.032467023;0.020984296;-0.026690025;0.016081763;0.019289339;0.028274706;-0.027702704;-0.0054358877;
0.010723931;0.0038044553;-0.033939593;0.014780496;0.019277064;-0.013258411;0.039223202;0.012067404;-0.022626042;0.01553065;
0.025669737;0.0031839767;-0.0040940582;0.021930369;-0.0087801497;0.025357448;-0.0064081866;-0.022992672;-0.03220851;0.015877509;
0.029966446;0.0060788463;0.016466646;0.021897921;0.024147954;0.007400393;0.011297082;0.022242524;-0.031365704;0.014561648;
-0.03191033;-0.022602003;-0.0091213072;0.020710871;0.02576028;0.026821049;-0.0090151131;-0.0043983194;0.0020112444;0.031344198;
0.032307442;-0.0022127063;-0.014858797;-0.0013371612;0.0119052;0.00029189044;0.022125179;0.026736926;0.019201703;-0.029489323;
-0.018607356;-0.0090557616;0.03664371;-0.032178655;0.03645907;0.027836833;-0.0097252363;-0.00092899369;-0.036430657;-0.0052433009;
0.021246644;-0.0080519933;0.029649543;-0.037134837;0.014814256;0.0085657546;0.039087307;0.0049125054;-0.037909131;-0.019535188;
-0.023132;0.029269164;0.0051894165;0.017309545;0.030024998;0.020101853;-0.01449595;-0.033082366;-0.039342362;0.0053684805;
-0.0090542231;-0.012158112;-0.028682254;0.0098016011;0.019160734;-0.017960908;0.01184883;-0.0265423;0.0094050895;-0.0086394399;
0.020369072;0.019262057;0.0037879334;-0.0041749352;0.033654306;-0.019425076;-0.038116384;-0.014126;-0.0054686745;-0.0073685567;
0.010188124;-0.011489828;0.037873358;0.039500084;0.03425198;-0.026132379;0.016338417;-0.032755155;0.026656883;0.013678664;
0.0096611092;0.011691525;-0.02437048;0.0033176017;-0.0009085061;-0.033941388;-0.017559981;0.0035634867;-0.012912928;0.022620171;
0.027037146;0.021715265;-0.00044217031;0.0056858319;0.016112963;-0.0056898645;-0.0098442091;0.037035186;0.00035173979;-0.025662731;
0.024466675;0.00034412651;0.003526784;0.01139145;0.010959149;-0.012177136;0.032469843;-0.025490619;0.0096982364;0.0065066;
0.017366802;0.028765444;-0.019251348;0.010763619;0.027526483;-0.013026829;0.012083742;0.036216259;0.038493346;0.012098662;
-0.0012393169;-0.039324787;0.035775527;0.019614795;0.039556254;-0.0065075848;0.038601726;-0.016689043;-0.010130704;-0.032618046;
-0.0098378789;0.0054274322;-0.0047479388;0.013010674;0.033971284;0.037375081;0.038453709;0.0095395213;0.026002225;-0.014628352;
-0.028664125;0.0073688622;0.017019434;-0.018233597;-0.008649556;-0.017358061;-0.0039016677;0.029353699;-0.018628117;0.016476743;
-0.0078548398;0.0046509434;0.036898699;0.020119974;0.018645143;-0.00035715231;0.027305396;0.0028089266;-0.02822737;0.027065428;
0.0099565247;-0.019414719;0.037048344;0.0042749131;0.016774423;-0.022552475;0.036979735;-0.025483416;0.015506259;-0.0024468007;
-0.017605478;0.032349274;0.012736414;-0.0022655968;0.0071111466;-0.018351864;0.0035931258;-0.020435805;0.026525313;0.027949233;
-0.030855305;0.028940542;-0.023477472;0.018514479;-0.029834908;-0.035704948;-0.031640578;-0.018921789;-0.026078947;-0.017801723;
-0.039856061;0.026059309;0.010872081;-0.00025394515;-0.019415205;0.0005430071;0.023389118;0.032700863;0.0086545218;0.00066834158;
0.037649047;0.034330878;0.01649252;-0.015122399;-0.025227169;0.006924985;0.01586812;-0.0030541613;0.020464897;0.039129037;
-0.028050577;0.01514716;0.035940193;0.016482558;-0.038291771;-0.024517847;-0.027504295;-0.024824122;0.022869045;-0.013203826;
-0.00088637194;0.016011398;-0.028773438;-0.0055613997;-0.00060914684;-0.018323418;-0.026587848;0.034288853;0.0091320137;0.00046017629;
-0.036427893;-0.02479643;-0.0027787825;0.0007226888;0.029652759;0.014696872;-0.026182478;0.0087438691;0.0021450641;-0.028453171;
0.023288192;0.027151829;0.032352466;-0.020353822;0.014923183;-0.029107137;-0.025258483;0.024290778;-0.010494581;-0.030034956;
-0.017309111;-0.016893048;0.020921955;0.030492149;0.031303581;-0.0047427649;-0.03312622;0.028525433;0.029310072;-0.0032574472;
0.025768939;-0.029436931;0.031546693;0.027222283;-0.011026126;0.014311205;0.025914574;0.022764778;-0.0037886004;-0.022432627;
-4.7022026e-05;0.019888485;0.010259639;-0.0024785185;-0.033184532;-0.030814461;0.026987772;-0.014730358;-0.019111114;0.0004142551;
-0.019559784;-0.001408204;0.012353205;0.0049213916;-0.035145432;-0.012374137;0.031224366;-0.013034191;0.011924125;-0.025922313;
-0.026507843;-0.036757607;-0.0058736526;-0.013814209;0.03995249;0.0058096801;0.011654139;-0.026295532;-0.0044197603;-0.0025654938;
0.037883885;0.032850008;-0.00026784145;-0.031113539;0.0052672662;0.012344184;0.013388803;0.0059419591;-0.035881881;-0.029556215;
0.027315052;-0.00050095527;-0.02195408;0.00083777274;0.014304135;0.026626971;-0.013476243;-0.034436226;-0.034333836;0.011235532;
-0.028168058;-0.038242027;0.024612132;0.018286798;-0.016895436;0.016816484;-0.0097145773;0.019952191;0.0019879064;0.014803066;
-0.0078133894;0.028768983;-0.0066008777;0.0068511018;0.013593688;-0.0042566955;0.004846252;0.012100486;0.018635847;0.037561495;
-0.025160654;-0.0046299812;0.01893496;0.017076798;-0.028924579;0.0065656337;-0.011423625;-0.0088751959;0.027082469;0.023439072;
-0.029176179;-0.00055057375;0.026060436;-0.015676938;0.013547424;0.013650937;0.039989553;-0.030759521;-0.032452475;-0.034309868;
0.023006743;0.032832522;3.5591715e-05;-0.003576336;-0.032579307;0.038342722;-0.02335172;0.012151794;-0.005396158;0.039201703;
0.019612564;-0.0056062303;0.023652468;-0.0063049924;-0.012837117;0.035778906;-0.022626992;-0.0051020659;0.017295871;-0.033334058;
0.022435641;0.036223527;0.016623281;-0.018907063;0.028328825;0.025688922;-0.038971983;-0.021566175;0.018603105;0.038546532;
0.01363144;0.010520083;0.018817887;-0.017130164;0.028792351;-0.003658331;0.031520143;0.024650197;0.028488519;-0.025929295;
0.03172889;0.010253211;-0.015308083;0.021043966;0.0063473214;-0.0049704001;0.033322394;-0.021999782;-0.0059207235;-0.035918027;
-0.011743139;-0.034904648;-0.016235044;0.039882302;-0.030779345;0.02891559;-0.031379629;-0.012158629;0.0097293882;-0.006613241;
-0.025267689;-0.030702701;0.025659746;-0.0024773437;-0.028475098;0.0024268089;-0.036887262;0.0017453056;0.014867518;0.0059565175;
-0.039064772;0.012543491;-0.0057102549;-0.039015088;-0.034193374;-0.012377417;0.021342387;-0.032545842;0.014400475;0.039953236;
0.015263353;-0.013907486;-0.022363544;0.0070153344;0.032373678;-0.018318424;-0.031554602;-0.033628892;-0.039140254;0.017199162;
-0.037971117;0.028530667;0.022742348;-0.01443383;-0.03885809;0.0069291098;-0.0010301287;-0.028392281;0.02999205;-0.033621144;
0.037307404;0.021256881;-0.0019833108;0.016216971;-0.03121987;-0.0380022;-0.020261256;0.036697973;-0.016663337;-0.037424549;
0.008551321;-0.034959275;-0.0021924879;0.033739541;0.016535599;0.034894977;-0.034525041;-0.017450713;0.0062112492;-0.012951206;
0.0035057459;-0.0052961376;0.033822987;-0.031745475;0.030132545;0.0017173967;-0.029008158;0.037353218;-0.028887412;0.0079047307;
0.010520338;0.023334047;-0.033396371;-0.011168189;0.0010458917;0.024326488;-0.0065152515;0.034111146;0.019036459;0.019041091;
-0.022468036;-0.01376483;-0.024678806;-0.0099299196;0.013667566;0.029165478;-0.021946305;0.027455173;-0.037019428;-0.0075400374;
0.014252801;-0.02880404;-0.018006194;0.028064169;-0.030447856;-0.023969097;0.0087864883;0.0264703;-0.022095386;-0.012974735;
0.032708839;0.02666845;-0.0026051656;-0.018877424;-0.039955322;0.024205053;-0.0029068473;0.011880029;0.020027846;-0.022578664;
0.00089994649;0.029298838;-0.015328091;-0.022038369;-0.011287123;0.019765984;0.027230574;0.023442993;0.035255902;-0.012241091;
0.039612144;-0.026963888;-0.028405588;-0.0081954002;0.029658142;-0.0050958511;0.031691529;-0.038431805;-0.030630924;-0.036326375;
0.014158426;-0.032093376;-0.028538216;0.018827256;-0.034828093;-0.031423159;-0.030738231;0.022739086;0.0031506123;0.028065871;
0.03938463;0.01262986;0.039572213;0.026632179;-0.018181741;-0.008089616;0.002677402;-0.0095937354;-0.0025852374;0.038586281;
-0.031325139;-0.033112004;0.022933343;0.017273121;0.038550619;-0.018787481;-0.0066968952;-0.023126887;-0.0078841401;-0.018613614;
0.024263484;0.026142221;-0.0031119857;0.024413666;-0.035562128;0.038452148;0.0021908889;-0.015491385;-0.028010307;-0.011359974;
-0.0085413186;0.015642166;0.019702436;-0.028492145;0.020552801;-0.0337772;0.025807777;-0.011362799;0.027601998;0.021829518;
0.037812673;-0.0021129129;0.022282755;0.021013433;-0.021786664;0.012066179;-0.020081334;0.036468424;0.0044947457;-0.016952669;
0.031813249;-0.026740801;-0.0067191888;0.0042779855;0.036151618;-0.0094008241;0.013403716;0.02542806;-0.014111524;0.0030449575;
0.02276675;-0.0065442869;-0.034587331;0.036023274;0.024769437;-0.033473186;0.0042481385;-0.0093371356;0.024267197;-0.0031074982;
-0.010075885;-0.012169357;-0.032831021;0.013834951;-0.00061768771;0.0318559;-0.0049935267;0.0031640779;-0.0076952931;-0.032953005;
0.012599533;0.0250856;0.0032323184;-0.0015602167;-0.039421719;-0.019563384;-0.0097607123;-0.00017547946;-0.014014105;-0.00080125977;
0.0065185474;-0.018927613;0.027976422;0.018410921;-0.03180483;-0.0013402745;-0.0072191777;-0.031303611;0.019778719;0.010349548;
0.017340017;-0.034514993;0.011216678;0.028670775;-0.026068131;0.034232039;0.027985558;-0.00076821778;-0.028313486;0.016337518;
0.0014846487;-0.0075550652;-0.033244185;-0.018756291;0.028042203;0.015516339;0.03352664;-0.004441882;-0.032986406;0.027672542;
-0.039281938;0.038292591;-0.028875569;0.008927688;0.03781084;0.013390191;-0.012494798;-0.030141348;0.0079480279;-0.014503534;
-0.038363721;0.0091402838;0.0050543477;0.025332673;-0.0088256747;-0.0096088033;0.0050147385;-0.00091930485;0.010243431;0.026946979;
0.0182682;-0.029961752;-0.020531585;0.025292519;-0.012014459;0.013643989;-0.016834985;0.0194942;0.022073787;-0.015284728;
-0.011818392;0.020873608;0.032979388;-0.0081597976;-0.02438397;-0.029632557;-0.01817394;0.00094069541;0.032161251;-0.012635395;
0.0017912148;-0.036389343;-0.0019286275;0.036673341;0.0058927485;0.018002912;0.034204531;-0.027978519;0.028348304;0.036202509;
-0.029807305;-0.0097716255;-0.01408903;-0.021500381;0.013026693;-0.023978794;-0.025746524;-0.01838623;-0.032779593;0.031221977;
0.027191192;-0.0030592727;-0.030735316;-0.025925759;-0.0079633966;-0.022419192;0.038221426;-0.014687456;0.017620774;0.015177944;
-0.023635503;-0.026897226;-0.02937003;0.013932824;-0.0067646531;-0.016129827;0.028939622;0.0034542172;-0.03631692;0.021008529;
-0.021284362;-0.0089809094;-0.024890047;-0.013495035;-0.0072430074;-0.0026583055;-0.032716431;0.023203904;-0.02505471;0.0055915462;
-0.021494437;-0.002259189;-0.038994934;0.0078510912;0.027806316;-0.012836508;-0.033733595;-0.027200324;-0.028676553;-0.0057828948;
-0.017140759;0.011973525;0.0075695757;-0.02523529;-0.028146785;0.031396262;-0.0091637298;0.021821141;-0.035170514;0.023805106;
-0.0056338729;-0.018694278;0.022788633;0.0066969446;-0.00924253;0.0052054981;-0.013547832;-0.030388735;-0.021173028;0.0070435614;
-0.0017518402;-0.019552238;0.0048051663;0.0063266442;-0.00052058656;-0.024770908;0.017793421;0.014280609;0.0099989846;-0.033881161;
-0.011004034;-0.025963128;0.03740982;-0.028047258;-0.015220999;0.011962855;0.036903948;0.033243109;0.015108238;0.030134864;
-0.0041479655;-0.0069697425;-0.0081868405;0.027669052;-0.0048609599;0.022863565;-0.027124051;0.03625555;0.025928922;0.01768266;
-0.027805561;-0.013500776;-0.02196168;-0.0075308573;-0.02064475;0.029056627;-0.035368409;0.036845975;0.021329708;0.0021474187;
-0.022589309;-0.038303867;-0.031162532;0.029850576;0.039409515;-0.01968109;-0.0168193;-0.014477141;0.028103618;0.03837648;
-0.0081286961;0.013617336;0.037549376;-0.0083770035;0.020296173;0.022292094;0.027213912;0.025294011;0.029227735;0.011731147;
-0.017741792;0.012495666;-0.0054731374;0.023158444;0.0006256284;0.031321988;-0.0099384729;-0.028018732;0.0008202031;-0.037089948;
-0.022191795;0.031475976;-0.010462532;-0.013747392;0.0083261384;-0.01599255;0.024080848;0.011557655;0.037624229;0.019664682;
0.010392214;-0.025237957;0.018734941;0.023239242;-0.017452676;-0.0070647569;0.027131019;0.026869774;-0.034244277;-0.016332913;
-0.0031891421;-0.02931569;-0.029090025;0.030573275;0.037822053;-0.0057244748;0.034576319;-0.036736172;-0.028262038;-0.019904321;
-0.02764567;0.021755114;-0.033421617;-0.032610845;-0.025890084;0.0090133408;0.0028932567;0.027387545;-0.013864353;-0.02886337;
-0.019037493;-0.015700782;-0.0025459486;-0.0099896388;-0.036139715;-0.012964602;-0.00014704766;-0.031479634;-0.0018241622;-0.015429272;
-0.013813929;0.024023047;0.017688783;-0.017825784;-0.022971127;-0.0034110157;-0.011240631;-0.025777441;-0.03528069;-0.0023735538;
0.011456463;0.011918064;-0.01670124;-0.034774259;-0.024263741;0.0043725083;-0.031155115;-0.0087796701;-0.021007894;0.0045208153;
-0.010607942;-0.021450194;0.022366492;0.024350232;-0.037811331;0.03429966;0.022825813;0.035994723;0.020495636;0.035738811;
-0.0032161479;0.035824854;0.03728278;0.03114574;0.023270398;-0.033283986;0.036719583;-0.003882983;0.018682206;0.017443342;
0.030329084;0.0045142807;0.010912282;0.0051601441;-0.018881014;0.020442842;0.029507136;6.5217697e-05;0.036055323;-0.019854479;
0.031818617;0.0044043805;-0.023564804;0.015469502;0.022614647;-0.034825075;0.016592845;-0.0034150819;0.039199576;-0.0312909;
-0.0022378822;-0.036232315;0.027832348;-0.00060623512;-0.033720504;0.031943217;-0.0029251373;0.010639738;-0.001468803;-0.024119994;
0.037164379;0.018808037;0.0032017622;0.033428535;0.018261308;0.035515774;-0.033990096;-0.013423;-0.0080838911;0.016571859;
0.028663531;-0.022399042;0.031916678;0.031070827;-0.011103479;0.03302357;0.016024891;0.026949132;0.027413879;0.01252007;
-0.037299592;-0.0055613592;-0.035996042;-0.0059620379;0.023213355;0.0066727716;0.023874698;-0.010992837;0.025843751;0.0036787246;
0.0096896617;0.0074996576;0.039084245;-0.037031565;0.012019254;-0.032309789;0.022935882;-0.03963796;-0.009161748;0.0013781571;
0.031034416;0.035581201;0.011615874;-0.025491256;-0.028298786;0.036209147;0.010362026;0.0097628264;0.014809214;0.034870207;
0.029188665;0.030887073;0.036220897;-0.032879032;0.015228692;0.029881019;0.020447658;0.030148624;-0.030572129;0.0011575272;
0.0078404993;0.0080867177;-0.03849015;0.0090079159;-0.026371883;-0.017786359;-0.03133224;0.016830187;0.00065173744;0.020375824;
0.0034875574;-0.031079477;-0.015031053;0.035935074;-0.0052406993;0.0018580102;0.039206423;0.015936289;-0.00069411262;-0.029246448;
0.013991293;0.023176415;-0.03245246;-0.026676644;-0.0016353136;-0.033702109;0.010757418;0.024127962;-0.012918019;-0.012382016;
-0.0051435498;-0.0041980245;-0.0071672485;-0.010128374;-0.035785608;0.032032646;-0.031837262;-0.038166292;0.020857284;0.028284017;
0.028771689;-0.010437028;0.0045950715;0.035467096;-0.019503491;-0.028451174;0.0092804581;0.015484332;-0.0057527041;-0.028909959;
0.019406753;0.038958028;-0.00042668221;-0.038338222;0.010768007;0.011636787;0.038929861;-0.0095600234;-0.037502117;0.039205201;
-0.02145182;0.014557884;0.027845938;0.0015140836;0.0047045145;-0.018398849;-0.013728644;-0.0017324866;0.032114368;0.029866157;
0.0069564134;0.0019776663;0.012330113;-0.030180788;0.025945541;-0.0042645433;0.028784817;0.038511634;0.02758739;-0.012583142;
-0.028943701;-0.036496144;-0.019162588;0.038394451;0.03054166;-0.03877287;-0.038387164;0.03876796;0.0058746552;0.027362825;
0.025572358;0.033163313;0.021476233;0.0045101806;0.0078679454;0.0058580642;-0.0020894434;0.029071376;-0.024001351;-0.013585811;
-0.026559789;-0.023433216;-0.0055610556;0.018292658;-0.010897567;-0.0094824051;0.031448901;0.029642351;-0.028628461;-0.0027871337;
0.025498068;0.009515523;0.022314303;-0.014864717;0.027731754;-0.0065706726;0.001143173;-0.020210862;0.024396626;0.0035226056;
-0.0093964301;-0.033925157;-0.0043555042;-0.010175956;-0.0049665589;-0.025318481;-0.017984614;0.0026475396;-0.021449117;-0.013870904;
-0.0024177567;0.011870942;-0.016632477;-0.010610702;-0.0073687332;-0.032924585;0.032066435;-0.031812981;-0.035902012;-0.039566346;
0.011072909;0.018540855;0.018637031;-0.018646279;-0.033035465;0.03359187;0.034895238;0.038031731;-0.0323404;-0.0035881612;
0.0025373723;-0.017600866;0.030231785;-0.011383253;-0.034033697;-0.002959806;0.0042969645;0.010100179;-0.00044234228;0.010493296;
0.016604779;-0.033596031;0.02093859;0.037587911;-0.0303204;-0.025395453;0.039858695;-0.012054924;0.020527383;0.023319006;
0.019062314;-0.0033573897;-0.011250489;0.013247014;-0.018131766;0.01085203;-0.034806076;0.028534524;-0.036689818;0.0064459587;
0.020700974;-0.022086687;0.016180318;-0.028859165;0.00031442524;0.013018572;-0.0069052088;-0.037984338;-0.0030648538;0.033165485;
-0.0073892572;-0.017177301;-0.0049378737;0.002819526;-0.015737751;0.023354799;0.016519176;0.029345825;-0.01771595;0.020165781;
0.025013058;-0.014353453;0.0001039064;-0.0080049904;0.0067656916;0.0038010899;-0.033542711;-0.030469634;-0.017163275;0.039799452;
0.03935219;-0.010900793;0.0085365502;0.0089497929;0.015789561;-0.016913999;-0.0036120531;0.02501308;-0.012060874;0.0083208596;
-0.016629057;0.010748894;0.015169841;0.0057175071;-0.034392357;-0.033011477;0.030580334;-0.021340836;0.0060422583;-0.032781038;
-0.018401468;0.028265098;-0.036316942;0.038353778;-0.030195842;0.013864729;-0.011095974;-0.010394214;0.033706531;-0.032584868;
0.005612554;-0.037052896;-0.01285463;-0.020370804;-0.03319481;0.024400285;0.0094940672;0.020141553;0.031106036;0.0099993553;
-0.022810346;0.018825479;-0.023754282;-0.010741512;-0.029005321;-0.03029835;0.023305472;-0.020114239;0.031530999;6.5470398e-05;
-0.024949269;-0.0099266451;0.0036289417;0.027770769;-0.013371862;0.011859187;-0.021937963;-0.012979469;0.026034886;0.039770305;
-0.010570606;-0.0048369314;0.012971143;-0.0083601223;0.032725371;-0.0081352387;-0.0060966653;-0.033725008;0.033683047;-0.038689341;
-4.9698559e-05;-0.022577882;-0.013133536;0.036471214;0.0043877149;0.039839562;-0.0085794842;-0.027738549;-0.0063583255;-0.037510667;
-0.030442646;0.035990525;-0.02467127;0.039973985;0.035259761;0.0010116922;-0.028818021;-0.017641127;0.03498942;-0.03370491;
-0.0086275479;-0.027814595;-0.033435002;-0.035931934;-0.036330953;0.020207439;-0.007212196;0.0065678335;-0.0060356706;-0.032548212;
-0.015149199;0.017443845;0.037637714;0.031599138;0.037820645;0.023022557;0.0067181336;-0.0079319039;-0.035413388;-0.022956794;
0.031043438;0.02907151;-0.021152128;-0.021425923;0.024493136;-0.016126435;-0.0021146501;-0.025247112;0.038441539;0.029419681;
-0.015108475;0.0093936706;0.015395549;0.021010645;0.016316313;0.031372882;-0.028796172;0.036165603;-0.014467821;0.030173596;
0.0049304008;-0.0078425063;0.032335337;-0.011370831;-0.0055227559;0.0057850322;0.024091469;-0.01819979;-0.02888551;-0.00083860924;
-0.017242173;-0.0042394707;-0.018848585;0.022949588;-0.01032218;0.036946721;0.017948035;0.024024043;0.017233236;0.021448471;
-0.009786766;-0.037267372;-0.029876541;0.038153611;0.016794754;-0.0066815186;-0.0048819259;-0.00065585447;-0.036530457;-0.014777472;
0.0049894345;-0.034273162;-0.034192897;-0.022241324;0.026188394;-0.0041905837;0.034734234;-0.02699982;-0.03719417;-0.020290753;
-0.0095890835;0.0014352653;0.025222821;0.021940127;0.03642267;0.0077051097;0.016797025;0.021006556;0.028324297;0.0058294018;
0.016159482;-0.015918277;0.032265142;-0.0044307788;0.035639588;-0.020221177;-0.033474006;0.028807528;0.039893169;0.039190724;
-0.018955283;-0.00065722677;0.0063327886;-0.027328795;-0.0071786055;0.031104365;-0.020598635;0.0017578832;0.010150827;0.026461117;
0.013141136;-0.034073733;0.025639413;-0.015158186;-0.0011814099;0.035970308;-0.033105895;0.030912168;0.0085833957;0.030056396;
-0.034137432;-0.0036763072;0.010407511;0.0080691129;-0.022900268;0.038769167;-0.031976361;0.015308618;-0.0069370861;0.030720636;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [6000] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;701;702;703;704;705;706;707;708;709;
710;711;712;713;714;715;716;717;718;719;
720;721;722;723;724;725;726;727;728;729;
730;731;732;733;734;735;736;737;738;739;
740;741;742;743;744;745;746;747;748;749;
750;751;752;753;754;755;756;757;758;759;
760;761;762;763;764;765;766;767;768;769;
770;771;772;773;774;775;776;777;778;779;
780;781;782;783;784;785;786;787;788;789;
790;791;792;793;794;795;796;797;798;799;
800;801;802;803;804;805;806;807;808;809;
810;811;812;813;814;815;816;817;818;819;
820;821;822;823;824;825;826;827;828;829;
830;831;832;833;834;835;836;837;838;839;
840;841;842;843;844;845;846;847;848;849;
850;851;852;853;854;855;856;857;858;859;
860;861;862;863;864;865;866;867;868;869;
870;871;872;873;874;875;876;877;878;879;
880;881;882;883;884;885;886;887;888;889;
890;891;892;893;894;895;896;897;898;899;
900;901;902;903;904;905;906;907;908;909;
910;911;912;913;914;915;916;917;918;919;
920;921;922;923;924;925;926;927;928;929;
930;931;932;933;934;935;936;937;938;939;
940;941;942;943;944;945;946;947;948;949;
950;951;952;953;954;955;956;957;958;959;
960;961;962;963;964;965;966;967;968;969;
970;971;972;973;974;975;976;977;978;979;
980;981;982;983;984;985;986;987;988;989;
990;991;992;993;994;995;996;997;998;999;
1000;1001;1002;1003;1004;1005;1006;1007;1008;1009;
1010;1011;1012;1013;1014;1015;1016;1017;1018;1019;
1020;1021;1022;1023;1024;1025;1026;1027;1028;1029;
1030;1031;1032;1033;1034;1035;1036;1037;1038;1039;
1040;1041;1042;1043;1044;1045;1046;1047;1048;1049;
1050;1051;1052;1053;1054;1055;1056;1057;1058;1059;
1060;1061;1062;1063;1064;1065;1066;1067;1068;1069;
1070;1071;1072;1073;1074;1075;1076;1077;1078;1079;
1080;1081;1082;1083;1084;1085;1086;1087;1088;1089;
1090;1091;1092;1093;1094;1095;1096;1097;1098;1099;
1100;1101;1102;1103;1104;1105;1106;1107;1108;1109;
1110;1111;1112;1113;1114;1115;1116;1117;1118;1119;
1120;1121;1122;1123;1124;1125;1126;1127;1128;1129;
1130;1131;1132;1133;1134;1135;1136;1137;1138;1139;
1140;1141;1142;1143;1144;1145;1146;1147;1148;1149;
1150;1151;1152;1153;1154;1155;1156;1157;1158;1159;
1160;1161;1162;1163;1164;1165;1166;1167;1168;1169;
1170;1171;1172;1173;1174;1175;1176;1177;1178;1179;
1180;1181;1182;1183;1184;1185;1186;1187;1188;1189;
1190;1191;1192;1193;1194;1195;1196;1197;1198;1199;
1200;1201;1202;1203;1204;1205;1206;1207;1208;1209;
1210;1211;1212;1213;1214;1215;1216;1217;1218;1219;
1220;1221;1222;1223;1224;1225;1226;1227;1228;1229;
1230;1231;1232;1233;1234;1235;1236;1237;1238;1239;
1240;1241;1242;1243;1244;1245;1246;1247;1248;1249;
1250;1251;1252;1253;1254;1255;1256;1257;1258;1259;
1260;1261;1262;1263;1264;1265;1266;1267;1268;1269;
1270;1271;1272;1273;1274;1275;1276;1277;1278;1279;
1280;1281;1282;1283;1284;1285;1286;1287;1288;1289;
1290;1291;1292;1293;1294;1295;1296;1297;1298;1299;
1300;1301;1302;1303;1304;1305;1306;1307;1308;1309;
1310;1311;1312;1313;1314;1315;1316;1317;1318;1319;
1320;1321;1322;1323;1324;1325;1326;1327;1328;1329;
1330;1331;1332;1333;1334;1335;1336;1337;1338;1339;
1340;1341;1342;1343;1344;1345;1346;1347;1348;1349;
1350;1351;1352;1353;1354;1355;1356;1357;1358;1359;
1360;1361;1362;1363;1364;1365;1366;1367;1368;1369;
1370;1371;1372;1373;1374;1375;1376;1377;1378;1379;
1380;1381;1382;1383;1384;1385;1386;1387;1388;1389;
1390;1391;1392;1393;1394;1395;1396;1397;1398;1399;
1400;1401;1402;1403;1404;1405;1406;1407;1408;1409;
1410;1411;1412;1413;1414;1415;1416;1417;1418;1419;
1420;1421;1422;1423;1424;1425;1426;1427;1428;1429;
1430;1431;1432;1433;1434;1435;1436;1437;1438;1439;
1440;1441;1442;1443;1444;1445;1446;1447;1448;1449;
1450;1451;1452;1453;1454;1455;1456;1457;1458;1459;
1460;1461;1462;1463;1464;1465;1466;1467;1468;1469;
1470;1471;1472;1473;1474;1475;1476;1477;1478;1479;
1480;1481;1482;1483;1484;1485;1486;1487;1488;1489;
1490;1491;1492;1493;1494;1495;1496;1497;1498;1499;
1500;1501;1502;1503;1504;1505;1506;1507;1508;1509;
1510;1511;1512;1513;1514;1515;1516;1517;1518;1519;
1520;1521;1522;1523;1524;1525;1526;1527;1528;1529;
1530;1531;1532;1533;1534;1535;1536;1537;1538;1539;
1540;1541;1542;1543;1544;1545;1546;1547;1548;1549;
1550;1551;1552;1553;1554;1555;1556;1557;1558;1559;
1560;1561;1562;1563;1564;1565;1566;1567;1568;1569;
1570;1571;1572;1573;1574;1575;1576;1577;1578;1579;
1580;1581;1582;1583;1584;1585;1586;1587;1588;1589;
1590;1591;1592;1593;1594;1595;1596;1597;1598;1599;
1600;1601;1602;1603;1604;1605;1606;1607;1608;1609;
1610;1611;1612;1613;1614;1615;1616;1617;1618;1619;
1620;1621;1622;1623;1624;1625;1626;1627;1628;1629;
1630;1631;1632;1633;1634;1635;1636;1637;1638;1639;
1640;1641;1642;1643;1644;1645;1646;1647;1648;1649;
1650;1651;1652;1653;1654;1655;1656;1657;1658;1659;
1660;1661;1662;1663;1664;1665;1666;1667;1668;1669;
1670;1671;1672;1673;1674;1675;1676;1677;1678;1679;
1680;1681;1682;1683;1684;1685;1686;1687;1688;1689;
1690;1691;1692;1693;1694;1695;1696;1697;1698;1699;
1700;1701;1702;1703;1704;1705;1706;1707;1708;1709;
1710;1711;1712;1713;1714;1715;1716;1717;1718;1719;
1720;1721;1722;1723;1724;1725;1726;1727;1728;1729;
1730;1731;1732;1733;1734;1735;1736;1737;1738;1739;
1740;1741;1742;1743;1744;1745;1746;1747;1748;1749;
1750;1751;1752;1753;1754;1755;1756;1757;1758;1759;
1760;1761;1762;1763;1764;1765;1766;1767;1768;1769;
1770;1771;1772;1773;1774;1775;1776;1777;1778;1779;
1780;1781;1782;1783;1784;1785;1786;1787;1788;1789;
1790;1791;1792;1793;1794;1795;1796;1797;1798;1799;
1800;1801;1802;1803;1804;1805;1806;1807;1808;1809;
1810;1811;1812;1813;1814;1815;1816;1817;1818;1819;
1820;1821;1822;1823;1824;1825;1826;1827;1828;1829;
1830;1831;1832;1833;1834;1835;1836;1837;1838;1839;
1840;1841;1842;1843;1844;1845;1846;1847;1848;1849;
1850;1851;1852;1853;1854;1855;1856;1857;1858;1859;
1860;1861;1862;1863;1864;1865;1866;1867;1868;1869;
1870;1871;1872;1873;1874;1875;1876;1877;1878;1879;
1880;1881;1882;1883;1884;1885;1886;1887;1888;1889;
1890;1891;1892;1893;1894;1895;1896;1897;1898;1899;
1900;1901;1902;1903;1904;1905;1906;1907;1908;1909;
1910;1911;1912;1913;1914;1915;1916;1917;1918;1919;
1920;1921;1922;1923;1924;1925;1926;1927;1928;1929;
1930;1931;1932;1933;1934;1935;1936;1937;1938;1939;
1940;1941;1942;1943;1944;1945;1946;1947;1948;1949;
1950;1951;1952;1953;1954;1955;1956;1957;1958;1959;
1960;1961;1962;1963;1964;1965;1966;1967;1968;1969;
1970;1971;1972;1973;1974;1975;1976;1977;1978;1979;
1980;1981;1982;1983;1984;1985;1986;1987;1988;1989;
1990;1991;1992;1993;1994;1995;1996;1997;1998;1999;
2000;2001;2002;2003;2004;2005;2006;2007;2008;2009;
2010;2011;2012;2013;2014;2015;2016;2017;2018;2019;
2020;2021;2022;2023;2024;2025;2026;2027;2028;2029;
2030;2031;2032;2033;2034;2035;2036;2037;2038;2039;
2040;2041;2042;2043;2044;2045;2046;2047;2048;2049;
2050;2051;2052;2053;2054;2055;2056;2057;2058;2059;
2060;2061;2062;2063;2064;2065;2066;2067;2068;2069;
2070;2071;2072;2073;2074;2075;2076;2077;2078;2079;
2080;2081;2082;2083;2084;2085;2086;2087;2088;2089;
2090;2091;2092;2093;2094;2095;2096;2097;2098;2099;
2100;2101;2102;2103;2104;2105;2106;2107;2108;2109;
2110;2111;2112;2113;2114;2115;2116;2117;2118;2119;
2120;2121;2122;2123;2124;2125;2126;2127;2128;2129;
2130;2131;2132;2133;2134;2135;2136;2137;2138;2139;
2140;2141;2142;2143;2144;2145;2146;2147;2148;2149;
2150;2151;2152;2153;2154;2155;2156;2157;2158;2159;
2160;2161;2162;2163;2164;2165;2166;2167;2168;2169;
2170;2171;2172;2173;2174;2175;2176;2177;2178;2179;
2180;2181;2182;2183;2184;2185;2186;2187;2188;2189;
2190;2191;2192;2193;2194;2195;2196;2197;2198;2199;
2200;2201;2202;2203;2204;2205;2206;2207;2208;2209;
2210;2211;2212;2213;2214;2215;2216;2217;2218;2219;
2220;2221;2222;2223;2224;2225;2226;2227;2228;2229;
2230;2231;2232;2233;2234;2235;2236;2237;2238;2239;
2240;2241;2242;2243;2244;2245;2246;2247;2248;2249;
2250;2251;2252;2253;2254;2255;2256;2257;2258;2259;
2260;2261;2262;2263;2264;2265;2266;2267;2268;2269;
2270;2271;2272;2273;2274;2275;2276;2277;2278;2279;
2280;2281;2282;2283;2284;2285;2286;2287;2288;2289;
2290;2291;2292;2293;2294;2295;2296;2297;2298;2299;
2300;2301;2302;2303;2304;2305;2306;2307;2308;2309;
2310;2311;2312;2313;2314;2315;2316;2317;2318;2319;
2320;2321;2322;2323;2324;2325;2326;2327;2328;2329;
2330;2331;2332;2333;2334;2335;2336;2337;2338;2339;
2340;2341;2342;2343;2344;2345;2346;2347;2348;2349;
2350;2351;2352;2353;2354;2355;2356;2357;2358;2359;
2360;2361;2362;2363;2364;2365;2366;2367;2368;2369;
2370;2371;2372;2373;2374;2375;2376;2377;2378;2379;
2380;2381;2382;2383;2384;2385;2386;2387;2388;2389;
2390;2391;2392;2393;2394;2395;2396;2397;2398;2399;
2400;2401;2402;2403;2404;2405;2406;2407;2408;2409;
2410;2411;2412;2413;2414;2415;2416;2417;2418;2419;
2420;2421;2422;2423;2424;2425;2426;2427;2428;2429;
2430;2431;2432;2433;2434;2435;2436;2437;2438;2439;
2440;2441;2442;2443;2444;2445;2446;2447;2448;2449;
2450;2451;2452;2453;2454;2455;2456;2457;2458;2459;
2460;2461;2462;2463;2464;2465;2466;2467;2468;2469;
2470;2471;2472;2473;2474;2475;2476;2477;2478;2479;
2480;2481;2482;2483;2484;2485;2486;2487;2488;2489;
2490;2491;2492;2493;2494;2495;2496;2497;2498;2499;
2500;2501;2502;2503;2504;2505;2506;2507;2508;2509;
2510;2511;2512;2513;2514;2515;2516;2517;2518;2519;
2520;2521;2522;2523;2524;2525;2526;2527;2528;2529;
2530;2531;2532;2533;2534;2535;2536;2537;2538;2539;
2540;2541;2542;2543;2544;2545;2546;2547;2548;2549;
2550;2551;2552;2553;2554;2555;2556;2557;2558;2559;
2560;2561;2562;2563;2564;2565;2566;2567;2568;2569;
2570;2571;2572;2573;2574;2575;2576;2577;2578;2579;
2580;2581;2582;2583;2584;2585;2586;2587;2588;2589;
2590;2591;2592;2593;2594;2595;2596;2597;2598;2599;
2600;2601;2602;2603;2604;2605;2606;2607;2608;2609;
2610;2611;2612;2613;2614;2615;2616;2617;2618;2619;
2620;2621;2622;2623;2624;2625;2626;2627;2628;2629;
2630;2631;2632;2633;2634;2635;2636;2637;2638;2639;
2640;2641;2642;2643;2644;2645;2646;2647;2648;2649;
2650;2651;2652;2653;2654;2655;2656;2657;2658;2659;
2660;2661;2662;2663;2664;2665;2666;2667;2668;2669;
2670;2671;2672;2673;2674;2675;2676;2677;2678;2679;
2680;2681;2682;2683;2684;2685;2686;2687;2688;2689;
2690;2691;2692;2693;2694;2695;2696;2697;2698;2699;
2700;2701;2702;2703;2704;2705;2706;2707;2708;2709;
2710;2711;2712;2713;2714;2715;2716;2717;2718;2719;
2720;2721;2722;2723;2724;2725;2726;2727;2728;2729;
2730;2731;2732;2733;2734;2735;2736;2737;2738;2739;
2740;2741;2742;2743;2744;2745;2746;2747;2748;2749;
2750;2751;2752;2753;2754;2755;2756;2757;2758;2759;
2760;2761;2762;2763;2764;2765;2766;2767;2768;2769;
2770;2771;2772;2773;2774;2775;2776;2777;2778;2779;
2780;2781;2782;2783;2784;2785;2786;2787;2788;2789;
2790;2791;2792;2793;2794;2795;2796;2797;2798;2799;
2800;2801;2802;2803;2804;2805;2806;2807;2808;2809;
2810;2811;2812;2813;2814;2815;2816;2817;2818;2819;
2820;2821;2822;2823;2824;2825;2826;2827;2828;2829;
2830;2831;2832;2833;2834;2835;2836;2837;2838;2839;
2840;2841;2842;2843;2844;2845;2846;2847;2848;2849;
2850;2851;2852;2853;2854;2855;2856;2857;2858;2859;
2860;2861;2862;2863;2864;2865;2866;2867;2868;2869;
2870;2871;2872;2873;2874;2875;2876;2877;2878;2879;
2880;2881;2882;2883;2884;2885;2886;2887;2888;2889;
2890;2891;2892;2893;2894;2895;2896;2897;2898;2899;
2900;2901;2902;2903;2904;2905;2906;2907;2908;2909;
2910;2911;2912;2913;2914;2915;2916;2917;2918;2919;
2920;2921;2922;2923;2924;2925;2926;2927;2928;2929;
2930;2931;2932;2933;2934;2935;2936;2937;2938;2939;
2940;2941;2942;2943;2944;2945;2946;2947;2948;2949;
2950;2951;2952;2953;2954;2955;2956;2957;2958;2959;
2960;2961;2962;2963;2964;2965;2966;2967;2968;2969;
2970;2971;2972;2973;2974;2975;2976;2977;2978;2979;
2980;2981;2982;2983;2984;2985;2986;2987;2988;2989;
2990;2991;2992;2993;2994;2995;2996;2997;2998;2999;
3000;3001;3002;3003;3004;3005;3006;3007;3008;3009;
3010;3011;3012;3013;3014;3015;3016;3017;3018;3019;
3020;3021;3022;3023;3024;3025;3026;3027;3028;3029;
3030;3031;3032;3033;3034;3035;3036;3037;3038;3039;
3040;3041;3042;3043;3044;3045;3046;3047;3048;3049;
3050;3051;3052;3053;3054;3055;3056;3057;3058;3059;
3060;3061;3062;3063;3064;3065;3066;3067;3068;3069;
3070;3071;3072;3073;3074;3075;3076;3077;3078;3079;
3080;3081;3082;3083;3084;3085;3086;3087;3088;3089;
3090;3091;3092;3093;3094;3095;3096;3097;3098;3099;
3100;3101;3102;3103;3104;3105;3106;3107;3108;3109;
3110;3111;3112;3113;3114;3115;3116;3117;3118;3119;
3120;3121;3122;3123;3124;3125;3126;3127;3128;3129;
3130;3131;3132;3133;3134;3135;3136;3137;3138;3139;
3140;3141;3142;3143;3144;3145;3146;3147;3148;3149;
3150;3151;3152;3153;3154;3155;3156;3157;3158;3159;
3160;3161;3162;3163;3164;3165;3166;3167;3168;3169;
3170;3171;3172;3173;3174;3175;3176;3177;3178;3179;
3180;3181;3182;3183;3184;3185;3186;3187;3188;3189;
3190;3191;3192;3193;3194;3195;3196;3197;3198;3199;
3200;3201;3202;3203;3204;3205;3206;3207;3208;3209;
3210;3211;3212;3213;3214;3215;3216;3217;3218;3219;
3220;3221;3222;3223;3224;3225;3226;3227;3228;3229;
3230;3231;3232;3233;3234;3235;3236;3237;3238;3239;
3240;3241;3242;3243;3244;3245;3246;3247;3248;3249;
3250;3251;3252;3253;3254;3255;3256;3257;3258;3259;
3260;3261;3262;3263;3264;3265;3266;3267;3268;3269;
3270;3271;3272;3273;3274;3275;3276;3277;3278;3279;
3280;3281;3282;3283;3284;3285;3286;3287;3288;3289;
3290;3291;3292;3293;3294;3295;3296;3297;3298;3299;
3300;3301;3302;3303;3304;3305;3306;3307;3308;3309;
3310;3311;3312;3313;3314;3315;3316;3317;3318;3319;
3320;3321;3322;3323;3324;3325;3326;3327;3328;3329;
3330;3331;3332;3333;3334;3335;3336;3337;3338;3339;
3340;3341;3342;3343;3344;3345;3346;3347;3348;3349;
3350;3351;3352;3353;3354;3355;3356;3357;3358;3359;
3360;3361;3362;3363;3364;3365;3366;3367;3368;3369;
3370;3371;3372;3373;3374;3375;3376;3377;3378;3379;
3380;3381;3382;3383;3384;3385;3386;3387;3388;3389;
3390;3391;3392;3393;3394;3395;3396;3397;3398;3399;
3400;3401;3402;3403;3404;3405;3406;3407;3408;3409;
3410;3411;3412;3413;3414;3415;3416;3417;3418;3419;
3420;3421;3422;3423;3424;3425;3426;3427;3428;3429;
3430;3431;3432;3433;3434;3435;3436;3437;3438;3439;
3440;3441;3442;3443;3444;3445;3446;3447;3448;3449;
3450;3451;3452;3453;3454;3455;3456;3457;3458;3459;
3460;3461;3462;3463;3464;3465;3466;3467;3468;3469;
3470;3471;3472;3473;3474;3475;3476;3477;3478;3479;
3480;3481;3482;3483;3484;3485;3486;3487;3488;3489;
3490;3491;3492;3493;3494;3495;3496;3497;3498;3499;
3500;3501;3502;3503;3504;3505;3506;3507;3508;3509;
3510;3511;3512;3513;3514;3515;3516;3517;3518;3519;
3520;3521;3522;3523;3524;3525;3526;3527;3528;3529;
3530;3531;3532;3533;3534;3535;3536;3537;3538;3539;
3540;3541;3542;3543;3544;3545;3546;3547;3548;3549;
3550;3551;3552;3553;3554;3555;3556;3557;3558;3559;
3560;3561;3562;3563;3564;3565;3566;3567;3568;3569;
3570;3571;3572;3573;3574;3575;3576;3577;3578;3579;
3580;3581;3582;3583;3584;3585;3586;3587;3588;3589;
3590;3591;3592;3593;3594;3595;3596;3597;3598;3599;
3600;3601;3602;3603;3604;3605;3606;3607;3608;3609;
3610;3611;3612;3613;3614;3615;3616;3617;3618;3619;
3620;3621;3622;3623;3624;3625;3626;3627;3628;3629;
3630;3631;3632;3633;3634;3635;3636;3637;3638;3639;
3640;3641;3642;3643;3644;3645;3646;3647;3648;3649;
3650;3651;3652;3653;3654;3655;3656;3657;3658;3659;
3660;3661;3662;3663;3664;3665;3666;3667;3668;3669;
3670;3671;3672;3673;3674;3675;3676;3677;3678;3679;
3680;3681;3682;3683;3684;3685;3686;3687;3688;3689;
3690;3691;3692;3693;3694;3695;3696;3697;3698;3699;
3700;3701;3702;3703;3704;3705;3706;3707;3708;3709;
3710;3711;3712;3713;3714;3715;3716;3717;3718;3719;
3720;3721;3722;3723;3724;3725;3726;3727;3728;3729;
3730;3731;3732;3733;3734;3735;3736;3737;3738;3739;
3740;3741;3742;3743;3744;3745;3746;3747;3748;3749;
3750;3751;3752;3753;3754;3755;3756;3757;3758;3759;
3760;3761;3762;3763;3764;3765;3766;3767;3768;3769;
3770;3771;3772;3773;3774;3775;3776;3777;3778;3779;
3780;3781;3782;3783;3784;3785;3786;3787;3788;3789;
3790;3791;3792;3793;3794;3795;3796;3797;3798;3799;
3800;3801;3802;3803;3804;3805;3806;3807;3808;3809;
3810;3811;3812;3813;3814;3815;3816;3817;3818;3819;
3820;3821;3822;3823;3824;3825;3826;3827;3828;3829;
3830;3831;3832;3833;3834;3835;3836;3837;3838;3839;
3840;3841;3842;3843;3844;3845;3846;3847;3848;3849;
3850;3851;3852;3853;3854;3855;3856;3857;3858;3859;
3860;3861;3862;3863;3864;3865;3866;3867;3868;3869;
3870;3871;3872;3873;3874;3875;3876;3877;3878;3879;
3880;3881;3882;3883;3884;3885;3886;3887;3888;3889;
3890;3891;3892;3893;3894;3895;3896;3897;3898;3899;
3900;3901;3902;3903;3904;3905;3906;3907;3908;3909;
3910;3911;3912;3913;3914;3915;3916;3917;3918;3919;
3920;3921;3922;3923;3924;3925;3926;3927;3928;3929;
3930;3931;3932;3933;3934;3935;3936;3937;3938;3939;
3940;3941;3942;3943;3944;3945;3946;3947;3948;3949;
3950;3951;3952;3953;3954;3955;3956;3957;3958;3959;
3960;3961;3962;3963;3964;3965;3966;3967;3968;3969;
3970;3971;3972;3973;3974;3975;3976;3977;3978;3979;
3980;3981;3982;3983;3984;3985;3986;3987;3988;3989;
3990;3991;3992;3993;3994;3995;3996;3997;3998;3999;
4000;4001;4002;4003;4004;4005;4006;4007;4008;4009;
4010;4011;4012;4013;4014;4015;4016;4017;4018;4019;
4020;4021;4022;4023;4024;4025;4026;4027;4028;4029;
4030;4031;4032;4033;4034;4035;4036;4037;4038;4039;
4040;4041;4042;4043;4044;4045;4046;4047;4048;4049;
4050;4051;4052;4053;4054;4055;4056;4057;4058;4059;
4060;4061;4062;4063;4064;4065;4066;4067;4068;4069;
4070;4071;4072;4073;4074;4075;4076;4077;4078;4079;
4080;4081;4082;4083;4084;4085;4086;4087;4088;4089;
4090;4091;4092;4093;4094;4095;4096;4097;4098;4099;
4100;4101;4102;4103;4104;4105;4106;4107;4108;4109;
4110;4111;4112;4113;4114;4115;4116;4117;4118;4119;
4120;4121;4122;4123;4124;4125;4126;4127;4128;4129;
4130;4131;4132;4133;4134;4135;4136;4137;4138;4139;
4140;4141;4142;4143;4144;4145;4146;4147;4148;4149;
4150;4151;4152;4153;4154;4155;4156;4157;4158;4159;
4160;4161;4162;4163;4164;4165;4166;4167;4168;4169;
4170;4171;4172;4173;4174;4175;4176;4177;4178;4179;
4180;4181;4182;4183;4184;4185;4186;4187;4188;4189;
4190;4191;4192;4193;4194;4195;4196;4197;4198;4199;
4200;4201;4202;4203;4204;4205;4206;4207;4208;4209;
4210;4211;4212;4213;4214;4215;4216;4217;4218;4219;
4220;4221;4222;4223;4224;4225;4226;4227;4228;4229;
4230;4231;4232;4233;4234;4235;4236;4237;4238;4239;
4240;4241;4242;4243;4244;4245;4246;4247;4248;4249;
4250;4251;4252;4253;4254;4255;4256;4257;4258;4259;
4260;4261;4262;4263;4264;4265;4266;4267;4268;4269;
4270;4271;4272;4273;4274;4275;4276;4277;4278;4279;
4280;4281;4282;4283;4284;4285;4286;4287;4288;4289;
4290;4291;4292;4293;4294;4295;4296;4297;4298;4299;
4300;4301;4302;4303;4304;4305;4306;4307;4308;4309;
4310;4311;4312;4313;4314;4315;4316;4317;4318;4319;
4320;4321;4322;4323;4324;4325;4326;4327;4328;4329;
4330;4331;4332;4333;4334;4335;4336;4337;4338;4339;
4340;4341;4342;4343;4344;4345;4346;4347;4348;4349;
4350;4351;4352;4353;4354;4355;4356;4357;4358;4359;
4360;4361;4362;4363;4364;4365;4366;4367;4368;4369;
4370;4371;4372;4373;4374;4375;4376;4377;4378;4379;
4380;4381;4382;4383;4384;4385;4386;4387;4388;4389;
4390;4391;4392;4393;4394;4395;4396;4397;4398;4399;
4400;4401;4402;4403;4404;4405;4406;4407;4408;4409;
4410;4411;4412;4413;4414;4415;4416;4417;4418;4419;
4420;4421;4422;4423;4424;4425;4426;4427;4428;4429;
4430;4431;4432;4433;4434;4435;4436;4437;4438;4439;
4440;4441;4442;4443;4444;4445;4446;4447;4448;4449;
4450;4451;4452;4453;4454;4455;4456;4457;4458;4459;
4460;4461;4462;4463;4464;4465;4466;4467;4468;4469;
4470;4471;4472;4473;4474;4475;4476;4477;4478;4479;
4480;4481;4482;4483;4484;4485;4486;4487;4488;4489;
4490;4491;4492;4493;4494;4495;4496;4497;4498;4499;
4500;4501;4502;4503;4504;4505;4506;4507;4508;4509;
4510;4511;4512;4513;4514;4515;4516;4517;4518;4519;
4520;4521;4522;4523;4524;4525;4526;4527;4528;4529;
4530;4531;4532;4533;4534;4535;4536;4537;4538;4539;
4540;4541;4542;4543;4544;4545;4546;4547;4548;4549;
4550;4551;4552;4553;4554;4555;4556;4557;4558;4559;
4560;4561;4562;4563;4564;4565;4566;4567;4568;4569;
4570;4571;4572;4573;4574;4575;4576;4577;4578;4579;
4580;4581;4582;4583;4584;4585;4586;4587;4588;4589;
4590;4591;4592;4593;4594;4595;4596;4597;4598;4599;
4600;4601;4602;4603;4604;4605;4606;4607;4608;4609;
4610;4611;4612;4613;4614;4615;4616;4617;4618;4619;
4620;4621;4622;4623;4624;4625;4626;4627;4628;4629;
4630;4631;4632;4633;4634;4635;4636;4637;4638;4639;
4640;4641;4642;4643;4644;4645;4646;4647;4648;4649;
4650;4651;4652;4653;4654;4655;4656;4657;4658;4659;
4660;4661;4662;4663;4664;4665;4666;4667;4668;4669;
4670;4671;4672;4673;4674;4675;4676;4677;4678;4679;
4680;4681;4682;4683;4684;4685;4686;4687;4688;4689;
4690;4691;4692;4693;4694;4695;4696;4697;4698;4699;
4700;4701;4702;4703;4704;4705;4706;4707;4708;4709;
4710;4711;4712;4713;4714;4715;4716;4717;4718;4719;
4720;4721;4722;4723;4724;4725;4726;4727;4728;4729;
4730;4731;4732;4733;4734;4735;4736;4737;4738;4739;
4740;4741;4742;4743;4744;4745;4746;4747;4748;4749;
4750;4751;4752;4753;4754;4755;4756;4757;4758;4759;
4760;4761;4762;4763;4764;4765;4766;4767;4768;4769;
4770;4771;4772;4773;4774;4775;4776;4777;4778;4779;
4780;4781;4782;4783;4784;4785;4786;4787;4788;4789;
4790;4791;4792;4793;4794;4795;4796;4797;4798;4799;
4800;4801;4802;4803;4804;4805;4806;4807;4808;4809;
4810;4811;4812;4813;4814;4815;4816;4817;4818;4819;
4820;4821;4822;4823;4824;4825;4826;4827;4828;4829;
4830;4831;4832;4833;4834;4835;4836;4837;4838;4839;
4840;4841;4842;4843;4844;4845;4846;4847;4848;4849;
4850;4851;4852;4853;4854;4855;4856;4857;4858;4859;
4860;4861;4862;4863;4864;4865;4866;4867;4868;4869;
4870;4871;4872;4873;4874;4875;4876;4877;4878;4879;
4880;4881;4882;4883;4884;4885;4886;4887;4888;4889;
4890;4891;4892;4893;4894;4895;4896;4897;4898;4899;
4900;4901;4902;4903;4904;4905;4906;4907;4908;4909;
4910;4911;4912;4913;4914;4915;4916;4917;4918;4919;
4920;4921;4922;4923;4924;4925;4926;4927;4928;4929;
4930;4931;4932;4933;4934;4935;4936;4937;4938;4939;
4940;4941;4942;4943;4944;4945;4946;4947;4948;4949;
4950;4951;4952;4953;4954;4955;4956;4957;4958;4959;
4960;4961;4962;4963;4964;4965;4966;4967;4968;4969;
4970;4971;4972;4973;4974;4975;4976;4977;4978;4979;
4980;4981;4982;4983;4984;4985;4986;4987;4988;4989;
4990;4991;4992;4993;4994;4995;4996;4997;4998;4999;
5000;5001;5002;5003;5004;5005;5006;5007;5008;5009;
5010;5011;5012;5013;5014;5015;5016;5017;5018;5019;
5020;5021;5022;5023;5024;5025;5026;5027;5028;5029;
5030;5031;5032;5033;5034;5035;5036;5037;5038;5039;
5040;5041;5042;5043;5044;5045;5046;5047;5048;5049;
5050;5051;5052;5053;5054;5055;5056;5057;5058;5059;
5060;5061;5062;5063;5064;5065;5066;5067;5068;5069;
5070;5071;5072;5073;5074;5075;5076;5077;5078;5079;
5080;5081;5082;5083;5084;5085;5086;5087;5088;5089;
5090;5091;5092;5093;5094;5095;5096;5097;5098;5099;
5100;5101;5102;5103;5104;5105;5106;5107;5108;5109;
5110;5111;5112;5113;5114;5115;5116;5117;5118;5119;
5120;5121;5122;5123;5124;5125;5126;5127;5128;5129;
5130;5131;5132;5133;5134;5135;5136;5137;5138;5139;
5140;5141;5142;5143;5144;5145;5146;5147;5148;5149;
5150;5151;5152;5153;5154;5155;5156;5157;5158;5159;
5160;5161;5162;5163;5164;5165;5166;5167;5168;5169;
5170;5171;5172;5173;5174;5175;5176;5177;5178;5179;
5180;5181;5182;5183;5184;5185;5186;5187;5188;5189;
5190;5191;5192;5193;5194;5195;5196;5197;5198;5199;
5200;5201;5202;5203;5204;5205;5206;5207;5208;5209;
5210;5211;5212;5213;5214;5215;5216;5217;5218;5219;
5220;5221;5222;5223;5224;5225;5226;5227;5228;5229;
5230;5231;5232;5233;5234;5235;5236;5237;5238;5239;
5240;5241;5242;5243;5244;5245;5246;5247;5248;5249;
5250;5251;5252;5253;5254;5255;5256;5257;5258;5259;
5260;5261;5262;5263;5264;5265;5266;5267;5268;5269;
5270;5271;5272;5273;5274;5275;5276;5277;5278;5279;
5280;5281;5282;5283;5284;5285;5286;5287;5288;5289;
5290;5291;5292;5293;5294;5295;5296;5297;5298;5299;
5300;5301;5302;5303;5304;5305;5306;5307;5308;5309;
5310;5311;5312;5313;5314;5315;5316;5317;5318;5319;
5320;5321;5322;5323;5324;5325;5326;5327;5328;5329;
5330;5331;5332;5333;5334;5335;5336;5337;5338;5339;
5340;5341;5342;5343;5344;5345;5346;5347;5348;5349;
5350;5351;5352;5353;5354;5355;5356;5357;5358;5359;
5360;5361;5362;5363;5364;5365;5366;5367;5368;5369;
5370;5371;5372;5373;5374;5375;5376;5377;5378;5379;
5380;5381;5382;5383;5384;5385;5386;5387;5388;5389;
5390;5391;5392;5393;5394;5395;5396;5397;5398;5399;
5400;5401;5402;5403;5404;5405;5406;5407;5408;5409;
5410;5411;5412;5413;5414;5415;5416;5417;5418;5419;
5420;5421;5422;5423;5424;5425;5426;5427;5428;5429;
5430;5431;5432;5433;5434;5435;5436;5437;5438;5439;
5440;5441;5442;5443;5444;5445;5446;5447;5448;5449;
5450;5451;5452;5453;5454;5455;5456;5457;5458;5459;
5460;5461;5462;5463;5464;5465;5466;5467;5468;5469;
5470;5471;5472;5473;5474;5475;5476;5477;5478;5479;
5480;5481;5482;5483;5484;5485;5486;5487;5488;5489;
5490;5491;5492;5493;5494;5495;5496;5497;5498;5499;
5500;5501;5502;5503;5504;5505;5506;5507;5508;5509;
5510;5511;5512;5513;5514;5515;5516;5517;5518;5519;
5520;5521;5522;5523;5524;5525;5526;5527;5528;5529;
5530;5531;5532;5533;5534;5535;5536;5537;5538;5539;
5540;5541;5542;5543;5544;5545;5546;5547;5548;5549;
5550;5551;5552;5553;5554;5555;5556;5557;5558;5559;
5560;5561;5562;5563;5564;5565;5566;5567;5568;5569;
5570;5571;5572;5573;5574;5575;5576;5577;5578;5579;
5580;5581;5582;5583;5584;5585;5586;5587;5588;5589;
5590;5591;5592;5593;5594;5595;5596;5597;5598;5599;
5600;5601;5602;5603;5604;5605;5606;5607;5608;5609;
5610;5611;5612;5613;5614;5615;5616;5617;5618;5619;
5620;5621;5622;5623;5624;5625;5626;5627;5628;5629;
5630;5631;5632;5633;5634;5635;5636;5637;5638;5639;
5640;5641;5642;5643;5644;5645;5646;5647;5648;5649;
5650;5651;5652;5653;5654;5655;5656;5657;5658;5659;
5660;5661;5662;5663;5664;5665;5666;5667;5668;5669;
5670;5671;5672;5673;5674;5675;5676;5677;5678;5679;
5680;5681;5682;5683;5684;5685;5686;5687;5688;5689;
5690;5691;5692;5693;5694;5695;5696;5697;5698;5699;
5700;5701;5702;5703;5704;5705;5706;5707;5708;5709;
5710;5711;5712;5713;5714;5715;5716;5717;5718;5719;
5720;5721;5722;5723;5724;5725;5726;5727;5728;5729;
5730;5731;5732;5733;5734;5735;5736;5737;5738;5739;
5740;5741;5742;5743;5744;5745;5746;5747;5748;5749;
5750;5751;5752;5753;5754;5755;5756;5757;5758;5759;
5760;5761;5762;5763;5764;5765;5766;5767;5768;5769;
5770;5771;5772;5773;5774;5775;5776;5777;5778;5779;
5780;5781;5782;5783;5784;5785;5786;5787;5788;5789;
5790;5791;5792;5793;5794;5795;5796;5797;5798;5799;
5800;5801;5802;5803;5804;5805;5806;5807;5808;5809;
5810;5811;5812;5813;5814;5815;5816;5817;5818;5819;
5820;5821;5822;5823;5824;5825;5826;5827;5828;5829;
5830;5831;5832;5833;5834;5835;5836;5837;5838;5839;
5840;5841;5842;5843;5844;5845;5846;5847;5848;5849;
5850;5851;5852;5853;5854;5855;5856;5857;5858;5859;
5860;5861;5862;5863;5864;5865;5866;5867;5868;5869;
5870;5871;5872;5873;5874;5875;5876;5877;5878;5879;
5880;5881;5882;5883;5884;5885;5886;5887;5888;5889;
5890;5891;5892;5893;5894;5895;5896;5897;5898;5899;
5900;5901;5902;5903;5904;5905;5906;5907;5908;5909;
5910;5911;5912;5913;5914;5915;5916;5917;5918;5919;
5920;5921;5922;5923;5924;5925;5926;5927;5928;5929;
5930;5931;5932;5933;5934;5935;5936;5937;5938;5939;
5940;5941;5942;5943;5944;5945;5946;5947;5948;5949;
5950;5951;5952;5953;5954;5955;5956;5957;5958;5959;
5960;5961;5962;5963;5964;5965;5966;5967;5968;5969;
5970;5971;5972;5973;5974;5975;5976;5977;5978;5979;
5980;5981;5982;5983;5984;5985;5986;5987;5988;5989;
5990;5991;5992;5993;5994;5995;5996;5997;5998;5999;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[3] {
   name="ClusterRun";
   el_typ=DataTable;
   el_def=0;
   save_tables=0;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup, Parallel Batch";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx] | [b_start=xxx] [b_end=xxx] for parallel-batch mode";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=STARTUP_RUN;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.networks[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="batches";
     var_type=T_Int;
     int_val=100;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="this is a \"dummy\" var for ClusterRun to set the startup arg";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="epochs";
     var_type=T_Int;
     int_val=10000;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="this is a \"dummy\" var for ClusterRun to set the startup arg";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="tag";
     var_type=T_String;
     string_val="_gui";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="batch_str";
     var_type=T_String;
     string_val="00";
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][2]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.ctrl_panels[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_iftaMiscguiactive";
     desc=;
     flags=0;
     code_string=;
     cond {
      expr="taMisc::gui_active";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ReturnExpr @[0] {
       name="ReturnExpr_return";
       desc=;
       flags=0;
       code_string=;
       expr {
	expr=;
       };
      };
     };
    };
    RegisterArgs @[1] {
     name="RegisterArgs_RegisterArgs";
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[2] {
     name="PrintExpr_PrintLoadedproje_ojects0filename";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[3] {
     name="Comment_Stdvariablesinst_upprogramitself";
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[4] {
     name="ProgVarFmArg_SetVartaginProgr_artupfromArgtag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.programs[0]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[5] {
     name="ProgVarFmArg_SetVarlogdirinPr_upfromArglogdir";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.programs[0]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[6] {
     name="ProgVarFmArg_SetVarmaxepochin_infromArgepochs";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.programs.gp[0][1]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     name="ProgVarFmArg_SetVarrndinitinP_nfromArgrndinit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.programs.gp[0][1]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     name="ProgVarFmArg_SetVarmaxbatchin_hfromArgbatches";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_batch in Program:LeabraBatch from Arg:batches";
     prog=$.programs.gp[0][0]$;
     var_name="max_batch";
     arg_name="batches";
    };
    ProgVarFmArg @[9] {
     name="ProgVarFmArg_SetVarmaxbatchin_atchfromArgbend";
     desc="b_end is parallel-batch mode of operation (see b_start)";
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_batch in Program:LeabraBatch from Arg:b_end";
     prog=$.programs.gp[0][0]$;
     var_name="max_batch";
     arg_name="b_end";
    };
    ProgVarFmArg @[10] {
     name="ProgVarFmArg_SetVarbatchinPro_chfromArgbstart";
     desc="b_start is parallel-batch mode of operation (see also b_end)";
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:batch in Program:LeabraBatch from Arg:b_start";
     prog=$.programs.gp[0][0]$;
     var_name="batch";
     arg_name="b_start";
    };
    ProgVarFmArg @[11] {
     name="ProgVarFmArg_SetVarsavewtsint_savewtsinterval";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.programs.gp[0][1]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[12] {
     name="ProgVarFmArg_SetVarsavefinalw_Argsavefinalwts";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.programs.gp[0][1]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    Comment @[13] {
     name="Comment_Addyourownvariableshere";
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[14] {
     name="Comment_TODOAddyourprogr_eremultilinesok";
     desc="TODO: Add your program comment here (multi-lines ok).";
     flags=CAN_REVERT_TO_CODE;
     code_string="// TODO: Add your program comment here (multi-lines ok).";
    };
    Comment @[15] {
     name="Comment_Belowsaveslogfil_ndarddatatables";
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     name="If_iftaMiscCheckArgByNamebstart";
     desc="if passed b_start, then turn off init_batch in Batch program, so it starts here instead of 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"b_start\"))";
     cond {
      expr="taMisc::CheckArgByName(\"b_start\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_batchSetVarinitbatchfalse";
       desc="directly set variable on batch program";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch->SetVar(\"init_batch\", false)";
       result_var=NULL;
       obj=.programs[0].vars[1]$$;
       method=Program::SetVar;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="var_nm";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"init_batch\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="value";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="bool SetVar(taString& var_nm, Variant& value)";
       meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
      };
      ProgVarFmArg @[1] {
       name="ProgVarFmArg_SetVarbatchstart_upfromArgbstart";
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:b_start";
       prog=$.programs[0]$;
       var_name="batch_start";
       arg_name="b_start";
      };
      MiscCall @[2] {
       name="MiscCall_batchstrtaMiscLe_erosbatchstart2";
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.programs[0].vars[5]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[3] {
       name="VarIncr_tagbatchstr";
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.programs[0].vars[4]$$;
       expr {
	expr="\".\" + batch_str";
       };
      };
      If @[4] {
       name="If_ifbatchstart0";
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	expr="batch_start == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_logfilenmEpochOu_e001logdirfalse";
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.programs[0].vars[7]$$;
	 obj=.programs[0].vars[9]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     name="Else_If_iftaMiscCheckArgByNamebstart";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_logfilenmEpochOu_staglogdirfalse";
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.programs[0].vars[7]$;
       obj=$.programs[0].vars[9]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     name="MiscCall_taMiscReportUnusedArgstrue";
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     name="Comment_Saveepochlogonbydefault";
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     name="MethodCall_logfilenmEpochOu_ttaglogdirfalse";
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.programs[0].vars[7]$;
     obj=$.programs[0].vars[9]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[21] {
     name="MethodCall_EpochOutputDataS_filenmfalsetrue";
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.programs[0].vars[9]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[22] {
     name="PrintVar_PrintSavingepoch_datatologfilenm";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.programs[0].vars[7]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[23] {
     name="Comment_SavetriallogOFFbydefault";
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[24] {
     name="MethodCall_logfilenmTrialOu_attaglogdirtrue";
     desc="last arg is to include dmem proc number";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.programs[0].vars[7]$;
     obj=.programs[0].vars[10]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[25] {
     name="MethodCall_TrialOutputDataS_ilenmfalsefalse";
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.programs[0].vars[10]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[26] {
     name="PrintVar_PrintSavingtrial_datatologfilenm";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.programs[0].vars[7]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[27] {
     name="OtherProgramVar_VarsToprogramSav_tagvar2var3var4";
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.programs.gp[0][10]$$;
     set_other=1;
     var_1=$.programs[0].vars[4]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     name="PrintExpr_PrintRunningbatchname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch.name";
     expr {
      expr="\"Running: \" << batch.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     name="ProgramCall_LeabraBatchnetworkinputdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.programs.gp[0][0]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="ConfigNHiddenLayers";
   short_nm="Layers";
   tags=;
   desc="configure a basic network with N hidden layers -- uses Wizard";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=taOBase;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="n_hidden_layers";
     var_type=T_Int;
     int_val=2;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="number of hidden layers";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="n_hidden_units";
     var_type=T_Int;
     int_val=49;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="number of hidden units per layer";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraWizard_0";
     var_type=T_Object;
     object_type=LeabraWizard;
     object_val=.wizards[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="i";
     var_type=T_Int;
     int_val=2;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="ToOutput";
     var_type=T_Object;
     object_type=LeabraConSpec;
     object_val=NULL;
     object_scope=NULL;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_LeabraWizard0method";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraWizard_0->method()";
     result_var=NULL;
     obj=.programs[1].vars[0]$$;
     method=NULL;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_inputs";
       required=0;
       def_val="1";
       prev_expr=;
       expr {
	expr="1";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="n_hiddens";
       required=0;
       def_val="1";
       prev_expr=;
       expr {
	expr="n_hidden_layers";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="n_outputs";
       required=0;
       def_val="1";
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig=;
     meth_desc=;
    };
    ForLoop @[1] {
     name="ForLoop_fori0inhiddenlayersi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < n_hidden_layers; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      MemberAssign @[0] {
       name="MemberAssign_LeabraWizard0lay_itsnhiddenunits";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LeabraWizard_0.layer_cfg[i+1].n_units = n_hidden_units";
       obj=$.programs[1].vars[0]$;
       path="layer_cfg[i+1].n_units";
       expr {
	expr="n_hidden_units";
       };
       update_after=0;
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < n_hidden_layers";
     };
     iter {
      expr="i++";
     };
    };
    MethodCall @[2] {
     name="MethodCall_LeabraWizard0StdNetwork";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraWizard_0->StdNetwork()";
     result_var=NULL;
     obj=$.programs[1].vars[0]$;
     method=Wizard::StdNetwork;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool StdNetwork()";
     meth_desc=" configure a new or existing standard network -- user is prompted for full configuration settings; if we will need the NetworkRef don't call CutLinks at end - caller will be responsible!";
    };
    ForLoop @[3] {
     name="ForLoop_fori0inhiddenlayersi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < n_hidden_layers; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      UserScript @[0] {
       name="UserScript_networklayers1ip_drenTopDownCons";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="network.layers[1+i].projections[1].SetConSpec(network.specs.BottomUpCons.children.TopDownCons);";
       script {
	expr="network.layers[1+i].projections[1].SetConSpec(network.specs.BottomUpCons.children.TopDownCons);";
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < n_hidden_layers";
     };
     iter {
      expr="i++";
     };
    };
    UserScript @[4] {
     name="UserScript_networklayersOut_ConSpecToOutput";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="network.layers.Output.projections[0].SetConSpec(ToOutput);";
     script {
      expr="network.layers.Output.projections[0].SetConSpec(ToOutput);";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[2].doc$$: };
   };
   name="EpochsToTrainCR";
   short_nm="EpchTTr";
   tags="Data, Analysis, Epoch, Training, ClusterRun";
   desc="performs various stats on epochs to train to criterion, across multiple batches, including an additional err threshold that can be different than the training stopping criterion, and also the minimum error value achieved across batches";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=Relation;
    el_def=0;
    Relation @[0] {name="rel": rel=EQUAL: val=0: val_string="": use_var=0: var=NULL: };
    DataTable @[1] {
     name="AllData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="avg_ext_rew";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="avg_cycles";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="epoch_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="epoch_time_usr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="avg_max_avg_m";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="avg_max_l_thr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="mean_Hid0_act_m";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="mean_Hid1_act_m";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="mean_Out_act_m";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="Hidden_0_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="Hidden_1_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="Output_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="Hidden_0_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="Hidden_1_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="Output_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="Hidden_0_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="Hidden_1_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="Output_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[25] {
       name="Hidden_Fm_Input_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[26] {
       name="Hidden_Fm_Hidden_1_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=25;
       matrix_col_width=10;
      };
      float_Data @[27] {
       name="Hidden_Fm_Hidden_0_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=25;
       matrix_col_width=10;
      };
      float_Data @[28] {
       name="Hidden_Fm_Output_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[29] {
       name="Output_Fm_Hidden_1_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=25;
       matrix_col_width=10;
      };
      String_Data @[30] {
       name="tag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[31] {
       name="tag_svn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[32] {
       name="tag_job";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[33] {
       name="notes";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[34] {
       name="label";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="ByBatchData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_354";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_356";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[3] {
     name="ByTagStats";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      String_Data @[1] {
       name="params_last_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_122";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="N";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_123";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_124";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_125";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_126";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_127";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="cnt_err_find_first_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="cnt_err_find_first_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="cnt_err_find_first_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=27;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="cnt_err_find_first_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="cnt_err_find_first_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="cnt_err_min_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="cnt_err_min_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="cnt_err_min_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="cnt_err_min_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ClusterRunData";
     var_type=T_Object;
     object_type=DataTable_Group;
     object_val=.data.gp[3]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="err_thresh";
     var_type=T_Int;
     int_val=5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="alternative error threshold to use";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="rel";
     var_type=T_Object;
     object_type=Relation;
     object_val=.programs[2].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="AllData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="ByBatchData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="ByTagStats";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[2].objs[3]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars4vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (4 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="dt";
       var_type=T_Object;
       object_type=DataTable;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="max_idx";
       var_type=T_Int;
       int_val=42;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="epoch_last_max";
       var_type=T_Real;
       real_val=499;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="find_first_max";
       var_type=T_Real;
       real_val=249;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_AllDataResetData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AllData->ResetData()";
     result_var=NULL;
     obj=.programs[2].vars[3]$$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    ForeachLoop @[2] {
     name="ForeachLoop_foreachdtinClusterRunData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="foreach(dt in ClusterRunData)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      If @[0] {
       name="If_ifAllDatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (AllData.rows == 0)";
       cond {
	expr="AllData.rows == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_AllDataCopyFromdt";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AllData->CopyFrom(dt)";
	 result_var=NULL;
	 obj=$.programs[2].vars[3]$;
	 method=taBase::CopyFrom;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taBase_ptr;
	   type="taBase*";
	   name="cpy_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	 };
	 meth_sig="bool CopyFrom(taBase* cpy_from)";
	 meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
	};
       };
      };
      Else @[1] {
       name="Else_If_ifAllDatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	DataProcCall @[0] {
	 name="DataProcCall_taDataProcCopyCo_olDataAllDatadt";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taDataProc::CopyCommonColData(AllData, dt)";
	 result_var=NULL;
	 object_type=taDataProc;
	 method=taDataProc::CopyCommonColData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dest";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="AllData";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="src";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	 };
	};
       };
      };
     };
     el_var=.programs[2].prog_code[0].local_vars[0]$$;
     in {
      expr="ClusterRunData";
     };
    };
    DataGroupProg @[3] {
     name="DataGroupProg_Groupfromsrctabl_ableByBatchData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = AllData dest table = ByBatchData";
     src_table=;
     dest_table=;
     src_data_var=$.programs[2].vars[3]$;
     dest_data_var=.programs[2].vars[4]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn";
	name="tag_svn_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="batch";
	name="batch_GROUP_1";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch";
	name="epoch_LAST_2";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="cnt_err";
	name="cnt_err_MIN_3";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="params";
	name="params_LAST_4";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberMethodCall @[4] {
     name="MemberMethodCall_ByBatchDatadatae_petaBaseVTFLOAT";
     desc="change type to float, to enable subsequent analysis operations";
     flags=CAN_REVERT_TO_CODE;
     code_string="ByBatchData.data.epoch_last.ChangeColType(taBase::VT_FLOAT)";
     obj=$.programs[2].vars[4]$;
     path="data.epoch_last";
     result_var=NULL;
     method=DataCol::ChangeColType;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="new_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
     };
     meth_sig="void ChangeColType(taBase::ValType new_type)";
     meth_desc=" change the type of the data in this col, without loss of data";
    };
    MathCall @[5] {
     name="MathCall_epochlastmaxtaMa_ochlastarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="epoch_last_max = taMath_float::vec_max(ByBatchData.data.epoch_last.ar, max_idx)";
     result_var=.programs[2].prog_code[0].local_vars[2]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="ByBatchData.data.epoch_last.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    MathCall @[6] {
     name="MathCall_findfirstmaxtaMa_ndfirstarmaxidx";
     desc=;
     flags=PROG_ERROR|CAN_REVERT_TO_CODE;
     code_string="find_first_max = taMath_float::vec_max(ByBatchData.data.cnt_err_find_first.ar, max_idx)";
     result_var=.programs[2].prog_code[0].local_vars[3]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="ByBatchData.data.cnt_err_find_first.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    DataGroupProg @[7] {
     name="DataGroupProg_Groupfromsrctabl_tableByTagStats";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = ByBatchData dest table = ByTagStats";
     src_table=;
     dest_table=;
     src_data_var=$.programs[2].vars[4]$;
     dest_data_var=.programs[2].vars[5]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn_group";
	name="tag_svn_group_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="params_last";
	name="params_last_LAST_1";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch_last";
	name="epoch_last_SEM_2";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_SEM_3";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=.programs[2].vars[1]$$: }: };
       };
       DataGroupEl @[4] {
	col_name="cnt_err_min";
	name="cnt_err_min_SEM_4";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberAssign @[8] {
     name="MemberAssign_ByTagStatsdataep_epochlastnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ByTagStats.data.epoch_last_count.name = \"epoch_last_n_at_max\"";
     obj=$.programs[2].vars[5]$;
     path="data.epoch_last_count.name";
     expr {
      expr="\"epoch_last_n_at_max\"";
     };
     update_after=0;
    };
    MemberAssign @[9] {
     name="MemberAssign_ByTagStatsdatacn_findfirstnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ByTagStats.data.cnt_err_find_first_count.name = \"cnt_err_find_first_n_at_max\"";
     obj=$.programs[2].vars[5]$;
     path="data.cnt_err_find_first_count.name";
     expr {
      expr="\"cnt_err_find_first_n_at_max\"";
     };
     update_after=0;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[3].doc$$: };
   };
   name="EpochsToTrain";
   short_nm="pchTTr";
   tags="Data, Analysis, Epoch, Training";
   desc="performs various stats on epochs to train to criterion, across multiple batches, including an additional err threshold that can be different than the training stopping criterion, and also the minimum error value achieved across batches";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=Relation;
    el_def=0;
    Relation @[0] {name="rel": rel=EQUAL: val=0: val_string="": use_var=0: var=NULL: };
    DataTable @[1] {
     name="EpcToTrain_Stats";
     desc="final stats for the epochs to train";
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="n";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="crit_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="crit_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="crit_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="crit_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="crit_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="crit_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="crit_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="n_failed";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="thr_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="thr_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="thr_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="thr_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="thr_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="thr_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="thr_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="n_at_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="min_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="min_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="min_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="min_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="min_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="min_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="min_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="EpcToTrain_Stats_copy";
     desc="final stats for the epochs to train";
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="n";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="crit_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="crit_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="crit_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="crit_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="crit_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="crit_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="crit_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="n_failed";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="thr_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="thr_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="thr_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="thr_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="thr_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="thr_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="thr_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="n_at_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="min_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="min_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="min_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="min_median";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="min_mode";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="min_stdev";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="min_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[3] {
     name="EpochData_Group";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_190";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_192";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="cnt_err_find_first";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[4] {
     name="EpochData_AvgTraj";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_191";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="avg_ext_rew";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="avg_cycles";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="epoch_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="epoch_time_usr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="err_thresh";
     var_type=T_Int;
     int_val=5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="alternative error threshold to use";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="print_stats";
     var_type=T_Bool;
     bool_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="generate printed output (on css console or to log file)";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="EpochData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[1][2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="EpochData_Group";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[3].objs[3]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="stats";
     var_type=T_String;
     string_val="n=10; min=0; max=0; mean=0; median=0; mode=0; stdev=0; sem=0;";
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="max_idx";
     var_type=T_Int;
     int_val=0;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="max_val";
     var_type=T_Real;
     real_val=29;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="n_at_max";
     var_type=T_Real;
     real_val=1;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="n_failed";
     var_type=T_Real;
     real_val=0;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="n_at_min";
     var_type=T_Real;
     real_val=10;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="min_val";
     var_type=T_Real;
     real_val=0;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="EpochData_AvgTraj";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[3].objs[4]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="rel";
     var_type=T_Object;
     object_type=Relation;
     object_val=.programs[3].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="EpcToTrain_Stats";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[3].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="EpcToTrain_Stats_copy";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[3].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="SaveStats";
     desc="save stats from given ar, to column with given previx";
     flags=CAN_REVERT_TO_CODE;
     code_string="SaveStats(float_Matrix* data_vec, String col_prefix) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="data_vec";
       var_type=T_Object;
       object_type=float_Matrix;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="col_prefix";
       var_type=T_String;
       string_val=;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars1vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (1 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="tmp_idx";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MethodCall @[1] {
       name="MethodCall_EpcToTrainStatsS_dxcolprefixmin1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_min(data_vec, tmp_idx), col_prefix + \"_min\", -1)";
       result_var=NULL;
       obj=.programs[3].vars[13]$$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_min(data_vec, tmp_idx)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix + \"_min\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[2] {
       name="MethodCall_EpcToTrainStatsS_dxcolprefixmax1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_max(data_vec, tmp_idx), col_prefix + \"_max\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_max(data_vec, tmp_idx)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix + \"_max\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[3] {
       name="MethodCall_EpcToTrainStatsS_ccolprefixmean1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_mean(data_vec), col_prefix+ \"_mean\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_mean(data_vec)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix+ \"_mean\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[4] {
       name="MethodCall_EpcToTrainStatsS_olprefixmedian1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_median(data_vec), col_prefix+ \"_median\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_median(data_vec)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix+ \"_median\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[5] {
       name="MethodCall_EpcToTrainStatsS_ccolprefixmode1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_mode(data_vec), col_prefix + \"_mode\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_mode(data_vec)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix + \"_mode\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[6] {
       name="MethodCall_EpcToTrainStatsS_colprefixstdev1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_std_dev(data_vec), col_prefix + \"_stdev\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_std_dev(data_vec)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix + \"_stdev\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
      MethodCall @[7] {
       name="MethodCall_EpcToTrainStatsS_eccolprefixsem1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="EpcToTrain_Stats->SetVal(taMath_float::vec_sem(data_vec), col_prefix+ \"_sem\", -1)";
       result_var=NULL;
       obj=$.programs[3].vars[13]$;
       method=DataTable::SetVal;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taMath_float::vec_sem(data_vec)";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="col_prefix+ \"_sem\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
       };
       meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
       meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    DataGroupProg @[0] {
     name="DataGroupProg_Groupfromsrctabl_pochDataAvgTraj";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = EpochData dest table = EpochData_AvgTraj";
     src_table=;
     dest_table=;
     src_data_var=.programs[3].vars[2]$$;
     dest_data_var=.programs[3].vars[11]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="epoch";
	name="epoch_GROUP_0";
	agg {name="AggregateSpec_48": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="avg_sse";
	name="avg_sse_MEAN_1";
	agg {name="AggregateSpec_49": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="cnt_err";
	name="cnt_err_MEAN_2";
	agg {name="AggregateSpec_50": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="avg_ext_rew";
	name="avg_ext_rew_MEAN_3";
	agg {name="AggregateSpec_51": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="avg_cycles";
	name="avg_cycles_MEAN_4";
	agg {name="AggregateSpec_52": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="epoch_time_tot";
	name="epoch_time_tot_MEAN_5";
	agg {name="AggregateSpec_53": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[6] {
	col_name="epoch_time_usr";
	name="epoch_time_usr_MEAN_6";
	agg {name="AggregateSpec_54": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
    DataGroupProg @[1] {
     name="DataGroupProg_Groupfromsrctabl_eEpochDataGroup";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = EpochData dest table = EpochData_Group";
     src_table=;
     dest_table=;
     src_data_var=$.programs[3].vars[2]$;
     dest_data_var=.programs[3].vars[3]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="batch";
	name="batch_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="epoch";
	name="epoch_LAST_1";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="cnt_err";
	name="cnt_err_FIND_FIRST_2";
	agg {name="agg": op=FIND_FIRST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=.programs[3].vars[0]$$: }: };
       };
       DataGroupEl @[3] {
	col_name="cnt_err";
	name="cnt_err_MIN_3";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberMethodCall @[2] {
     name="MemberMethodCall_EpochDataGroupda_petaBaseVTFLOAT";
     desc="change type to float, to enable subsequent analysis operations";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochData_Group.data.epoch_last.ChangeColType(taBase::VT_FLOAT)";
     obj=$.programs[3].vars[3]$;
     path="data.epoch_last";
     result_var=NULL;
     method=DataCol::ChangeColType;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="new_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
     };
     meth_sig="void ChangeColType(taBase::ValType new_type)";
     meth_desc=" change the type of the data in this col, without loss of data";
    };
    Comment @[3] {
     name="Comment_computenatmax";
     desc="= compute n_at_max =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = compute n_at_max =";
    };
    MathCall @[4] {
     name="MathCall_maxvaltaMathfloa_ochlastarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="max_val = taMath_float::vec_max(EpochData_Group.data.epoch_last.ar, max_idx)";
     result_var=.programs[3].vars[6]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.epoch_last.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    MemberAssign @[5] {
     name="MemberAssign_relrelRelationEQUAL";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rel.rel = Relation::EQUAL";
     obj=.programs[3].vars[12]$$;
     path="rel";
     expr {
      expr="Relation::EQUAL";
     };
     update_after=0;
    };
    MemberAssign @[6] {
     name="MemberAssign_relvalmaxval";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rel.val = max_val";
     obj=$.programs[3].vars[12]$;
     path="val";
     expr {
      expr="max_val";
     };
     update_after=0;
    };
    MathCall @[7] {
     name="MathCall_natmaxtaMathfloa_aepochlastARrel";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="n_at_max = taMath_float::vec_count(EpochData_Group.data.epoch_last.AR(), rel)";
     result_var=.programs[3].vars[7]$$;
     object_type=taMath_float;
     method=taMath_float::vec_count;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.epoch_last.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=Relation_ref;
       type="Relation&";
       name="rel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="rel";
       };
      };
     };
    };
    Comment @[8] {
     name="Comment_computenfailed";
     desc="= compute n_failed =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = compute n_failed =";
    };
    MemberAssign @[9] {
     name="MemberAssign_relval1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rel.val = -1";
     obj=$.programs[3].vars[12]$;
     path="val";
     expr {
      expr="-1";
     };
     update_after=0;
    };
    MathCall @[10] {
     name="MathCall_nfailedtaMathflo_rfindfirstARrel";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="n_failed = taMath_float::vec_count(EpochData_Group.data.cnt_err_find_first.AR(), rel)";
     result_var=.programs[3].vars[8]$$;
     object_type=taMath_float;
     method=taMath_float::vec_count;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.cnt_err_find_first.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=Relation_ref;
       type="Relation&";
       name="rel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="rel";
       };
      };
     };
    };
    Comment @[11] {
     name="Comment_computenatmin";
     desc="= compute n_at_min =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = compute n_at_min =";
    };
    MathCall @[12] {
     name="MathCall_minvaltaMathfloa_terrminarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="min_val = taMath_float::vec_min(EpochData_Group.data.cnt_err_min.ar, max_idx)";
     result_var=.programs[3].vars[10]$$;
     object_type=taMath_float;
     method=taMath_float::vec_min;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.cnt_err_min.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    MemberAssign @[13] {
     name="MemberAssign_relvalminval";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="rel.val = min_val";
     obj=$.programs[3].vars[12]$;
     path="val";
     expr {
      expr="min_val";
     };
     update_after=0;
    };
    MathCall @[14] {
     name="MathCall_natmintaMathfloa_acnterrminARrel";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="n_at_min = taMath_float::vec_count(EpochData_Group.data.cnt_err_min.AR(), rel)";
     result_var=.programs[3].vars[9]$$;
     object_type=taMath_float;
     method=taMath_float::vec_count;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.cnt_err_min.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=Relation_ref;
       type="Relation&";
       name="rel";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="rel";
       };
      };
     };
    };
    Comment @[15] {
     name="Comment_getstatstoEpcToTrainStats";
     desc="= get stats to EpcToTrain_Stats =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = get stats to EpcToTrain_Stats =";
    };
    MethodCall @[16] {
     name="MethodCall_EpcToTrainStatsEnforceRows1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="EpcToTrain_Stats->EnforceRows(1)";
     result_var=NULL;
     obj=$.programs[3].vars[13]$;
     method=DataTable::EnforceRows;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="n_rows";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="1";
       };
      };
     };
     meth_sig="void EnforceRows(int n_rows)";
     meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
    };
    MethodCall @[17] {
     name="MethodCall_EpcToTrainStatsS_DataGrouprowsn1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="EpcToTrain_Stats->SetVal(EpochData_Group.rows, \"n\", -1)";
     result_var=NULL;
     obj=$.programs[3].vars[13]$;
     method=DataTable::SetVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.rows";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"n\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
     meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
    };
    Comment @[18] {
     name="Comment_ToActualStoppingCriterioncrit";
     desc="= To Actual Stopping Criterion  (crit) =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = To Actual Stopping Criterion  (crit) =";
    };
    MethodCall @[19] {
     name="MethodCall_EpcToTrainStatsS_alnatmaxnatmax1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="EpcToTrain_Stats->SetVal(n_at_max, \"n_at_max\", -1)";
     result_var=NULL;
     obj=$.programs[3].vars[13]$;
     method=DataTable::SetVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_at_max";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"n_at_max\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
     meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
    };
    FunctionCall @[20] {
     name="FunctionCall_SaveStatsEpochDa_epochlastARcrit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="SaveStats(EpochData_Group.data.epoch_last.AR(), \"crit\")";
     result_var=NULL;
     fun=.programs[3].functions[0]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix;
       type="float_Matrix*";
       name="data_vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.epoch_last.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_prefix";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"crit\"";
       };
      };
     };
    };
    Comment @[21] {
     name="Comment_ToThresholdGivenHere";
     desc="= To Threshold Given Here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = To Threshold Given Here =";
    };
    MethodCall @[22] {
     name="MethodCall_EpcToTrainStatsS_nfailednfailed1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="EpcToTrain_Stats->SetVal(n_failed, \"n_failed\", -1)";
     result_var=NULL;
     obj=$.programs[3].vars[13]$;
     method=DataTable::SetVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_failed";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"n_failed\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
     meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
    };
    FunctionCall @[23] {
     name="FunctionCall_SaveStatsEpochDa_rfindfirstARthr";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="SaveStats(EpochData_Group.data.cnt_err_find_first.AR(), \"thr\")";
     result_var=NULL;
     fun=$.programs[3].functions[0]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix;
       type="float_Matrix*";
       name="data_vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.cnt_err_find_first.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_prefix";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"thr\"";
       };
      };
     };
    };
    Comment @[24] {
     name="Comment_MinErrs";
     desc="= Min Errs =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Min Errs =";
    };
    MethodCall @[25] {
     name="MethodCall_EpcToTrainStatsS_alnatminnatmin1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="EpcToTrain_Stats->SetVal(n_at_min, \"n_at_min\", -1)";
     result_var=NULL;
     obj=$.programs[3].vars[13]$;
     method=DataTable::SetVal;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="val";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_at_min";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="col";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"n_at_min\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
     meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
    };
    FunctionCall @[26] {
     name="FunctionCall_SaveStatsEpochDa_acnterrminARmin";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="SaveStats(EpochData_Group.data.cnt_err_min.AR(), \"min\")";
     result_var=NULL;
     fun=$.programs[3].functions[0]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix;
       type="float_Matrix*";
       name="data_vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="EpochData_Group.data.cnt_err_min.AR()";
       };
      };
      ProgArg @[1] {
       arg_type=taString;
       type="String";
       name="col_prefix";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"min\"";
       };
      };
     };
    };
    DoneWritingDataRow @[27] {
     name="DoneWritingDataRow_DoneWritingDataR_EpcToTrainStats";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DoneWritingDataRow:  table = EpcToTrain_Stats ";
     data_var=$.programs[3].vars[13]$;
    };
    If @[28] {
     name="If_ifprintstats";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (print_stats)";
     cond {
      expr="print_stats";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      PrintExpr @[0] {
       name="PrintExpr_PrintnEpochstocriterion";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"=====================\\n\" << \"Epochs to criterion:\"";
       expr {
	expr="\"=====================\\n\" << \"Epochs to criterion:\"";
       };
       debug=0;
      };
      MethodCall @[1] {
       name="MethodCall_statsEpochDataGr_lStatsepochlast";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="stats = EpochData_Group->ColStats(\"epoch_last\")";
       result_var=.programs[3].vars[4]$$;
       obj=$.programs[3].vars[3]$;
       method=DataTable::ColStats;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"epoch_last\"";
	 };
	};
       };
       meth_sig="taString ColStats(Variant& col)";
       meth_desc=" compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).-- column can be specified as either integer index or a string that is then used to find the given column name";
      };
      PrintVar @[2] {
       name="PrintVar_Printstats";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  stats";
       message=;
       print_var=$.programs[3].vars[4]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      PrintExpr @[3] {
       name="PrintExpr_PrintNatMaxnatmax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"N at Max: \" << n_at_max";
       expr {
	expr="\"N at Max: \" << n_at_max";
       };
       debug=0;
      };
      PrintExpr @[4] {
       name="PrintExpr_PrintnEpochstocn_thresherrthresh";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"=====================\\n\" << \"Epochs to cnt_err < err_thresh: \" << err_thresh";
       expr {
	expr="\"=====================\\n\" << \"Epochs to cnt_err < err_thresh: \" << err_thresh";
       };
       debug=0;
      };
      MethodCall @[5] {
       name="MethodCall_statsEpochDataGr_cnterrfindfirst";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="stats = EpochData_Group->ColStats(\"cnt_err_find_first\")";
       result_var=$.programs[3].vars[4]$;
       obj=$.programs[3].vars[3]$;
       method=DataTable::ColStats;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"cnt_err_find_first\"";
	 };
	};
       };
       meth_sig="taString ColStats(Variant& col)";
       meth_desc=" compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).-- column can be specified as either integer index or a string that is then used to find the given column name";
      };
      PrintVar @[6] {
       name="PrintVar_Printstats";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  stats";
       message=;
       print_var=$.programs[3].vars[4]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      PrintExpr @[7] {
       name="PrintExpr_PrintNFailednfailed";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"N Failed: \" << n_failed";
       expr {
	expr="\"N Failed: \" << n_failed";
       };
       debug=0;
      };
      PrintExpr @[8] {
       name="PrintExpr_PrintnMincnterrvalueperbatch";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"=====================\\n\" << \"Min cnt_err value per batch:\"";
       expr {
	expr="\"=====================\\n\" << \"Min cnt_err value per batch:\"";
       };
       debug=0;
      };
      MethodCall @[9] {
       name="MethodCall_statsEpochDataGr_lStatscnterrmin";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="stats = EpochData_Group->ColStats(\"cnt_err_min\")";
       result_var=$.programs[3].vars[4]$;
       obj=$.programs[3].vars[3]$;
       method=DataTable::ColStats;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"cnt_err_min\"";
	 };
	};
       };
       meth_sig="taString ColStats(Variant& col)";
       meth_desc=" compute standard descriptive statistics on given data table column, returning result as a string of name=value; pairs (e.g., mean=3.2; etc).-- column can be specified as either integer index or a string that is then used to find the given column name";
      };
      PrintVar @[10] {
       name="PrintVar_Printstats";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print  stats";
       message=;
       print_var=$.programs[3].vars[4]$;
       print_var2=NULL;
       print_var3=NULL;
       print_var4=NULL;
       print_var5=NULL;
       print_var6=NULL;
       debug=0;
      };
      PrintExpr @[11] {
       name="PrintExpr_PrintNatMinnatmin";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Print \"N at Min: \" << n_at_min";
       expr {
	expr="\"N at Min: \" << n_at_min";
       };
       debug=0;
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[4] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[4].doc$$: };
   };
   name="TrialAnalysis";
   short_nm="Trlnly";
   tags="Analysis, Statistic, Monitor, Errors, Trial";
   desc="Analyze trial-level data in multiple ways, integrating over arbitrary number of trials, and reporting which items are causing the most error -- can be extended to report many other kinds of statistics";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="AllTrialData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_133";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_134";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_135";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="trial";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      String_Data @[3] {
       name="trial_name";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[4] {
       name="group_name";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="rt_cycles";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="sse";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="norm_err";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="cos_diff";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="ext_rew";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="max_avg_m";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="mean_Hidden_0_act_m";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="mean_Hidden_1_act_m";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="mean_Output_act_m";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="Hidden_0_cos_diff";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="Hidden_1_cos_diff";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="Output_cos_diff";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[1] {
     name="TrialTypeErrors";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      String_Data @[0] {
       name="trial_name_group";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="sse_mean";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="sse_count";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="DataSortSpec_63";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
       DataSortEl @[0] {
	col_name="sse_count";
	name="sse_count_dn_0";
	order=DESCENDING;
       };
       DataSortEl @[1] {
	col_name="trial_name_group";
	name="trial_name_group_up_1";
	order=ASCENDING;
       };
       DataSortEl @[2] {
	col_name="sse_count";
	name="sse_count_up_2";
	order=ASCENDING;
       };
       DataSortEl @[3] {
	col_name="sse_count";
	name="sse_count_up_3";
	order=ASCENDING;
       };
       DataSortEl @[4] {
	col_name="sse_count";
	name="sse_count_up_4";
	order=ASCENDING;
       };
       DataSortEl @[5] {
	col_name="sse_count";
	name="sse_count_up_5";
	order=ASCENDING;
       };
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="TopNErrors";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      String_Data @[0] {
       name="trial_name_group";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="sse_mean";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="sse_count";
       col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="rank";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=0;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="DataSortSpec_63";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
       DataSortEl @[0] {
	col_name="sse_count";
	name="sse_count_dn_0";
	order=DESCENDING;
       };
       DataSortEl @[1] {
	col_name="trial_name_group";
	name="trial_name_group_up_1";
	order=ASCENDING;
       };
       DataSortEl @[2] {
	col_name="sse_count";
	name="sse_count_up_2";
	order=ASCENDING;
       };
       DataSortEl @[3] {
	col_name="sse_count";
	name="sse_count_up_3";
	order=ASCENDING;
       };
       DataSortEl @[4] {
	col_name="sse_count";
	name="sse_count_up_4";
	order=ASCENDING;
       };
       DataSortEl @[5] {
	col_name="sse_count";
	name="sse_count_up_5";
	order=ASCENDING;
       };
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[3] {
     name="TopNErrorsLog";
     desc="log of top n error trials over epochs";
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_390";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_391";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      String_Data @[2] {
       name="trl_err_nm_0";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="trl_err_val_0";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      String_Data @[4] {
       name="trl_err_nm_1";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="trl_err_val_1";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      String_Data @[6] {
       name="trl_err_nm_2";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="trl_err_val_2";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      String_Data @[8] {
       name="trl_err_nm_3";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="trl_err_val_3";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      String_Data @[10] {
       name="trl_err_nm_4";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="trl_err_val_4";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="all_trial_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[4].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="trial_type_errors";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[4].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="top_nerrors";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[4].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="top_nerrors_log";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[4].objs[3]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="trial_output_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[1][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="this is the trial output data to analyze";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="interactive_run";
     var_type=T_Bool;
     bool_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="click this to true if you want to run this program interactively on already-collected data to test out new analyses, etc";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="do_analysis";
     var_type=T_Bool;
     bool_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="whether to run analysis or not -- sometimes you just want to collect the data.. (especially when changing the analysis stream)";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="n_trials";
     var_type=T_Int;
     int_val=100;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="number of trials of data to analyze -- aggregates this amount over epochs as needed -- if trial data has more than this, all of trial data is used (no point in throwing data away!)";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="top_n_trials";
     var_type=T_Int;
     int_val=5;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="number of trial types to aggregate into the top analysis";
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="GetNewData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GetNewData() returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars2vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (2 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="trl_rows";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="old_rows";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      AssignExpr @[1] {
       name="AssignExpr_trlrowstrialoutputdatarows";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="trl_rows = trial_output_data.rows";
       result_var=.programs[4].functions[0].fun_code[0].local_vars[0]$$;
       expr {
	expr="trial_output_data.rows";
       };
      };
      If @[2] {
       name="If_iftrlrowsntrials_ltrialdatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (trl_rows > n_trials || all_trial_data.rows == 0)";
       cond {
	expr="trl_rows > n_trials || all_trial_data.rows == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_alltrialdataCopy_trialoutputdata";
	 desc="just get it all";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="all_trial_data->CopyFrom(trial_output_data)";
	 result_var=NULL;
	 obj=.programs[4].objs_vars[0]$$;
	 method=taBase::CopyFrom;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taBase_ptr;
	   type="taBase*";
	   name="cpy_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="trial_output_data";
	   };
	  };
	 };
	 meth_sig="bool CopyFrom(taBase* cpy_from)";
	 meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
	};
	MethodCall @[1] {
	 name="MethodCall_alltrialdataClea_taTableSAVEROWS";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="all_trial_data->ClearDataFlag(DataTable::SAVE_ROWS)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[0]$;
	 method=DataTable::ClearDataFlag;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable::DataFlags;
	   type="DataTable::DataFlags";
	   name="flg";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="DataTable::SAVE_ROWS";
	   };
	  };
	 };
	 meth_sig="void ClearDataFlag(DataTable::DataFlags flg)";
	 meth_desc=" clear data table flag state (set off)";
	};
       };
      };
      Else @[3] {
       name="Else_If_iftrlrowsntrials_ltrialdatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_oldrowsntrialstrlrows";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="old_rows = n_trials - trl_rows";
	 result_var=.programs[4].functions[0].fun_code[0].local_vars[1]$$;
	 expr {
	  expr="n_trials - trl_rows";
	 };
	};
	If @[1] {
	 name="If_ifalltrialdatarowsoldrows";
	 desc="make room for new data";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (all_trial_data.rows > old_rows)";
	 cond {
	  expr="all_trial_data.rows > old_rows";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_alltrialdataRemo_datarowsoldrows";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="all_trial_data->RemoveRows(0, all_trial_data.rows - old_rows)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[0]$;
	   method=DataTable::RemoveRows;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="st_row";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="0";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="n_rows";
	     required=0;
	     def_val="1";
	     prev_expr=;
	     expr {
	      expr="all_trial_data.rows - old_rows";
	     };
	    };
	   };
	   meth_sig="bool RemoveRows(int st_row, int n_rows = 1)";
	   meth_desc=" Remove n rows of data, starting at st_row. st_row = -1 means last row, and n_rows = -1 means remove from starting row to end, n_rows = -2 means remove upto and including the next to last row, etc.";
	  };
	 };
	};
	MethodCall @[2] {
	 name="MethodCall_alltrialdataAppe_trialoutputdata";
	 desc="get the new data";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="all_trial_data->AppendRows(trial_output_data)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[0]$;
	 method=DataTable::AppendRows;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="append_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="trial_output_data";
	   };
	  };
	 };
	 meth_sig="bool AppendRows(DataTable* append_from)";
	 meth_desc=" append rows from another data table -- this is also available in taDataProc and in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
	};
       };
      };
     };
    };
    Function @[1] {
     name="AnalyzeTrialTypes";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AnalyzeTrialTypes() returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars1vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (1 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="extra_rows";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      DataGroupProg @[1] {
       name="DataGroupProg_Groupfromsrctabl_trialtypeerrors";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Group from:  src table = all_trial_data dest table = trial_type_errors";
       src_table=;
       dest_table=;
       src_data_var=$.programs[4].objs_vars[0]$;
       dest_data_var=.programs[4].objs_vars[1]$$;
       group_spec {
	name="group_spec";
	ops {
	 name="ops";
	 el_typ=DataGroupEl;
	 el_def=0;
	 DataGroupEl @[0] {
	  col_name="trial_name";
	  name="trial_name_GROUP_0";
	  agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 };
	 DataGroupEl @[1] {
	  col_name="sse";
	  name="sse_MEAN_1";
	  agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	 };
	 DataGroupEl @[2] {
	  col_name="sse";
	  name="sse_COUNT_2";
	  agg {name="agg": op=COUNT: rel={name="rel": rel=GREATERTHAN: val=0: val_string="": use_var=0: var=NULL: }: };
	 };
	};
	append_agg_name=1;
       };
      };
      MethodCall @[2] {
       name="MethodCall_trialtypeerrorsS_alnamegrouptrue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="trial_type_errors->Sort(\"sse_count\", false, \"trial_name_group\", true, , , , , , , , )";
       result_var=NULL;
       obj=$.programs[4].objs_vars[1]$;
       method=DataTable::Sort;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col1";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"sse_count\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="ascending1";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[2] {
	 arg_type=Variant;
	 type="Variant";
	 name="col2";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr="\"trial_name_group\"";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="ascending2";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[4] {
	 arg_type=Variant;
	 type="Variant";
	 name="col3";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[5] {
	 arg_type=bool;
	 type="bool";
	 name="ascending3";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[6] {
	 arg_type=Variant;
	 type="Variant";
	 name="col4";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[7] {
	 arg_type=bool;
	 type="bool";
	 name="ascending4";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[8] {
	 arg_type=Variant;
	 type="Variant";
	 name="col5";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[9] {
	 arg_type=bool;
	 type="bool";
	 name="ascending5";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[10] {
	 arg_type=Variant;
	 type="Variant";
	 name="col6";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[11] {
	 arg_type=bool;
	 type="bool";
	 name="ascending6";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="void Sort(Variant& col1, bool ascending1 = true, Variant col2 = -1, bool ascending2 = true, Variant col3 = -1, bool ascending3 = true, Variant col4 = -1, bool ascending4 = true, Variant col5 = -1, bool ascending5 = true, Variant col6 = -1, bool ascending6 = true)";
       meth_desc=" sort table according to selected columns of data. Note: you can instantly recover the original full set of rows, unsorted and unfiltered, by using ShowAllRows on the DataTable -- see that function for more details -- to be be able to undo just this sort you would need to run Flatten first";
      };
      MethodCall @[3] {
       name="MethodCall_topnerrorsCopyFr_trialtypeerrors";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors->CopyFrom(trial_type_errors)";
       result_var=NULL;
       obj=.programs[4].objs_vars[2]$$;
       method=taBase::CopyFrom;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taBase_ptr;
	 type="taBase*";
	 name="cpy_from";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="trial_type_errors";
	 };
	};
       };
       meth_sig="bool CopyFrom(taBase* cpy_from)";
       meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
      };
      If @[4] {
       name="If_iftopnerrorsrowstopntrials";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (top_nerrors.rows > top_n_trials)";
       cond {
	expr="top_nerrors.rows > top_n_trials";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_extrarowstopnerr_srowstopntrials";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="extra_rows = top_nerrors.rows - top_n_trials";
	 result_var=.programs[4].functions[1].fun_code[0].local_vars[0]$$;
	 expr {
	  expr="top_nerrors.rows - top_n_trials";
	 };
	};
	MethodCall @[1] {
	 name="MethodCall_topnerrorsRemove_rarowsextrarows";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors->RemoveRows(top_nerrors.rows - extra_rows, extra_rows)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[2]$;
	 method=DataTable::RemoveRows;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=int;
	   type="int";
	   name="st_row";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="top_nerrors.rows - extra_rows";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="n_rows";
	   required=0;
	   def_val="1";
	   prev_expr=;
	   expr {
	    expr="extra_rows";
	   };
	  };
	 };
	 meth_sig="bool RemoveRows(int st_row, int n_rows = 1)";
	 meth_desc=" Remove n rows of data, starting at st_row. st_row = -1 means last row, and n_rows = -1 means remove from starting row to end, n_rows = -2 means remove upto and including the next to last row, etc.";
	};
       };
      };
      MethodCall @[5] {
       name="MethodCall_topnerrorsNewColIntrank";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors->NewColInt(\"rank\")";
       result_var=NULL;
       obj=$.programs[4].objs_vars[2]$;
       method=DataTable::NewColInt;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"rank\"";
	 };
	};
       };
       meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
       meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
      };
      MethodCall @[6] {
       name="MethodCall_topnerrorsInitValsToRowNorank";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors->InitValsToRowNo(\"rank\", , )";
       result_var=NULL;
       obj=$.programs[4].objs_vars[2]$;
       method=DataTable::InitValsToRowNo;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr="\"rank\"";
	 expr {
	  expr="\"rank\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool InitValsToRowNo(Variant& col, int st_row = 0, int n_rows = -1)";
       meth_desc=" initialize all values in given column to be equal to the row number -- column can be specified as either integer index or a string that is then used to find the given column name -- for rows as specified by starting row, and n_rows = -1 means to the end";
      };
      FunctionCall @[7] {
       name="FunctionCall_LogTopNErrorsfalse";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LogTopNErrors(false)";
       result_var=NULL;
       fun=.programs[4].functions[2]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="init_only";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
      };
     };
    };
    Function @[2] {
     name="LogTopNErrors";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LogTopNErrors(bool init_only) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="init_only";
       var_type=T_Bool;
       bool_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars3vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (3 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="i";
	 var_type=T_Int;
	 int_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="trnm";
	 var_type=T_String;
	 string_val=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="errnm";
	 var_type=T_String;
	 string_val=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      If @[1] {
       name="If_ifinitonly";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (init_only)";
       cond {
	expr="init_only";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_topnerrorslogResetData";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->ResetData()";
	 result_var=NULL;
	 obj=.programs[4].objs_vars[3]$$;
	 method=DataTable::ResetData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="void ResetData()";
	 meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
	};
       };
      };
      MethodCall @[2] {
       name="MethodCall_topnerrorslogFin_atchtaBaseVTINT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors_log->FindMakeCol(\"batch\", taBase::VT_INT)";
       result_var=NULL;
       obj=$.programs[4].objs_vars[3]$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"batch\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_INT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      MethodCall @[3] {
       name="MethodCall_topnerrorslogFin_pochtaBaseVTINT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors_log->FindMakeCol(\"epoch\", taBase::VT_INT)";
       result_var=NULL;
       obj=$.programs[4].objs_vars[3]$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"epoch\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_INT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      If @[4] {
       name="If_ifinitonly_1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (!init_only)";
       cond {
	expr="!init_only";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_topnerrorslogAddBlankRow";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->AddBlankRow()";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[3]$;
	 method=DataTable::AddBlankRow;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	 };
	 meth_sig="int AddBlankRow()";
	 meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
	};
	MethodCall @[1] {
	 name="MethodCall_topnerrorslogSet_Valbatch1batch1";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->SetVal(all_trial_data.GetVal(\"batch\", -1), \"batch\", -1)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[3]$;
	 method=DataTable::SetVal;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="val";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="all_trial_data.GetVal(\"batch\", -1)";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="col";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"batch\"";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=int;
	   type="int";
	   name="row";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="-1";
	   };
	  };
	 };
	 meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
	 meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
	};
	MethodCall @[2] {
	 name="MethodCall_topnerrorslogSet_Valepoch1epoch1";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->SetVal(all_trial_data.GetVal(\"epoch\", -1), \"epoch\", -1)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[3]$;
	 method=DataTable::SetVal;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="val";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="all_trial_data.GetVal(\"epoch\", -1)";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="col";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"epoch\"";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=int;
	   type="int";
	   name="row";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="-1";
	   };
	  };
	 };
	 meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
	 meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
	};
       };
      };
      ForLoop @[5] {
       name="ForLoop_fori0itopntrialsi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="for (i=0; i<top_n_trials; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_trnmtrlerrnmi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="trnm = \"trl_err_nm_\" + i";
	 result_var=.programs[4].functions[2].fun_code[0].local_vars[1]$$;
	 expr {
	  expr="\"trl_err_nm_\" + i";
	 };
	};
	AssignExpr @[1] {
	 name="AssignExpr_errnmtrlerrvali";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="errnm = \"trl_err_val_\" + i";
	 result_var=.programs[4].functions[2].fun_code[0].local_vars[2]$$;
	 expr {
	  expr="\"trl_err_val_\" + i";
	 };
	};
	MethodCall @[2] {
	 name="MethodCall_topnerrorslogFin_mtaBaseVTSTRING";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->FindMakeCol(trnm, taBase::VT_STRING)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[3]$;
	 method=DataTable::FindMakeCol;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="col_nm";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="trnm";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=taBase::ValType;
	   type="taBase::ValType";
	   name="val_type";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="taBase::VT_STRING";
	   };
	  };
	 };
	 meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
	 meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
	};
	MethodCall @[3] {
	 name="MethodCall_topnerrorslogFin_nmtaBaseVTFLOAT";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="top_nerrors_log->FindMakeCol(errnm, taBase::VT_FLOAT)";
	 result_var=NULL;
	 obj=$.programs[4].objs_vars[3]$;
	 method=DataTable::FindMakeCol;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="col_nm";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="errnm";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=taBase::ValType;
	   type="taBase::ValType";
	   name="val_type";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="taBase::VT_FLOAT";
	   };
	  };
	 };
	 meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
	 meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
	};
	If @[4] {
	 name="If_ifinitonly";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (!init_only)";
	 cond {
	  expr="!init_only";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_topnerrorslogSet_namegroupitrnm1";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="top_nerrors_log->SetVal(top_nerrors.GetVal(\"trial_name_group\", i), trnm, -1)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[3]$;
	   method=DataTable::SetVal;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=const_Variant_ref;
	     type="Variant&";
	     name="val";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="top_nerrors.GetVal(\"trial_name_group\", i)";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=const_Variant_ref;
	     type="Variant&";
	     name="col";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="trnm";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="row";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="-1";
	     };
	    };
	   };
	   meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
	   meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
	  };
	  MethodCall @[1] {
	   name="MethodCall_topnerrorslogSet_lssemeanierrnm1";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="top_nerrors_log->SetVal(top_nerrors.GetVal(\"sse_mean\", i), errnm, -1)";
	   result_var=NULL;
	   obj=$.programs[4].objs_vars[3]$;
	   method=DataTable::SetVal;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=const_Variant_ref;
	     type="Variant&";
	     name="val";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="top_nerrors.GetVal(\"sse_mean\", i)";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=const_Variant_ref;
	     type="Variant&";
	     name="col";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="errnm";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="row";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="-1";
	     };
	    };
	   };
	   meth_sig="bool SetVal(Variant& val, Variant& col, int row)";
	   meth_desc=" set data in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name; returns 'true' if valid access and set is successful -- works for both matrix and scalar columns (sets all values of matrix to same value)";
	  };
	 };
	};
       };
       init {
	expr="i=0";
       };
       test {
	expr="i<top_n_trials";
       };
       iter {
	expr="i++";
       };
      };
      MethodCall @[6] {
       name="MethodCall_topnerrorslogWriteClose";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="top_nerrors_log->WriteClose()";
       result_var=NULL;
       obj=$.programs[4].objs_vars[3]$;
       method=DataTable::WriteClose;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void WriteClose()";
       meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_ifinteractiverun";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (!interactive_run)";
     cond {
      expr="!interactive_run";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_alltrialdataResetData";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="all_trial_data->ResetData()";
       result_var=NULL;
       obj=$.programs[4].objs_vars[0]$;
       method=DataTable::ResetData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void ResetData()";
       meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_alltrialdataClea_taTableSAVEROWS";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="all_trial_data->ClearDataFlag(DataTable::SAVE_ROWS)";
     result_var=NULL;
     obj=$.programs[4].objs_vars[0]$;
     method=DataTable::ClearDataFlag;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable::DataFlags;
       type="DataTable::DataFlags";
       name="flg";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="DataTable::SAVE_ROWS";
       };
      };
     };
     meth_sig="void ClearDataFlag(DataTable::DataFlags flg)";
     meth_desc=" clear data table flag state (set off)";
    };
    FunctionCall @[2] {
     name="FunctionCall_LogTopNErrorstrue";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LogTopNErrors(true)";
     result_var=NULL;
     fun=$.programs[4].functions[2]$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="init_only";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (0 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    If @[1] {
     name="If_ifinteractiverun";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (!interactive_run)";
     cond {
      expr="!interactive_run";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       name="FunctionCall_GetNewData";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="GetNewData()";
       result_var=NULL;
       fun=.programs[4].functions[0]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
       };
      };
     };
    };
    If @[2] {
     name="If_ifdoanalysis";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="if (do_analysis)";
     cond {
      expr="do_analysis";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      FunctionCall @[0] {
       name="FunctionCall_AnalyzeTrialTypes";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="AnalyzeTrialTypes()";
       result_var=NULL;
       fun=.programs[4].functions[1]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="init_batch";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="initialize batch counter at start of run -- turn off if using \"parallel batch\" mode to run different batches on different processes";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.programs.gp[0][0].args[0]$$;
      local_ctr_var=.programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_ifinitbatch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (init_batch)";
      cond {
       expr="init_batch";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       NetCounterInit @[0] {
	name="NetCounterInit_NetCounterInitbatch";
	desc="initializes local batch counter and batch field on network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Init: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
     };
     Else @[1] {
      name="Else_If_ifinitbatch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MemberAssign @[0] {
	name="MemberAssign_networkbatchbatch";
	desc="just set directly to current batch value";
	flags=CAN_REVERT_TO_CODE;
	code_string="network.batch = batch";
	obj=$.programs.gp[0][0].args[0]$;
	path="batch";
	expr {
	 expr="batch";
	};
	update_after=0;
       };
      };
     };
     WhileLoop @[2] {
      name="WhileLoop_whilebatchmaxbatch";
      desc="the main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (batch < max_batch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetworkinputdatatrue";
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=$.programs.gp[0][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name="UserDataItem_List_260";
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
     UserData_DocLink @[1] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @[0] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	rnd_seed=1593485530;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	rnd_seed=1593485531;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	rnd_seed=1593485532;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	rnd_seed=1593485533;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	rnd_seed=1593485534;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	rnd_seed=1593485535;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	rnd_seed=1593485536;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	rnd_seed=1593485537;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	rnd_seed=1593485538;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	rnd_seed=1593485539;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	rnd_seed=1593485540;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	rnd_seed=1593485541;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	rnd_seed=1593485542;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	rnd_seed=1593485543;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	rnd_seed=1593485544;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	rnd_seed=1593485545;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	rnd_seed=1593485546;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	rnd_seed=1593485547;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	rnd_seed=1593485548;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	rnd_seed=1593485549;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	rnd_seed=1593485550;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	rnd_seed=1593485551;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	rnd_seed=1593485552;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	rnd_seed=1593485553;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	rnd_seed=1593485554;
       };
      };
     };
     RndSeed @[1] {
      name="rnd_seed";
      rnd_seed=3987666413;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.programs.gp[0][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.programs.gp[0][1].objs[1]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @[2] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=500;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=50;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][1].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=2;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @[9] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="GetRandomSeed";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	name="Switch_switchrndinit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.programs.gp[0][1].vars[3]$$;
	cases {
	 name="cases";
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  name="CaseBlock_caseOLDSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedOldSeed";
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.programs.gp[0][1].objs_vars[1]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  name="CaseBlock_caseNEWSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedNewSeed";
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.programs.gp[0][1].objs_vars[1]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  name="CaseBlock_caseBATCHSEEDS";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedsUseSeedn_dseedsseedssize";
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.programs.gp[0][1].objs_vars[0]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.programs.gp[0][1].vars[9]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.programs.gp[0][1].vars[8]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.programs.gp[0][1].functions[0]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      name="WtInitPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[0][1].vars[9]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_traintimerStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[9]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.programs.gp[0][1].vars[8]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.programs.gp[0][1].functions[0]$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      name="If_ifnoprompts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.programs.gp[0][1].vars[1]$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      name="WhileLoop_whileepochmaxepoch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][2]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[0][1].args[0]$;
	local_ctr_var=$.programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	name="If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  name="VarIncr_nundercnt1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  name="IfBreak_ifnundercntnunderthrbreak";
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	name="Else_If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_nundercnt0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	name="If_ifsavewtsinterval1";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  name="If_ifepochsavewtsinterval0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    name="ProgramCall_SaveWeightsnetwork";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=$.programs.gp[0][10]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
       If @[5] {
	name="If_ifepoch30";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (epoch == 30)";
	cond {
	 expr="epoch == 30";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 CssExpr @[0] {
	  name="CssExpr_networkbabelfish";
	  desc=;
	  flags=OFF|CAN_REVERT_TO_CODE;
	  code_string="network.babelfish();";
	  expr {
	   expr="network.babelfish();";
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      name="If_ifsavefinalwts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       expr="save_final_wts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_SaveWeightsnetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][10]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      name="MethodCall_traintimerEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[9]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.programs.gp[0][3]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=24;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=25;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][2].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][2].args[0]$;
      local_ctr_var=$.programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][2].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[4] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][3]$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifsteponerrnetworksse00";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  name="StopStepPoint_StopStepPoint";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[0][2].args[1]$$;
      index_var=.programs.gp[0][2].vars[5]$$;
      order_var=.programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[5] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[6] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[7] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][9]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     ProgramCall @[9] {
      name="ProgramCall_TrialAnalysis";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TrialAnalysis()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
      };
      target=.programs[4]$$;
      targ_ld_init="*TrialAnalysis*";
     };
    };
    step_prog=$.programs.gp[0][2]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][3].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     ForLoop @[3] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][4]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[4] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[5] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[6] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=.programs.gp[0][5]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=100;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][4].args[0]$$;
      local_ctr_var=.programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=$.programs.gp[0][4].args[0]$;
      local_ctr_var=$.programs.gp[0][4].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsnetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][4].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][5]$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][4].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][4].args[0]$;
      update_var=.programs.gp[0][4].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="cycle_mon";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="run the cycle monitor";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][5].args[0]$;
      update_var=$.programs.gp[0][5].vars[0]$;
     };
     If @[2] {
      name="If_ifcyclemon";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (cycle_mon)";
      cond {
       expr="cycle_mon";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleMonitornetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleMonitor(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][8]$$;
	targ_ld_init="*LeabraCycleMonitor*";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.data.gp[0][0]$;
      network=$.networks[0]$;
      layer_data {
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	off=0;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	off=0;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	off=0;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0SetD_nputdatanetwork";
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].objs_vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      name="MethodCall_layerwriter0CheckConfigfalse";
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_layerwriter0ApplyInputData";
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="layer_writer_0->ApplyInputData()";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_diff";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="max_avg_m";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers[2]$$;
	variable="avg_m";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="mean_Hidden_0_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers[1]$$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="mean_Hidden_1_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="mean_Output_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers[3]$$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="Hidden_0_cos_diff";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="cos_diff";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="Hidden_1_cos_diff";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="cos_diff";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="Output_cos_diff";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[3]$;
	variable="cos_diff";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][7].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][8].doc$$: };
    };
    name="LeabraCycleMonitor";
    short_nm="CycMnt";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="cycle_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="quarter";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="ct_cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="max_avg_m";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="avg_m";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="Hidden_0_ungp_1_i_val_g_i";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="ungp[-1].i_val.g_i";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="Hidden_1_ungp_1_i_val_g_i";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="ungp[-1].i_val.g_i";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="Output_ungp_1_i_val_g_i";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[3]$;
	variable="ungp[-1].i_val.g_i";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="Hidden_0_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="Hidden_1_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="Output_acts_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[3]$;
	variable="acts.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="Hidden_0_netin_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="netin.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="Hidden_1_netin_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="netin.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="Output_netin_avg";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[3]$;
	variable="netin.avg";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][8].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_cyclenetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][8].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_cyclenetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_cyclenetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_cyclenetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][8].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][8].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][8].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[9] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][9].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[29] {
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[30] {
	name="mean_Hidden_0_prjns_r_wt";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="prjns.r.wt";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[31] {
	name="mean_Hidden_0_prjns_r_dwt";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="prjns.r.dwt";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[32] {
	name="mean_Hidden_1_prjns_r_dwt";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[2]$;
	variable="prjns.r.dwt";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=ABS: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][9].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][2]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][9].vars[1]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][9].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][9].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][9].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][9].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][9].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][9].vars[1]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][9].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][9].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][9].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      name="Comment_NOTEifdoingaTest_atablecorrectly";
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=$.programs.gp[0][9]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[10] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][10].doc$$: };
    };
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (taMisc::dmem_proc > 0)";
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="return ";
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.programs.gp[0][10].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.programs.gp[0][10].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.programs.gp[0][10].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.programs.gp[0][10].vars[2]$$;
      obj=.programs.gp[0][10].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.programs.gp[0][10].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_128";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0.02178218: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.07723815: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=0.9940594: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7992978: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAACHgAAA7oAAAXeAQAAAAcBAAAAAQE=: val_type_fixed=0: };
   };
   name="DefaultProjectBrowser";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"leabra_ra25_kna\"] - leabra_ra25_kna.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_129";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_130";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="DefaultViewer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="MultiHiddenNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="MultiHiddenNet_View";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.6753985: y=0.6753985: z=0.6753985: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=0.6753985: y=0.6753985: z=0.6753985: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  new_net_text=1;
	  show_iconified=0;
	  net_text_xform {scale={x=0.5: y=0.5000001: z=0.5000001: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=0.1795435: y=0.8410341: z=-0.9999997: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  cur_net_state_vals{ trial_name;cycle;epoch;batch;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;	  };
	  unit_src_path=".layers[3][0]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=7: y=7: z=3.25: };
	  max_size2d {x=7: y=29: z=1: };
	  eff_max_size {x=7: y=7: z=3.25: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.02: un_nm_len=3: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="bias_wt";
	    auto_scale=0;
	    min=-0.1503;
	    max=0.1503;
	   };
	   ScaleRange @[4] {
	    var_name="bias.wt";
	    auto_scale=1;
	    min=-0.6118014;
	    max=0.6118014;
	   };
	   ScaleRange @[5] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_m";
	    auto_scale=1;
	    min=-0.95;
	    max=0.95;
	   };
	   ScaleRange @[8] {
	    var_name="act_m2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    var_name="r.sravg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    var_name="trl_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    var_name="trl_sum";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    var_name="avg_trl_avg";
	    auto_scale=1;
	    min=-0.7507502;
	    max=0.7507502;
	   };
	   ScaleRange @[14] {
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[15] {
	    var_name="act_dif";
	    auto_scale=0;
	    min=-0.2630787;
	    max=0.2630787;
	   };
	   ScaleRange @[16] {
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[17] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[18] {
	    var_name="spk_amp";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[19] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[20] {
	    var_name="xcal_thr";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[21] {
	    var_name="r.sravg_l";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[22] {
	    var_name="r.sravg_m";
	    auto_scale=1;
	    min=-0.007136645;
	    max=0.007136645;
	   };
	   ScaleRange @[23] {
	    var_name="r.sravg_s";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[24] {
	    var_name="sravg_l";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[25] {
	    var_name="bias.sravg_m";
	    auto_scale=1;
	    min=-38.00002;
	    max=38.00002;
	   };
	   ScaleRange @[26] {
	    var_name="ravg_l";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[27] {
	    var_name="bias.sravg_s";
	    auto_scale=1;
	    min=-1.9;
	    max=1.9;
	   };
	   ScaleRange @[28] {
	    var_name="r.wt_lin";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[29] {
	    var_name="avg_s";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[30] {
	    var_name="avg_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[31] {
	    var_name="avg_ml";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[32] {
	    var_name="avg_l";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[33] {
	    var_name="l_thr";
	    auto_scale=0;
	    min=-2.590254;
	    max=2.590254;
	   };
	   ScaleRange @[34] {
	    var_name="gc.i";
	    auto_scale=0;
	    min=0;
	    max=0;
	   };
	   ScaleRange @[35] {
	    var_name="gc.l";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[36] {
	    var_name="avg_l_nrm";
	    auto_scale=0;
	    min=-1.523333;
	    max=1.523333;
	   };
	   ScaleRange @[37] {
	    var_name="spike";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[38] {
	    var_name="r.fwt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[39] {
	    var_name="r.swt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[40] {
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[41] {
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[42] {
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[43] {
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[44] {
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[45] {
	    var_name="r.dwt";
	    auto_scale=1;
	    min=-0.04;
	    max=0.04;
	   };
	   ScaleRange @[46] {
	    var_name="s.dwt";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[47] {
	    var_name="r.dwnorm";
	    auto_scale=1;
	    min=-0.08574852;
	    max=0.08574852;
	   };
	  };
	  lay_disp_modes{ Input=;Hidden_0=0;Hidden_1=0;Output=;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.3376992: y=1.031234: z=1.006703: };
	 orient {x=-0.9999999: y=0: z=0: rot=0.4639995: };
	 focal_dist=1.507237;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0";
	  m_data=$.data.gp[1][2]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][2].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][2].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=79: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.data.gp[1][2].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=6.26396: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.data.gp[1][2].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=25: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="pct_cor";
	    m_data=.data.gp[1][2].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.64: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="pct_err";
	    m_data=.data.gp[1][2].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="avg_norm_err";
	    m_data=.data.gp[1][2].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.81: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="avg_cos_err";
	    m_data=.data.gp[1][2].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.358009: fix_max=0: max=0.909355: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="avg_ext_rew";
	    m_data=.data.gp[1][2].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="avg_cycles";
	    m_data=.data.gp[1][2].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="epoch_time_tot";
	    m_data=.data.gp[1][2].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="epoch_time_usr";
	    m_data=.data.gp[1][2].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Output_lay_avg_sse";
	    m_data=.data.gp[1][2].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_lay_cnt_err";
	    m_data=.data.gp[1][2].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Output_lay_pct_cor";
	    m_data=.data.gp[1][2].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Output_lay_pct_err";
	    m_data=.data.gp[1][2].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_lay_avg_norm_err";
	    m_data=.data.gp[1][2].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Output_lay_avg_cos_err";
	    m_data=.data.gp[1][2].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="net_avg_cos_diff";
	    m_data=.data.gp[1][2].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="net_avg_trial_cos_diff";
	    m_data=.data.gp[1][2].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    name="net_avg_avg_act_diff";
	    m_data=.data.gp[1][2].data[20]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    name="Hidden_0_avg_cos_diff";
	    m_data=.data.gp[1][2].data[21]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    name="Hidden_1_avg_cos_diff";
	    m_data=.data.gp[1][2].data[22]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    name="Output_avg_cos_diff";
	    m_data=.data.gp[1][2].data[23]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    name="Hidden_0_avg_trial_cos_diff";
	    m_data=.data.gp[1][2].data[24]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    name="Hidden_1_avg_trial_cos_diff";
	    m_data=.data.gp[1][2].data[25]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    name="Output_avg_trial_cos_diff";
	    m_data=.data.gp[1][2].data[26]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    name="Hidden_0_avg_avg_act_diff";
	    m_data=.data.gp[1][2].data[27]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.000310794: fix_max=0: max=0.000632003: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    name="Hidden_1_avg_avg_act_diff";
	    m_data=.data.gp[1][2].data[28]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.00350581: fix_max=0: max=0.0030216: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[29] {
	    name="Output_avg_avg_act_diff";
	    m_data=.data.gp[1][2].data[29]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[30] {
	    name="Hidden_0_avg_net_sd";
	    m_data=.data.gp[1][2].data[30]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.261937: fix_max=0: max=0.312857: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[31] {
	    name="Hidden_1_avg_net_sd";
	    m_data=.data.gp[1][2].data[31]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.159907: fix_max=0: max=0.380762: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[32] {
	    name="Output_avg_net_sd";
	    m_data=.data.gp[1][2].data[32]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[33] {
	    name="Hidden_0_hog_pct";
	    m_data=.data.gp[1][2].data[33]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.469388: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[34] {
	    name="Hidden_1_hog_pct";
	    m_data=.data.gp[1][2].data[34]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.142857: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[35] {
	    name="Output_hog_pct";
	    m_data=.data.gp[1][2].data[35]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[36] {
	    name="Hidden_0_dead_pct";
	    m_data=.data.gp[1][2].data[36]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[37] {
	    name="Hidden_1_dead_pct";
	    m_data=.data.gp[1][2].data[37]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[38] {
	    name="Output_dead_pct";
	    m_data=.data.gp[1][2].data[38]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[39] {
	    name="Hidden_0_netmax";
	    m_data=.data.gp[1][2].data[39]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[40] {
	    name="Hidden_1_netmax";
	    m_data=.data.gp[1][2].data[40]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[41] {
	    name="Output_netmax";
	    m_data=.data.gp[1][2].data[41]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.333831: fix_max=0: max=0.616303: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[42] {
	    name="Hidden_0_avg_act";
	    m_data=.data.gp[1][2].data[42]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[43] {
	    name="Hidden_1_avg_act";
	    m_data=.data.gp[1][2].data[43]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[44] {
	    name="Output_avg_act";
	    m_data=.data.gp[1][2].data[44]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[45] {
	    name="Hidden_Fm_Input_netrel";
	    m_data=.data.gp[1][2].data[45]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[46] {
	    name="Hidden_Fm_Hidden_1_netrel";
	    m_data=.data.gp[1][2].data[46]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[47] {
	    name="Hidden_Fm_Hidden_0_netrel";
	    m_data=.data.gp[1][2].data[47]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[48] {
	    name="Hidden_Fm_Output_netrel";
	    m_data=.data.gp[1][2].data[48]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[49] {
	    name="Output_Fm_Hidden_1_netrel";
	    m_data=.data.gp[1][2].data[49]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[50] {
	    name="mean_Hidden_0_Fm_Input_prjns_r_wt";
	    m_data=.data.gp[1][2].data[50]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[51] {
	    name="mean_Hidden_0_Fm_Hidden_1_prjns_r_wt";
	    m_data=.data.gp[1][2].data[51]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[52] {
	    name="mean_Hidden_0_Fm_Input_prjns_r_dwt";
	    m_data=.data.gp[1][2].data[52]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[53] {
	    name="mean_Hidden_0_Fm_Hidden_1_prjns_r_dwt";
	    m_data=.data.gp[1][2].data[53]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[54] {
	    name="mean_Hidden_1_Fm_Hidden_0_prjns_r_dwt";
	    m_data=.data.gp[1][2].data[54]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[55] {
	    name="mean_Hidden_1_Fm_Output_prjns_r_dwt";
	    m_data=.data.gp[1][2].data[55]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=411: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.025;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=49: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   col_name_good="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=32;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="cnt_err";
	    col_name_good="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=25: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="pct_err";
	    col_name_good="pct_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_sse";
	    col_name_good="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=6.26396: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_norm_err";
	    col_name_good="avg_norm_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.81: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_hog_pct";
	    col_name_good="Hidden_0_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.469388: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_hog_pct";
	    col_name_good="Hidden_1_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.142857: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good="mean_Hidden_Fm_Input_prjns_r_wt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good="mean_Hidden_Fm_Hidden_1_prjns_r_wt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_0_netmax";
	    col_name_good="Hidden_0_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_1_netmax";
	    col_name_good="Hidden_1_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_netmax";
	    col_name_good="Output_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.333831: fix_max=0: max=0.616303: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_cos_err";
	    col_name_good="avg_cos_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.358009: fix_max=0: max=0.909355: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_avg_net_sd";
	    col_name_good="Hidden_0_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.261937: fix_max=0: max=0.312857: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_avg_net_sd";
	    col_name_good="Hidden_1_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.159907: fix_max=0: max=0.380762: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_avg_avg_act_diff";
	    col_name_good="Hidden_0_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-0.000310794: fix_max=0: max=0.000632003: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_avg_avg_act_diff";
	    col_name_good="Hidden_1_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-0.00350581: fix_max=0: max=0.0030216: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_17";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="mean_Hidden_0_Fm_Input_prjns_r_dwt";
	    col_name_good="mean_Hidden_0_Fm_Input_prjns_r_dwt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="mean_Hidden_0_Fm_Hidden_1_prjns_r_dwt";
	    col_name_good="mean_Hidden_0_Fm_Hidden_1_prjns_r_dwt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_19";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="mean_Hidden_1_Fm_Hidden_0_prjns_r_dwt";
	    col_name_good="mean_Hidden_1_Fm_Hidden_0_prjns_r_dwt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_20";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="mean_Hidden_1_Fm_Output_prjns_r_dwt";
	    col_name_good="mean_Hidden_1_Fm_Output_prjns_r_dwt";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_21";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_17";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_19";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_20";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_21";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.533: z=1.714201: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.726701;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="random_5x5_25";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_SimpleLines5x5_root_view_children_0";
	  m_data=$.data.gp[0][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.data.gp[0][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=1.161396e-41;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.data.gp[0][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Output";
	    m_data=.data.gp[0][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=2: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[3] {
       name="CycleOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="CycleOutputData_Graph";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="trial";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="trial_name";
	    m_data=.data.gp[1][1].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="group_name";
	    m_data=.data.gp[1][1].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="quarter";
	    m_data=.data.gp[1][1].data[5]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="cycle";
	    m_data=.data.gp[1][1].data[6]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="sse";
	    m_data=.data.gp[1][1].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="norm_err";
	    m_data=.data.gp[1][1].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="ext_rew";
	    m_data=.data.gp[1][1].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="max_avg_m";
	    m_data=.data.gp[1][1].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="Hidden_0_ungp_1_i_val_g_i";
	    m_data=.data.gp[1][1].data[11]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Hidden_1_ungp_1_i_val_g_i";
	    m_data=.data.gp[1][1].data[12]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_ungp_1_i_val_g_i";
	    m_data=.data.gp[1][1].data[13]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Hidden_0_acts_avg";
	    m_data=.data.gp[1][1].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Hidden_1_acts_avg";
	    m_data=.data.gp[1][1].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_acts_avg";
	    m_data=.data.gp[1][1].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Hidden_0_netin_avg";
	    m_data=.data.gp[1][1].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Hidden_1_netin_avg";
	    m_data=.data.gp[1][1].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="Output_netin_avg";
	    m_data=.data.gp[1][1].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="ct_cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=-1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.215764: fix_max=0: max=0.521425: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_0_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=0.5: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.000143155: fix_max=0: max=0.464243: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_1_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="ct_cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=80: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[1] {
	  name="CycleOutputData_Graph_1";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.261699: y=-0.003107458: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=$.data.gp[1][1].data[0]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=$.data.gp[1][1].data[1]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="trial";
	    m_data=$.data.gp[1][1].data[2]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="trial_name";
	    m_data=$.data.gp[1][1].data[3]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="group_name";
	    m_data=$.data.gp[1][1].data[4]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="quarter";
	    m_data=$.data.gp[1][1].data[5]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="cycle";
	    m_data=$.data.gp[1][1].data[6]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="sse";
	    m_data=$.data.gp[1][1].data[7]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="norm_err";
	    m_data=$.data.gp[1][1].data[8]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="ext_rew";
	    m_data=$.data.gp[1][1].data[9]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="max_avg_m";
	    m_data=$.data.gp[1][1].data[10]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="Hidden_0_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[11]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Hidden_1_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[12]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[13]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Hidden_0_acts_avg";
	    m_data=$.data.gp[1][1].data[14]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Hidden_1_acts_avg";
	    m_data=$.data.gp[1][1].data[15]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_acts_avg";
	    m_data=$.data.gp[1][1].data[16]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Hidden_0_netin_avg";
	    m_data=$.data.gp[1][1].data[17]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Hidden_1_netin_avg";
	    m_data=$.data.gp[1][1].data[18]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="Output_netin_avg";
	    m_data=$.data.gp[1][1].data[19]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=2.261699: y=-0.003107458: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hidden_0_netin_avg";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_1_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.215764: fix_max=0: max=0.521425: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_1_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_1_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_0_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_1_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.000107117: fix_max=0: max=0.572656: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_1_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_1_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.298053: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_1_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_1_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_1_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_1_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_1_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_1_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_1_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_1_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_1_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_1_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_1_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_1_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_1_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_1_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_1_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_1_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_1_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_1_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_1_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_1_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_1_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_1_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_1_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_1_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_1_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_1_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="ct_cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=80: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[2] {
	  name="CycleOutputData_Graph_2";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.01047: y=1.367999: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=$.data.gp[1][1].data[0]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=$.data.gp[1][1].data[1]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="trial";
	    m_data=$.data.gp[1][1].data[2]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="trial_name";
	    m_data=$.data.gp[1][1].data[3]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="group_name";
	    m_data=$.data.gp[1][1].data[4]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="quarter";
	    m_data=$.data.gp[1][1].data[5]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="cycle";
	    m_data=$.data.gp[1][1].data[6]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="sse";
	    m_data=$.data.gp[1][1].data[7]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="norm_err";
	    m_data=$.data.gp[1][1].data[8]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="ext_rew";
	    m_data=$.data.gp[1][1].data[9]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="max_avg_m";
	    m_data=$.data.gp[1][1].data[10]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="Hidden_0_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[11]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="Hidden_1_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[12]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_ungp_1_i_val_g_i";
	    m_data=$.data.gp[1][1].data[13]$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Hidden_0_acts_avg";
	    m_data=$.data.gp[1][1].data[14]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Hidden_1_acts_avg";
	    m_data=$.data.gp[1][1].data[15]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_acts_avg";
	    m_data=$.data.gp[1][1].data[16]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Hidden_0_netin_avg";
	    m_data=$.data.gp[1][1].data[17]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Hidden_1_netin_avg";
	    m_data=$.data.gp[1][1].data[18]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="Output_netin_avg";
	    m_data=$.data.gp[1][1].data[19]$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.01047: y=1.367999: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Hidden_1_netin_avg";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_2_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.215764: fix_max=0: max=0.521425: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_2_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_2_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.249254: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_2_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_netin_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.000299431: fix_max=0: max=0.5069: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_2_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_i_val_g_i";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_2_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_1_acts_avg";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_2_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_2_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_2_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_2_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_2_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_2_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_2_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_2_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_2_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_2_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_2_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_2_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_2_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_2_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_2_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_2_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_2_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_2_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_2_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_2_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_2_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_2_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_2_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_2_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_2_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_2_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="ct_cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=1: fix_max=0: max=80: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=2.058349: y=1.119946: z=3.282874: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.295373;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[4] {
       name="TrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="TrialOutputData_Graph";
	  m_data=$.data.gp[1][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="trial";
	    m_data=.data.gp[1][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="trial_name";
	    m_data=.data.gp[1][0].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="group_name";
	    m_data=.data.gp[1][0].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="rt_cycles";
	    m_data=.data.gp[1][0].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="sse";
	    m_data=.data.gp[1][0].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="norm_err";
	    m_data=.data.gp[1][0].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="cos_diff";
	    m_data=.data.gp[1][0].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="ext_rew";
	    m_data=.data.gp[1][0].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="max_avg_m";
	    m_data=.data.gp[1][0].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="mean_Hidden_0_act_m";
	    m_data=.data.gp[1][0].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="mean_Hidden_1_act_m";
	    m_data=.data.gp[1][0].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="mean_Output_act_m";
	    m_data=.data.gp[1][0].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Hidden_0_cos_diff";
	    m_data=.data.gp[1][0].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Hidden_1_cos_diff";
	    m_data=.data.gp[1][0].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_cos_diff";
	    m_data=.data.gp[1][0].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=0: fix_max=1: max=25: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=24: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="TrialOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="sse";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="TrialOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cos_diff";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="TrialOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_0_cos_diff";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="TrialOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Hidden_1_cos_diff";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="TrialOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Output_cos_diff";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="TrialOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_0_cos_diff_lrate";
	    col_name_good=;
	    is_string=0;
	    is_matrix=1;
	    n_cells=49;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="TrialOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Hidden_1_cos_diff_lrate";
	    col_name_good=;
	    is_string=0;
	    is_matrix=1;
	    n_cells=49;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="TrialOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_cos_diff_lrate";
	    col_name_good=;
	    is_string=0;
	    is_matrix=1;
	    n_cells=25;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="TrialOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="TrialOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="TrialOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="TrialOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="TrialOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="TrialOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="TrialOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="TrialOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="TrialOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="TrialOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="TrialOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="TrialOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="TrialOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="TrialOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="TrialOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="TrialOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="TrialOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="TrialOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="TrialOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="TrialOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="TrialOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="TrialOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="TrialOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="TrialOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.717874: y=0.5229999: z=2.259205: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.749204;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[5] {
       name="LeabraConSpec_0_SlowWtsFun";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="LeabraConSpec_0_SlowWtsFun_Graph";
	  m_data=.data.gp[2][6]$$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="trial";
	    m_data=.data.gp[2][6].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=1: max=1000: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="wt";
	    m_data=.data.gp[2][6].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.0209378: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="fwt";
	    m_data=.data.gp[2][6].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.310413: fix_max=0: max=0.687246: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="swt";
	    m_data=.data.gp[2][6].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.359431: fix_max=0: max=0.663191: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="dwt";
	    m_data=.data.gp[2][6].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.0399977: fix_max=0: max=0.0399982: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=5999: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="trial";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=1: max=1000: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="wt";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.02093785: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="fwt";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.3104127: fix_max=0: max=0.6872456: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="swt";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.3594306: fix_max=0: max=0.6631909: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="dwt";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-0.03999775: fix_max=0: max=0.03999819: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="LeabraConSpec_0_SlowWtsFun_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5072557: y=0.408: z=1.634507: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.624507;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[6] {
       name="TopNErrors";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="TopNErrors_Graph";
	  m_data=$.programs[4].objs[2]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="trial_name_group";
	    m_data=.programs[4].objs[2].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="sse_mean";
	    m_data=.programs[4].objs[2].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.297627: fix_max=0: max=1.15423: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="sse_count";
	    m_data=.programs[4].objs[2].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=4: fix_max=0: max=4: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="rank";
	    m_data=.programs[4].objs[2].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=4: };
	  page_rows=3682;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="rank";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=4: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="TopNErrors_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="sse_mean";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.3380722: fix_max=0: max=1.305915: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="TopNErrors_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="sse_count";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="TopNErrors_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="trial_name_group";
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="TopNErrors_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="TopNErrors_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="TopNErrors_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="TopNErrors_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="TopNErrors_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="TopNErrors_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="TopNErrors_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="TopNErrors_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="TopNErrors_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.425: y=0.408: z=1.641912: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.631912;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_131";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008191925: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.02706271: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.7524868: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=0: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Added test stuff to ProjectDocs, including Wiki formatting, some ta: links, and some external links.  very nice.  we need to figure out a syntax for downloaded wiki links..
";
 tree_state{ .;.patches;.docs;.wizards;.ctrl_panels;.ctrl_panels[0];.ctrl_panels[0].mbrs;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.data.gp[3];.programs;.programs.gp[0];.viewers[0];.viewers[0].frames[2];.networks;.networks[0];.networks[0].specs;.networks[0].specs[3];.networks[0].specs[3].lrate_sched;.networks[0].layers;.networks[0].weights; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserDataItem @[0] {name="cos_err": value=1: val_type_fixed=1: };
    UserDataItem @[1] {name="norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[2] {name="ext_rew": value=1: val_type_fixed=1: };
    UserDataItem @[3] {name="minus_output_name": value=1: val_type_fixed=1: };
    UserDataItem @[4] {name="rt_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[5] {name="tot_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[6] {name="phase": value=1: val_type_fixed=1: };
    UserDataItem @[7] {name="quarter": value=1: val_type_fixed=1: };
    UserDataItem @[8] {name="sse": value=1: val_type_fixed=1: };
    UserDataItem @[9] {name="output_name": value=1: val_type_fixed=1: };
    UserDataItem @[10] {name="trial_name": value=1: val_type_fixed=1: };
    UserDataItem @[11] {name="group_name": value=1: val_type_fixed=1: };
    UserDataItem @[12] {name="total_trials": value=1: val_type_fixed=1: };
    UserDataItem @[13] {name="time": value=1: val_type_fixed=1: };
    UserDataItem @[14] {name="cycle": value=1: val_type_fixed=1: };
    UserDataItem @[15] {name="tick": value=1: val_type_fixed=1: };
    UserDataItem @[16] {name="trial": value=1: val_type_fixed=1: };
    UserDataItem @[17] {name="group": value=1: val_type_fixed=1: };
    UserDataItem @[18] {name="epoch": value=1: val_type_fixed=1: };
    UserDataItem @[19] {name="batch": value=1: val_type_fixed=1: };
    UserDataItem @[20] {name="trial_cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[21] {name="avg_act_diff": value=1: val_type_fixed=1: };
    UserDataItem @[22] {name="cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[23] {name="minus_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[24] {name="ct_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[25] {name="phase_no": value=1: val_type_fixed=1: };
    UserDataItem @[26] {name="maxda": value=1: val_type_fixed=1: };
    UserData_DocLink @[27] {name="DocLink": doc=NULL: };
   };
   name="MultiHiddenNet";
   desc=;
   flags=BUILD_INIT_WTS|SAVE_KILLED_WTS;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=2;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=149;
   n_cons=8477;
   max_prjns=2;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="LeabraUnitSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ opt_thresh;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[3].children[1]$$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=6: net_tau=1.4: fast_cyc=0: vm_dt=0.1666667: net_dt=0.7142857: };
     act_avg {ss_tau=4: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=1: l=0.1: i=1: k=0.3: };
     e_rev {e=1: l=0.3: i=0.25: k=0.1: };
     kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.005: s_max=0.2: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.3: p0_norm=0.4: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=2.5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.7: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.3: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
    };
    LeabraLayerSpec @[1] {
     name="HiddenLayer";
     is_used=1;
     used_status=PARENT_USED;
     desc=;
     unique{ decay;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Output";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;compute_i;i_kwta_pt;decay;lay_inhib;del_inhib;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.4: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=0: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.22: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[1] {
       name="Input";
       is_used=0;
       used_status=UNUSED;
       desc=;
       unique{ kwta;compute_i;i_kwta_pt;decay;clamp;avg_act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.4: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {on=0: gi=0: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.25: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0.05: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {hog_thr=0.3: dead_thr=0.01: };
      };
     };
     lay_inhib {on=1: gi=1.4: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=0: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.22: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0.05: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {hog_thr=0.3: dead_thr=0.01: };
    };
    FullPrjnSpec @[2] {
     name="FullPrjnSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
    LeabraConSpec @[3] {
     name="LeabraConSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ stable_mix;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="TopDown";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ wt_scale;rnd;wt_limits;learn;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=1;
       };
      };
      LeabraBiasSpec @[1] {
       name="LeabraBiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=1: no_plus_net=1: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
       wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=1;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: lrn_thr=0.01: s_mult=1: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     momentum {on=0: dwavg_tau=1000: norm_min=0.001: m_tau=20: lrate_comp=0.01: dwavg_dt=0.001: dwavg_dt_c=0.999: m_dt=0.05: m_dt_c=0.95: };
     wt_bal {on=1: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=7: y=7: z=4: };
    max_disp_size2d {x=7: y=29: };
    LeabraLayer @[0] {
     name="Input";
     n_recv_prjns=0;
     n_send_prjns=1;
     un_geom_x=5;
     un_geom_y=5;
     un_geom_n=25;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=5;
     flat_geom_y=5;
     flat_geom_n=25;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=MIDDLE: x_off=0: y_align=CENTER: y_off=0: space=2: };
     pos {x=1: y=0: z=0: };
     pos_abs {x=1: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=0: fm_output=3: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[1].children[0]$: };
     adapt_gi=1;
     acts_m_avg=0.2279992;
     acts_p_avg=0.2279992;
     acts_p_avg_eff=0.2279992;
    };
    LeabraLayer @[1] {
     name="Hidden_0";
     n_recv_prjns=2;
     n_send_prjns=1;
     un_geom_x=7;
     un_geom_y=7;
     un_geom_n=49;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=7;
     flat_geom_y=7;
     flat_geom_n=49;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABOVE: other=.networks[0].layers[0]$$: x_align=MIDDLE: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=2: };
     pos2d_abs {x=0: y=2: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[0]$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs[2]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[3]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden_1";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[3].children[0]$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[2].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=2: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[1]$: };
     adapt_gi=1;
     acts_m_avg=0.2596924;
     acts_p_avg=0.2598853;
     acts_p_avg_eff=0.2598853;
    };
    LeabraLayer @[2] {
     name="Hidden_1";
     n_recv_prjns=2;
     n_send_prjns=2;
     un_geom_x=7;
     un_geom_y=7;
     un_geom_n=49;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=7;
     flat_geom_y=7;
     flat_geom_n=49;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=0;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABOVE: other=$.networks[0].layers[1]$: x_align=MIDDLE: x_off=0: y_align=CENTER: y_off=0: space=2: };
     pos {x=0: y=0: z=2: };
     pos_abs {x=0: y=0: z=2: };
     pos2d {x=0: y=4: };
     pos2d_abs {x=0: y=4: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=7: y=7: n_not_xy=0: n=49: };
     disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     scaled_disp_geom {x=7: y=7: n_not_xy=0: n=49: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden_0";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[1]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[3]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[3]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[3].children[0]$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[1];
      Projection_List @. = [1] = LeabraPrjn .networks[0].layers[3].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=2: fm_output=1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[1]$: };
     adapt_gi=1;
     acts_m_avg=0.2352297;
     acts_p_avg=0.2361052;
     acts_p_avg_eff=0.2361052;
    };
    LeabraLayer @[3] {
     name="Output";
     n_recv_prjns=1;
     n_send_prjns=1;
     un_geom_x=5;
     un_geom_y=5;
     un_geom_n=25;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=5;
     flat_geom_y=5;
     flat_geom_n=25;
     gp_spc_x=1;
     gp_spc_y=1;
     flags=0;
     layer_type=TARGET;
     desc=;
     pos_rel {rel=ABS_POS: other=$.networks[0].layers[2]$: x_align=MIDDLE: x_off=0: y_align=CENTER: y_off=0: space=2: };
     pos {x=1: y=1: z=3: };
     pos_abs {x=1: y=1: z=3: };
     pos2d {x=0: y=24: };
     pos2d_abs {x=0: y=24: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=5: y=5: n_not_xy=0: n=25: };
     disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_disp_geom {x=5: y=5: n_not_xy=0: n=25: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden_1";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs[2]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=$.networks[0].specs[3]$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[2].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=3: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[1].children[0]$: };
     adapt_gi=1;
     acts_m_avg=0.2359328;
     acts_p_avg=0.2279992;
     acts_p_avg_eff=0.2279992;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=7: y=7: z=4: };
   max_disp_size2d {x=7: y=29: };
   times {quarter=25: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=75: plus=25: total_cycles=100: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=1: bias_learn=1: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: lay_gp_inhib=0: inhib_cons=0: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};
