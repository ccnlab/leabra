// ta_Dump File v3.0 -- code v8.5.6.0 rev11438
LeabraProject .projects[0] { 
 Doc_Group @.docs = [2] {
  taDoc @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
  taDoc @[1] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [4] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
   };

   ControlPanelMethod_Group @.mths = [13] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
    ControlPanelMethod @[6] { };
    ControlPanelMethod @[7] { };
    ControlPanelMethod @[8] { };
    ControlPanelMethod @[9] { };
    ControlPanelMethod @[10] { };
    ControlPanelMethod @[11] { };
    ControlPanelMethod @[12] { };
   };
  };
  ClusterRun @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [12] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [7] {
  ParamSet @[0] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[1] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[2] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[3] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[4] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[5] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
  ParamSet @[6] { 
   ControlPanelMember_Group @.mbrs = [28] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember @[10] { };
    ControlPanelMember @[11] { };
    ControlPanelMember @[12] { };
    ControlPanelMember @[13] { };
    ControlPanelMember @[14] { };
    ControlPanelMember @[15] { };
    ControlPanelMember @[16] { };
    ControlPanelMember @[17] { };
    ControlPanelMember @[18] { };
    ControlPanelMember @[19] { };
    ControlPanelMember @[20] { };
    ControlPanelMember @[21] { };
    ControlPanelMember @[22] { };
    ControlPanelMember @[23] { };
    ControlPanelMember @[24] { };
    ControlPanelMember @[25] { };
    ControlPanelMember @[26] { };
    ControlPanelMember @[27] { };
   };

   ControlPanelMethod_Group @.mths = [0] {
   };
  };
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [6] {
     String_Data @[0] { };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     double_Data @[2] { };
     double_Data @[3] { };
     double_Data @[4] { };
     double_Data @[5] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [5] { 
   DataTable @[0] { 
    DataTableCols @.data = [33] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[2] { };
     int_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[6] { };
     String_Data @[7] { };
     String_Data @[8] { };
     String_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [134] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
     float_Data @[47] { };
     float_Data @[48] { };
     float_Data @[49] { };
     float_Data @[50] { };
     float_Data @[51] { };
     float_Data @[52] { };
     float_Data @[53] { };
     float_Data @[54] { };
     float_Data @[55] { };
     float_Data @[56] { };
     float_Data @[57] { };
     float_Data @[58] { };
     float_Data @[59] { };
     float_Data @[60] { };
     float_Data @[61] { };
     float_Data @[62] { };
     float_Data @[63] { };
     float_Data @[64] { };
     float_Data @[65] { };
     float_Data @[66] { };
     float_Data @[67] { };
     float_Data @[68] { };
     float_Data @[69] { };
     float_Data @[70] { };
     float_Data @[71] { };
     float_Data @[72] { };
     float_Data @[73] { };
     float_Data @[74] { };
     float_Data @[75] { };
     float_Data @[76] { };
     float_Data @[77] { };
     float_Data @[78] { };
     float_Data @[79] { };
     float_Data @[80] { };
     float_Data @[81] { };
     float_Data @[82] { };
     float_Data @[83] { };
     float_Data @[84] { };
     float_Data @[85] { };
     float_Data @[86] { };
     float_Data @[87] { };
     float_Data @[88] { };
     float_Data @[89] { };
     float_Data @[90] { };
     float_Data @[91] { };
     float_Data @[92] { };
     float_Data @[93] { };
     float_Data @[94] { };
     float_Data @[95] { };
     float_Data @[96] { };
     float_Data @[97] { };
     float_Data @[98] { };
     float_Data @[99] { };
     float_Data @[100] { };
     float_Data @[101] { };
     float_Data @[102] { };
     float_Data @[103] { };
     float_Data @[104] { };
     float_Data @[105] { };
     float_Data @[106] { };
     float_Data @[107] { };
     float_Data @[108] { };
     float_Data @[109] { };
     float_Data @[110] { };
     float_Data @[111] { };
     float_Data @[112] { };
     float_Data @[113] { };
     float_Data @[114] { };
     float_Data @[115] { };
     float_Data @[116] { };
     float_Data @[117] { };
     float_Data @[118] { };
     float_Data @[119] { };
     float_Data @[120] { };
     float_Data @[121] { };
     float_Data @[122] { };
     float_Data @[123] { };
     float_Data @[124] { };
     float_Data @[125] { };
     float_Data @[126] { };
     float_Data @[127] { };
     float_Data @[128] { };
     float_Data @[129] { };
     float_Data @[130] { };
     float_Data @[131] { };
     float_Data @[132] { };
     float_Data @[133] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    DataTableCols @.data = [8] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[3] { 
    DataTableCols @.data = [30] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     String_Data @[2] { };
     int_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[6] { };
     String_Data @[7] { };
     String_Data @[8] { };
     String_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[4] { 
    DataTableCols @.data = [47] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
     float_Data @[13] { };
     float_Data @[14] { };
     float_Data @[15] { };
     float_Data @[16] { };
     float_Data @[17] { };
     float_Data @[18] { };
     float_Data @[19] { };
     float_Data @[20] { };
     float_Data @[21] { };
     float_Data @[22] { };
     float_Data @[23] { };
     float_Data @[24] { };
     float_Data @[25] { };
     float_Data @[26] { };
     float_Data @[27] { };
     float_Data @[28] { };
     float_Data @[29] { };
     float_Data @[30] { };
     float_Data @[31] { };
     float_Data @[32] { };
     float_Data @[33] { };
     float_Data @[34] { };
     float_Data @[35] { };
     float_Data @[36] { };
     float_Data @[37] { };
     float_Data @[38] { };
     float_Data @[39] { };
     float_Data @[40] { };
     float_Data @[41] { };
     float_Data @[42] { };
     float_Data @[43] { };
     float_Data @[44] { };
     float_Data @[45] { };
     float_Data @[46] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] = [3] { 
   DataTable @[0] { 
    DataTableCols @.data = [4] {
     String_Data @[0] { };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[1] { 
    DataTableCols @.data = [5] {
     String_Data @[0] { };
     String_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
   DataTable @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserDataItem @[0] { };
     UserDataItem @[1] { };
     UserDataItem @[2] { };
    };

    DataTableCols @.data = [2] {
     String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[3] { 
  };
 };

 Program_TopGroup @.programs = [13] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [3] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
     };
    };
    DynEnumType @[1] { 
     DynEnumItem_List @.enums = [3] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
     };
    };
    DynEnumType @[2] { 
     DynEnumItem_List @.enums = [20] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
      DynEnumItem @[3] { };
      DynEnumItem @[4] { };
      DynEnumItem @[5] { };
      DynEnumItem @[6] { };
      DynEnumItem @[7] { };
      DynEnumItem @[8] { };
      DynEnumItem @[9] { };
      DynEnumItem @[10] { };
      DynEnumItem @[11] { };
      DynEnumItem @[12] { };
      DynEnumItem @[13] { };
      DynEnumItem @[14] { };
      DynEnumItem @[15] { };
      DynEnumItem @[16] { };
      DynEnumItem @[17] { };
      DynEnumItem @[18] { };
      DynEnumItem @[19] { };
     };
    };
   };

   ProgVar_List @.args = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgVar_List @.vars = [16] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [5] {
    AssignExpr @[0] { };
    AssignExpr @[1] { };
    ResetDataRows @[2] { };
    Switch @[3] { 
     ProgEl_List @.cases = [3] {
      CaseBlock @[0] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [10] {
	  RandomCall @[0] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[2] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[3] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[4] { 
	   ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	   };
	  };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AddNewDataRow @[7] { };
	  DataVarProg @[8] { };
	  DataVarProg @[9] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
      CaseBlock @[1] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [7] {
	  If @[0] { 
	   ProgEl_List @.true_code = [5] {
	    RandomCall @[0] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[1] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[2] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[3] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[4] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	   };
	  };
	  Else @[1] { 
	   ProgEl_List @.true_code = [5] {
	    RandomCall @[0] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[1] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[2] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[3] { 
	     ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	     };
	    };
	    RandomCall @[4] { 
	     ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	     };
	    };
	   };
	  };
	  AssignExpr @[2] { };
	  AssignExpr @[3] { };
	  AddNewDataRow @[4] { };
	  DataVarProg @[5] { };
	  DataVarProg @[6] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
      CaseBlock @[2] { 
       ProgEl_List @.prog_code = [2] {
	ForLoop @[0] { 
	 ProgEl_List @.loop_code = [10] {
	  RandomCall @[0] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[2] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[3] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  RandomCall @[4] { 
	   ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	   };
	  };
	  AssignExpr @[5] { };
	  AssignExpr @[6] { };
	  AddNewDataRow @[7] { };
	  DataVarProg @[8] { };
	  DataVarProg @[9] { };
	 };
	};
	DoneWritingDataRow @[1] { };
       };
      };
     };
    };
    ForLoop @[4] { 
     ProgEl_List @.loop_code = [4] {
      RandomCall @[0] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[2] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      RandomCall @[3] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
     };
    };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [2] {
    taCanvas @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [1] {
      float_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgType_List @.types = [1] {
    DynEnumType @[0] { 
     DynEnumItem_List @.enums = [20] {
      DynEnumItem @[0] { };
      DynEnumItem @[1] { };
      DynEnumItem @[2] { };
      DynEnumItem @[3] { };
      DynEnumItem @[4] { };
      DynEnumItem @[5] { };
      DynEnumItem @[6] { };
      DynEnumItem @[7] { };
      DynEnumItem @[8] { };
      DynEnumItem @[9] { };
      DynEnumItem @[10] { };
      DynEnumItem @[11] { };
      DynEnumItem @[12] { };
      DynEnumItem @[13] { };
      DynEnumItem @[14] { };
      DynEnumItem @[15] { };
      DynEnumItem @[16] { };
      DynEnumItem @[17] { };
      DynEnumItem @[18] { };
      DynEnumItem @[19] { };
     };
    };
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [16] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
    ProgVar @[15] { };
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [2] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [4] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
       };
      };
      Switch @[1] { 
       ProgEl_List @.cases = [6] {
	CaseBlock @[0] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[1] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[2] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[3] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[4] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
	CaseBlock @[5] { 
	 ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	   };
	  };
	 };
	};
       };
      };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [16] {
    ResetDataRows @[0] { };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    AddNewDataRow @[3] { };
    MethodCall @[4] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[6] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[7] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[8] { };
    AssignExpr @[9] { };
    AssignExpr @[10] { };
    AssignExpr @[11] { };
    ForLoop @[12] { 
     ProgEl_List @.loop_code = [2] {
      AssignExpr @[0] { };
      FunctionCall @[1] { 
       ProgArg_List @.fun_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[13] { };
    MethodCall @[14] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    DoneWritingDataRow @[15] { };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [3] {
    V1RetinaProc @[0] { 
     VisRegionSpecBaseList @.regions = [1] {
      V1RegionSpec @[0] { };
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [8] {
      float_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    LayerWriter @[2] { 
     LayerDataEl_List @.layer_data = [4] {
      LayerWriterEl @[0] { };
      LayerWriterEl @[1] { };
      LayerWriterEl @[2] { };
      LayerWriterEl @[3] { };
     };
    };
   };

   ProgVar_List @.objs_vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [8] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
   };

   ProgEl_List @.prog_code = [4] {
    If @[0] { 
     ProgEl_List @.true_code = [10] {
      DataVarProg @[0] { };
      DataVarProg @[1] { };
      ProgramCall @[2] { 
       ProgArg_List @.prog_args = [1] {
	ProgArg @[0] { };
       };
      };
      MethodCall @[3] { 
       ProgArg_List @.meth_args = [11] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
	ProgArg @[6] { };
	ProgArg @[7] { };
	ProgArg @[8] { };
	ProgArg @[9] { };
	ProgArg @[10] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      Comment @[5] { };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MethodCall @[7] { 
       ProgArg_List @.meth_args = [5] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
       };
      };
      AssignExpr @[8] { };
      DataVarProg @[9] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    DoneWritingDataRow @[3] { };
   };
  };
  Program @[3] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [28] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    ProgVarFmArg @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ControlPanelsFmArgs @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
     };
    };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
    PrintVar @[21] { };
    Comment @[22] { };
    MethodCall @[23] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
    PrintVar @[24] { };
    OtherProgramVar @[25] { };
    PrintExpr @[26] { };
    ProgramCall @[27] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[4] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[5] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[6] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [1] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [5] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
      ProgArg @[4] { };
     };
    };
   };
  };
  Program @[7] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [5] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[3] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[4] { };
   };
  };
  Program @[8] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [3] {
    MethodCall @[0] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MemberAssign @[1] { };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program @[9] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [4] {
    Relation @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [49] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
      float_Data @[25] { };
      float_Data @[26] { };
      float_Data @[27] { };
      float_Data @[28] { };
      float_Data @[29] { };
      float_Data @[30] { };
      float_Data @[31] { };
      float_Data @[32] { };
      float_Data @[33] { };
      float_Data @[34] { };
      float_Data @[35] { };
      float_Data @[36] { };
      String_Data @[37] { };
      String_Data @[38] { };
      String_Data @[39] { };
      String_Data @[40] { };
      String_Data @[41] { };
      float_Data @[42] { };
      float_Data @[43] { };
      float_Data @[44] { };
      float_Data @[45] { };
      float_Data @[46] { };
      float_Data @[47] { };
      float_Data @[48] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [7] {
      String_Data @[0] { };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { };
      float_Data @[4] { };
      String_Data @[5] { };
      String_Data @[6] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[3] { 
     DataTableCols @.data = [17] {
      String_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [8] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [10] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [2] {
      ProgVar @[0] { };
      ProgVar @[1] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    ForeachLoop @[2] { 
     ProgEl_List @.loop_code = [3] {
      IfContinue @[0] { };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
      Else @[2] { 
       ProgEl_List @.true_code = [1] {
	DataProcCall @[0] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
       };
      };
     };
    };
    DataGroupProg @[3] { 
     DataOpList @.group_spec.ops = [7] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
      DataGroupEl @[6] { };
     };
    };
    MemberMethodCall @[4] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MathCall @[5] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MathCall @[6] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    DataGroupProg @[7] { 
     DataOpList @.group_spec.ops = [17] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
      DataGroupEl @[6] { };
      DataGroupEl @[7] { };
      DataGroupEl @[8] { };
      DataGroupEl @[9] { };
      DataGroupEl @[10] { };
      DataGroupEl @[11] { };
      DataGroupEl @[12] { };
      DataGroupEl @[13] { };
      DataGroupEl @[14] { };
      DataGroupEl @[15] { };
      DataGroupEl @[16] { };
     };
    };
    MemberAssign @[8] { };
    MemberAssign @[9] { };
   };
  };
  Program @[10] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [6] {
    Relation @[0] { };
    DataTable @[1] { 
     DataTableCols @.data = [73] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
      float_Data @[25] { };
      float_Data @[26] { };
      float_Data @[27] { };
      float_Data @[28] { };
      float_Data @[29] { };
      float_Data @[30] { };
      float_Data @[31] { };
      float_Data @[32] { };
      float_Data @[33] { };
      float_Data @[34] { };
      float_Data @[35] { };
      float_Data @[36] { };
      float_Data @[37] { };
      float_Data @[38] { };
      float_Data @[39] { };
      float_Data @[40] { };
      float_Data @[41] { };
      float_Data @[42] { };
      float_Data @[43] { };
      float_Data @[44] { };
      float_Data @[45] { };
      float_Data @[46] { };
      float_Data @[47] { };
      float_Data @[48] { };
      float_Data @[49] { };
      float_Data @[50] { };
      float_Data @[51] { };
      float_Data @[52] { };
      String_Data @[53] { };
      String_Data @[54] { };
      String_Data @[55] { };
      String_Data @[56] { };
      String_Data @[57] { };
      String_Data @[58] { };
      String_Data @[59] { };
      float_Data @[60] { };
      float_Data @[61] { };
      float_Data @[62] { };
      float_Data @[63] { };
      float_Data @[64] { };
      float_Data @[65] { };
      float_Data @[66] { };
      float_Data @[67] { };
      float_Data @[68] { };
      float_Data @[69] { };
      float_Data @[70] { };
      float_Data @[71] { };
      int_Data @[72] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [72] {
      int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { };
      float_Data @[6] { };
      float_Data @[7] { };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
      float_Data @[17] { };
      float_Data @[18] { };
      float_Data @[19] { };
      float_Data @[20] { };
      float_Data @[21] { };
      float_Data @[22] { };
      float_Data @[23] { };
      float_Data @[24] { };
      float_Data @[25] { };
      float_Data @[26] { };
      float_Data @[27] { };
      float_Data @[28] { };
      float_Data @[29] { };
      float_Data @[30] { };
      float_Data @[31] { };
      float_Data @[32] { };
      float_Data @[33] { };
      float_Data @[34] { };
      float_Data @[35] { };
      float_Data @[36] { };
      float_Data @[37] { };
      float_Data @[38] { };
      float_Data @[39] { };
      float_Data @[40] { };
      float_Data @[41] { };
      float_Data @[42] { };
      float_Data @[43] { };
      float_Data @[44] { };
      float_Data @[45] { };
      float_Data @[46] { };
      float_Data @[47] { };
      float_Data @[48] { };
      float_Data @[49] { };
      float_Data @[50] { };
      float_Data @[51] { };
      float_Data @[52] { };
      String_Data @[53] { };
      String_Data @[54] { };
      String_Data @[55] { };
      String_Data @[56] { };
      String_Data @[57] { };
      String_Data @[58] { };
      String_Data @[59] { };
      float_Data @[60] { };
      float_Data @[61] { };
      float_Data @[62] { };
      float_Data @[63] { };
      float_Data @[64] { };
      float_Data @[65] { };
      float_Data @[66] { };
      float_Data @[67] { };
      float_Data @[68] { };
      float_Data @[69] { };
      float_Data @[70] { };
      float_Data @[71] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[3] { 
     DataTableCols @.data = [7] {
      String_Data @[0] { };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { };
      float_Data @[3] { };
      float_Data @[4] { };
      float_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      String_Data @[6] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[4] { 
     DataTableCols @.data = [6] {
      String_Data @[0] { };
      int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { };
      float_Data @[4] { };
      String_Data @[5] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[5] { 
     DataTableCols @.data = [17] {
      String_Data @[0] { };
      String_Data @[1] { };
      float_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
       };
      };
      float_Data @[8] { };
      float_Data @[9] { };
      float_Data @[10] { };
      float_Data @[11] { };
      float_Data @[12] { };
      float_Data @[13] { };
      float_Data @[14] { };
      float_Data @[15] { };
      float_Data @[16] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [14] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [7] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
      ProgVar @[6] { };
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
    MethodCall @[2] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    AssignExpr @[3] { };
    ForeachLoop @[4] { 
     ProgEl_List @.loop_code = [8] {
      IfContinue @[0] { };
      If @[1] { 
       ProgEl_List @.true_code = [1] {
	IfContinue @[0] { };
       };
      };
      Else @[2] { 
       ProgEl_List @.true_code = [1] {
	IfContinue @[0] { };
       };
      };
      If @[3] { 
       ProgEl_List @.true_code = [1] {
	DataAnalCall @[0] { 
	 ProgArg_List @.meth_args = [9] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	  ProgArg @[4] { };
	  ProgArg @[5] { };
	  ProgArg @[6] { };
	  ProgArg @[7] { };
	  ProgArg @[8] { };
	 };
	};
       };
      };
      Else @[4] { 
       ProgEl_List @.true_code = [1] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
      If @[5] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
      Else @[6] { 
       ProgEl_List @.true_code = [3] {
	AssignExpr @[0] { };
	DataProcCall @[1] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	ForLoop @[2] { 
	 ProgEl_List @.loop_code = [1] {
	  CssExpr @[0] { };
	 };
	};
       };
      };
      VarIncr @[7] { };
     };
    };
    MethodCall @[5] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    DataGroupProg @[6] { 
     DataOpList @.group_spec.ops = [7] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
      DataGroupEl @[6] { };
     };
    };
    DataGroupProg @[7] { 
     DataOpList @.group_spec.ops = [6] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
     };
    };
    MemberMethodCall @[8] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    MathCall @[9] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MathCall @[10] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    DataGroupProg @[11] { 
     DataOpList @.group_spec.ops = [17] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
      DataGroupEl @[4] { };
      DataGroupEl @[5] { };
      DataGroupEl @[6] { };
      DataGroupEl @[7] { };
      DataGroupEl @[8] { };
      DataGroupEl @[9] { };
      DataGroupEl @[10] { };
      DataGroupEl @[11] { };
      DataGroupEl @[12] { };
      DataGroupEl @[13] { };
      DataGroupEl @[14] { };
      DataGroupEl @[15] { };
      DataGroupEl @[16] { };
     };
    };
    MemberAssign @[12] { };
    MemberAssign @[13] { };
   };
  };
  Program @[11] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [2] {
    DataTable @[0] { 
     DataTableCols @.data = [2] {
      float_Data @[0] { };
      float_Data @[1] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [1] {
      float_Data @[0] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [4] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
   };

   ProgVar_List @.vars = [0] {
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [9] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [3] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
       };
      };
      AssignExpr @[2] { };
      MathCall @[3] { 
       ProgArg_List @.meth_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
      MethodCall @[4] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[5] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[6] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      CssExpr @[7] { };
      CssExpr @[8] { };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Program @[12] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [3] {
    DataTable @[0] { 
     DataTableCols @.data = [2] {
      float_Data @[0] { };
      float_Data @[1] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [2] {
      float_Data @[0] { };
      float_Data @[1] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[2] { 
     DataTableCols @.data = [2] {
      float_Data @[0] { };
      float_Data @[1] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [3] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   ProgVar_List @.vars = [6] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [22] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [8] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
       };
      };
      MethodCall @[1] { 
       ProgArg_List @.meth_args = [0] {
       };
      };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      AssignExpr @[5] { };
      AssignExpr @[6] { };
      AssignExpr @[7] { };
      AssignExpr @[8] { };
      AssignExpr @[9] { };
      AssignExpr @[10] { };
      AssignExpr @[11] { };
      ForLoop @[12] { 
       ProgEl_List @.loop_code = [4] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
	MethodCall @[1] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	If @[2] { 
	 ProgEl_List @.true_code = [10] {
	  MethodCall @[0] { 
	   ProgArg_List @.meth_args = [0] {
	   };
	  };
	  MethodCall @[1] { 
	   ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	   };
	  };
	  PrintExpr @[2] { };
	  MemberAssign @[3] { };
	  MemberMethodCall @[4] { 
	   ProgArg_List @.meth_args = [8] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	   };
	  };
	  MemberAssign @[5] { };
	  MethodCall @[6] { 
	   ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	   };
	  };
	  AssignExpr @[7] { };
	  VarIncr @[8] { };
	  VarIncr @[9] { };
	 };
	};
	Else @[3] { 
	 ProgEl_List @.true_code = [3] {
	  AssignExpr @[0] { };
	  VarIncr @[1] { };
	  VarIncr @[2] { };
	 };
	};
       };
      };
      AssignExpr @[13] { };
      MathCall @[14] { 
       ProgArg_List @.meth_args = [6] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
	ProgArg @[4] { };
	ProgArg @[5] { };
       };
      };
      MethodCall @[15] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[16] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      MethodCall @[17] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
      CssExpr @[18] { };
      CssExpr @[19] { };
      AssignExpr @[20] { };
      AssignExpr @[21] { };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    FunctionCall @[1] { 
     ProgArg_List @.fun_args = [1] {
      ProgArg @[0] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [9] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @[0] { 
      taList @.seeds = [25] {
       RndSeed @[0] { };
       RndSeed @[1] { };
       RndSeed @[2] { };
       RndSeed @[3] { };
       RndSeed @[4] { };
       RndSeed @[5] { };
       RndSeed @[6] { };
       RndSeed @[7] { };
       RndSeed @[8] { };
       RndSeed @[9] { };
       RndSeed @[10] { };
       RndSeed @[11] { };
       RndSeed @[12] { };
       RndSeed @[13] { };
       RndSeed @[14] { };
       RndSeed @[15] { };
       RndSeed @[16] { };
       RndSeed @[17] { };
       RndSeed @[18] { };
       RndSeed @[19] { };
       RndSeed @[20] { };
       RndSeed @[21] { };
       RndSeed @[22] { };
       RndSeed @[23] { };
       RndSeed @[24] { };
      };
     };
     RndSeed @[1] { };
    };

    ProgVar_List @.objs_vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    ProgVar_List @.vars = [10] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [11] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     CssExpr @[7] { };
     WhileLoop @[8] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[9] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [7] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     NetCounterInit @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[10] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [25] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [53] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
       NetMonItem @[26] { };
       NetMonItem @[27] { };
       NetMonItem @[28] { };
       NetMonItem @[29] { };
       NetMonItem @[30] { };
       NetMonItem @[31] { };
       NetMonItem @[32] { };
       NetMonItem @[33] { };
       NetMonItem @[34] { };
       NetMonItem @[35] { };
       NetMonItem @[36] { };
       NetMonItem @[37] { };
       NetMonItem @[38] { };
       NetMonItem @[39] { };
       NetMonItem @[40] { };
       NetMonItem @[41] { };
       NetMonItem @[42] { };
       NetMonItem @[43] { };
       NetMonItem @[44] { };
       NetMonItem @[45] { };
       NetMonItem @[46] { };
       NetMonItem @[47] { };
       NetMonItem @[48] { };
       NetMonItem @[49] { };
       NetMonItem @[50] { };
       NetMonItem @[51] { };
       NetMonItem @[52] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [8] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[7] { };
    };
   };
   Program @[8] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [8] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [1] {
     DynEnumType @[0] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @[0] { };
       DynEnumItem @[1] { };
       DynEnumItem @[2] { };
      };
     };
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [8] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [14] {
     ProgramCall @[0] { 
      ProgArg_List @.prog_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
     NetCounterInit @[1] { };
     MemberAssign @[2] { };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[7] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[10] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[11] { };
     ProgramCall @[12] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[13] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [11] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @[0] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[10] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @[0] { };
       ProgVar @[1] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @[3] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @[4] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [24] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @[5] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [29] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
       NetMonItem @[13] { };
       NetMonItem @[14] { };
       NetMonItem @[15] { };
       NetMonItem @[16] { };
       NetMonItem @[17] { };
       NetMonItem @[18] { };
       NetMonItem @[19] { };
       NetMonItem @[20] { };
       NetMonItem @[21] { };
       NetMonItem @[22] { };
       NetMonItem @[23] { };
       NetMonItem @[24] { };
       NetMonItem @[25] { };
       NetMonItem @[26] { };
       NetMonItem @[27] { };
       NetMonItem @[28] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @[6] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     DataGroupProg @[1] { 
      DataOpList @.group_spec.ops = [3] {
       DataGroupEl @[0] { };
       DataGroupEl @[1] { };
       DataGroupEl @[2] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     UserScript @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @[7] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [2] {
     ActBasedRF @[0] { };
     DataTable @[1] { 
      DataTableCols @.data = [5] {
       float_Data @[0] { };
       float_Data @[1] { };
       float_Data @[2] { };
       float_Data @[3] { };
       float_Data @[4] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [4] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [3] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     Else @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };

     T3Panel_List @.panels = [8] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [2] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 NetViewStateItem_List @.net_state_text.state_items = [20] {
	  NetViewStateItem @[0] { };
	  NetViewStateItem @[1] { };
	  NetViewStateItem @[2] { };
	  NetViewStateItem @[3] { };
	  NetViewStateItem @[4] { };
	  NetViewStateItem @[5] { };
	  NetViewStateItem @[6] { };
	  NetViewStateItem @[7] { };
	  NetViewStateItem @[8] { };
	  NetViewStateItem @[9] { };
	  NetViewStateItem @[10] { };
	  NetViewStateItem @[11] { };
	  NetViewStateItem @[12] { };
	  NetViewStateItem @[13] { };
	  NetViewStateItem @[14] { };
	  NetViewStateItem @[15] { };
	  NetViewStateItem @[16] { };
	  NetViewStateItem @[17] { };
	  NetViewStateItem @[18] { };
	  NetViewStateItem @[19] { };
	 };

	 ScaleRange_List @.scale_ranges = [48] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	  ScaleRange @[15] { };
	  ScaleRange @[16] { };
	  ScaleRange @[17] { };
	  ScaleRange @[18] { };
	  ScaleRange @[19] { };
	  ScaleRange @[20] { };
	  ScaleRange @[21] { };
	  ScaleRange @[22] { };
	  ScaleRange @[23] { };
	  ScaleRange @[24] { };
	  ScaleRange @[25] { };
	  ScaleRange @[26] { };
	  ScaleRange @[27] { };
	  ScaleRange @[28] { };
	  ScaleRange @[29] { };
	  ScaleRange @[30] { };
	  ScaleRange @[31] { };
	  ScaleRange @[32] { };
	  ScaleRange @[33] { };
	  ScaleRange @[34] { };
	  ScaleRange @[35] { };
	  ScaleRange @[36] { };
	  ScaleRange @[37] { };
	  ScaleRange @[38] { };
	  ScaleRange @[39] { };
	  ScaleRange @[40] { };
	  ScaleRange @[41] { };
	  ScaleRange @[42] { };
	  ScaleRange @[43] { };
	  ScaleRange @[44] { };
	  ScaleRange @[45] { };
	  ScaleRange @[46] { };
	  ScaleRange @[47] { };
	 };
	};
	GridTableView @[1] { 
	 T3DataView_List @.children = [8] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	  GridColView @[5] { };
	  GridColView @[6] { };
	  GridColView @[7] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [1] {
	  GridColView @[0] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [134] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	  GraphColView @[20] { };
	  GraphColView @[21] { };
	  GraphColView @[22] { };
	  GraphColView @[23] { };
	  GraphColView @[24] { };
	  GraphColView @[25] { };
	  GraphColView @[26] { };
	  GraphColView @[27] { };
	  GraphColView @[28] { };
	  GraphColView @[29] { };
	  GraphColView @[30] { };
	  GraphColView @[31] { };
	  GraphColView @[32] { };
	  GraphColView @[33] { };
	  GraphColView @[34] { };
	  GraphColView @[35] { };
	  GraphColView @[36] { };
	  GraphColView @[37] { };
	  GraphColView @[38] { };
	  GraphColView @[39] { };
	  GraphColView @[40] { };
	  GraphColView @[41] { };
	  GraphColView @[42] { };
	  GraphColView @[43] { };
	  GraphColView @[44] { };
	  GraphColView @[45] { };
	  GraphColView @[46] { };
	  GraphColView @[47] { };
	  GraphColView @[48] { };
	  GraphColView @[49] { };
	  GraphColView @[50] { };
	  GraphColView @[51] { };
	  GraphColView @[52] { };
	  GraphColView @[53] { };
	  GraphColView @[54] { };
	  GraphColView @[55] { };
	  GraphColView @[56] { };
	  GraphColView @[57] { };
	  GraphColView @[58] { };
	  GraphColView @[59] { };
	  GraphColView @[60] { };
	  GraphColView @[61] { };
	  GraphColView @[62] { };
	  GraphColView @[63] { };
	  GraphColView @[64] { };
	  GraphColView @[65] { };
	  GraphColView @[66] { };
	  GraphColView @[67] { };
	  GraphColView @[68] { };
	  GraphColView @[69] { };
	  GraphColView @[70] { };
	  GraphColView @[71] { };
	  GraphColView @[72] { };
	  GraphColView @[73] { };
	  GraphColView @[74] { };
	  GraphColView @[75] { };
	  GraphColView @[76] { };
	  GraphColView @[77] { };
	  GraphColView @[78] { };
	  GraphColView @[79] { };
	  GraphColView @[80] { };
	  GraphColView @[81] { };
	  GraphColView @[82] { };
	  GraphColView @[83] { };
	  GraphColView @[84] { };
	  GraphColView @[85] { };
	  GraphColView @[86] { };
	  GraphColView @[87] { };
	  GraphColView @[88] { };
	  GraphColView @[89] { };
	  GraphColView @[90] { };
	  GraphColView @[91] { };
	  GraphColView @[92] { };
	  GraphColView @[93] { };
	  GraphColView @[94] { };
	  GraphColView @[95] { };
	  GraphColView @[96] { };
	  GraphColView @[97] { };
	  GraphColView @[98] { };
	  GraphColView @[99] { };
	  GraphColView @[100] { };
	  GraphColView @[101] { };
	  GraphColView @[102] { };
	  GraphColView @[103] { };
	  GraphColView @[104] { };
	  GraphColView @[105] { };
	  GraphColView @[106] { };
	  GraphColView @[107] { };
	  GraphColView @[108] { };
	  GraphColView @[109] { };
	  GraphColView @[110] { };
	  GraphColView @[111] { };
	  GraphColView @[112] { };
	  GraphColView @[113] { };
	  GraphColView @[114] { };
	  GraphColView @[115] { };
	  GraphColView @[116] { };
	  GraphColView @[117] { };
	  GraphColView @[118] { };
	  GraphColView @[119] { };
	  GraphColView @[120] { };
	  GraphColView @[121] { };
	  GraphColView @[122] { };
	  GraphColView @[123] { };
	  GraphColView @[124] { };
	  GraphColView @[125] { };
	  GraphColView @[126] { };
	  GraphColView @[127] { };
	  GraphColView @[128] { };
	  GraphColView @[129] { };
	  GraphColView @[130] { };
	  GraphColView @[131] { };
	  GraphColView @[132] { };
	  GraphColView @[133] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [83] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	  GraphPlotView @[32] { };
	  GraphPlotView @[33] { };
	  GraphPlotView @[34] { };
	  GraphPlotView @[35] { };
	  GraphPlotView @[36] { };
	  GraphPlotView @[37] { };
	  GraphPlotView @[38] { };
	  GraphPlotView @[39] { };
	  GraphPlotView @[40] { };
	  GraphPlotView @[41] { };
	  GraphPlotView @[42] { };
	  GraphPlotView @[43] { };
	  GraphPlotView @[44] { };
	  GraphPlotView @[45] { };
	  GraphPlotView @[46] { };
	  GraphPlotView @[47] { };
	  GraphPlotView @[48] { };
	  GraphPlotView @[49] { };
	  GraphPlotView @[50] { };
	  GraphPlotView @[51] { };
	  GraphPlotView @[52] { };
	  GraphPlotView @[53] { };
	  GraphPlotView @[54] { };
	  GraphPlotView @[55] { };
	  GraphPlotView @[56] { };
	  GraphPlotView @[57] { };
	  GraphPlotView @[58] { };
	  GraphPlotView @[59] { };
	  GraphPlotView @[60] { };
	  GraphPlotView @[61] { };
	  GraphPlotView @[62] { };
	  GraphPlotView @[63] { };
	  GraphPlotView @[64] { };
	  GraphPlotView @[65] { };
	  GraphPlotView @[66] { };
	  GraphPlotView @[67] { };
	  GraphPlotView @[68] { };
	  GraphPlotView @[69] { };
	  GraphPlotView @[70] { };
	  GraphPlotView @[71] { };
	  GraphPlotView @[72] { };
	  GraphPlotView @[73] { };
	  GraphPlotView @[74] { };
	  GraphPlotView @[75] { };
	  GraphPlotView @[76] { };
	  GraphPlotView @[77] { };
	  GraphPlotView @[78] { };
	  GraphPlotView @[79] { };
	  GraphPlotView @[80] { };
	  GraphPlotView @[81] { };
	  GraphPlotView @[82] { };
	 };

	 GraphPlotView_List @.errbars = [83] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	  GraphPlotView @[32] { };
	  GraphPlotView @[33] { };
	  GraphPlotView @[34] { };
	  GraphPlotView @[35] { };
	  GraphPlotView @[36] { };
	  GraphPlotView @[37] { };
	  GraphPlotView @[38] { };
	  GraphPlotView @[39] { };
	  GraphPlotView @[40] { };
	  GraphPlotView @[41] { };
	  GraphPlotView @[42] { };
	  GraphPlotView @[43] { };
	  GraphPlotView @[44] { };
	  GraphPlotView @[45] { };
	  GraphPlotView @[46] { };
	  GraphPlotView @[47] { };
	  GraphPlotView @[48] { };
	  GraphPlotView @[49] { };
	  GraphPlotView @[50] { };
	  GraphPlotView @[51] { };
	  GraphPlotView @[52] { };
	  GraphPlotView @[53] { };
	  GraphPlotView @[54] { };
	  GraphPlotView @[55] { };
	  GraphPlotView @[56] { };
	  GraphPlotView @[57] { };
	  GraphPlotView @[58] { };
	  GraphPlotView @[59] { };
	  GraphPlotView @[60] { };
	  GraphPlotView @[61] { };
	  GraphPlotView @[62] { };
	  GraphPlotView @[63] { };
	  GraphPlotView @[64] { };
	  GraphPlotView @[65] { };
	  GraphPlotView @[66] { };
	  GraphPlotView @[67] { };
	  GraphPlotView @[68] { };
	  GraphPlotView @[69] { };
	  GraphPlotView @[70] { };
	  GraphPlotView @[71] { };
	  GraphPlotView @[72] { };
	  GraphPlotView @[73] { };
	  GraphPlotView @[74] { };
	  GraphPlotView @[75] { };
	  GraphPlotView @[76] { };
	  GraphPlotView @[77] { };
	  GraphPlotView @[78] { };
	  GraphPlotView @[79] { };
	  GraphPlotView @[80] { };
	  GraphPlotView @[81] { };
	  GraphPlotView @[82] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[3] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [4] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[4] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [5] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	  GridColView @[2] { };
	  GridColView @[3] { };
	  GridColView @[4] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[5] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @[0] { 
	 T3DataView_List @.children = [2] {
	  GridColView @[0] { };
	  GridColView @[1] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[6] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [73] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	  GraphColView @[13] { };
	  GraphColView @[14] { };
	  GraphColView @[15] { };
	  GraphColView @[16] { };
	  GraphColView @[17] { };
	  GraphColView @[18] { };
	  GraphColView @[19] { };
	  GraphColView @[20] { };
	  GraphColView @[21] { };
	  GraphColView @[22] { };
	  GraphColView @[23] { };
	  GraphColView @[24] { };
	  GraphColView @[25] { };
	  GraphColView @[26] { };
	  GraphColView @[27] { };
	  GraphColView @[28] { };
	  GraphColView @[29] { };
	  GraphColView @[30] { };
	  GraphColView @[31] { };
	  GraphColView @[32] { };
	  GraphColView @[33] { };
	  GraphColView @[34] { };
	  GraphColView @[35] { };
	  GraphColView @[36] { };
	  GraphColView @[37] { };
	  GraphColView @[38] { };
	  GraphColView @[39] { };
	  GraphColView @[40] { };
	  GraphColView @[41] { };
	  GraphColView @[42] { };
	  GraphColView @[43] { };
	  GraphColView @[44] { };
	  GraphColView @[45] { };
	  GraphColView @[46] { };
	  GraphColView @[47] { };
	  GraphColView @[48] { };
	  GraphColView @[49] { };
	  GraphColView @[50] { };
	  GraphColView @[51] { };
	  GraphColView @[52] { };
	  GraphColView @[53] { };
	  GraphColView @[54] { };
	  GraphColView @[55] { };
	  GraphColView @[56] { };
	  GraphColView @[57] { };
	  GraphColView @[58] { };
	  GraphColView @[59] { };
	  GraphColView @[60] { };
	  GraphColView @[61] { };
	  GraphColView @[62] { };
	  GraphColView @[63] { };
	  GraphColView @[64] { };
	  GraphColView @[65] { };
	  GraphColView @[66] { };
	  GraphColView @[67] { };
	  GraphColView @[68] { };
	  GraphColView @[69] { };
	  GraphColView @[70] { };
	  GraphColView @[71] { };
	  GraphColView @[72] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [32] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	 };

	 GraphPlotView_List @.errbars = [32] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	  GraphPlotView @[16] { };
	  GraphPlotView @[17] { };
	  GraphPlotView @[18] { };
	  GraphPlotView @[19] { };
	  GraphPlotView @[20] { };
	  GraphPlotView @[21] { };
	  GraphPlotView @[22] { };
	  GraphPlotView @[23] { };
	  GraphPlotView @[24] { };
	  GraphPlotView @[25] { };
	  GraphPlotView @[26] { };
	  GraphPlotView @[27] { };
	  GraphPlotView @[28] { };
	  GraphPlotView @[29] { };
	  GraphPlotView @[30] { };
	  GraphPlotView @[31] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[7] { 
       T3DataView_List @.root_view.children = [2] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [2] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };
	};
	GraphTableView @[1] { 
	 T3DataView_List @.children = [2] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };

	 GraphPlotView_List @.errbars = [6] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   BaseSpec_Group @.specs = [3] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [4] {
      LeabraUnitSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraUnitSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraUnitSpec @[2] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraUnitSpec @[3] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraLayerSpec @[1] { 
     BaseSpec_Group @.children = [4] {
      LeabraLayerSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[2] { 
       BaseSpec_Group @.children = [0] {
       };
      };
      LeabraLayerSpec @[3] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraConSpec @[2] { 
     BaseSpec_Group @.children = [5] {
      LeabraBiasSpec @[0] { 
       BaseSpec_Group @.children = [2] {
	LeabraBiasSpec @[0] { 
	 BaseSpec_Group @.children = [0] {
	 };

	 Schedule @.lrate_sched = [2] {
	  SchedItem @[0] { };
	  SchedItem @[1] { };
	 };
	};
	LeabraBiasSpec @[1] { 
	 BaseSpec_Group @.children = [0] {
	 };

	 Schedule @.lrate_sched = [2] {
	  SchedItem @[0] { };
	  SchedItem @[1] { };
	 };
	};
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
      LeabraConSpec @[1] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
      LeabraConSpec @[2] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
      LeabraConSpec @[3] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
      LeabraConSpec @[4] { 
       BaseSpec_Group @.children = [2] {
	LeabraConSpec @[0] { 
	 BaseSpec_Group @.children = [0] {
	 };

	 Schedule @.lrate_sched = [2] {
	  SchedItem @[0] { };
	  SchedItem @[1] { };
	 };
	};
	LeabraConSpec @[1] { 
	 BaseSpec_Group @.children = [0] {
	 };

	 Schedule @.lrate_sched = [2] {
	  SchedItem @[0] { };
	  SchedItem @[1] { };
	 };
	};
       };

       Schedule @.lrate_sched = [2] {
	SchedItem @[0] { };
	SchedItem @[1] { };
       };
      };
     };

     Schedule @.lrate_sched = [2] {
      SchedItem @[0] { };
      SchedItem @[1] { };
     };
    };
    BaseSpec_Group @.gp[0] = [3] { 
     FullPrjnSpec @[0] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TiledGpRFPrjnSpec @[1] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TiledGpRFPrjnSpec @[2] { 
      BaseSpec_Group @.children = [1] {
       TiledGpRFPrjnSpec @[0] { 
	BaseSpec_Group @.children = [0] {
	};
       };
      };
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   NetMonItem_List @.monitor.items = [0] {
   };

   DataTableCols @.mon_data.data = [0] {
   };

   DataOpList @.mon_data.last_sort_spec.ops = [0] {
   };

   Layer_Group @.layers = [5] {
    LeabraLayer @[0] { 
     Projection_List @.projections = [0] {
     };
    };
    LeabraLayer @[1] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[2] { 
     Projection_List @.projections = [2] {
      LeabraPrjn @[0] { };
      LeabraPrjn @[1] { };
     };
    };
    LeabraLayer @[3] { 
     Projection_List @.projections = [1] {
      LeabraPrjn @[0] { };
     };
    };
    LeabraLayer @[4] { 
     Projection_List @.projections = [0] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="objrec_expt";
 desc="This simulation explores how a hierarchy of areas in the ventral stream of visual processing (up to inferotemporal (IT) cortex) can produce robust object recognition that is invariant to changes in position, size, etc of retinal input images.";
 tags="Object Recognition, Invariance, Binding, Hierarchy, Categorization";
 version {
  major=8;
  minor=0;
  step=7;
 };
 author="Randall C. O'Reilly";
 email="emergent-users@grey.colorado.edu";
 license {
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite="OReillyMunakataFrankEtAl12";
 wiki {wiki="CCN": page_name="CCNBook/Sims/Perception/Objrec": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="CCN";
   url="CCNBook/Sims/Perception/Objrec";
   full_url="https://grey.colorado.edu/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec";
   text_size=1;
   text="<html>
<head></head>
<body>
= Object Recognition =

* To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.

== Network Structure ==

We begin by looking at the network structure.  This model uses an updated visual processing front end, which results in significantly better performance in this model and other larger-scale models.  It goes straight from the visual input image through oriented edge detectors in the V1 layer, so there is no separate LGN structure in the model (in contrast to model described in the textbook).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, which process a localized patch of the input image.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  The kWTA level is set to 1 unit within a V1 column, and there is a special more flexible inhibition scheme that spreads this inhibition across different columns: each column gets the maximum of its own inhibition or .6 times the inhibition of the column in the layer that has the highest inhibition level.  This ensures that columns not receiving a significantly strong input will not be active (because they would require less than the .6 * max inhibition), while those that do receive a strong input compute their own standard kwta value.  This dynamic could be achieved through diffuse lateral excitatory connections between columns synapsing onto inhibitory interneurons, and a nonlinear integration of this excitation. 

The V2 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here, with 10%  activity per hypercolumn.  Each hypercolumn of V2 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the V4_IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V2 layer.  Finally, the Output layer has 20 units, one for each of the different objects.

* You can view the patterns of connectivity described above by clicking on r.wt, and then on units in the various layers.

== Training ==

Now, let's see how the network is trained.  

* First, go back to viewing act in the networks display.  Then, do <code>Train: Init</code> and <code>Step Settle</code> in the control panel.

You will see the minus phase of settling for the input image, which is one of the shapes shown in Figure 8.12 in the textbook, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with oriented edge detctor filters, like those that developed in the v1rf model.  ''Note that this differs from the original model described in the text.''

* Press Step Settle again to see the plus phase.  You can then continue to Step Trial through a series of inputs to get a feel for what some of the different input patterns look like.

Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 100 epochs of 100 object inputs per epoch, or 10,000 object presentations. However, it took only roughly 50 epochs (5,000 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.

* Load the weights using <code>LoadWeights</code> on the control panel, and select <code>objrec_train1.wts.gz</code>.  Then, Step Settle a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task.

You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 

To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.

* To run the test, do Test: Init and Run.  To load the log file, do <code>LoadTestData</code> and select <code>objrec_test1.tst.dat</code>, and then click on the [[.T3Tab.TestErrorData]] to see the resulting graph.

You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.

== Receptive Field Analysis ==

Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the ''receptive fields'' of units in the V2 and V4_IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (ActBasedRField trg_lay_name), which should be V2 to start with.

The activation-based receptive field computes the patterns of activity across all the layers in the network, weighted by the activity of the units in the target layer.  If a target unit (e.g., a unit in V2) is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.

* Click on the [[.T3Tab.ActRFData]] tab -- if you ran the test above, then the results for V2 should be there.  Otherwise, in the ActRFData middle panel tab, at the bottom, click on <code>Load Any Data</code> and select <code>objrec_actrf_v2.dat</code>, which should then populate the display with lots of colorful data.  You can also use the Load ActRFData button in the control panel to do the same thing.

The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V2 unit -- you can see which one by noting the brightest yellow unit in the V2 layer -- it starts in the lower left and goes within hypercolumn first, to the upper right.

As shown schematically in Figure 8.10 in the textbook, you should see that these V2 units are encoding simple conjunctions of line elements, in a small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.

<hr>

'''Question 8.4''' <em> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V2 receptive fields, in terms of the overall computation performed by the network.</em>

<hr>

* Continue to scroll through the V2 units, but now notice the activation based receptive field for the Output units.

You should see that there are typically a handfull of output units (i.e., objects) that each V2 unit is strongly co-activated with. This indicates a distributed representation, where each V2 unit participates in encoding multiple different objects.

<hr>

'''Question 8.5''' <em> Using the images of the objects shown in Figure 8.12 in the textbook, (which are in the same configuration as the output units), explain one V2 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)</em>

<hr>

* Next, do LoadActRFData to load the <code>objrec_actrf_v4it.dat</code> data for the V4_IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer.

You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  

<hr>

'''Question 8.6''' <em> Based on your probing of the V4 units, do they appear to code for entire objects, or just parts of different objects?  Explain.</em>

<hr>

One can also compare the relative selectivity of these V4 units for particular output units (objects) as compared to the V2 units.  By focusing specifically on the number of objects a given unit clearly ''doesn't'' participate in, it should be clear that the V4 units are more selective than the V2 units, which substantiates the idea that the V4 units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects.  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.

<hr>

'''Question 8.7''' <em> This question is no longer applicable, as the associated form of analysis is not used for this model anymore.  </em>

<hr>

== Summary and Discussion of Receptive Field Analyses ==

Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.

You may be wondering why the V2 and V4 representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V2, whereas the V4 neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the V4 representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V2 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition (see Chapter 7 in the textbook).

The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the V4 representations can play an important role in enabling the network to generalize effectively.  To the extent that V4 representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these V4 representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.

== Generalization Test ==

In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in Figure 8.12) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the V4_IT representations and the appropriate output units, and good generalization should result to all other spatial locations.

In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from ''catastrophic interference'' (see textbook Chapters 7 and 9 for more discussion of this issue).  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for 60 epochs of 100 objects per epoch, with a learning rate of .01 for 10 epochs followed by .001 for 50.  Importantly, the learning rate in everything but the V4_IT to Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.

* To setup the system for this form of generalization training, click the GenTrain button in the Control Panel.  This loads the objrec_train1.wts.gz weights, sets the epoch counter to 90 to get a learning rate of .01 for 10 epochs, and sets the environment generation to be of the form described above.  Once you do this, you can just do Train: Init and '''NOT''' initialize the weights, followed by Run.  This could take 10s of minutes to several hours, depending on your computer.  Thus, you can bypass this step by doing LoadWeights and selecting the objrec_train2.wts.gz file

* After the network is trained, you can then run the testing (Test: Init, Run) as before, or just load the test data from objrec_test2.tst.dat.

The results show that the network got around 80% correct (roughly 20% error) on the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the V4_IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.

To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).

</body>
</html>
";
   html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>CCNBook/Sims/Perception/Objrec - Computational Cognitive Neuroscience Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"CCNBook/Sims/Perception/Objrec\",\"wgTitle\":\"CCNBook/Sims/Perception/Objrec\",\"wgCurRevisionId\":6213,\"wgRevisionId\":6213,\"wgArticleId\":653,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[\"PublishedProject\"],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"CCNBook/Sims/Perception/Objrec\",\"wgRelevantArticleId\":653,\"wgUserId\":3,\"wgUserEditCount\":3261,\"wgUserRegistration\":1200074928000,\"wgUserNewMsgRevisionId\":
null,\"wgIsProbablyEditable\":!0,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/CompCogNeuro/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"editsectiononrightclick\":\"1\",\"enotifminoredits\":\"1\",\"previewontop\":\"\",\"watchmoves\":\"1\",\"searchNs1\":\"1\",\"searchNs2\":\"1\",\"searchNs3\":\"1\",\"searchNs4\":\"1\",\"searchNs5\":\"1\",\"searchNs10\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"d0d481c226fbf5f75451a79f689ec8ed40c261a9\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"ce123ada44a95bd8c305007413a508ef5a9649aa+\\\\\",\"patrolToken\":\"e512c11738b7de682481d31734324ce05a9649aa+\\\\\",\"watchToken\":\"85a2bcc26e8bf6ce538e8aba491903105a9649aa+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async=\"\" src=\"/CompCogNeuro/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.4\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"CCNBook/Sims/Perception/Objrec\" href=\"/CompCogNeuro/index.php?title=Special:ExportRDF/CCNBook/Sims/Perception/Objrec&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/CompCogNeuro/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/CompCogNeuro/skins/Vector/csshover.min.htc\")}</style><![endif]-->
</head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-CCNBook_Sims_Perception_Objrec skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">CCNBook/Sims/Perception/Objrec</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><table style=\"width: 35em; font-size: 90%; border: 1px solid #aaaaaa; background-color: #f9f9f9; color: black; margin-bottom: 0.5em; margin-left: 1em; padding: 0.2em; float: right; clear: right; text-align:left;\">
<tbody><tr>
<th style=\"text-align: center; background-color:#ccccff;\" colspan=\"2\"><big>CCNBook/Sims/Perception/Objrec</big>
</th></tr>
<tr>
<th> Project Name
</th>
<td> objrec
</td></tr>
<tr>
<th> Filename
</th>
<td> <a href=\"/CompCogNeuro/index.php/File:objrec.proj\" title=\"File:objrec.proj\">File:objrec.proj</a> <a href=\"/CompCogNeuro/index.php?title=.OpenProjectFromWeb(objrec.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".OpenProjectFromWeb(objrec.proj,https://grey.colorado.edu/CompCogNeuro/index.php/MainPage) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Open Project in emergent</span></a>
</td></tr>
<tr>
<th> Author
</th>
<td>  Randall C. O'Reilly
</td></tr>
<tr>
<th> Email
</th>
<td> emergent-users@grey.colorado.edu
</td></tr>
<tr>
<th> Publication
</th>
<td> <a href=\"/CompCogNeuro/index.php/OReillyMunakataFrankEtAl12\" title=\"OReillyMunakataFrankEtAl12\">(O'Reilly, Munakata, Frank, Hazy, &amp; Contributors, 2012)</a>
</td></tr>
<tr>
<th> First Published
</th>
<td> Aug 13 2016
</td></tr>
<tr>
<th> Tags
</th>
<td>  Object Recognition, Invariance, Binding, Hierarchy, Categorization
</td></tr>
<tr>
<th> Description
</th>
<td>  This simulation explores how a hierarchy of areas in the ventral stream of visual processing (up to inferotemporal (IT) cortex) can produce robust object recognition that is invariant to changes in position, size, etc of retinal input images.
</td></tr>
<tr>
<th> Updated
</th>
<td> 13 August 2016,  14 January 2017,  14 January 2018
</td></tr>
<tr>
<th> Versions
</th>
<td> 8.0.0,  8.0.2,  8.0.3
</td></tr>
<tr>
<th> Emergent Versions
</th>
<td> 8.0.0,  8.0.4,  8.5.0
</td></tr>
<tr>
<th> Other Files
</th>
<td> <a href=\"/CompCogNeuro/index.php/File:objrec_actrf_it.dat\" title=\"File:objrec actrf it.dat\">File:objrec actrf it.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_actrf_v4.dat\" title=\"File:objrec actrf v4.dat\">File:objrec actrf v4.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_test1.tst.dat\" title=\"File:objrec test1.tst.dat\">File:objrec test1.tst.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_test2.tst.dat\" title=\"File:objrec test2.tst.dat\">File:objrec test2.tst.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_train1.epc.dat\" title=\"File:objrec train1.epc.dat\">File:objrec train1.epc.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_train1.wts.gz\" title=\"File:objrec train1.wts.gz\">File:objrec train1.wts.gz</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_train2.epc.dat\" title=\"File:objrec train2.epc.dat\">File:objrec train2.epc.dat</a>, <a href=\"/CompCogNeuro/index.php/File:objrec_train2.wts.gz\" title=\"File:objrec train2.wts.gz\">File:objrec train2.wts.gz</a>
</td></tr></tbody></table>
<p><br>
Back to <a href=\"/CompCogNeuro/index.php/CCNBook/Sims/All\" title=\"CCNBook/Sims/All\">CCNBook/Sims/All</a> or <a href=\"/CompCogNeuro/index.php/CCNBook/Perception\" title=\"CCNBook/Perception\">Perception</a>.
</p><p><b>IMPORTANT:</b> to skip training and testing, you need to grab the <code>.wts.gz</code> and <code>.dat</code> files from the <b>Other Files</b> section.
</p>
<div id=\"toc\" class=\"toc\"><div id=\"toctitle\"><h2>Contents</h2></div>
<ul>
<li class=\"toclevel-1 tocsection-1\"><a href=\"#Introduction\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Introduction</span></a></li>
<li class=\"toclevel-1 tocsection-2\"><a href=\"#Network_Structure\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Network Structure</span></a></li>
<li class=\"toclevel-1 tocsection-3\"><a href=\"#Training\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Training</span></a></li>
<li class=\"toclevel-1 tocsection-4\"><a href=\"#Receptive_Field_Analysis\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Receptive Field Analysis</span></a></li>
<li class=\"toclevel-1 tocsection-5\"><a href=\"#Summary_and_Discussion_of_Receptive_Field_Analyses\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Summary and Discussion of Receptive Field Analyses</span></a>
<ul>
<li class=\"toclevel-2 tocsection-6\"><a href=\"#Generalization_Test\"><span class=\"tocnumber\">5.1</span> <span class=\"toctext\">Generalization Test</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class=\"mw-headline\" id=\"Introduction\">Introduction</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=1\" title=\"Edit section: Introduction\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>This simulation explores how a hierarchy of areas in the ventral stream of visual processing (up to inferotemporal (IT) cortex) can produce robust object recognition that is invariant to changes in position, size, etc of retinal input images.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> It is recommended that you <a href=\"/CompCogNeuro/index.php?title=.docs.ProjectDocs.OpenInWindow()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".docs.ProjectDocs.OpenInWindow() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">click here to undock</span></a> this document from the main project window. Use the Window menu to find this window if you lose it, and you can always return to this document by browsing to this document from the <span style=\"background:#FFFFD0\"><tt><b>docs</b></tt></span> section in the left browser panel of the project's main window. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Network_Structure\">Network Structure</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=2\" title=\"Edit section: Network Structure\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<div class=\"noprint\" id=\"fig1\"><a href=\"#fig1\"></a></div>
<div class=\"thumb tright\"><div class=\"thumbinner\" style=\"width:402px;\"><a href=\"/CompCogNeuro/index.php/File:fig_v1_visual_filters_2016.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/CompCogNeuro/images/thumb/8/83/fig_v1_visual_filters_2016.png/400px-fig_v1_visual_filters_2016.png\" width=\"400\" height=\"543\" class=\"thumbimage\" srcset=\"/mediawiki/sites/CompCogNeuro/images/thumb/8/83/fig_v1_visual_filters_2016.png/600px-fig_v1_visual_filters_2016.png 1.5x, /mediawiki/sites/CompCogNeuro/images/8/83/fig_v1_visual_filters_2016.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/CompCogNeuro/index.php/File:fig_v1_visual_filters_2016.png\" class=\"internal\" title=\"Enlarge\"></a></div><b>Figure OR.1:</b> V1 filtering steps, simulating simple and complex cell firing properties, including length-sum and end-stop cells.  Top shows organization of these filters in each 4x5 V1 hypercolumn</div></div></div>
<p>We begin by looking at the network structure, which goes from V1 to V4 to IT and then Output, where the name of the object is represented (area V2 is not represented in this model, because it is thought to be important for depth and figure-ground encoding which is not relevant here).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units, capturing in a very compact and efficient manner the kinds of representations we observed developing in the previous <a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Perception/V1Rf\" title=\"CCNBook/Sims/Perception/V1Rf\">V1Rf</a> simulation. Each hypercolumn contains a group of 20 (4x5) units, which process a localized patch of the input image.  These units encode oriented edges at 4 angles (along the X axis), and the rows represent simple and complex cells as follows (<span class=\"noprint\"> <a href=\"#fig1\">Figure </a>OR<a href=\"#fig1\">.1</a></span><span class=\"printonly\">Figure OR.1</span>): simple cells are represented by the last 2 rows encoding different polarities (bright below dark and vice-versa); the first row represents complex <i>length-sum </i> cells that integrate over polarity and neighboring simple cells; and the middle 2 rows are <i>end stop</i> units that are excited by a given length-sum orientation and inhibited by surrounding simple cells at one end.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  This means that there is both inhibitory competition across the whole V1 layer, but there is a greater degree of competition within a single hypercolumn, reflecting the fact that inhibitory neurons within a local region of cortex are more likely to receive input from neighboring excitatory neurons. This effect is approximated by having the FFFB inhibition operate at two scales at the same time: a stronger level of inhibition within the unit group (hypercolumn), and a lower level of inhibition across all units in the layer. This ensures that columns not receiving a significantly strong input will not be active at all (because they would get squashed from the layer-level inhibition generated by other columns with much more excitation), while there is also a higher level of competition to select the most appropriate features within the hypercolumn.  
</p><p>The V4 layer is also organized into a grid of hypercolumns, this time 5x5 in size, with each hypercolumn having 49 units (7x7).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here.  Each hypercolumn of V4 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V4 layer.  Finally, the Output layer has 20 units, one for each of the different objects.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You can view the patterns of connectivity described above by clicking on <span style=\"background:#FFFFD0\"><tt><b>r.wt</b></tt></span>, and then on units in the various layers. <br>
</td></tr>
</tbody></table>
<h1><span class=\"mw-headline\" id=\"Training\">Training</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=3\" title=\"Edit section: Training\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<div class=\"noprint\" id=\"fig2\"><a href=\"#fig2\"></a></div>
<div class=\"thumb tright\"><div class=\"thumbinner\" style=\"width:202px;\"><a href=\"/CompCogNeuro/index.php/File:fig_objrec_objs.png\" class=\"image\"><img alt=\"\" src=\"/mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/200px-fig_objrec_objs.png\" width=\"200\" height=\"201\" class=\"thumbimage\" srcset=\"/mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/300px-fig_objrec_objs.png 1.5x, /mediawiki/sites/CompCogNeuro/images/thumb/d/d3/fig_objrec_objs.png/400px-fig_objrec_objs.png 2x\"></a>  <div class=\"thumbcaption\"><div class=\"magnify\"><a href=\"/CompCogNeuro/index.php/File:fig_objrec_objs.png\" class=\"internal\" title=\"Enlarge\"></a></div><b>Figure OR.2:</b> Set of 20 objects composed from horizontal and vertical line elements used for the object recognition simulation.  By using a restricted set of visual feature elements, we can more easily understand how the model works, and also test for generalization to novel objects (object 18 and 19 are not trained initially, and then subsequently trained only in a relatively few locations -- learning there generalizes well to other locations).</div></div></div>
<p>Now, let's see how the network is trained.  
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> First, go back to viewing act in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ObjrecNet&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ObjrecNet (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Network</span></a> display.  Then, do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Init</span></a> and <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Step(.programs.LeabraQuarter)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Step(.programs.LeabraQuarter) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Quarter</span></a> for 3 times through the minus phase, in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>. <br>
</td></tr>
</tbody></table>
You will see the <i>minus phase</i> of settling for the input image, which is one of the shapes shown in <span class=\"noprint\"> <a href=\"#fig2\">Figure </a>OR<a href=\"#fig2\">.2</a></span><span class=\"printonly\">Figure OR.2</span>, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with the V1 oriented edge detectors shown in <div class=\"noprint\" id=\"fig1\"><a href=\"#fig1\"></a></div>
<p>[[ File:{{{2}}} | {{{3}}} | thumb | {{{4}}} | <b>Figure OR.1:</b> {{{5}}} ]].
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Press <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Step(.programs.LeabraQuarter)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Step(.programs.LeabraQuarter) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Quarter</span></a> again to see the <i>plus phase</i>.  You can then continue to <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Step(.programs.LeabraTrial)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Step(.programs.LeabraTrial) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Trial</span></a> through a series of inputs to get a feel for what some of the different input patterns look like. <br>
</td></tr>
</tbody></table>
<p>Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 50 epochs of 100 object inputs per epoch, or 5,000 object presentations. However, it took only roughly 25 epochs (2,500 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Load the weights using <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadWeights</tt></span> on the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>, and select <span style=\"background:#FFFFD0\"><tt><b>objrec_train1.wts.gz</b></tt></span>.  Then, <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Step(.programs.LeabraQuarter)&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Step(.programs.LeabraQuarter) (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Step Quarter</span></a> a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task. <br>
</td></tr>
</tbody></table>
<p>You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 
</p><p>To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To run the test, do: <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Init</span></a> and <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Run</span></a>.  To load the log file, do <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadTestData</tt></span> and select <span style=\"background:#FFFFD0\"><tt><b>objrec_test1.tst.dat</b></tt></span>, and then click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TestErrorData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TestErrorData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">TestErrorData</span></a> to see the resulting graph. <br>
</td></tr>
</tbody></table>
<p>You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.
</p>
<h1><span class=\"mw-headline\" id=\"Receptive_Field_Analysis\">Receptive Field Analysis</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=4\" title=\"Edit section: Receptive Field Analysis\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\"  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the <i>receptive fields</i> of units in the V4 and IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (<span style=\"background:#FFFFD0\"><tt><b>ActBasedRField</b></tt></span> <span style=\"background:#FFFFD0\"><tt><b>trg_lay_name</b></tt></span>), which should be V4 to start with.
</p><p>In this procedure, we present all the input patterns to the network and record how units respond to them. If we are interested in which patterns activate, e.g., a given V4 unit, then we aggregate activity over other layers every time that V4 unit is active (and weighted by how much it is active). If for a given input pattern the target V4 unit is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> tab -- if you ran the test above, then the results for V4 should be there.  Otherwise, in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> middle panel tab, at the bottom, click on <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Load Any Data</tt></span> and select <span style=\"background:#FFFFD0\"><tt><b>objrec_actrf_v4.dat</b></tt></span>, which should then populate the display with lots of colorful data (the V1 layer data is not saved in this file to reduce size -- it is difficult to interpret in any case).  You can also use the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Load ActRFData</tt></span> button in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a> to do the same thing. <br>
</td></tr>
</tbody></table>
<p>The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V4 unit, starting with the lower left unit and goes within hypercolumn first, to the upper right. (It will often be the brightest yellow unit in the V4 layer in the same row, because every time that unit is active, it is active! But not always: sometimes when a V4 unit is active, it might be part of an attractor whereby another unit is always active with it, and maybe even more so). 
</p><p>You should see that these V4 units are encoding simple conjunctions of line elements, in a relatively small range of locations within the retinal input.  The fact that they respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.3:</b> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V4 receptive fields, in terms of the overall computation performed by the network.<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Continue to scroll through the V4 units, but now notice the activation based receptive field for the Output units. <br>
</td></tr>
</tbody></table>
<p>You should see that there are typically a handful of output units (i.e., objects) that each V4 unit is strongly co-activated with. This indicates a distributed representation, where each V4 unit participates in encoding multiple different objects.
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.4:</b> Using the images of the objects shown above (which are in the same configuration as the output units), explain one V4 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)<br>
</td></tr>
</tbody></table>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> Next, do <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ActRFData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ActRFData (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ActRFData</span></a> to load the <span style=\"background:#FFFFD0\"><tt><b>objrec_actrf_it.dat</b></tt></span> data for the IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer. <br>
</td></tr>
</tbody></table>
<p>You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  
</p>
<hr>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#90FF90;font-size:small\"><b>6.5:</b> Based on your probing of the IT units, do they appear to code for entire objects, or just parts of different objects?  Explain.<br>
</td></tr>
</tbody></table>
<hr>
<p>One can also compare the relative selectivity of these IT units for particular output units (objects) as compared to the V4 units.  By focusing specifically on the number of objects a given unit clearly <i>doesn't</i> participate in, it should be clear that the IT units are more selective than the V4 units, which substantiates the idea that the IT units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects).  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.
</p>
<h1><span class=\"mw-headline\" id=\"Summary_and_Discussion_of_Receptive_Field_Analyses\">Summary and Discussion of Receptive Field Analyses</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=5\" title=\"Edit section: Summary and Discussion of Receptive Field Analyses\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h1>
<p>Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.
</p><p>You may be wondering why the V4 and IT representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V4, whereas the IT neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the IT representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V4 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition.
</p><p>The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the IT representations can play an important role in enabling the network to generalize effectively.  To the extent that IT representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these IT representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.
</p>
<h2><span class=\"mw-headline\" id=\"Generalization_Test\">Generalization Test</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;section=6\" title=\"Edit section: Generalization Test\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>
<p>In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in above Figure) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the IT representations and the appropriate output units, and good generalization should result to all other spatial locations.
</p><p>In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from <i>catastrophic interference</i>.  The following procedure was used.  On each trial, there was a 50% chance that a novel object would be presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for just 10 epochs of 100 objects per epoch.  Importantly, the learning rate in everything but the IT and Output connections was set to zero, to ensure that the results were due to IT-level learning and not in earlier pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> To setup the system for this form of generalization training, click the <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>GenTrain</tt></span> button in the <a href=\"/CompCogNeuro/index.php?title=.ctrl_panels.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".ctrl panels.ControlPanel (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">ControlPanel</span></a>.  This loads the <span style=\"background:#FFFFD0\"><tt><b>objrec_train1.wts.gz</b></tt></span> weights, sets the epoch counter to 40 to get it to train for 10 epochs up to the 50 epoch stopping point, and sets the environment generation to be of the form described above.  Once you do this, you can just do <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Train Init</span></a> and <b>NOT</b> initialize the weights, followed by <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraTrain.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraTrain.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Train Run</span></a>.  This should just take a few minutes, depending on your computer, but you can bypass this step by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>LoadWeights</tt></span> and selecting the <span style=\"background:#FFFFD0\"><tt><b>objrec_train2.wts.gz</b></tt></span> file. <br>
</td></tr>
</tbody></table>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> After the network is trained, you can then run the testing (<a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Init() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Init</span></a>, <a href=\"/CompCogNeuro/index.php?title=.programs.LeabraEpochTest.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.LeabraEpochTest.Run() (page does not exist)\"><span style=\"color:#000000;background-color:#C0C0C0;font-weight:bold; border:1px solid black; padding:0 3px 0 3px\">Test Run</span></a>) as before, or just load the test data from <span style=\"background:#FFFFD0\"><tt><b>objrec_test2.tst.dat</b></tt></span>. <br>
</td></tr>
</tbody></table>
<p>The results show that the network got around 80% correct (20% error) on average across the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the IT and Output pathways, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.
</p><p>To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).
</p>
<table cellpadding=\"10\">
<tbody><tr><td style=\"background-color:#FFE0E0\"> <b>?</b> You may now close the project (use the window manager close button on the project window or <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>File/Close Project</tt></span> menu item) and then open a new one, or just quit emergent entirely by doing <span style=\"background:#E0E0E0;border:1px solid black;\"><tt>Quit emergent</tt></span> menu option or clicking the close button on the root window. <br>
</td></tr>
</tbody></table>

<!-- 
NewPP limit report
Cached time: 20180227133604
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.356 seconds
Real time usage: 0.420 seconds
Preprocessor visited node count: 552/1000000
Preprocessor generated node count: 2185/1000000
Post?expand include size: 20419/2097152 bytes
Template argument size: 10863/2097152 bytes
Highest expansion depth: 6/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%  148.536      1 - -total
 54.95%   81.625      1 - Template:PublishedProject
 21.95%   32.605     12 - Template:cmd
  8.21%   12.202     22 - Template:emerlink
  6.74%   10.004      1 - Template:DocEditDialog
  3.66%    5.434     11 - Template:var
  3.53%    5.250      2 - Template:fig1
  3.12%    4.638      1 - Template:cite
  2.97%    4.405      8 - Template:fun
  2.80%    4.160      1 - Template:DocQuit
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:653-0!*!0!!en!5!* and timestamp 20180227133604 and revision id 6213
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=6213\">https://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=6213</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/CompCogNeuro/index.php/Special:Categories\" title=\"Special:Categories\">Category</a>: <ul><li><a href=\"/CompCogNeuro/index.php/Category:PublishedProject\" title=\"Category:PublishedProject\">PublishedProject</a></li></ul></div></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/CompCogNeuro/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/CompCogNeuro/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/CompCogNeuro/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/CompCogNeuro/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/CompCogNeuro/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogout&amp;returnto=CCNBook%2FSims%2FPerception%2FObjrec\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/CompCogNeuro/index.php?title=Talk:CCNBook/Sims/Perception/Objrec&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/CompCogNeuro/index.php/CCNBook/Sims/Perception/Objrec\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=unwatch&amp;token=329312f2aafbc90fbb5ad27c92f207795a9649aa%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/CompCogNeuro/index.php/Special:MovePage/CCNBook/Sims/Perception/Objrec\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/CompCogNeuro/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search Computational Cognitive Neuroscience Wiki [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-CCN-Book\"><a href=\"/CompCogNeuro/index.php/CCNBook/Main\">CCN Book</a></li><li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li><li id=\"n-help\"><a href=\"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents\" title=\"The place to find out\">Help</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CCNBook/Sims/Perception/Objrec\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CCNBook/Sims/Perception/Objrec\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;oldid=6213\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/CompCogNeuro/index.php/Special:Browse/CCNBook/Sims/Perception/Objrec\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=CCNBook%2FSims%2FPerception%2FObjrec\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/CompCogNeuro/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=CCNBook%2FSims%2FPerception%2FObjrec&amp;oldid=6213&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CCNBook/Sims/Perception/Objrec&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 14 January 2017, at 00:30.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
											<li id=\"footer-places-about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
											<li id=\"footer-places-disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-copyrightico\">
							<a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://licensebuttons.net/l/by-sa/3.0/88x31.png\"></a><br>This work is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.						</li>
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/CompCogNeuro/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /CompCogNeuro/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/CompCogNeuro/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"mediawiki.action.view.rightClickEdit\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":252});
} );</script>
	

</body></html>";
  };
  taDoc @[1] {
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Tue Feb 27 23:59:49 2018 version: 8.0.7 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415544 current default params



<li>Thu Feb 15 01:39:22 2018 version: 8.0.6 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415503 updated with latest stats for dwt monitoring, etc



<li>Thu Dec  7 22:54:55 2017 version: 8.0.5 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415224 Key to not apply adapt to TARGET layers -- will add a flag to automatically exclude them so you don't have to mess with params that much.  learns MUCH better now..



<li>Thu Dec  7 03:50:35 2017 version: 8.0.4 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415222 very powerful anti-hogging with strong adaptation and compensation params -- and strange ss_tau, m_tau effects that were due to a mistake but actually seem key -- more testing needed..



<li>Tue Dec  5 03:11:42 2017 version: 8.0.3 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415214 params for kna_adapt -- either just V1 or full net -- both working well -- the invert_nd approach is key and really seems to work



<li>Sat Jan 14 00:47:48 2017 version: 8.0.2 user: oreilly file_name: <code>objrec.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 svn 10466 update -- minor changes in performance from avg_l diffs


<li>Mon Aug 15 23:22:32 2016 version: 8.0.1 user: oreilly file_name: <code>objrec.proj</code> <br>
Updated to 8.0 programs and specs.  Updated V1 to standard for larger lvis vision models, including complex cells -- updated docs to inform about those.  Generalization performance depends on V4->IT prjns learning too -- looking at prior learning curves, I'm pretty sure there was some kind of update bug b/c it looked like they were learning too much and having too much interference at the start.  Anyway, all works well now.


</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Tue Feb 27 23:59:49 2018 version: 8.0.7 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415544 current default params
<P>
<P>
<P>
<li>Thu Feb 15 01:39:22 2018 version: 8.0.6 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415503 updated with latest stats for dwt monitoring, etc
<P>
<P>
<P>
<li>Thu Dec  7 22:54:55 2017 version: 8.0.5 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415224 Key to not apply adapt to TARGET layers -- will add a flag to automatically exclude them so you don't have to mess with params that much.  learns MUCH better now..
<P>
<P>
<P>
<li>Thu Dec  7 03:50:35 2017 version: 8.0.4 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415222 very powerful anti-hogging with strong adaptation and compensation params -- and strange ss_tau, m_tau effects that were due to a mistake but actually seem key -- more testing needed..
<P>
<P>
<P>
<li>Tue Dec  5 03:11:42 2017 version: 8.0.3 user: oreilly file_name: <code>objrec_expt.proj</code> <br>
svn rev: 415214 params for kna_adapt -- either just V1 or full net -- both working well -- the invert_nd approach is key and really seems to work
<P>
<P>
<P>
<li>Sat Jan 14 00:47:48 2017 version: 8.0.2 user: oreilly file_name: <code>objrec.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 svn 10466 update -- minor changes in performance from avg_l diffs
<P>
<P>
<li>Mon Aug 15 23:22:32 2016 version: 8.0.1 user: oreilly file_name: <code>objrec.proj</code> <br>
Updated to 8.0 programs and specs.  Updated V1 to standard for larger lvis vision models, including complex cells -- updated docs to inform about those.  Generalization performance depends on V4->IT prjns learning too -- looking at prior learning curves, I'm pretty sure there was some kind of update bug b/c it looked like they were learning too much and having too much interference at the start.  Anyway, all works well now.
<P>
<P>
</ul>
</body>
</html>
";
  };
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="overall control panel for object recognition model";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="input_type";
     short_label=1;
     cust_label=0;
     desc=;
     cust_desc=0;
     base=.programs.gp[0][2].vars[6].dyn_enum_val$$;
     mbr=DynEnum::value;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="TRAIN default, also TRAIN_NOVEL for training objs 18,19": };
    };
    ControlPanelMember @[1] {
     label="cycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
     cust_desc=0;
     base=.programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="turn OFF to run faster, ON to see cycle-level updates": };
    };
    ControlPanelMember @[2] {
     label="cycle_qtr";
     short_label=1;
     cust_label=0;
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.networks[0].times$$;
     mbr=LeabraTimes::cycle_qtr;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="turn OFF to show each individual cycle, ON to run faster": };
    };
    ControlPanelMember @[3] {
     label="act_based_rf_trg_layer";
     short_label=0;
     cust_label=1;
     desc=;
     cust_desc=0;
     base=.programs.gp[1][7].vars[2]$$;
     mbr=ProgVar::string_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="V4": range="": notes="V4 or IT": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Train_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][1]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][1]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="LoadWeights";
     short_label=0;
     cust_label=1;
     desc="Load pre-trained weights";
     cust_desc=1;
     base=.programs[4]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[5] {
     label="Test_Init";
     short_label=0;
     cust_label=1;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[1][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[6] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[7] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[8] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[1][0]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[9] {
     label="LoadTestData";
     short_label=0;
     cust_label=1;
     desc="Load summary data from Testing the network -- test1 is after initial training, and test2 is after generalization training";
     cust_desc=1;
     base=.programs[5]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[10] {
     label="LoadActRFData";
     short_label=0;
     cust_label=1;
     desc="Load activation-based receptive field data that was generated by running Test";
     cust_desc=1;
     base=.programs[6]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[11] {
     label="GenTrain";
     short_label=0;
     cust_label=1;
     desc="setup for generalization training";
     cust_desc=1;
     base=.programs[7]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[12] {
     label="RegTrain";
     short_label=0;
     cust_label=1;
     desc="reset back to regular training mode";
     cust_desc=1;
     base=.programs[8]$$;
     mth=Program::Run_Gui;
    };
   };
  };
  ClusterRun @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=0: val_type_fixed=0: };
   };
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=.networks[0].specs[2]$$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[1] {
     label="top_down_rel";
     short_label=0;
     cust_label=1;
     desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
     cust_desc=0;
     base=.networks[0].specs[2].children[4].wt_scale$$;
     mbr=WtScaleSpec::rel;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[2] {
     label="top_down_learn";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  individual control over whether learning takes place in this connection spec -- if false, no learning will take place regardless of any other settings -- if true, learning will take place if it is enabled at the network and other relevant levels";
     cust_desc=0;
     base=.networks[0].specs[2].children[4]$$;
     mbr=LeabraConSpec::learn;
     data {ctrl_type=CLUSTER_RUN: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[3] {
     label="top_down_lrate";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[4] {
     label="out_it_rel";
     short_label=0;
     cust_label=1;
     desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
     cust_desc=0;
     base=.networks[0].specs[2].children[4].children[0].wt_scale$$;
     mbr=WtScaleSpec::rel;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[5] {
     label="it_v4_rel";
     short_label=0;
     cust_label=1;
     desc=" [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)";
     cust_desc=0;
     base=.networks[0].specs[2].children[4].children[1].wt_scale$$;
     mbr=WtScaleSpec::rel;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="": };
    };
    ControlPanelMember @[6] {
     label="lay_inhib_fb";
     short_label=0;
     cust_label=1;
     desc="[Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)";
     cust_desc=0;
     base=.networks[0].specs[1].lay_inhib$$;
     mbr=LeabraInhibSpec::fb;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="lay_inhib_gi";
     short_label=0;
     cust_label=1;
     desc="[Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init";
     cust_desc=0;
     base=$.networks[0].specs[1].lay_inhib$;
     mbr=LeabraInhibSpec::gi;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="output_lay_inhib_gi";
     short_label=0;
     cust_label=0;
     desc="[Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init";
     cust_desc=0;
     base=.networks[0].specs[1].children[3].lay_inhib$$;
     mbr=LeabraInhibSpec::gi;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="output_lay_inhib_fb";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)";
     cust_desc=0;
     base=$.networks[0].specs[1].children[3].lay_inhib$;
     mbr=LeabraInhibSpec::fb;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="g_bar_l";
     short_label=0;
     cust_label=1;
     desc=" constant leak (potassium, K+) channels -- determines resting potential (typically higher than resting potential of K)";
     cust_desc=0;
     base=.networks[0].specs[0].g_bar$$;
     mbr=LeabraChannels::l;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="inhib_misc_self_fb";
     short_label=0;
     cust_label=1;
     desc="[Default: 0.5;0.02;0;1]  individual unit self feedback inhibition -- can produce proportional activation behavior in individual units for specialized cases (e.g., scalar val or BG units), but not so good for typical hidden layers";
     cust_desc=0;
     base=.networks[0].specs[1].inhib_misc$$;
     mbr=LeabraInhibMisc::self_fb;
     data {ctrl_type=CLUSTER_RUN: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=1;
   proj_name="objrec_ti";
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster="blanca_ccn";
   clusters="dream blanca_ccn";
   users="oreilly";
   last_submit_time="2017_11_17_22_06_25";
   notes="mpi 1x4x4th debug";
   label=;
   extra_files=;
   svn_repo="grey_run";
   repo_url="https://grey.colorado.edu/svn/clusterun";
   queue=;
   run_time="6h";
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=4;
   use_cuda=0;
   use_mpi=1;
   mpi_nodes=1;
   mpi_per_node=4;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=1;
  ParamSet @[0] {
   name="LearnParams";
   cp_state=MASTER;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=.networks[0].specs[0].act_avg$$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="20": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.3": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=.networks[0].specs[2].children[2].wt_scale$$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=.networks[0].specs[2].children[3].wt_scale$$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=.networks[0].specs[0].act$$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=.networks[0].specs[0].kna_adapt$$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=.networks[0].specs[0].kna_misc$$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc=" apply adaptation even to clamped layers";
     cust_desc=0;
     base=.networks[0].specs[0].children[0].kna_misc$$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc=" invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) ";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.5]  for clamp or invert_nd, maximum amount of adaptation to apply to clamped activations / act_nd when conductance is at max_gc";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=.networks[0].specs[0].children[1].act$$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.2": range="": notes="": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=.networks[0].specs[0].children[0].act$$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=.networks[0].specs[2].margin$$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=.networks[0].specs[2].wt_bal$$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.6": range="": notes="": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.25": range="": notes="": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.55": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="3": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=.networks[0].specs[2].children[4].dwt_share$$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="2": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2017_12_04_22_45_48";
  };
  ParamSet @[1] {
   name="StdParams";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="4": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="10": range="": notes="10": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="0": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="1": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="1": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="1": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="all off": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.25": range="": notes="": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.25": range="": notes="": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="6": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="8": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.05": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2018_01_30_23_12_20";
  };
  ParamSet @[2] {
   name="Taus";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="10": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.3": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.6": range="": notes="": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.25": range="": notes="": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.55": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="3": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="2": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2017_12_06_02_16_06";
  };
  ParamSet @[3] {
   name="V1KNaAdapt";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="8": range="": notes="": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="10": range="": notes="": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0": range="": notes="": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.3": range="": notes="learns with .5": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.05": range="": notes="if this is .2, then hogging goes and netmax is preserved, .1 = min hogging": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.6": range="": notes="": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.25": range="": notes="": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.55": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="3": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="2": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2017_12_05_02_50_26";
  };
  ParamSet @[4] {
   name="KNaAdapt";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="10": range="": notes="10 def -- 8 somehow worked better at one point": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes=".2 is ok!": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.5": range="": notes="learns with .5": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes="for v1.5 g_bar_k.2, .3-.4 good; for g_bar_k = .1, .15 or so is good..": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="on drives sig lower hogging!": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.25": range="": notes=".4 = .5": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes=".6 good": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4 ok with .4": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.25": range="": notes=".25 / 4 works..": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0": range="": notes="3 min to see effects? but not critical it seems..": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="6": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="false": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="8": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.05": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2018_01_07_01_28_24";
  };
  ParamSet @[5] {
   name="KNaAdaptOldWb";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="10": range="": notes="10 def -- 8 somehow worked better at one point": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes=".2 is ok!": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.5": range="": notes="learns with .5": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes="for v1.5 g_bar_k.2, .3-.4 good; for g_bar_k = .1, .15 or so is good..": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="on drives sig lower hogging!": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0": range="": notes=".4 = .5": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes=".6 good": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4 ok with .4": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.25": range="": notes=".25 / 4 works..": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0": range="": notes="3 min to see effects? but not critical it seems..": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="2": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2017_12_24_10_39_50";
  };
  ParamSet @[6] {
   name="KNaAdaptNewWb";
   cp_state=CLONE;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="ss_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 2;4;7]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the super-short time-scale avg_ss value -- this is provides a pre-integration step before integrating into the avg_s short time scale -- it is particularly important for spiking -- in general 4 is the largest value without starting to impair learning, but a value of 7 can be combined with m_in_s = 0 with somewhat worse results";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::ss_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4": };
    };
    ControlPanelMember @[1] {
     label="m_tau";
     short_label=1;
     cust_label=0;
     desc="[Default: 10]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life), for continuously updating the medium time-scale avg_m value from the short avg_s value (cascade mode) -- avg_m represents the minus phase learning signal that reflects the expectation representation prior to experiencing the outcome (in addition to the outcome) -- the default value of 10 generally cannot be exceeded without impairing learning";
     cust_desc=0;
     base=$.networks[0].specs[0].act_avg$;
     mbr=LeabraActAvgSpec::m_tau;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="10": range="": notes="10 def -- 8 somehow worked better at one point": };
    };
    ControlPanelMember @[2] {
     label="lrate";
     short_label=1;
     cust_label=0;
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.networks[0].specs[2]$;
     mbr=LeabraConSpec::lrate;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.04": range="0:1:0.1": notes="0.04 default": };
    };
    ControlPanelMember @[3] {
     label="std_unit_spec_g_bar_k";
     short_label=0;
     cust_label=0;
     desc=" gated / active potassium channels -- typicaly hyperpolarizing relative to leak / rest";
     cust_desc=0;
     base=$.networks[0].specs[0].g_bar$;
     mbr=LeabraChannels::k;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.2": range="": notes=".2 is ok!": };
    };
    ControlPanelMember @[4] {
     label="v1to_v4_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[2].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[5] {
     label="v4to_it_wt_scale_abs";
     short_label=0;
     cust_label=0;
     desc="[Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)";
     cust_desc=0;
     base=$.networks[0].specs[2].children[3].wt_scale$;
     mbr=WtScaleSpec::abs;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="1": range="": notes="": };
    };
    ControlPanelMember @[6] {
     label="avg_correct";
     short_label=1;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[7] {
     label="std_unit_spec_kna_adapt_on";
     short_label=0;
     cust_label=0;
     desc=" apply K-Na adaptation overall?";
     cust_desc=0;
     base=$.networks[0].specs[0].kna_adapt$;
     mbr=KNaAdaptSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[8] {
     label="std_unit_spec_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[9] {
     label="v1_units_kna_misc_clamp";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  apply adaptation even to clamped layers -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::clamp;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[10] {
     label="v1_units_kna_misc_invert_nd";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  invert the adaptation effect for the act_nd (non-depressed) value that is typically used for learning-drivng averages (avg_ss, _s, _m) -- only happens if kna_adapt.on is true";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::invert_nd;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[11] {
     label="v1_units_kna_misc_max_adapt";
     short_label=0;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.5": range="": notes="learns with .5": };
    };
    ControlPanelMember @[12] {
     label="v4_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[1].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[13] {
     label="max_adapt";
     short_label=1;
     cust_label=0;
     desc=" has opposite effects for clamp and invert_nd (and only operative when kna_adapt.on in addition): for clamp on clamped layers, this is the maximum amount of adaptation to apply to clamped activations when conductance is at max_gc -- biologically, values around .5 correspond generally to strong adaptation in primary visual cortex (V1) -- for invert_nd, this is the maximum amount of adaptation to invert, which is key for allowing learning to operate successfully despite the depression of activations due to adaptation -- values around .2 to .4 are good for g_bar.k = .2, depending on how strongly inputs are depressed -- need to experiment to find the best value for a given config";
     cust_desc=1;
     base=$.networks[0].specs[0].kna_misc$;
     mbr=KNaAdaptMiscSpec::max_adapt;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes="for v1.5 g_bar_k.2, .3-.4 good; for g_bar_k = .1, .15 or so is good..": };
    };
    ControlPanelMember @[14] {
     label="v1_units_act_avg_correct";
     short_label=0;
     cust_label=0;
     desc=" correction factor (multiplier) for average activation level in this layer -- e.g., if using adaptation or stp, may be lower than usual -- taken into account in netinput scaling out of this layer";
     cust_desc=0;
     base=$.networks[0].specs[0].children[0].act$;
     mbr=LeabraActFunSpec::avg_correct;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.9": range="": notes="": };
    };
    ControlPanelMember @[15] {
     label="lrate_mod";
     short_label=1;
     cust_label=0;
     desc=" enable the margin-based modulation of the learning rate -- marginal units have a learning rate of 1, while others are reduced";
     cust_desc=0;
     base=$.networks[0].specs[2].margin$;
     mbr=MarginLearnSpec::lrate_mod;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=EXPLORE: saved_value="true": range="": notes="on drives sig lower hogging!": };
    };
    ControlPanelMember @[16] {
     label="main_con_spec_wt_bal_on";
     short_label=0;
     cust_label=0;
     desc=" perform weight balance soft normalization? if so, maintains overall weight balance across units by progressively penalizing weight increases as a function of amount of averaged weight above a high threshold (hi_thr) and long time-average activation above an act_thr -- this is generally very beneficial for larger models where hog units are a problem, but not as much for smaller models where the additional constraints are not beneficial -- uses a sigmoidal function: wb_inc = 1 / (1 + hi_gain*(wb_avg - hi_thr) + act_gain * (act_avg - act_thr)))";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[17] {
     label="main_con_spec_wt_bal_avg_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold on weight value for inclusion into the weight average that is then subject to the further hi_thr threshold for then driving a change in weight balance -- this avg_thr allows only stronger weights to contribute so that weakening of lower weights does not dilute sensitivity to number and strength of strong weights";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::avg_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.25": range="": notes=".4 = .5": };
    };
    ControlPanelMember @[18] {
     label="main_con_spec_wt_bal_hi_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  high threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes=".6 good": };
    };
    ControlPanelMember @[19] {
     label="main_con_spec_wt_bal_hi_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 4]  gain multiplier applied to above-hi_thr thresholded weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced ";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::hi_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="4": range="": notes="4 ok with .4": };
    };
    ControlPanelMember @[20] {
     label="main_con_spec_wt_bal_act_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.25]  threshold for long time-average activation (act_avg) contribution to weight balance -- based on act_avg relative to act_thr -- same statistic that we use to measure hogging with default .3 threshold";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.25": range="": notes=".25 / 4 works..": };
    };
    ControlPanelMember @[21] {
     label="main_con_spec_wt_bal_act_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 0;2]  gain multiplier applied to above-threshold weight averages -- higher values turn weight increases down more rapidly as the weights become more imbalanced -- see act_thr for equation";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::act_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0": range="": notes="3 min to see effects? but not critical it seems..": };
    };
    ControlPanelMember @[22] {
     label="main_con_spec_wt_bal_no_targ";
     short_label=0;
     cust_label=0;
     desc="[Default: true]  exclude receiving projections into TARGET layers where units are clamped and also TRC (Pulvinar) thalamic neurons -- typically for clamped layers you do not want to be applying extra constraints such as this weight balancing dynamic -- the BCM hebbian learning is also automatically turned off for such layers as well";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::no_targ;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[23] {
     label="main_con_spec_wt_bal_lo_thr";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.4]  low threshold on weight average (subject to avg_thr) before it drives changes in weight increase vs. decrease factors";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_thr;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="0.4": range="": notes="": };
    };
    ControlPanelMember @[24] {
     label="main_con_spec_wt_bal_lo_gain";
     short_label=0;
     cust_label=0;
     desc="[Default: 6;0]  gain multiplier applied to below-lo_thr thresholded weight averages -- higher values turn weight increases up more rapidly as the weights become more imbalanced -- generally beneficial but sometimes not -- worth experimenting with either 6 or 0";
     cust_desc=0;
     base=$.networks[0].specs[2].wt_bal$;
     mbr=WtBalanceSpec::lo_gain;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=EXPLORE: saved_value="6": range="": notes="": };
    };
    ControlPanelMember @[25] {
     label="top_down_dwt_share_on";
     short_label=0;
     cust_label=0;
     desc=" enable dwt sharing -- share dwt changes across different neighboring connections -- a kind of structured randomness within a long-term relationship -- has potential benefits for top-down projections to disrupt positive feedback loops and inject some randomness in learning directions -- not useful for feedforward projections";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::on;
     data {ctrl_type=PARAM_SET: is_numeric=0: is_single=1: state=STABLE: saved_value="true": range="": notes="": };
    };
    ControlPanelMember @[26] {
     label="top_down_dwt_share_neigh";
     short_label=0;
     cust_label=0;
     desc="[Default: 8]  number of neighbors to share dwts with -- each sending synapse shares with neigh units *on either side* of itself (i.e., total number of shared synapses = 2*neigh -- just adds up all those dwt values in computing its own dwt) -- thus there is some amount of overlap and also non-overlap in the set of shared synapses -- this works slightly better than having a common group of shared synapses";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::neigh;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="2": range="": notes="": };
    };
    ControlPanelMember @[27] {
     label="top_down_dwt_share_p_share";
     short_label=0;
     cust_label=0;
     desc="[Default: 0.05]  probability of sharing dwts -- per sending unit (all synapses for given sender share at the same time) -- can't do this too frequently without disrupting learning";
     cust_desc=0;
     base=$.networks[0].specs[2].children[4].dwt_share$;
     mbr=DwtShareSpec::p_share;
     data {ctrl_type=PARAM_SET: is_numeric=1: is_single=1: state=STABLE: saved_value="0.5": range="": notes="": };
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   date="2018_01_07_01_28_29";
  };
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="InputItemList";
    desc="list of items to present to the network -- actual images are rendered by LEDStimGen";
    data {
     name="data";
     el_typ=double_Data;
     el_def=0;
     String_Data @[0] {
      name="ObjectName";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] "LED3_11_124";"LED3_18_245";"LED3_11_124";"LED3_3_015";"LED3_5_024";"LED3_7_034";"LED3_15_145";"LED3_10_123";"LED3_3_015";"LED3_11_124";
"LED3_1_013";"LED3_8_035";"LED3_4_023";"LED3_4_023";"LED3_15_145";"LED3_4_023";"LED3_3_015";"LED3_5_024";"LED3_9_045";"LED3_8_035";
"LED3_5_024";"LED3_5_024";"LED3_2_014";"LED3_3_015";"LED3_17_235";"LED3_10_123";"LED3_15_145";"LED3_18_245";"LED3_11_124";"LED3_9_045";
"LED3_9_045";"LED3_16_234";"LED3_11_124";"LED3_18_245";"LED3_3_015";"LED3_8_035";"LED3_13_134";"LED3_12_125";"LED3_13_134";"LED3_4_023";
"LED3_1_013";"LED3_1_013";"LED3_4_023";"LED3_18_245";"LED3_9_045";"LED3_3_015";"LED3_6_025";"LED3_14_135";"LED3_10_123";"LED3_15_145";
"LED3_10_123";"LED3_3_015";"LED3_1_013";"LED3_9_045";"LED3_12_125";"LED3_2_014";"LED3_7_034";"LED3_7_034";"LED3_5_024";"LED3_5_024";
"LED3_3_015";"LED3_4_023";"LED3_1_013";"LED3_12_125";"LED3_18_245";"LED3_14_135";"LED3_17_235";"LED3_13_134";"LED3_16_234";"LED3_11_124";
"LED3_11_124";"LED3_17_235";"LED3_14_135";"LED3_11_124";"LED3_7_034";"LED3_1_013";"LED3_16_234";"LED3_6_025";"LED3_16_234";"LED3_12_125";
"LED3_4_023";"LED3_11_124";"LED3_18_245";"LED3_9_045";"LED3_9_045";"LED3_9_045";"LED3_10_123";"LED3_15_145";"LED3_13_134";"LED3_6_025";
"LED3_17_235";"LED3_6_025";"LED3_8_035";"LED3_13_134";"LED3_18_245";"LED3_17_235";"LED3_14_135";"LED3_4_023";"LED3_11_124";"LED3_17_235";
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="ObjectNo";
      desc="object number";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] 4;0;4;7;12;13;5;14;7;4;
17;1;2;2;5;2;7;12;11;1;
12;12;9;7;10;14;5;0;4;11;
11;15;4;0;7;1;8;6;8;2;
17;17;2;0;11;7;3;16;14;5;
14;7;17;11;6;9;13;13;12;12;
7;2;17;6;0;16;10;8;15;4;
4;10;16;4;13;17;15;3;15;6;
2;4;0;11;11;11;14;5;8;3;
10;3;1;8;0;10;16;2;4;10;
      };
     };
     double_Data @[2] {
      name="translate_x";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] 0.1727769272018141;0.2476824727257304;0.1160952163779368;0.06748244065966424;0.07569543281337843;-0.0171978686976601;-0.005999752340455633;0.1087752379353094;-0.0481838991627776;0.1210844549642424;
0.205013405788234;0.1413731271353004;-0.05473207159553362;0.2207264725970224;-0.1935138949809815;-0.08326851234928906;-0.1989811955880357;0.05674641805077524;-0.09587140413586992;0.1800052245573737;
-0.04548297290039122;-0.1466731286467322;0.2083722334228291;-0.1376609925273516;-0.03494894308635266;0.0622113047144251;0.2409623134022659;-0.2308266869868862;0.2294469566605247;0.2281376086599954;
-0.09041486468763649;0.07599290932662661;0.0002142970154600521;-0.2125512694476191;-0.02759829955297394;0.1819056979940394;0.1119069619429837;0.0951901472841693;-0.04580096792089894;-0.1516089874386246;
-0.09600945891853119;0.1871224869521994;-0.07905120489282563;0.1431767252995108;0.03806213712414336;0.09480147867361449;-0.1753207991159954;0.03420324953862636;-0.07388384291153427;-0.1895632368951465;
-0.1220244982086428;-0.2132455089375541;0.2037308094984501;-0.1372614245376556;-0.003822370961417243;0.05912132033283468;0.1577324679066756;0.2080751590632813;-0.1962736109783934;0.1533442108920664;
-0.2236558087799707;-0.08948596968272993;0.06204384423842074;-0.2356430758748752;0.08717715660871594;0.1030098187734254;0.2005514285977883;0.163053639644232;0.2447777744572051;0.06471907372373675;
0.1847372060612561;-0.16041856686707;-0.09577581749405917;0.1402352611160141;0.01834042080684467;-0.1901298407861854;-0.112691164909638;-0.2395317097766729;0.1343083433202955;-0.01610795636895734;
-0.2325827880062469;-0.1258885580183953;-0.07937848210601223;0.1786351820298162;0.1687881780174051;0.164654514820372;-0.1470883050241657;0.0009025475909817393;0.05639593488147959;-0.1396978613972624;
0.05042561949416335;-0.1356736262747563;-0.09459020829006493;-0.003976892028947354;0.1151216004895861;0.08156202634893023;-0.004448005498694729;0.1143435467809976;0.05402051944247827;-0.2308600108225923;
      };
     };
     double_Data @[3] {
      name="translate_y";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] -0.04639875893940859;0.1673469045140442;0.01950576070724519;0.05305496803580673;0.1944149690888338;-0.03853972353131979;0.1100425165454473;-0.1191480236108381;0.02208278820443066;0.2294525518116159;
0.0900139599286226;0.0330507608900063;-0.09814090527886921;0.1891072675160146;0.004633448706397147;-0.2137561935185659;-0.06444593345253963;0.1708433988626774;0.0134499096711499;-0.03414353939352588;
0.2161434184522624;0.02208826062235036;-0.08894632170369332;0.04553278292422835;-0.1172375152804301;0.1164095909790431;-0.2357870846088403;-0.1332694392036284;-0.1978226926573111;0.08623453317971069;
0.07257206832530705;-0.06221822059164112;-0.02170645013641831;0.2118458000522959;-0.2478934399335578;0.2393012085559337;-0.02985627033183108;-0.1898077578060649;-0.1463268302642985;0.1149678418841121;
-0.0239818751776088;-0.06052046099968611;0.1859396974463028;-0.06978706477699859;-0.1818240307603358;0.1290625918032964;-0.209852700717597;0.03034320397666379;-0.007321495042072246;0.03384481599618971;
-0.08832383060871662;0.02227444004662005;-0.01767474315976919;-0.2410089329333788;0.2466520617633546;-0.2120033749817765;0.01452632889974598;0.1847797124180585;0.1595199732630488;0.1794904136064026;
0.189676272028051;0.1970469737150674;-0.02892184291285615;-0.2059275447571825;-0.2136724148915652;0.1443915151773698;0.1965842559897438;0.09499011866625301;0.06367683617625253;-0.1078712497476288;
-0.00658574370740389;0.177966351041035;-0.1129374856058248;-0.1759577327718378;0.1848679571293247;-0.04472359132430248;-0.1058451335831118;0.1623357289757714;-0.1003279438719967;-0.06570686600778103;
-0.0009170636776388852;-0.1787310597572724;-0.2279223972652276;0.1813275653244111;0.2326255572233513;-0.04603506620389253;0.1208764118507311;0.01935036783292671;0.2140319284532854;-0.1233581111799652;
-0.1525777646710428;0.07120086025576083;-0.05372351354388238;-0.2250820760874168;0.2453189514851584;0.08706212442734906;0.05441582181002413;-0.004668682641252864;0.2374931548837891;-0.1858419341906005;
      };
     };
     double_Data @[4] {
      name="rotate";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] -0.001780016672706259;0.00939188300081281;-0.007711432888729242;-0.004800715702890059;-0.009674465588535682;-0.003601045112055654;0.009688768404179265;-0.002378184474531491;-0.003790569800036194;0.008113329006459486;
0.003781709857731854;-0.003451425748792203;-0.009831193750425182;0.0009620396011591863;0.007231787827164731;0.009341112884726397;0.005136162797645354;0.009892864475106148;-0.001252752813361863;0.001567798839349353;
0.007903430626103861;0.0007597211720650546;-0.008577328141964815;-0.005822268141064449;0.007000096933184265;0.007436110360989583;0.009451407236333585;-0.008049909028310209;-0.0004453584743900584;0.002505284191445885;
-0.002908459407477317;0.004647362106115429;0.006224338782421545;0.003725317511687152;-0.006205256874538902;0.002132635073032846;-0.007446153140098511;0.006460263984626858;0.009522120193291348;0.005025981578050252;
0.0009368333644750575;0.007527027195067827;0.001561166141646489;0.006616302438620164;-0.003100376357762107;0.006152904903693612;-0.009451067509596841;-0.003324465429666048;0.00442052541540898;0.004796784460434529;
-0.004768336773848301;-0.008068663143804134;0.004120582789222229;0.008374991833519684;0.005491450161052038;-0.001500258270604531;-0.007276298832192963;-0.003892212743827094;-0.009844145689551855;-0.009602548543114346;
-0.003628662129375453;-0.005809439010759499;-0.007823062045338365;0.004653820664880489;0.005349791053494203;-0.009504294850092646;-0.001915323380503327;0.001004830736185021;0.007406862378174882;-0.004266172491715918;
0.000900434922987265;-0.002599663836620239;-0.001983388465191941;-0.005303454557843808;0.001125350626696603;0.001143418580662135;-0.004994539256566237;-0.00567426052022153;-0.009361590743337605;0.007746680859123075;
-0.006286666403219363;-0.00424776595603382;-0.009427651049252014;0.009959608787841244;-0.009112451753804521;-0.009340110228231453;0.007781892012731476;-0.0088060172850592;-0.009619282764788675;-0.00337545699451198;
0.005841749663312535;-0.008206708006551678;0.006078481065338518;0.008437524947719431;0.00627652791889524;-0.004907795198958889;-0.002787813240169348;0.006157323774443195;-0.009616158749409725;-0.007144458896339463;
      };
     };
     double_Data @[5] {
      name="scale";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [100] 0.8943512183874378;0.9261518370940571;0.8350690353116539;0.7956733922452102;0.95580549654887;0.8166765446310764;0.7868407654299185;0.9704703488086964;0.7874017311598188;0.7988059120299685;
0.9212814706226025;0.7322274856434605;0.7108922977476546;0.7081789046751065;0.7135277625847546;0.7602413358150933;0.8930791809843462;0.9411345058806211;0.9012141561110335;0.8306883781837052;
0.7606014444887587;0.7368461359553551;0.9014972979397302;0.7853478034435044;0.9208237439923073;0.8547206759535531;0.9882501088889264;0.9619711974452482;0.734308297715683;0.8179411634653277;
0.9697463000259059;0.7675421729086407;0.9810996263795473;0.8351241043233454;0.8316207869080504;0.9456161122509441;0.7052134765670549;0.7645056767213763;0.8819420420361487;0.8014663193607566;
0.9893610160442408;0.7742432426488889;0.9061416992540092;0.937739534475068;0.7129819053898927;0.9764863919656172;0.8127170314818453;0.8804077621288258;0.9314618444096474;0.8025963790242918;
0.8873686690664919;0.869231019463208;0.9776333585988559;0.8854213733945928;0.8124062021861636;0.8824346640657084;0.7537157512460848;0.9895935128422346;0.9986901500649426;0.8412506239812267;
0.8227806587044156;0.7787107767560424;0.7756583508287408;0.8897932434544454;0.7985510487060267;0.9252644466649879;0.8395784983131618;0.8939909118514846;0.8393537454187763;0.8253231789037486;
0.7146218802559803;0.7166376125625697;0.9451224709089687;0.7834261311115598;0.9428069188395412;0.8524747206778276;0.774276335128021;0.807012064263654;0.7428400246934882;0.7270954325841738;
0.8522141020745145;0.7511876528310411;0.819590967926966;0.9630987736618877;0.811055147583286;0.7468418980872622;0.8277224562481965;0.9932403810139609;0.7753846277474588;0.7158367355882681;
0.9615092382185397;0.9220173814877681;0.7557089470762509;0.870418983957701;0.993495104949222;0.8267258139979277;0.7277077876271223;0.8016661333976235;0.7030836140935951;0.8934750363800232;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [100] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_70";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_71";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[2] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_111";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_112";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[7] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[8] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[9] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="V4_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="IT_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="Output_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="V4_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="IT_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="V4_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="IT_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="Output_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="V4_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="IT_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="Output_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_72";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_73";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="wt_sync_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="V1_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="V4_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="IT_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Image_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="V1_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="V4_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="IT_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="Image_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="V1_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="V4_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="IT_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="Image_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="V4_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="IT_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="Output_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="V4_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="IT_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="Output_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="V4_pre_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="IT_pre_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="Output_pre_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="V4_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[47] {
      name="IT_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[48] {
      name="Output_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[49] {
      name="V4_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[50] {
      name="IT_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[51] {
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[52] {
      name="V1_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[53] {
      name="V4_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[54] {
      name="IT_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[55] {
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[56] {
      name="Image_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[57] {
      name="V4_cos_diff_avg_lrn";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[58] {
      name="IT_cos_diff_avg_lrn";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[59] {
      name="V4_avg_l_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[60] {
      name="IT_avg_l_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[61] {
      name="V4_avg_l_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[62] {
      name="IT_avg_l_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[63] {
      name="V4_avg_l_lrn_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[64] {
      name="IT_avg_l_lrn_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[65] {
      name="V4_avg_l_lrn_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[66] {
      name="IT_avg_l_lrn_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[67] {
      name="V4_mod_avg_l_lrn";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[68] {
      name="IT_mod_avg_l_lrn";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[69] {
      name="V4_Fm_V1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[70] {
      name="V4_Fm_IT_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[71] {
      name="IT_Fm_V4_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[72] {
      name="IT_Fm_Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[73] {
      name="Output_Fm_IT_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[74] {
      name="V4_Fm_V1_wb_avg_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[75] {
      name="V4_Fm_IT_wb_avg_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[76] {
      name="IT_Fm_V4_wb_avg_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[77] {
      name="IT_Fm_Output_wb_avg_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[78] {
      name="Output_Fm_IT_wb_avg_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[79] {
      name="V4_Fm_V1_wb_avg_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[80] {
      name="V4_Fm_IT_wb_avg_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[81] {
      name="IT_Fm_V4_wb_avg_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[82] {
      name="IT_Fm_Output_wb_avg_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[83] {
      name="Output_Fm_IT_wb_avg_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[84] {
      name="V4_Fm_V1_wb_avg_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[85] {
      name="V4_Fm_IT_wb_avg_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[86] {
      name="IT_Fm_V4_wb_avg_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[87] {
      name="IT_Fm_Output_wb_avg_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[88] {
      name="Output_Fm_IT_wb_avg_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[89] {
      name="V4_Fm_V1_wb_avg_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[90] {
      name="V4_Fm_IT_wb_avg_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[91] {
      name="IT_Fm_V4_wb_avg_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[92] {
      name="IT_Fm_Output_wb_avg_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[93] {
      name="Output_Fm_IT_wb_avg_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[94] {
      name="V4_Fm_V1_wb_avg_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[95] {
      name="V4_Fm_IT_wb_avg_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[96] {
      name="IT_Fm_V4_wb_avg_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[97] {
      name="IT_Fm_Output_wb_avg_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=31;
      matrix_col_width=10;
     };
     float_Data @[98] {
      name="Output_Fm_IT_wb_avg_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=31;
      matrix_col_width=10;
     };
     float_Data @[99] {
      name="V4_Fm_V1_wb_avg_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[100] {
      name="V4_Fm_IT_wb_avg_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[101] {
      name="IT_Fm_V4_wb_avg_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
     };
     float_Data @[102] {
      name="IT_Fm_Output_wb_avg_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=31;
      matrix_col_width=10;
     };
     float_Data @[103] {
      name="Output_Fm_IT_wb_avg_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=31;
      matrix_col_width=10;
     };
     float_Data @[104] {
      name="V4_Fm_V1_wb_fact_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[105] {
      name="V4_Fm_IT_wb_fact_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[106] {
      name="IT_Fm_V4_wb_fact_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[107] {
      name="IT_Fm_Output_wb_fact_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[108] {
      name="Output_Fm_IT_wb_fact_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[109] {
      name="V4_Fm_V1_wb_fact_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[110] {
      name="V4_Fm_IT_wb_fact_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[111] {
      name="IT_Fm_V4_wb_fact_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[112] {
      name="IT_Fm_Output_wb_fact_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[113] {
      name="Output_Fm_IT_wb_fact_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[114] {
      name="V4_Fm_V1_wb_fact_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[115] {
      name="V4_Fm_IT_wb_fact_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[116] {
      name="IT_Fm_V4_wb_fact_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[117] {
      name="IT_Fm_Output_wb_fact_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[118] {
      name="Output_Fm_IT_wb_fact_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[119] {
      name="V4_Fm_V1_wb_fact_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[120] {
      name="V4_Fm_IT_wb_fact_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[121] {
      name="IT_Fm_V4_wb_fact_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
     };
     float_Data @[122] {
      name="IT_Fm_Output_wb_fact_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[123] {
      name="Output_Fm_IT_wb_fact_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[124] {
      name="V4_Fm_V1_wb_fact_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[125] {
      name="V4_Fm_IT_wb_fact_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[126] {
      name="IT_Fm_V4_wb_fact_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[127] {
      name="IT_Fm_Output_wb_fact_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=32;
      matrix_col_width=10;
     };
     float_Data @[128] {
      name="Output_Fm_IT_wb_fact_pre_hog_avg";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=32;
      matrix_col_width=10;
     };
     float_Data @[129] {
      name="V4_Fm_V1_wb_fact_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[130] {
      name="V4_Fm_IT_wb_fact_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[131] {
      name="IT_Fm_V4_wb_fact_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
     };
     float_Data @[132] {
      name="IT_Fm_Output_wb_fact_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=32;
      matrix_col_width=10;
     };
     float_Data @[133] {
      name="Output_Fm_IT_wb_fact_pre_hog_max";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=32;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    name="CompareData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[3] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_22";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_23";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[2] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_74";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_24";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_75";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @[7] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[8] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @[9] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="V4_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="IT_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="Output_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="V4_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="IT_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Output_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="V4_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="IT_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="Output_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[4] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_24";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_25";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[4] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[5] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     float_Data @[6] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     float_Data @[7] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[8] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[9] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[10] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[11] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[12] {
      name="Output_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[13] {
      name="Output_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[14] {
      name="Output_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[15] {
      name="Output_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
     };
     float_Data @[16] {
      name="Output_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[17] {
      name="Output_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[18] {
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     float_Data @[19] {
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
     };
     float_Data @[20] {
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
     };
     float_Data @[21] {
      name="V4_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[22] {
      name="IT_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[23] {
      name="Output_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[24] {
      name="V4_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[25] {
      name="IT_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
     };
     float_Data @[26] {
      name="Output_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
     };
     float_Data @[27] {
      name="V4_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[28] {
      name="IT_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[29] {
      name="Output_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
     };
     float_Data @[30] {
      name="V4_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[31] {
      name="IT_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[32] {
      name="Output_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[33] {
      name="V4_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[34] {
      name="IT_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
     };
     float_Data @[35] {
      name="Output_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[36] {
      name="V4_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[37] {
      name="IT_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     float_Data @[38] {
      name="Output_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
     };
     float_Data @[39] {
      name="V4_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[40] {
      name="IT_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     float_Data @[41] {
      name="Output_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
     };
     float_Data @[42] {
      name="V4_Fm_V1_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[43] {
      name="V4_Fm_IT_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[44] {
      name="IT_Fm_V4_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
     };
     float_Data @[45] {
      name="IT_Fm_Output_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
     float_Data @[46] {
      name="Output_Fm_IT_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="TestErrorData";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="trial_name_group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] "00";"01";"02";"03";"04";"05";"06";"07";"08";"09";
"10";"11";"12";"13";"14";"15";"16";"17";"18";"19";
      };
     };
     float_Data @[1] {
      name="N";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 54;62;62;38;58;48;55;53;34;54;
48;48;46;47;45;37;52;50;58;51;
      };
     };
     float_Data @[2] {
      name="sse_count";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 0;7;0;1;3;1;2;0;1;0;
2;2;0;3;0;3;0;1;58;49;
      };
     };
     float_Data @[3] {
      name="pct_err";
      col_flags=SAVE_DATA|CALC|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr="(float)sse_count / (float)N";
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [20] 0;0.11290322;0;0.02631579;0.05172414;0.020833334;0.036363635;0;0.029411765;0;
0.041666668;0.041666668;0;0.063829787;0;0.081081077;0;0.02;1;0.96078432;
      };
     };
    };
    data_flags=SAVE_ROWS|HAS_CALCS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [20] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[1] {
    name="ObjrecNet_LayerAvgAct";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="layer";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [5] "V1";"V4";"IT";"Output";"Image";      };
     };
     String_Data @[1] {
      name="layer_spec";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [5] "V1";"V4";"IT";"Output";"LeabraLayerSpec_0";      };
     };
     float_Data @[2] {
      name="acts_m_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [5] 0.12542784;0.099236414;0.10261165;0.00047650255;0.05390599;      };
     };
     float_Data @[3] {
      name="acts_p_avg";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       name="ar";
      [5] 0.12542784;0.099372514;0.10711993;0.047523808;0.05390599;      };
     };
     float_Data @[4] {
      name="avg_act_init";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       name="ar";
      [5] 0.1;0.1;0.1;0.050000001;0.1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [5] 0;1;2;3;4;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   DataTable @[2] {
    UserDataItem_List @*(.user_data_) {
     name="UserDataItem_List_564";
     el_typ=UserDataItem;
     el_def=0;
     UserDataItem @[0] {name="N_ROWS": value=4: val_type_fixed=0: };
     UserDataItem @[1] {name="BLOCK_HEIGHT": value=0: val_type_fixed=0: };
     UserDataItem @[2] {name="BLOCK_SPACE": value=4: val_type_fixed=0: };
    };
    name="V1_GridV1Stencils";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_565";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="WIDTH": value=24: val_type_fixed=0: };
      };
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
      ar {
       name="ar";
      [17] "V1C SubGp Ctrs: 0";"V1C SubGp Ctrs: 45";"V1C SubGp Ctrs: 90";"V1C SubGp Ctrs: 135";"Spat Integ RF";"V1C Len Sum Ang: 0";"V1C Len Sum Ang: 45";"V1C Len Sum Ang: 90";"V1C Len Sum Ang: 135";"V1C End Stop Ang: 0 Dir: 0";
"V1C End Stop Ang: 0 Dir: 1";"V1C End Stop Ang: 45 Dir: 0";"V1C End Stop Ang: 45 Dir: 1";"V1C End Stop Ang: 90 Dir: 0";"V1C End Stop Ang: 90 Dir: 1";"V1C End Stop Ang: 135 Dir: 0";"V1C End Stop Ang: 135 Dir: 1";      };
     };
     float_Data @[1] {
      name="Stencil";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 16;16;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [16 16 17] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-0.5;-0.5;
-0.5;-0.5;-0.5;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;1;1;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;-1;-1;0;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;0;0;0;
0;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;0;0;0;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;-0.5;
-0.5;-0.5;-0.5;-0.5;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;1;1;0;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;-1;-1;0;
0;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;0;0;0;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;0;
0;0;0;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;1;-1;0;
0;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;1;-1;0;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;0;
0;0;0;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;-0.5;-0.5;-0.5;-0.5;-0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-0.5;-0.5;-0.5;-0.5;
-0.5;-0.5;0;0;0;0;0;0;0;0;
0;0;-0.5;1;-1;0;0;-0.5;0;0;
0;0;0;0;0;0;0;0;-0.5;1;
-1;0;0;-0.5;0;0;0;0;0;0;
0;0;0;0;-0.5;0;0;0;0;-0.5;
0;0;0;0;0;0;0;0;0;0;
-0.5;0;0;0;0;-0.5;0;0;0;0;
0;0;0;0;0;0;-0.5;-0.5;-0.5;-0.5;
-0.5;-0.5;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.2493522;
0.4993518;0.4993518;0.2493522;0;0;0;0;0;0;0;
0;0;0;0;0;0.49935177;1;1;0.49935177;0;
0;0;0;0;0;0;0;0;0;0;
0;0.49935177;1;1;0.49935177;0;0;0;0;0;
0;0;0;0;0;0;0;0.2493522;0.4993518;0.4993518;
0.2493522;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0.5;
-1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0.5;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.5;-1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;-1;-1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;-1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;-1;0.5;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.5;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;-1;-1;
-1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;-1;-1;-1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0.5;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;-1;0.5;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
-1;-1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;-1;-1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.5;-1;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [17] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[3] {
   name="ClusterRun";
   el_typ=DataTable;
   el_def=0;
   save_tables=0;
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="GenerateItemList";
   short_nm="GnrLst";
   tags=;
   desc="generate a list of items to train/test on";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED_Type";
     desc=;
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED1";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED2";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3";
       value=2;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="InputType";
     desc="type of input patterns to generate";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="TRAIN";
       value=0;
       desc="just training objects with full transforms";
      };
      DynEnumItem @[1] {
       name="TRAIN_NOVEL";
       value=1;
       desc="training the novel testing objects: novel shown in restricted locations";
      };
      DynEnumItem @[2] {
       name="TEST_RANDOM";
       value=2;
       desc="test all objects in random transforms";
      };
     };
     bits=0;
    };
    DynEnumType @[2] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="InputItemList";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_type";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[0].types[1]$$;
      value=0;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="n_items";
     var_type=T_Int;
     int_val=100;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="number of items to generate";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="translate_max";
     var_type=T_Real;
     real_val=0.25;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max translation value for training (random translation < this val)";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="scale_min";
     var_type=T_Real;
     real_val=0.7;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="min scale for training";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="scale_max";
     var_type=T_Real;
     real_val=1;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max scale for training";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="rotate_max";
     var_type=T_Real;
     real_val=0.01;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="max rotation for training";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="novel_train_restrict";
     var_type=T_Real;
     real_val=0.5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="proportion of full training range to use during training of novel items";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="novel_train_pct";
     var_type=T_Real;
     real_val=0.5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="proportion of items to be novel items during train_novel";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="translate_x";
     var_type=T_Real;
     real_val=-0.05565237432094855;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="translate_y";
     var_type=T_Real;
     real_val=0.114014893705007;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="scale";
     var_type=T_Real;
     real_val=0.8654057417181046;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="scale_half_range";
     var_type=T_Real;
     real_val=0.15;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="scale_mid";
     var_type=T_Real;
     real_val=0.85;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="rotate";
     var_type=T_Real;
     real_val=0.001020775877004167;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=10;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[0].types[2]$$;
      value=10;
     };
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_17_235";
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="i";
     var_type=T_Int;
     int_val=100;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    AssignExpr @[0] {
     name="AssignExpr_scalehalfrangescalemaxscalemin5";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="scale_half_range = (scale_max- scale_min) * .5";
     result_var=.programs[0].vars[9]$$;
     expr {
      expr="(scale_max- scale_min) * .5";
     };
    };
    AssignExpr @[1] {
     name="AssignExpr_scalemidscalemaxscalemin5";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="scale_mid = (scale_max + scale_min) * .5";
     result_var=.programs[0].vars[10]$$;
     expr {
      expr="(scale_max + scale_min) * .5";
     };
    };
    ResetDataRows @[2] {
     name="ResetDataRows_ResetDataRowstableInputItemList";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetDataRows:  table = InputItemList ";
     data_var=.programs[0].args[0]$$;
    };
    Switch @[3] {
     name="Switch_switchinputtype";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="switch(input_type)";
     switch_var=.programs[0].args[1]$$;
     cases {
      name="cases";
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       name="CaseBlock_caseTRAIN";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TRAIN";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  RandomCall @[0] {
	   name="RandomCall_translatexRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=.programs[0].vars[6]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   name="RandomCall_translateyRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=.programs[0].vars[7]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	   result_var=.programs[0].vars[11]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-rotate_max";
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="rotate_max";
	     expr {
	      expr="rotate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   name="RandomCall_scaleRandomUnifo_caleminscalemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	   result_var=.programs[0].vars[8]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="scale_min";
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="scale_max";
	     expr {
	      expr="scale_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   name="RandomCall_ObjectNoRandomIntZeroN18";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectNo = Random::IntZeroN(18, )";
	   result_var=.programs[0].vars[12]$$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     prev_expr="18";
	     expr {
	      expr="18";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=.programs[0].vars[13]$$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=.programs[0].vars[14]$$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[0].args[0]$;
	  };
	  DataVarProg @[8] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[14]$;
	   var_2=$.programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[11]$;
	   var_2=$.programs[0].vars[8]$;
	   var_3=$.programs[0].vars[6]$;
	   var_4=$.programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[0].args[0]$;
	};
       };
       case_val {
	expr="TRAIN";
       };
       is_default=0;
      };
      CaseBlock @[1] {
       name="CaseBlock_caseTRAINNOVEL";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TRAIN_NOVEL";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  If @[0] {
	   name="If_ifRandomZeroOnenoveltrainpct";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="if (Random::ZeroOne() <  novel_train_pct)";
	   cond {
	    expr="Random::ZeroOne() <  novel_train_pct";
	   };
	   true_code {
	    name="true_code";
	    el_typ=ProgCode;
	    el_def=0;
	    RandomCall @[0] {
	     name="RandomCall_translatexRandom_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_x = Random::UniformMinMax(-translate_max* novel_train_restrict, translate_max* novel_train_restrict, )";
	     result_var=$.programs[0].vars[6]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max* novel_train_restrict";
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max* novel_train_restrict";
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     name="RandomCall_translateyRandom_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_y = Random::UniformMinMax(-translate_max* novel_train_restrict, translate_max* novel_train_restrict, )";
	     result_var=$.programs[0].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max* novel_train_restrict";
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max* novel_train_restrict";
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     name="RandomCall_rotateRandomUnif_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="rotate = Random::UniformMinMax(-rotate_max* novel_train_restrict, rotate_max* novel_train_restrict, )";
	     result_var=$.programs[0].vars[11]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-rotate_max* novel_train_restrict";
	       expr {
		expr="-rotate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="rotate_max* novel_train_restrict";
	       expr {
		expr="rotate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     name="RandomCall_scaleRandomUnifo_eltrainrestrict";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="scale = Random::UniformMinMax(scale_mid - scale_half_range *  novel_train_restrict, scale_mid +  scale_half_range* novel_train_restrict, )";
	     result_var=$.programs[0].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="scale_mid - scale_half_range *  novel_train_restrict";
	       expr {
		expr="scale_mid - scale_half_range *  novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="scale_mid +  scale_half_range* novel_train_restrict";
	       expr {
		expr="scale_mid +  scale_half_range* novel_train_restrict";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     name="RandomCall_ObjectNoRandomIntMinMax1820";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="ObjectNo = Random::IntMinMax(18, 20, )";
	     result_var=$.programs[0].vars[12]$;
	     object_type=Random;
	     method=Random::IntMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="18";
	       expr {
		expr="18";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=int;
	       type="int";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="20";
	       expr {
		expr="20";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	   };
	  };
	  Else @[1] {
	   name="Else_If_ifRandomZeroOnenoveltrainpct";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="else";
	   cond {
	    expr=;
	   };
	   true_code {
	    name="true_code";
	    el_typ=ProgCode;
	    el_def=0;
	    RandomCall @[0] {
	     name="RandomCall_translatexRandom_maxtranslatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	     result_var=$.programs[0].vars[6]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max";
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max";
	       expr {
		expr="translate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     name="RandomCall_translateyRandom_maxtranslatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	     result_var=$.programs[0].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-translate_max";
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="translate_max";
	       expr {
		expr="translate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	     result_var=$.programs[0].vars[11]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="-rotate_max";
	       expr {
		expr="-rotate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="rotate_max";
	       expr {
		expr="rotate_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     name="RandomCall_scaleRandomUnifo_caleminscalemax";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	     result_var=$.programs[0].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       prev_expr="scale_min";
	       expr {
		expr="scale_min";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       prev_expr="scale_max";
	       expr {
		expr="scale_max";
	       };
	      };
	      ProgArg @[2] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     name="RandomCall_ObjectNoRandomIntZeroN18";
	     desc=;
	     flags=CAN_REVERT_TO_CODE;
	     code_string="ObjectNo = Random::IntZeroN(18, )";
	     result_var=$.programs[0].vars[12]$;
	     object_type=Random;
	     method=Random::IntZeroN;
	     meth_args {
	      name="meth_args";
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="n";
	       required=1;
	       def_val=;
	       prev_expr="18";
	       expr {
		expr="18";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=int;
	       type="int";
	       name="thr_no";
	       required=0;
	       def_val="-1";
	       prev_expr=;
	       expr {
		expr=;
	       };
	      };
	     };
	    };
	   };
	  };
	  AssignExpr @[2] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=$.programs[0].vars[13]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[3] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=$.programs[0].vars[14]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[4] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[0].args[0]$;
	  };
	  DataVarProg @[5] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[14]$;
	   var_2=$.programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[6] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[11]$;
	   var_2=$.programs[0].vars[8]$;
	   var_3=$.programs[0].vars[6]$;
	   var_4=$.programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[0].args[0]$;
	};
       };
       case_val {
	expr="TRAIN_NOVEL";
       };
       is_default=0;
      };
      CaseBlock @[2] {
       name="CaseBlock_caseTESTRANDOM";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="case: TEST_RANDOM";
       prog_code {
	name="prog_code";
	el_typ=ProgCode;
	el_def=0;
	ForLoop @[0] {
	 name="ForLoop_fori0initemsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i = 0; i < n_items; i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  RandomCall @[0] {
	   name="RandomCall_translatexRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=$.programs[0].vars[6]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   name="RandomCall_translateyRandom_maxtranslatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
	   result_var=$.programs[0].vars[7]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-translate_max";
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="translate_max";
	     expr {
	      expr="translate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   name="RandomCall_rotateRandomUnif_atemaxrotatemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
	   result_var=$.programs[0].vars[11]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="-rotate_max";
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="rotate_max";
	     expr {
	      expr="rotate_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   name="RandomCall_scaleRandomUnifo_caleminscalemax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
	   result_var=$.programs[0].vars[8]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     prev_expr="scale_min";
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     prev_expr="scale_max";
	     expr {
	      expr="scale_max";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   name="RandomCall_ObjectNoRandomIntZeroN20";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectNo = Random::IntZeroN(20, )";
	   result_var=$.programs[0].vars[12]$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     prev_expr="20";
	     expr {
	      expr="20";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="thr_no";
	     required=0;
	     def_val="-1";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   name="AssignExpr_ObjectEnumObjectNo";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectEnum = ObjectNo";
	   result_var=$.programs[0].vars[13]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   name="AssignExpr_ObjectNameObjectEnum";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="ObjectName = ObjectEnum";
	   result_var=$.programs[0].vars[14]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   name="AddNewDataRow_AddNewRowtableInputItemList";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Add New Row:  table = InputItemList ";
	   data_var=$.programs[0].args[0]$;
	  };
	  DataVarProg @[8] {
	   name="DataVarProg_DataTotableInput_bjectNovar3var4";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[14]$;
	   var_2=$.programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   name="DataVarProg_DataTotableInput_xvar4translatey";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="Data To:  table=InputItemList  row_spec=cur_row  set=to  all_matches=false  var_1=rotate  var_2=scale  var_3=translate_x  var_4=translate_y ";
	   data_var=$.programs[0].args[0]$;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   set_data=1;
	   all_matches=0;
	   quiet=0;
	   var_1=$.programs[0].vars[11]$;
	   var_2=$.programs[0].vars[8]$;
	   var_3=$.programs[0].vars[6]$;
	   var_4=$.programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 name="DoneWritingDataRow_DoneWritingDataR_leInputItemList";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = InputItemList ";
	 data_var=$.programs[0].args[0]$;
	};
       };
       case_val {
	expr="TEST_RANDOM";
       };
       is_default=0;
      };
     };
    };
    ForLoop @[4] {
     name="ForLoop_fori0initemsi";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < n_items; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      RandomCall @[0] {
       name="RandomCall_translatexRandom_maxtranslatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="translate_x = Random::UniformMinMax(-translate_max, translate_max, )";
       result_var=$.programs[0].vars[6]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-translate_max";
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="translate_max";
	 expr {
	  expr="translate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[1] {
       name="RandomCall_translateyRandom_maxtranslatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="translate_y = Random::UniformMinMax(-translate_max, translate_max, )";
       result_var=$.programs[0].vars[7]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-translate_max";
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="translate_max";
	 expr {
	  expr="translate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[2] {
       name="RandomCall_rotateRandomUnif_atemaxrotatemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="rotate = Random::UniformMinMax(-rotate_max, rotate_max, )";
       result_var=$.programs[0].vars[11]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="-rotate_max";
	 expr {
	  expr="-rotate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="rotate_max";
	 expr {
	  expr="rotate_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      RandomCall @[3] {
       name="RandomCall_scaleRandomUnifo_caleminscalemax";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="scale = Random::UniformMinMax(scale_min, scale_max, )";
       result_var=$.programs[0].vars[8]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 prev_expr="scale_min";
	 expr {
	  expr="scale_min";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 prev_expr="scale_max";
	 expr {
	  expr="scale_max";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="thr_no";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < n_items";
     };
     iter {
      expr="i++";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="LEDStimGen";
   short_nm="LDSGn";
   tags="Canvas, Drawing, DataGen, Image";
   desc="generate LED-like stimulus displays";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taCanvas;
    el_def=0;
    taCanvas @[0] {
     name="Canvas";
     coord_type=NORMALIZED;
    };
    DataTable @[1] {
     name="StimGenData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="IMAGE": value=1: val_type_fixed=0: };
       };
       name="Canvas";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 120;120;3;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [3] ;;;       };
       width=120;
       matrix_col_width=10;
       ar {
	name="ar";
       [120 120 3 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;
0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.39607844;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.40000001;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;0.39607844;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.15686275;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;
0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.40000001;0.15686275;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=120;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [1] 0;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canvas";
     var_type=T_Object;
     object_type=taCanvas;
     completion_type=;
     object_val=.programs[1].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="stim_gen_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[1].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name="enums";
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=13;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="object number to render";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canvas_width";
     var_type=T_Int;
     int_val=120;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="canvas_height";
     var_type=T_Int;
     int_val=120;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="disp_type";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=.programs[1].types[0]$$;
      value=0;
     };
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="disp_size";
     var_type=T_Int;
     int_val=3;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="display size, as number in each dimension of a square grid of oriented lines";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="bg_color";
     var_type=T_String;
     string_val="black";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color of background";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="line_color";
     var_type=T_String;
     string_val="white";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="color to draw lines in";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_7_034";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     completion_type=;
     object_scope=NULL;
     dyn_enum_val {
      user_data_=NULL;
      enum_type=$.programs[1].types[0]$;
      value=13;
     };
     flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="size";
     var_type=T_Real;
     real_val=0.3;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="size of the line segments";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="line_width";
     var_type=T_Real;
     real_val=0.04;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="width of the line segments";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="ctr_x";
     var_type=T_Real;
     real_val=0.5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="center point to draw from";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="ctr_y";
     var_type=T_Real;
     real_val=0.5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="where to start drawing";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="LED_n";
     var_type=T_Int;
     int_val=3;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="number of led elements in object";
     init_from=NULL;
    };
    ProgVar @[13] {
     name="LED_segs";
     var_type=T_String;
     string_val="034";
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="string of LED segments to render (from ENUM)";
     init_from=NULL;
    };
    ProgVar @[14] {
     name="cur_led";
     var_type=T_Int;
     int_val=4;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="current led segment to draw";
     init_from=NULL;
    };
    ProgVar @[15] {
     name="i";
     var_type=T_Int;
     int_val=3;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="DrawLED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DrawLED(int led_number) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="led_number";
       var_type=T_Int;
       int_val=0;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars4vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (4 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="st_x";
	 var_type=T_Real;
	 real_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="st_y";
	 var_type=T_Real;
	 real_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="ed_x";
	 var_type=T_Real;
	 real_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[3] {
	 name="ed_y";
	 var_type=T_Real;
	 real_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      Switch @[1] {
       name="Switch_switchlednumber";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="switch(led_number)";
       switch_var=.programs[1].functions[0].args[0]$$;
       cases {
	name="cases";
	el_typ=CaseBlock;
	el_def=0;
	CaseBlock @[0] {
	 name="CaseBlock_case0";
	 desc="bottom horiz";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 0";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y - size, ctr_x + size, ctr_y - size)";
	   result_var=NULL;
	   obj=.programs[1].objs_vars[0]$$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="0";
	 };
	 is_default=0;
	};
	CaseBlock @[1] {
	 name="CaseBlock_case1";
	 desc="left vert";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 1";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y - size, ctr_x - size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[1].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="1";
	 };
	 is_default=0;
	};
	CaseBlock @[2] {
	 name="CaseBlock_case2";
	 desc="right vert";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 2";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x + size, ctr_y - size, ctr_x + size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[1].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="2";
	 };
	 is_default=0;
	};
	CaseBlock @[3] {
	 name="CaseBlock_case3";
	 desc="top horiz";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 3";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_trxsizectrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y + size, ctr_x + size, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[1].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="3";
	 };
	 is_default=0;
	};
	CaseBlock @[4] {
	 name="CaseBlock_case4";
	 desc="horiz middle";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 4";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxsi_tryctrxsizectry";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x - size, ctr_y, ctr_x + size, ctr_y)";
	   result_var=NULL;
	   obj=$.programs[1].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="4";
	 };
	 is_default=0;
	};
	CaseBlock @[5] {
	 name="CaseBlock_case5";
	 desc="vert middle";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="case: 5";
	 prog_code {
	  name="prog_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_canvasLinectrxct_izectrxctrysize";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="canvas->Line(ctr_x, ctr_y - size, ctr_x, ctr_y + size)";
	   result_var=NULL;
	   obj=$.programs[1].objs_vars[0]$;
	   method=taCanvas::Line;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	   meth_sig="void Line(float x1, float y1, float x2, float y2)";
	   meth_desc=" ";
	  };
	 };
	 case_val {
	  expr="5";
	 };
	 is_default=0;
	};
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    ResetDataRows @[0] {
     name="ResetDataRows_ResetDataRowstablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetDataRows:  table = stim_gen_data ";
     data_var=.programs[1].objs_vars[1]$$;
    };
    MethodCall @[1] {
     name="MethodCall_canvasSetImageSi_dthcanvasheight";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->SetImageSize(canvas_width, canvas_height)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taImage::SetImageSize;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_width";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="height";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="canvas_height";
       };
      };
     };
     meth_sig="bool SetImageSize(int width, int height)";
     meth_desc=" set size of current image -- if currently same size, then returns false and nothing happens; otherwise, a new image data structure of given size is created, using ARGB32 format";
    };
    MethodCall @[2] {
     name="MethodCall_canvasConfigData_BaseVTFLOATtrue";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->ConfigDataColName(stim_gen_data, \"Canvas\", taBase::VT_FLOAT, true)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taImage::ConfigDataColName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="stim_gen_data";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="rgb";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="bool ConfigDataColName(DataTable* dt, taString& col_nm, taBase::ValType val_type, bool rgb = true)";
     meth_desc=" configure data column with given name (if it doesn't exist, it is created) to represent current image -- if rgb is false, then a greyscale image is configured (2d)";
    };
    AddNewDataRow @[3] {
     name="AddNewDataRow_AddNewRowtablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Add New Row:  table = stim_gen_data ";
     data_var=$.programs[1].objs_vars[1]$;
    };
    MethodCall @[4] {
     name="MethodCall_canvasInitCanvas";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->InitCanvas()";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taCanvas::InitCanvas;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void InitCanvas()";
     meth_desc=" initialize the canvas -- MUST be called prior to drawing!";
    };
    MethodCall @[5] {
     name="MethodCall_canvasEraseNamebgcolor";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->EraseName(bg_color)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taCanvas::EraseName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="bg_color";
       };
      };
     };
     meth_sig="void EraseName(taString& name)";
     meth_desc=" erase image to given color name";
    };
    MethodCall @[6] {
     name="MethodCall_canvasPenWidthlinewidth";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->PenWidth(line_width)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taCanvas::PenWidth;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="width";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="line_width";
       };
      };
     };
     meth_sig="void PenWidth(float width)";
     meth_desc=" ";
    };
    MethodCall @[7] {
     name="MethodCall_canvasPenColorNamelinecolor";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->PenColorName(line_color)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taCanvas::PenColorName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="name";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="line_color";
       };
      };
     };
     meth_sig="void PenColorName(taString& name)";
     meth_desc=" ";
    };
    AssignExpr @[8] {
     name="AssignExpr_ObjectEnumObjectNo";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ObjectEnum = ObjectNo";
     result_var=.programs[1].vars[7]$$;
     expr {
      expr="ObjectNo";
     };
    };
    AssignExpr @[9] {
     name="AssignExpr_ObjectNameObjectEnum";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ObjectName = ObjectEnum";
     result_var=.programs[1].vars[6]$$;
     expr {
      expr="ObjectEnum";
     };
    };
    AssignExpr @[10] {
     name="AssignExpr_LEDnObjectNamebeforeafterLED";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LED_n = ObjectName.before(\"_\").after(\"LED\")";
     result_var=.programs[1].vars[12]$$;
     expr {
      expr="ObjectName.before(\"_\").after(\"LED\")";
     };
    };
    AssignExpr @[11] {
     name="AssignExpr_LEDsegsObjectNameafter1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LED_segs = ObjectName.after(\"_\",-1)";
     result_var=.programs[1].vars[13]$$;
     expr {
      expr="ObjectName.after(\"_\",-1)";
     };
    };
    ForLoop @[12] {
     name="ForLoop_fori0iLEDni";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (i = 0; i < LED_n; i++)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      AssignExpr @[0] {
       name="AssignExpr_curledLEDsegsati1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="cur_led = LED_segs.at(i,1)";
       result_var=.programs[1].vars[14]$$;
       expr {
	expr="LED_segs.at(i,1)";
       };
      };
      FunctionCall @[1] {
       name="FunctionCall_DrawLEDcurled";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="DrawLED(cur_led)";
       result_var=NULL;
       fun=.programs[1].functions[0]$$;
       fun_args {
	name="fun_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="led_number";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="cur_led";
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < LED_n";
     };
     iter {
      expr="i++";
     };
    };
    Comment @[13] {
     name="Comment_updatethedatatab_thecurrentimage";
     desc="update the datatable with the current image";
     flags=CAN_REVERT_TO_CODE;
     code_string="// update the datatable with the current image";
    };
    MethodCall @[14] {
     name="MethodCall_canvasImageToDat_mgendataCanvas1";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="canvas->ImageToDataCellName(stim_gen_data, \"Canvas\", -1)";
     result_var=NULL;
     obj=$.programs[1].objs_vars[0]$;
     method=taImage::ImageToDataCellName;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="stim_gen_data";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool ImageToDataCellName(DataTable* dt, taString& col_nm, int row)";
     meth_desc=" set image to datatable cell indexed by col name and row number -- uses cell dimensionality and type -- only amount that fits in cell is copied. row = -1 = last row";
    };
    DoneWritingDataRow @[15] {
     name="DoneWritingDataRow_DoneWritingDataR_ablestimgendata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DoneWritingDataRow:  table = stim_gen_data ";
     data_var=$.programs[1].objs_vars[1]$;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[2].doc$$: };
   };
   name="ApplyInputsImage";
   short_nm="AplyIn";
   tags=;
   desc="apply input data to the network, using a RetinaSpec to process a bitmap image.  epoch should iterate over a datatable with names of images to load, and the current value of that is used here to load the image and process into a second datatable (image_data) which is actually presented to the network.";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=LayerWriter;
    el_def=0;
    V1RetinaProc @[0] {
     name="V1RetinaProc_0";
     edge_mode=WRAP;
     fade_width=-1;
     regions {
      name="regions";
      el_typ=V1RegionSpec;
      el_def=0;
      V1RegionSpec @[0] {
       name="V1";
       threads {};
       data_table=.programs[2].objs[1]$$;
       save_mode=FIRST_ROW;
       image_save=SAVE_DATA|ONLY_GUI;
       region {ocularity=MONOCULAR: region=FOVEA: res=HI_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-5: };
       input_size {retina_size={x=40: y=40: }: border={x=0: y=0: }: input_size={x=40: y=40: }: };
       input_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       motion_frames=1;
       v1s_specs {on=1: wt=1: gain=2: size=6: spacing=2: wvlen=6: sig_len=0.3: sig_wd=0.2: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_2 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.25: sig_wd=0.15: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_specs_3 {on=0: wt=1: gain=2: size=8: spacing=1: wvlen=6: sig_len=0.25: sig_wd=0.15: phase_off=0: circle_edge=1: n_angles=4: };
       v1s_renorm=NO_RENORM;
       v1s_kwta {on=1: gi=2: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.8: tot_ni_len=3: };
       v1s_adapt {on=0: up_dt=0.3: dn_dt=0.1: };
       v1s_save=SAVE_DATA;
       v1s_img_geom {x=20: y=20: n_not_xy=0: n=400: };
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_motion {on=0: wt=1: gain=3: size=10: spacing=1: wvlen=6: sig_len=2: sig_wd=0.3: phase_off=1.5708: circle_edge=0: n_angles=2: r_only=1: };
       v1m_renorm=NO_RENORM;
       v1m_kwta {on=1: gi=3: lay_gi=10: gain=10: nvar=0.01: g_bar_l=0.1: };
       v1m_feat_geom {x=4: y=4: n_not_xy=0: n=16: };
       square_group {on=1: sg_rf=2: sg_spc=2: v1s_color=0: sg_half=1: sg_border=0: };
       sg_save=SAVE_DATA;
       v1sg_img_geom {x=10: y=10: n_not_xy=0: n=100: };
       v1sg_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_specs {on=1: end_stop=1: add_v1s=1: len_sum_len=1: es_thr=0.5: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_kwta {on=0: gi=2: lay_gi=1.5: gain=80: nvar=0.01: g_bar_l=0.1: };
       v1c_save=SAVE_DATA;
       v1c_img_geom {x=10: y=10: n_not_xy=0: n=100: };
       v1c_feat_geom {x=4: y=5: n_not_xy=0: n=20: };
       si_specs {on=0: v1s=0: v1pi=0: v1c=0: spat_rf={x=4: y=4: }: sig=0.8: sum_rf=0: spat_half={x=2: y=2: }: spat_spacing={x=2: y=2: }: spat_border={x=0: y=0: }: };
       si_renorm=NO_RENORM;
       si_kwta {on=1: gi=1.5: lay_gi=1.5: gain=40: nvar=0.01: g_bar_l=0.1: };
       si_save=SAVE_DATA;
       si_v1s_geom {x=10: y=10: n_not_xy=0: n=100: };
       si_v1c_geom {x=5: y=5: n_not_xy=0: n=25: };
       opt_filters=0;
       opt_save=SAVE_DATA;
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1m_out_polarities=1;
      };
     };
    };
    DataTable @[1] {
     name="V1FilterInputData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="Output";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 5;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=6;
       matrix_col_width=10;
      };
      String_Data @[1] {
       name="Name";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_435";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="IMAGE": value=1: val_type_fixed=0: };
       };
       name="V1_image_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 40;40;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=40;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="V1_v1s_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;20;20;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="V1_v1pi_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;20;20;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="V1_v1s_sg_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;2;10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="V1_v1pi_sg_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;1;10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="V1_v1c_r";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 4;5;10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [4] ;;;;       };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    LayerWriter @[2] {
     name="V1LayerWriter";
     data=$.programs[2].objs[1]$;
     network=.networks[0]$$;
     layer_data {
      name="layer_data";
      el_typ=LayerWriterEl;
      el_def=0;
      LayerWriterEl @[0] {
       off=0;
       col_name="V1_v1c_r";
       net_target=LAYER;
       layer_name="V1";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[1] {
       off=0;
       col_name="V1_image_r";
       net_target=LAYER;
       layer_name="Image";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="noise": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[2] {
       off=0;
       col_name="Output";
       net_target=LAYER;
       layer_name="Output";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=TARG;
       noise {name="RandomSpec_23": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[3] {
       off=0;
       col_name="Name";
       net_target=TRIAL_NAME;
       layer_name="Name";
       offset {x=0: y=0: };
       use_layer_type=1;
       quiet=0;
       na_by_range=0;
       ext_flags=0;
       noise {name="RandomSpec_24": type=NONE: mean=0: var=0.5: par=1: };
      };
     };
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="v1_retina_proc_0";
     var_type=T_Object;
     object_type=V1RetinaProc;
     completion_type=;
     object_val=.programs[2].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="v1_filter_input_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=$.programs[2].objs[1]$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="v1_layer_writer";
     var_type=T_Object;
     object_type=LayerWriter;
     completion_type=;
     object_val=.programs[2].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Moves data into the network";
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="Network to which to apply inputs";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=$.data.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="Source data for input process";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_7_034";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="Name";
     var_type=T_String;
     string_val="13";
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=13;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="object number (for output layer)";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="translate_x";
     var_type=T_Real;
     real_val=0.01834042080684467;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Horizontal translation in image coordinates for current input (0.0 - 1.0, 0.3 is generally maximum)";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="translate_y";
     var_type=T_Real;
     real_val=0.1848679571293247;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Vertical translation for current input (image coords)";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="scale";
     var_type=T_Real;
     real_val=0.9428069188395412;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Scaling factor for current input - fraction of size of one dimension (50% = 0.5)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="rotate";
     var_type=T_Real;
     real_val=0.001125350626696603;
     completion_type=;
     object_scope=NULL;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="Rotation for current input - 0.5 is 180 degrees";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     completion_type=;
     object_val=$.programs[1].objs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_v1layerwriterSet_nputdatanetwork";
     desc="Connect the image data table to the layerwriter";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->SetDataNetwork(v1_filter_input_data, network)";
     result_var=NULL;
     obj=.programs[2].objs_vars[2]$$;
     method=LayerWriter::SetDataNetwork;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="db";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="v1_filter_input_data";
       };
      };
      ProgArg @[1] {
       arg_type=Network_ptr;
       type="Network*";
       name="net";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
     };
     meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
     meth_desc=" set the data table and network pointers -- convenience function for programs ";
    };
    MethodCall @[1] {
     name="MethodCall_v1layerwriterCheckConfigfalse";
     desc="Confirm that all is well with the layerwriter";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->CheckConfig(false)";
     result_var=NULL;
     obj=$.programs[2].objs_vars[2]$;
     method=taList_impl::CheckConfig;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="bool CheckConfig(bool quiet = false)";
     meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
    };
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    If @[0] {
     name="If_ifnetworkquarter0";
     desc="For minus phase";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (network.quarter == 0)";
     cond {
      expr="network.quarter == 0";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      DataVarProg @[0] {
       name="DataVarProg_DataFromtableinp_bjectNovar3var4";
       desc="get object name, number";
       flags=CAN_REVERT_TO_CODE;
       code_string="Data From:  table=input_data  row_spec=cur_row  set=from  all_matches=false  var_1=ObjectName  var_2=ObjectNo  var_3=?  var_4=? ";
       data_var=.programs[2].args[1]$$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=0;
       all_matches=0;
       quiet=0;
       var_1=.programs[2].vars[0]$$;
       var_2=.programs[2].vars[2]$$;
       var_3=NULL;
       var_4=NULL;
      };
      DataVarProg @[1] {
       name="DataVarProg_DataFromtableinp_rotatevar4scale";
       desc="get display transformations (translation, rotation, scale)";
       flags=CAN_REVERT_TO_CODE;
       code_string="Data From:  table=input_data  row_spec=cur_row  set=from  all_matches=false  var_1=translate_x  var_2=translate_y  var_3=rotate  var_4=scale ";
       data_var=$.programs[2].args[1]$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=0;
       all_matches=0;
       quiet=0;
       var_1=.programs[2].vars[3]$$;
       var_2=.programs[2].vars[4]$$;
       var_3=.programs[2].vars[6]$$;
       var_4=.programs[2].vars[5]$$;
      };
      ProgramCall @[2] {
       name="ProgramCall_LEDStimGenObjectNo";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LEDStimGen(ObjectNo)";
       prog_args {
	name="prog_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="ObjectNo";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ObjectNo";
	 };
	};
       };
       target=.programs[1]$$;
       targ_ld_init="*LEDStimGen*";
      };
      MethodCall @[3] {
       name="MethodCall_v1retinaproc0Loo_ateyscalerotate";
       desc="Key operation: Read and filter the image into the image data table ";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0->LookAtImage(Canvas, NULL, VisRegionParams::FOVEA, 0.0, 0.0, 1.0, 1.0, translate_x, translate_y, scale, rotate)";
       result_var=NULL;
       obj=.programs[2].objs_vars[0]$$;
       method=RetinaProc::LookAtImage;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="right_eye_image";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="left_eye_image";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr="NULL";
	 };
	};
	ProgArg @[2] {
	 arg_type=VisRegionParams::Region;
	 type="VisRegionParams::Region";
	 name="region";
	 required=0;
	 def_val="VisRegionParams::FOVEA";
	 prev_expr=;
	 expr {
	  expr="VisRegionParams::FOVEA";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="box_ll_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="box_ll_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[5] {
	 arg_type=float;
	 type="float";
	 name="box_ur_x";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="box_ur_y";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="move_x";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="translate_x";
	 };
	};
	ProgArg @[8] {
	 arg_type=float;
	 type="float";
	 name="move_y";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="translate_y";
	 };
	};
	ProgArg @[9] {
	 arg_type=float;
	 type="float";
	 name="scale";
	 required=0;
	 def_val="1.0f";
	 prev_expr=;
	 expr {
	  expr="scale";
	 };
	};
	ProgArg @[10] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0.0f";
	 prev_expr=;
	 expr {
	  expr="rotate";
	 };
	};
       };
       meth_sig="bool LookAtImage(taImage* right_eye_image, taImage* left_eye_image = __null, VisRegionParams::Region region = VisRegionParams::FOVEA, float box_ll_x = 0.0f, float box_ll_y = 0.0f, float box_ur_x = 1.0f, float box_ur_y = 1.0f, float move_x = 0.0f, float move_y = 0.0f, float scale = 1.0f, float rotate = 0.0f)";
       meth_desc=" transform image/s in image format, with region of retina centered and scaled to fit the box coordinates given in 0-1 normalized units (ll=lower-left, ur=upper-right); additional scale, rotate, and move params applied after foveation scaling and offsets";
      };
      MethodCall @[4] {
       name="MethodCall_v1retinaproc0FilterImageData";
       desc="Key operation: Read and filter the image into the image data table ";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_retina_proc_0->FilterImageData()";
       result_var=NULL;
       obj=$.programs[2].objs_vars[0]$;
       method=RetinaProc::FilterImageData;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=bool;
	 type="bool";
	 name="motion_only";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool FilterImageData(bool motion_only = false)";
       meth_desc=" filter retinal image data -- operates on images that were generated from prior Transform or LookAt calls -- must call one of those first -- if motion_only = true, then only process up to level of motion, for faster processing of initial frames of motion sequence";
      };
      Comment @[5] {
       name="Comment_setOutputtargetvalue";
       desc="set Output target value";
       flags=CAN_REVERT_TO_CODE;
       code_string="// set Output target value";
      };
      MethodCall @[6] {
       name="MethodCall_v1filterinputdat_nitVals00Output";
       desc="set output unit";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_filter_input_data->InitVals(0.0, \"Output\", , )";
       result_var=NULL;
       obj=.programs[2].objs_vars[1]$$;
       method=DataTable::InitVals;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="init_val";
	 required=1;
	 def_val=;
	 prev_expr="0.0";
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="col";
	 required=1;
	 def_val=;
	 prev_expr="\"Output\"";
	 expr {
	  expr="\"Output\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="st_row";
	 required=0;
	 def_val="0";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=0;
	 def_val="-1";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool InitVals(Variant& init_val, Variant& col, int st_row = 0, int n_rows = -1)";
       meth_desc=" initialize all values in given column to given value -- column can be specified as either integer index or a string that is then used to find the given column name -- for rows as specified by starting row, and n_rows = -1 means to the end";
      };
      MethodCall @[7] {
       name="MethodCall_v1filterinputdat_Output1ObjectNo";
       desc="set output unit";
       flags=CAN_REVERT_TO_CODE;
       code_string="v1_filter_input_data->SetMatrixFlatValColName(1.0, \"Output\", -1, ObjectNo, )";
       result_var=NULL;
       obj=$.programs[2].objs_vars[1]$;
       method=DataTable::SetMatrixFlatValColName;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_name";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"Output\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="-1";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="cell";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="ObjectNo";
	 };
	};
	ProgArg @[4] {
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool SetMatrixFlatValColName(Variant& val, taString& col_name, int row, int cell, bool quiet = false)";
       meth_desc=" set data of matrix type, in Variant form (any data type, use for Programs), for given column, row, and flat matrix cell index (flat index into elements of the matrix, regardless of dimensionality); returns 'true' if valid access and set is successful -- quiet = fail quietly";
      };
      AssignExpr @[8] {
       name="AssignExpr_NametaMiscLeadingZerosObjectNo2";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Name = taMisc::LeadingZeros(ObjectNo,2)";
       result_var=.programs[2].vars[1]$$;
       expr {
	expr="taMisc::LeadingZeros(ObjectNo,2)";
       };
      };
      DataVarProg @[9] {
       name="DataVarProg_DataTotablev1fil_amevar2var3var4";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="Data To:  table=v1_filter_input_data  row_spec=cur_row  set=to  all_matches=false  var_1=Name  var_2=?  var_3=?  var_4=? ";
       data_var=$.programs[2].objs_vars[1]$;
       row_spec=CUR_ROW;
       row_var=NULL;
       set_data=1;
       all_matches=0;
       quiet=0;
       var_1=$.programs[2].vars[1]$;
       var_2=NULL;
       var_3=NULL;
       var_4=NULL;
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_v1filterinputdataReadItem1";
     desc="Final read of image data before applying to network";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_filter_input_data->ReadItem(-1)";
     result_var=NULL;
     obj=$.programs[2].objs_vars[1]$;
     method=DataTable::ReadItem;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="-1";
       };
      };
     };
     meth_sig="bool ReadItem(int idx)";
     meth_desc=" goes directly (random access) to row idx (- = count back from last row available, otherwise must be in range 0 <= idx < rows) so that it is now available for GetData routines (which use read_idx for their row number), returns true if row exists and was read";
    };
    MethodCall @[2] {
     name="MethodCall_v1layerwriterApplyInputData";
     desc="write the data to the network!";
     flags=CAN_REVERT_TO_CODE;
     code_string="v1_layer_writer->ApplyInputData()";
     result_var=NULL;
     obj=$.programs[2].objs_vars[2]$;
     method=LayerWriter::ApplyInputData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="bool ApplyInputData()";
     meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
    };
    DoneWritingDataRow @[3] {
     name="DoneWritingDataRow_DoneWritingDataR_filterinputdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="DoneWritingDataRow:  table = v1_filter_input_data ";
     data_var=$.programs[2].objs_vars[1]$;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[3].doc$$: };
   };
   name="LeabraStartup";
   short_nm="Start";
   tags="Leabra, Startup";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batch_start=xxx] [n_batches=xx} [tag=xxx] and other opts -- see code";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN|OBJS_UPDT_GUI;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=$.data.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="train_prog";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=$.programs.gp[0][1]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=.programs.gp[0][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="param_set";
     var_type=T_String;
     string_val=;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="tag";
     var_type=T_String;
     string_val="_gui";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="batch_str";
     var_type=T_String;
     string_val="00";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="log_file_nm";
     var_type=T_String;
     string_val="/Users/oreilly/svn_sims/cecn/ccn_ed3/chapter_6/objrec_gui.epc.dat";
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[1][1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[1][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     completion_type=;
     object_val=.ctrl_panels[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     completion_type=;
     object_val=.active_params$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     name="RegisterArgs_RegisterArgs";
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     name="PrintExpr_PrintLoadedproje_ojects0filename";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     name="Comment_Stdvariablesinst_upprogramitself";
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[3] {
     name="ProgVarFmArg_SetVartaginProgr_artupfromArgtag";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.programs[3]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[4] {
     name="ProgVarFmArg_SetVarlogdirinPr_upfromArglogdir";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.programs[3]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[5] {
     name="ProgVarFmArg_SetVarparamsetin_fromArgparamset";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:param_set in Program:LeabraStartup from Arg:param_set";
     prog=$.programs[3]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[6] {
     name="ProgVarFmArg_SetVarmaxepochin_infromArgepochs";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.programs.gp[0][1]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     name="ProgVarFmArg_SetVarrndinitinP_nfromArgrndinit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.programs.gp[0][1]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     name="ProgVarFmArg_SetVarbatchstart_omArgbatchstart";
     desc="starting batch -- replaces b_start";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:batch_start in Program:LeabraBatch from Arg:batch_start";
     prog=$.programs.gp[0][0]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    ProgVarFmArg @[9] {
     name="ProgVarFmArg_SetVarnbatchesin_fromArgnbatches";
     desc="number of batches to run";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:n_batches in Program:LeabraBatch from Arg:n_batches";
     prog=$.programs.gp[0][0]$;
     var_name="n_batches";
     arg_name="n_batches";
    };
    ProgVarFmArg @[10] {
     name="ProgVarFmArg_SetVarsavewtsint_savewtsinterval";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.programs.gp[0][1]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[11] {
     name="ProgVarFmArg_SetVarsavefinalw_Argsavefinalwts";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.programs.gp[0][1]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[12] {
     name="ControlPanelsFmArgs_CtrlPanelFmArgsvarMyClusterRun";
     desc="sets any arg listed in the control panel";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.programs[3].vars[10]$$;
    };
    If @[13] {
     name="If_ifparamsetnonempty";
     desc="set variables to values stored in a param set";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (param_set.nonempty())";
     cond {
      expr="param_set.nonempty()";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_paramsetsActivat_aramSetparamset";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="param_sets->ActivateParamSet(param_set, )";
       result_var=NULL;
       obj=.programs[3].vars[11]$$;
       method=ParamSet_Group::ActivateParamSet;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="param_set";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="err_not_found";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
       meth_sig="bool ActivateParamSet(taString& set_name, bool err_not_found = true)";
       meth_desc=" find given parameter set by name within this group, and call CopySavedtoActive(true) on that ParamSet if found, otherwise emit an error (if err_not_found) -- one step function for applying named parameter sets in programs";
      };
     };
    };
    Comment @[14] {
     name="Comment_Addyourownvariableshere";
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[15] {
     name="Comment_Belowsaveslogfil_ndarddatatables";
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     name="If_iftaMiscCheckArgByNamebatchstart";
     desc="set tag for starting batch (new code in v 8.0)";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       name="ProgVarFmArg_SetVarbatchstart_omArgbatchstart";
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:batch_start";
       prog=$.programs[3]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       name="MiscCall_batchstrtaMiscLe_erosbatchstart2";
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.programs[3].vars[4]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       name="VarIncr_tagbatchstr";
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.programs[3].vars[3]$$;
       expr {
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       name="If_ifbatchstart0";
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	expr="batch_start == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_logfilenmEpochOu_e001logdirfalse";
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.programs[3].vars[6]$$;
	 obj=.programs[3].vars[8]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     name="Else_If_iftaMiscCheckArgByNamebatchstart";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      expr=;
     };
     true_code {
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       name="MethodCall_logfilenmEpochOu_staglogdirfalse";
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.programs[3].vars[6]$;
       obj=$.programs[3].vars[8]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       name="MiscCall_taMiscFullArgStr_ToFilelogfilenm";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     name="MiscCall_taMiscReportUnusedArgstrue";
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     name="Comment_Saveepochlogonbydefault";
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     name="MethodCall_logfilenmEpochOu_logdirtruefalse";
     desc="only on dmem_proc 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->SaveDataLogNameFmProject(\".epc.dat\", tag, log_dir, true, false)";
     result_var=$.programs[3].vars[6]$;
     obj=$.programs[3].vars[8]$;
     method=DataTable::SaveDataLogNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString SaveDataLogNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_0 = true, bool append = false)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write (if all processors write, then filename contains proc no). Gets the file name by calling GetFileNameFmProject with ext extension, special tag name for this run / job, and any subdirectory to append -- returns the file name";
    };
    PrintVar @[21] {
     name="PrintVar_PrintSavingepoch_datatologfilenm";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.programs[3].vars[6]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[22] {
     name="Comment_SavetriallogOFFbydefault";
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[23] {
     name="MethodCall_logfilenmTrialOu_ogdirfalsefalse";
     desc="on all dmem procs";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.programs[3].vars[6]$;
     obj=.programs[3].vars[9]$$;
     method=DataTable::SaveDataLogNameFmProject;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="false";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="taString SaveDataLogNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_0 = true, bool append = false)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write (if all processors write, then filename contains proc no). Gets the file name by calling GetFileNameFmProject with ext extension, special tag name for this run / job, and any subdirectory to append -- returns the file name";
    };
    PrintVar @[24] {
     name="PrintVar_PrintSavingtrial_datatologfilenm";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.programs[3].vars[6]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[25] {
     name="OtherProgramVar_VarsToprogramSav_tagvar2var3var4";
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.programs.gp[0][8]$$;
     set_other=1;
     var_1=$.programs[3].vars[3]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[26] {
     name="PrintExpr_PrintRunningbatchprogname";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[27] {
     name="ProgramCall_LeabraBatchnetworkinputdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.programs.gp[0][0]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[4] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[4].doc$$: };
   };
   name="LoadWeights";
   short_nm="LWghts";
   tags=;
   desc="load weights from trained networks";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to train";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_networkLoadWeights";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="network->LoadWeights(, )";
     result_var=NULL;
     obj=.programs[4].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="bool LoadWeights(taString& fname, bool quiet = false)";
     meth_desc=" read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[5] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[5].doc$$: };
   };
   name="LoadTestData";
   short_nm="LTsDt";
   tags=;
   desc="load pre-run testing data";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TestErrorData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.data.gp[2][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_TestErrorDataLoa_bleTABtrue1true";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="TestErrorData->LoadData(\"\", DataTable::TAB, true, -1, true)";
     result_var=NULL;
     obj=.programs[5].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void LoadData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = true)";
     meth_desc=" load Emergent native format data (ONLY) - has a special header to define columns, up to max num of recs (-1 for all), with delimiter between columns and optionally quoting strings, reset_first = remove any existing data prior to loading -- this is much faster than LoadAnyData, especially noticible for very large data files";
    };
    MethodCall @[1] {
     name="MethodCall_TestErrorDataFindMakeGraphView";
     desc="this is not good because it resets the view axes";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TestErrorData->FindMakeGraphView()";
     result_var=NULL;
     obj=$.programs[5].args[0]$;
     method=DataTable::FindMakeGraphView;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=T3Panel_ptr;
       type="T3Panel*";
       name="fr";
       required=0;
       def_val="__null";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="select_view";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="GraphTableView_ptr FindMakeGraphView(T3Panel* fr = __null, bool select_view = true)";
     meth_desc=" find existing or make a new graph view of this table (NULL=use existing empty frame if any, else make new frame) -- if select_view then existing view tab is selected";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[6] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[6].doc$$: };
   };
   name="LoadActRFData";
   short_nm="LdcRFD";
   tags=;
   desc="load pre-run activation-based receptive field data";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ActRFData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs.gp[1][7].objs[1]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_ActRFDataLoadDat_bleTABtrue1true";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ActRFData->LoadData(\"\", DataTable::TAB, true, -1, true)";
     result_var=NULL;
     obj=.programs[6].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       prev_expr=;
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void LoadData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, int max_recs = -1, bool reset_first = true)";
     meth_desc=" load Emergent native format data (ONLY) - has a special header to define columns, up to max num of recs (-1 for all), with delimiter between columns and optionally quoting strings, reset_first = remove any existing data prior to loading -- this is much faster than LoadAnyData, especially noticible for very large data files";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[7] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[7].doc$$: };
   };
   name="GenTrain";
   short_nm="GTrn";
   tags=;
   desc="generalization training preparation: load weights, set lrate to 0, epoch to 90, train mode to TRAIN_NOVEL";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraEpoch";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=.programs.gp[0][2]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="LeabraConSpec_0";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=$.networks[0].specs[2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="GenerateItemList";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=.programs[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_networkLoadWeigh_jrectrain1wtsgz";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="network->LoadWeights(\"objrec_train1.wts.gz\", )";
     result_var=NULL;
     obj=.programs[7].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"objrec_train1.wts.gz\"";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="bool LoadWeights(taString& fname, bool quiet = false)";
     meth_desc=" read weight values in from a simple ordered list of weights (fmt is read from file) (leave fname empty to pull up file chooser)";
    };
    MemberAssign @[1] {
     name="MemberAssign_networkepoch40";
     desc="reset epoch to allow more learning before 50";
     flags=CAN_REVERT_TO_CODE;
     code_string="network.epoch = 40";
     obj=$.programs[7].args[0]$;
     path="epoch";
     expr {
      expr="40";
     };
     update_after=0;
    };
    MethodCall @[2] {
     name="MethodCall_LeabraEpochSetVa_ttypeTRAINNOVEL";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraEpoch->SetVar(\"input_type\", \"TRAIN_NOVEL\")";
     result_var=NULL;
     obj=.programs[7].vars[0]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN_NOVEL\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MethodCall @[3] {
     name="MethodCall_GenerateItemList_ttypeTRAINNOVEL";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GenerateItemList->SetVar(\"input_type\", \"TRAIN_NOVEL\")";
     result_var=NULL;
     obj=.programs[7].vars[2]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN_NOVEL\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MemberAssign @[4] {
     name="MemberAssign_LeabraConSpec0lrate00";
     desc="set lrate to 0 for all but output <-> V4_IT pathways";
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraConSpec_0.lrate = 0.0";
     obj=.programs[7].vars[1]$$;
     path="lrate";
     expr {
      expr="0.0";
     };
     update_after=1;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[8] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[8].doc$$: };
   };
   name="RegTrain";
   short_nm="RTrn";
   tags=;
   desc="go back to regular training mode";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     completion_type=;
     object_val=$.networks[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on";
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraEpoch";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=$.programs.gp[0][2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="LeabraConSpec_0";
     var_type=T_Object;
     object_type=LeabraConSpec;
     completion_type=;
     object_val=$.networks[0].specs[2]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="GenerateItemList";
     var_type=T_Object;
     object_type=Program;
     completion_type=;
     object_val=$.programs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MethodCall @[0] {
     name="MethodCall_LeabraEpochSetVarinputtypeTRAIN";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraEpoch->SetVar(\"input_type\", \"TRAIN\")";
     result_var=NULL;
     obj=.programs[8].vars[0]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MemberAssign @[1] {
     name="MemberAssign_LeabraConSpec0lrate004";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraConSpec_0.lrate = 0.04";
     obj=.programs[8].vars[1]$$;
     path="lrate";
     expr {
      expr="0.04";
     };
     update_after=1;
    };
    MethodCall @[2] {
     name="MethodCall_GenerateItemList_rinputtypeTRAIN";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="GenerateItemList->SetVar(\"input_type\", \"TRAIN\")";
     result_var=NULL;
     obj=.programs[8].vars[2]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="\"TRAIN\"";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[9] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[9].doc$$: };
   };
   name="EpochsToTrainCR";
   short_nm="EpchTTr";
   tags="Data, Analysis, Epoch, Training, ClusterRun";
   desc="performs various stats on epochs to train to criterion, across multiple batches, including an additional err threshold that can be different than the training stopping criterion, and also the minimum error value achieved across batches";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=Relation;
    el_def=0;
    Relation @[0] {name="rel": rel=EQUAL: val=0: val_string="": use_var=0: var=NULL: };
    DataTable @[1] {
     name="AllData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="avg_ext_rew";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="avg_cycles";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="epoch_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="epoch_time_usr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="net_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="net_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="net_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=20;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="V4_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="IT_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="V4_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="IT_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="V4_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="IT_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="V4_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="IT_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="V4_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="IT_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[25] {
       name="V4_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[26] {
       name="IT_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[27] {
       name="V4_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[28] {
       name="IT_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[29] {
       name="V4_Fm_V1_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[30] {
       name="V4_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[31] {
       name="V4_Ctxt_Fm_V4_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=20;
       matrix_col_width=10;
      };
      float_Data @[32] {
       name="V4_Deep5b_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[33] {
       name="IT_Fm_V4_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[34] {
       name="IT_Fm_Output_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[35] {
       name="IT_Ctxt_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=20;
       matrix_col_width=10;
      };
      float_Data @[36] {
       name="IT_Deep5b_Fm_Output_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=26;
       matrix_col_width=10;
      };
      String_Data @[37] {
       name="tag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[38] {
       name="tag_svn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[39] {
       name="tag_job";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[40] {
       name="params";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[41] {
       name="notes";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[42] {
       name="output_gi";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[43] {
       name="out_it_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[44] {
       name="it_v4_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[45] {
       name="deep5b_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[46] {
       name="ti_scale_mult";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[47] {
       name="trial_decay";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[48] {
       name="adapt_on";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="ByBatchData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_276";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_278";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err_find_first";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="cnt_err_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      String_Data @[5] {
       name="params_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[6] {
       name="notes_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[3] {
     name="ByTagStats";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      String_Data @[1] {
       name="params_last_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_261";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="N";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_262";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_263";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_264";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_265";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_266";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="cnt_err_find_first_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="cnt_err_find_first_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="cnt_err_find_first_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=27;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="cnt_err_find_first_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="cnt_err_find_first_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="cnt_err_min_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="cnt_err_min_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="cnt_err_min_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="cnt_err_min_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ClusterRunData";
     var_type=T_Object;
     object_type=DataTable_Group;
     completion_type=;
     object_val=.data.gp[3]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="err_thresh";
     var_type=T_Int;
     int_val=5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="alternative error threshold to use";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="rel";
     var_type=T_Object;
     object_type=Relation;
     completion_type=;
     object_val=.programs[9].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="AllData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[9].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="ByBatchData";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[9].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="ByTagStats";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[9].objs[3]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="epoch_last_max";
     var_type=T_Real;
     real_val=199;
     completion_type=;
     object_scope=NULL;
     flags=SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="find_first_max";
     var_type=T_Real;
     real_val=-1;
     completion_type=;
     object_scope=NULL;
     flags=SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars2vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (2 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="dt";
       var_type=T_Object;
       object_type=DataTable;
       completion_type=;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="max_idx";
       var_type=T_Int;
       int_val=42;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_AllDataResetData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="AllData->ResetData()";
     result_var=NULL;
     obj=.programs[9].vars[3]$$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    ForeachLoop @[2] {
     name="ForeachLoop_foreachdtinClusterRunData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="foreach(dt in ClusterRunData)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      IfContinue @[0] {
       name="IfContinue_ifdtnamecontainststepccontinue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(!dt.name.contains(\"tst_epc\")) continue";
       cond {
	expr="!dt.name.contains(\"tst_epc\")";
       };
      };
      If @[1] {
       name="If_ifAllDatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (AllData.rows == 0)";
       cond {
	expr="AllData.rows == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_AllDataCopyFromdt";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="AllData->CopyFrom(dt)";
	 result_var=NULL;
	 obj=$.programs[9].vars[3]$;
	 method=taBase::CopyFrom;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taBase_ptr;
	   type="taBase*";
	   name="cpy_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	 };
	 meth_sig="bool CopyFrom(taBase* cpy_from)";
	 meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
	};
       };
      };
      Else @[2] {
       name="Else_If_ifAllDatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	DataProcCall @[0] {
	 name="DataProcCall_taDataProcCopyCo_olDataAllDatadt";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taDataProc::CopyCommonColData(AllData, dt)";
	 result_var=NULL;
	 object_type=taDataProc;
	 method=taDataProc::CopyCommonColData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dest";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="AllData";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="src";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	 };
	};
       };
      };
     };
     el_var=.programs[9].prog_code[0].local_vars[0]$$;
     in {
      expr="ClusterRunData";
     };
    };
    DataGroupProg @[3] {
     name="DataGroupProg_Groupfromsrctabl_ableByBatchData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = AllData dest table = ByBatchData";
     src_table=;
     dest_table=;
     src_data_var=$.programs[9].vars[3]$;
     dest_data_var=.programs[9].vars[4]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn";
	name="tag_svn_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="batch";
	name="batch_GROUP_1";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch";
	name="epoch_LAST_2";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="cnt_err";
	name="cnt_err_FIND_FIRST_3";
	agg {name="agg": op=FIND_FIRST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=.programs[9].vars[1]$$: }: };
       };
       DataGroupEl @[4] {
	col_name="cnt_err";
	name="cnt_err_MIN_4";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="params";
	name="params_LAST_5";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[6] {
	col_name="notes";
	name="notes_LAST_6";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberMethodCall @[4] {
     name="MemberMethodCall_ByBatchDatadatae_petaBaseVTFLOAT";
     desc="change type to float, to enable subsequent analysis operations";
     flags=CAN_REVERT_TO_CODE;
     code_string="ByBatchData.data.epoch_last.ChangeColType(taBase::VT_FLOAT)";
     obj=$.programs[9].vars[4]$;
     path="data.epoch_last";
     result_var=NULL;
     method=DataCol::ChangeColType;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="new_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
     };
     meth_sig="void ChangeColType(taBase::ValType new_type)";
     meth_desc=" change the type of the data in this col, without loss of data";
    };
    MathCall @[5] {
     name="MathCall_epochlastmaxtaMa_ochlastarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="epoch_last_max = taMath_float::vec_max(ByBatchData.data.epoch_last.ar, max_idx)";
     result_var=.programs[9].vars[6]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="ByBatchData.data.epoch_last.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    MathCall @[6] {
     name="MathCall_findfirstmaxtaMa_ndfirstarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="find_first_max = taMath_float::vec_max(ByBatchData.data.cnt_err_find_first.ar, max_idx)";
     result_var=.programs[9].vars[7]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="ByBatchData.data.cnt_err_find_first.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    DataGroupProg @[7] {
     name="DataGroupProg_Groupfromsrctabl_tableByTagStats";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = ByBatchData dest table = ByTagStats";
     src_table=;
     dest_table=;
     src_data_var=$.programs[9].vars[4]$;
     dest_data_var=.programs[9].vars[5]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn_group";
	name="tag_svn_group_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="params_last";
	name="params_last_LAST_1";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch_last";
	name="epoch_last_N_2";
	agg {name="agg": op=N: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="epoch_last";
	name="epoch_last_MIN_3";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="epoch_last";
	name="epoch_last_MAX_4";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="epoch_last";
	name="epoch_last_COUNT_5";
	agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[6]$: }: };
       };
       DataGroupEl @[6] {
	col_name="epoch_last";
	name="epoch_last_MEAN_6";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[7] {
	col_name="epoch_last";
	name="epoch_last_SEM_7";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[8] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MIN_8";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[1]$: }: };
       };
       DataGroupEl @[9] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MAX_9";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[1]$: }: };
       };
       DataGroupEl @[10] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_COUNT_10";
	agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[7]$: }: };
       };
       DataGroupEl @[11] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MEAN_11";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[1]$: }: };
       };
       DataGroupEl @[12] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_SEM_12";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[9].vars[1]$: }: };
       };
       DataGroupEl @[13] {
	col_name="cnt_err_min";
	name="cnt_err_min_MIN_13";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[14] {
	col_name="cnt_err_min";
	name="cnt_err_min_MAX_14";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[15] {
	col_name="cnt_err_min";
	name="cnt_err_min_MEAN_15";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[16] {
	col_name="cnt_err_min";
	name="cnt_err_min_SEM_16";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberAssign @[8] {
     name="MemberAssign_ByTagStatsdataep_epochlastnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ByTagStats.data.epoch_last_count.name = \"epoch_last_n_at_max\"";
     obj=$.programs[9].vars[5]$;
     path="data.epoch_last_count.name";
     expr {
      expr="\"epoch_last_n_at_max\"";
     };
     update_after=0;
    };
    MemberAssign @[9] {
     name="MemberAssign_ByTagStatsdatacn_findfirstnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ByTagStats.data.cnt_err_find_first_count.name = \"cnt_err_find_first_n_at_max\"";
     obj=$.programs[9].vars[5]$;
     path="data.cnt_err_find_first_count.name";
     expr {
      expr="\"cnt_err_find_first_n_at_max\"";
     };
     update_after=0;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[10] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[10].doc$$: };
   };
   name="EpochCompare";
   short_nm="EpcCmpr";
   tags="Data, Analysis, Epoch, Training, ClusterRun";
   desc="performs various stats on epochs to train to criterion, across multiple batches, including an additional err threshold that can be different than the training stopping criterion, and also the minimum error value achieved across batches";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=Relation;
    el_def=0;
    Relation @[0] {name="rel": rel=EQUAL: val=0: val_string="": use_var=0: var=NULL: };
    DataTable @[1] {
     name="AllData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="avg_ext_rew";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="avg_cycles";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="epoch_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="epoch_time_usr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="wt_sync_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="Output_lay_avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="Output_lay_cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="Output_lay_pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="Output_lay_pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="Output_lay_avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="Output_lay_avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="net_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="net_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="net_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=20;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="V4_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="IT_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="Output_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[25] {
       name="V4_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[26] {
       name="IT_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[27] {
       name="Output_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=25;
       matrix_col_width=10;
      };
      float_Data @[28] {
       name="V4_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[29] {
       name="IT_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[30] {
       name="Output_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[31] {
       name="V4_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[32] {
       name="IT_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[33] {
       name="Output_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[34] {
       name="V4_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[35] {
       name="IT_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[36] {
       name="Output_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[37] {
       name="V4_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[38] {
       name="IT_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[39] {
       name="Output_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[40] {
       name="V4_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[41] {
       name="IT_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[42] {
       name="Output_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[43] {
       name="V1_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[44] {
       name="V4_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[45] {
       name="IT_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[46] {
       name="Output_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[47] {
       name="Image_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[48] {
       name="V4_Fm_V1_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[49] {
       name="V4_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[50] {
       name="IT_Fm_V4_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[51] {
       name="IT_Fm_Output_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[52] {
       name="Output_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      String_Data @[53] {
       name="tag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[54] {
       name="tag_svn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[55] {
       name="tag_job";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[56] {
       name="notes";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[57] {
       name="label";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[58] {
       name="label_notag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[59] {
       name="params";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[60] {
       name="lrate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[61] {
       name="top_down_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[62] {
       name="top_down_learn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[63] {
       name="top_down_lrate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[64] {
       name="out_it_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[65] {
       name="it_v4_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[66] {
       name="lay_inhib_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[67] {
       name="lay_inhib_gi";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[68] {
       name="output_lay_inhib_gi";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[69] {
       name="output_lay_inhib_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[70] {
       name="g_bar_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[71] {
       name="inhib_misc_self_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      int_Data @[72] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="run";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="SmoothData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[5] {
       name="pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[6] {
       name="avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[7] {
       name="avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="avg_ext_rew";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="avg_cycles";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="epoch_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="epoch_time_usr";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="wt_sync_time_tot";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="Output_lay_avg_sse";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="Output_lay_cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="Output_lay_pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="Output_lay_pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[17] {
       name="Output_lay_avg_norm_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[18] {
       name="Output_lay_avg_cos_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[19] {
       name="net_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[20] {
       name="net_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[21] {
       name="net_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=20;
       matrix_col_width=10;
      };
      float_Data @[22] {
       name="V4_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[23] {
       name="IT_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[24] {
       name="Output_avg_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[25] {
       name="V4_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[26] {
       name="IT_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=21;
       matrix_col_width=10;
      };
      float_Data @[27] {
       name="Output_avg_trial_cos_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=25;
       matrix_col_width=10;
      };
      float_Data @[28] {
       name="V4_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[29] {
       name="IT_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[30] {
       name="Output_avg_avg_act_diff";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[31] {
       name="V4_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[32] {
       name="IT_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[33] {
       name="Output_avg_net_sd";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=17;
       matrix_col_width=10;
      };
      float_Data @[34] {
       name="V4_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[35] {
       name="IT_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[36] {
       name="Output_hog_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[37] {
       name="V4_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[38] {
       name="IT_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[39] {
       name="Output_dead_pct";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[40] {
       name="V4_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[41] {
       name="IT_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[42] {
       name="Output_netmax";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[43] {
       name="V1_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[44] {
       name="V4_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[45] {
       name="IT_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[46] {
       name="Output_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[47] {
       name="Image_avg_act";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
      float_Data @[48] {
       name="V4_Fm_V1_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[49] {
       name="V4_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[50] {
       name="IT_Fm_V4_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[51] {
       name="IT_Fm_Output_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[52] {
       name="Output_Fm_IT_netrel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      String_Data @[53] {
       name="tag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[54] {
       name="tag_svn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[55] {
       name="tag_job";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[56] {
       name="notes";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[57] {
       name="label";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[58] {
       name="label_notag";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      String_Data @[59] {
       name="params";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[60] {
       name="lrate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[61] {
       name="top_down_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[62] {
       name="top_down_learn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[63] {
       name="top_down_lrate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[64] {
       name="out_it_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[65] {
       name="it_v4_rel";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=9;
       matrix_col_width=10;
      };
      float_Data @[66] {
       name="lay_inhib_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[67] {
       name="lay_inhib_gi";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=12;
       matrix_col_width=10;
      };
      float_Data @[68] {
       name="output_lay_inhib_gi";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[69] {
       name="output_lay_inhib_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[70] {
       name="g_bar_l";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[71] {
       name="inhib_misc_self_fb";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[3] {
     name="AllData_batch";
     desc=;
     data {
      name="data";
      el_typ=DataColT;
      el_def=0;
      String_Data @[0] {
       name="tag_svn";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="cnt_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="pct_err";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="pct_cor";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="run";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      String_Data @[6] {
       name="params";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[4] {
     name="ByBatchData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="batch_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=10;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="cnt_err_find_first";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=18;
       matrix_col_width=10;
      };
      float_Data @[4] {
       name="cnt_err_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=11;
       matrix_col_width=10;
      };
      String_Data @[5] {
       name="params_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[5] {
     name="ByTagStats";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      String_Data @[0] {
       name="tag_svn_group_group";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      String_Data @[1] {
       name="params_last_last";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="N";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=19;
       matrix_col_width=10;
      };
      float_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name="UserDataItem_List_1";
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
       };
       name="epoch_last_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=14;
       matrix_col_width=10;
      };
      float_Data @[8] {
       name="cnt_err_find_first_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[9] {
       name="cnt_err_find_first_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[10] {
       name="cnt_err_find_first_n_at_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=27;
       matrix_col_width=10;
      };
      float_Data @[11] {
       name="cnt_err_find_first_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=23;
       matrix_col_width=10;
      };
      float_Data @[12] {
       name="cnt_err_find_first_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=22;
       matrix_col_width=10;
      };
      float_Data @[13] {
       name="cnt_err_min_min";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[14] {
       name="cnt_err_min_max";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
      float_Data @[15] {
       name="cnt_err_min_mean";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=16;
       matrix_col_width=10;
      };
      float_Data @[16] {
       name="cnt_err_min_sem";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=15;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="rel";
     var_type=T_Object;
     object_type=Relation;
     completion_type=;
     object_val=.programs[10].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="all_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[10].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="smooth_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[10].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="all_data_batch";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[10].objs[3]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="by_batch_data";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[10].objs[4]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="by_tag_stats";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[10].objs[5]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ClusterRunData";
     var_type=T_Object;
     object_type=DataTable_Group;
     completion_type=;
     object_val=$.data.gp[3]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="err_thresh";
     var_type=T_Int;
     int_val=5;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="alternative error threshold to use";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="test_data";
     var_type=T_Bool;
     bool_val=0;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="smooth";
     var_type=T_Bool;
     bool_val=0;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="smooth_kern_width";
     var_type=T_Int;
     int_val=8;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="smooth_sig";
     var_type=T_Real;
     real_val=4;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars7vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (7 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="dt";
       var_type=T_Object;
       object_type=DataTable;
       completion_type=;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="max_idx";
       var_type=T_Int;
       int_val=42;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="epoch_last_max";
       var_type=T_Real;
       real_val=499;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="find_first_max";
       var_type=T_Real;
       real_val=249;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="run_no";
       var_type=T_Int;
       int_val=0;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="cur_sz";
       var_type=T_Int;
       int_val=0;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[6] {
       name="i";
       var_type=T_Int;
       int_val=0;
       completion_type=;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    MethodCall @[1] {
     name="MethodCall_alldataResetData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="all_data->ResetData()";
     result_var=NULL;
     obj=.programs[10].objs_vars[1]$$;
     method=DataTable::ResetData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void ResetData()";
     meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
    };
    MethodCall @[2] {
     name="MethodCall_alldataStructUpdatetrue";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="all_data->StructUpdate(true)";
     result_var=NULL;
     obj=$.programs[10].objs_vars[1]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="true";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    AssignExpr @[3] {
     name="AssignExpr_runno0";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="run_no = 0";
     result_var=.programs[10].prog_code[0].local_vars[4]$$;
     expr {
      expr="0";
     };
    };
    ForeachLoop @[4] {
     name="ForeachLoop_foreachdtinClusterRunData";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="foreach(dt in ClusterRunData)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      IfContinue @[0] {
       name="IfContinue_ifdtnamecontainsepccontinue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if(!dt.name.contains(\"_epc\")) continue";
       cond {
	expr="!dt.name.contains(\"_epc\")";
       };
      };
      If @[1] {
       name="If_iftestdata";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (test_data)";
       cond {
	expr="test_data";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	IfContinue @[0] {
	 name="IfContinue_ifdtnamecontainststcontinue";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if(!dt.name.contains(\"_tst_\")) continue";
	 cond {
	  expr="!dt.name.contains(\"_tst_\")";
	 };
	};
       };
      };
      Else @[2] {
       name="Else_If_iftestdata";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	IfContinue @[0] {
	 name="IfContinue_ifdtnamecontainstrncontinue";
	 desc=;
	 flags=OFF|CAN_REVERT_TO_CODE;
	 code_string="if(dt.name.contains(\"_trn_\")) continue";
	 cond {
	  expr="dt.name.contains(\"_trn_\")";
	 };
	};
       };
      };
      If @[3] {
       name="If_ifsmooth";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (smooth)";
       cond {
	expr="smooth";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	DataAnalCall @[0] {
	 name="DataAnalCall_taDataAnalSmooth_ruetruetruetrue";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taDataAnal::SmoothGauss(smooth_data, false, dt, smooth_kern_width, smooth_sig, true, true, true, true)";
	 result_var=NULL;
	 object_type=taDataAnal;
	 method=taDataAnal::SmoothGauss;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="smooth_data";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="smooth_data";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=bool;
	   type="bool";
	   name="view";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="false";
	   };
	  };
	  ProgArg @[2] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="src_data";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	  ProgArg @[3] {
	   arg_type=int;
	   type="int";
	   name="kern_half_wd";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="smooth_kern_width";
	   };
	  };
	  ProgArg @[4] {
	   arg_type=float;
	   type="float";
	   name="kern_sigma";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="smooth_sig";
	   };
	  };
	  ProgArg @[5] {
	   arg_type=bool;
	   type="bool";
	   name="neg_tail";
	   required=0;
	   def_val="true";
	   prev_expr=;
	   expr {
	    expr="true";
	   };
	  };
	  ProgArg @[6] {
	   arg_type=bool;
	   type="bool";
	   name="pos_tail";
	   required=0;
	   def_val="true";
	   prev_expr=;
	   expr {
	    expr="true";
	   };
	  };
	  ProgArg @[7] {
	   arg_type=bool;
	   type="bool";
	   name="keep_edges";
	   required=0;
	   def_val="true";
	   prev_expr=;
	   expr {
	    expr="true";
	   };
	  };
	  ProgArg @[8] {
	   arg_type=bool;
	   type="bool";
	   name="float_only";
	   required=0;
	   def_val="true";
	   prev_expr=;
	   expr {
	    expr="true";
	   };
	  };
	 };
	};
       };
      };
      Else @[4] {
       name="Else_If_ifsmooth";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_smoothdataCopyFromdt";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="smooth_data->CopyFrom(dt)";
	 result_var=NULL;
	 obj=.programs[10].objs_vars[2]$$;
	 method=taBase::CopyFrom;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taBase_ptr;
	   type="taBase*";
	   name="cpy_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="dt";
	   };
	  };
	 };
	 meth_sig="bool CopyFrom(taBase* cpy_from)";
	 meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
	};
       };
      };
      If @[5] {
       name="If_ifalldatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (all_data.rows == 0)";
       cond {
	expr="all_data.rows == 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_alldataCopyFromsmoothdata";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="all_data->CopyFrom(smooth_data)";
	 result_var=NULL;
	 obj=$.programs[10].objs_vars[1]$;
	 method=taBase::CopyFrom;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taBase_ptr;
	   type="taBase*";
	   name="cpy_from";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="smooth_data";
	   };
	  };
	 };
	 meth_sig="bool CopyFrom(taBase* cpy_from)";
	 meth_desc=" Copy from given object into this object (this is a safe interface to UnSafeCopy)";
	};
	MethodCall @[1] {
	 name="MethodCall_alldataNewColIntrun";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="all_data->NewColInt(\"run\")";
	 result_var=NULL;
	 obj=$.programs[10].objs_vars[1]$;
	 method=DataTable::NewColInt;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="col_nm";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"run\"";
	   };
	  };
	 };
	 meth_sig="int_Data_ptr NewColInt(taString& col_nm)";
	 meth_desc=" create new column of integer-level data (= narrow display, actually stored as float)";
	};
       };
      };
      Else @[6] {
       name="Else_If_ifalldatarows0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_curszalldatarows";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="cur_sz = all_data.rows";
	 result_var=.programs[10].prog_code[0].local_vars[5]$$;
	 expr {
	  expr="all_data.rows";
	 };
	};
	DataProcCall @[1] {
	 name="DataProcCall_taDataProcCopyCo_ldatasmoothdata";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taDataProc::CopyCommonColData(all_data, smooth_data)";
	 result_var=NULL;
	 object_type=taDataProc;
	 method=taDataProc::CopyCommonColData;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="dest";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="all_data";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=DataTable_ptr;
	   type="DataTable*";
	   name="src";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="smooth_data";
	   };
	  };
	 };
	};
	ForLoop @[2] {
	 name="ForLoop_foricurszialldatarowsi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="for (i=cur_sz;  i< all_data.rows;  i++)";
	 loop_code {
	  name="loop_code";
	  el_typ=ProgCode;
	  el_def=0;
	  CssExpr @[0] {
	   name="CssExpr_alldatarunirunno";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="all_data[\"run\"][i] = run_no;";
	   expr {
	    expr="all_data[\"run\"][i] = run_no;";
	   };
	  };
	 };
	 init {
	  expr="i=cur_sz";
	 };
	 test {
	  expr=" i< all_data.rows";
	 };
	 iter {
	  expr=" i++";
	 };
	};
       };
      };
      VarIncr @[7] {
       name="VarIncr_runno1";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="run_no += 1";
       var=$.programs[10].prog_code[0].local_vars[4]$;
       expr {
	expr="1";
       };
      };
     };
     el_var=.programs[10].prog_code[0].local_vars[0]$$;
     in {
      expr="ClusterRunData";
     };
    };
    MethodCall @[5] {
     name="MethodCall_alldataStructUpdatefalse";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="all_data->StructUpdate(false)";
     result_var=NULL;
     obj=$.programs[10].objs_vars[1]$;
     method=taBase::StructUpdate;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="begin";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     meth_sig="void StructUpdate(bool begin)";
     meth_desc=" bracket structural changes with (nestable) true/false calls;";
    };
    DataGroupProg @[6] {
     name="DataGroupProg_Groupfromsrctabl_blealldatabatch";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = all_data dest table = all_data_batch";
     src_table=;
     dest_table=;
     src_data_var=$.programs[10].objs_vars[1]$;
     dest_data_var=.programs[10].objs_vars[3]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn";
	name="tag_svn_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="epoch";
	name="epoch_GROUP_1";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="cnt_err";
	name="cnt_err_MEAN_2";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=.programs[10].vars[1]$$: }: };
       };
       DataGroupEl @[3] {
	col_name="pct_err";
	name="pct_err_MEAN_3";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[4] {
	col_name="pct_cor";
	name="pct_cor_MEAN_4";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[5] {
	col_name="run";
	name="run_MEAN_5";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[6] {
	col_name="params";
	name="params_LAST_6";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
    DataGroupProg @[7] {
     name="DataGroupProg_Groupfromsrctabl_ablebybatchdata";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = all_data dest table = by_batch_data";
     src_table=;
     dest_table=;
     src_data_var=$.programs[10].objs_vars[1]$;
     dest_data_var=.programs[10].objs_vars[4]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn";
	name="tag_svn_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="batch";
	name="batch_GROUP_1";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch";
	name="epoch_LAST_2";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="cnt_err";
	name="cnt_err_FIND_FIRST_3";
	agg {name="agg": op=FIND_FIRST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[4] {
	col_name="cnt_err";
	name="cnt_err_MIN_4";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="params";
	name="params_LAST_5";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberMethodCall @[8] {
     name="MemberMethodCall_bybatchdatadatae_petaBaseVTFLOAT";
     desc="change type to float, to enable subsequent analysis operations";
     flags=CAN_REVERT_TO_CODE;
     code_string="by_batch_data.data.epoch_last.ChangeColType(taBase::VT_FLOAT)";
     obj=$.programs[10].objs_vars[4]$;
     path="data.epoch_last";
     result_var=NULL;
     method=DataCol::ChangeColType;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="new_type";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
     };
     meth_sig="void ChangeColType(taBase::ValType new_type)";
     meth_desc=" change the type of the data in this col, without loss of data";
    };
    MathCall @[9] {
     name="MathCall_epochlastmaxtaMa_ochlastarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="epoch_last_max = taMath_float::vec_max(by_batch_data.data.epoch_last.ar, max_idx)";
     result_var=.programs[10].prog_code[0].local_vars[2]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="by_batch_data.data.epoch_last.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    MathCall @[10] {
     name="MathCall_findfirstmaxtaMa_ndfirstarmaxidx";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="find_first_max = taMath_float::vec_max(by_batch_data.data.cnt_err_find_first.ar, max_idx)";
     result_var=.programs[10].prog_code[0].local_vars[3]$$;
     object_type=taMath_float;
     method=taMath_float::vec_max;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="by_batch_data.data.cnt_err_find_first.ar";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="max_idx";
       };
      };
     };
    };
    DataGroupProg @[11] {
     name="DataGroupProg_Groupfromsrctabl_tablebytagstats";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = by_batch_data dest table = by_tag_stats";
     src_table=;
     dest_table=;
     src_data_var=$.programs[10].objs_vars[4]$;
     dest_data_var=.programs[10].objs_vars[5]$$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="tag_svn_group";
	name="tag_svn_group_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="params_last";
	name="params_last_LAST_1";
	agg {name="agg": op=LAST: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="epoch_last";
	name="epoch_last_N_2";
	agg {name="agg": op=N: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="epoch_last";
	name="epoch_last_MIN_3";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[4] {
	col_name="epoch_last";
	name="epoch_last_MAX_4";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[5] {
	col_name="epoch_last";
	name="epoch_last_COUNT_5";
	agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.programs[10].prog_code[0].local_vars[2]$: }: };
       };
       DataGroupEl @[6] {
	col_name="epoch_last";
	name="epoch_last_MEAN_6";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[7] {
	col_name="epoch_last";
	name="epoch_last_SEM_7";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[8] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MIN_8";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[9] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MAX_9";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[10] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_COUNT_10";
	agg {name="agg": op=COUNT: rel={name="rel": rel=EQUAL: val=0: val_string="": use_var=1: var=$.programs[10].prog_code[0].local_vars[3]$: }: };
       };
       DataGroupEl @[11] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_MEAN_11";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[12] {
	col_name="cnt_err_find_first";
	name="cnt_err_find_first_SEM_12";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=1: var=$.programs[10].vars[1]$: }: };
       };
       DataGroupEl @[13] {
	col_name="cnt_err_min";
	name="cnt_err_min_MIN_13";
	agg {name="agg": op=MIN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[14] {
	col_name="cnt_err_min";
	name="cnt_err_min_MAX_14";
	agg {name="agg": op=MAX: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[15] {
	col_name="cnt_err_min";
	name="cnt_err_min_MEAN_15";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[16] {
	col_name="cnt_err_min";
	name="cnt_err_min_SEM_16";
	agg {name="agg": op=SEM: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=1;
     };
    };
    MemberAssign @[12] {
     name="MemberAssign_bytagstatsdataep_epochlastnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="by_tag_stats.data.epoch_last_count.name = \"epoch_last_n_at_max\"";
     obj=$.programs[10].objs_vars[5]$;
     path="data.epoch_last_count.name";
     expr {
      expr="\"epoch_last_n_at_max\"";
     };
     update_after=0;
    };
    MemberAssign @[13] {
     name="MemberAssign_bytagstatsdatacn_findfirstnatmax";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="by_tag_stats.data.cnt_err_find_first_count.name = \"cnt_err_find_first_n_at_max\"";
     obj=$.programs[10].objs_vars[5]$;
     path="data.cnt_err_find_first_count.name";
     expr {
      expr="\"cnt_err_find_first_n_at_max\"";
     };
     update_after=0;
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[11] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[11].doc$$: };
   };
   name="WeightDistributionAnal";
   short_nm="WtDstAnl";
   tags="Analysis, Weights, Distribution, Histogram";
   desc="analyze the distribution of weights for a given projection -- histogram, etc";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="WeightsHist";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="wt_val";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="count";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[1] {
     name="WeightsTable";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="wts";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 40;50;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=24;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="weights_hist";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[11].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="weights_table";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[11].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="wts_prjn";
     var_type=T_Object;
     object_type=Projection;
     completion_type=;
     object_val=.networks[0].layers[1].projections[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="min_wt";
     var_type=T_Real;
     real_val=0.05;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="max_wt";
     var_type=T_Real;
     real_val=1;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="hist_bin";
     var_type=T_Real;
     real_val=0.05;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="WeightDistribHist";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="WeightDistribHist(Projection* prjn) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="prjn";
       var_type=T_Object;
       object_type=Projection;
       completion_type=;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars2vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (2 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="hist_vec";
	 var_type=T_Object;
	 object_type=float_Matrix;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=NEW_OBJ|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="wts_all";
	 var_type=T_Object;
	 object_type=float_Matrix;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MethodCall @[1] {
       name="MethodCall_prjnWeightsToTab_htstablewtstrue";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="prjn->WeightsToTable(weights_table, \"wts\", true)";
       result_var=NULL;
       obj=.programs[11].functions[0].args[0]$$;
       method=Projection::WeightsToTable;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dt";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="weights_table";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  expr="\"wts\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=bool;
	 type="bool";
	 name="recv_wts";
	 required=0;
	 def_val="true";
	 prev_expr=;
	 expr {
	  expr="true";
	 };
	};
       };
       meth_sig="DataTable_ptr WeightsToTable(DataTable* dt, taString& col_nm, bool recv_wts = true)";
       meth_desc=" copy entire set of projection weights to given table (e.g., for analysis), with one row per receiving unit, and one column (name is layer name if not otherwise specified) that has a float matrix cell of the geometry of the sending layer -- recv prjn if recv_wts is true, else sending weights";
      };
      AssignExpr @[2] {
       name="AssignExpr_wtsallweightstablewtsFlatten";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="wts_all = weights_table[\"wts\"][:,:,:].Flatten()";
       result_var=.programs[11].functions[0].fun_code[0].local_vars[1]$$;
       expr {
	expr="weights_table[\"wts\"][:,:,:].Flatten()";
       };
      };
      MathCall @[3] {
       name="MathCall_taMathfloatvechi_stbinminwtmaxwt";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMath_float::vec_histogram(hist_vec, wts_all, hist_bin, min_wt, max_wt, )";
       result_var=NULL;
       object_type=taMath_float;
       method=taMath_float::vec_histogram;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float_Matrix_ptr;
	 type="float_Matrix*";
	 name="hist_vec";
	 required=1;
	 def_val=;
	 prev_expr="hist_vec";
	 expr {
	  expr="hist_vec";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_float_Matrix_ptr;
	 type="float_Matrix*";
	 name="src_vec";
	 required=1;
	 def_val=;
	 prev_expr="wts_all";
	 expr {
	  expr="wts_all";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="bin_size";
	 required=1;
	 def_val=;
	 prev_expr="hist_bin";
	 expr {
	  expr="hist_bin";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="min_val";
	 required=0;
	 def_val="0.0";
	 prev_expr="min_wt";
	 expr {
	  expr="min_wt";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="max_val";
	 required=0;
	 def_val="0.0";
	 prev_expr="max_wt";
	 expr {
	  expr="max_wt";
	 };
	};
	ProgArg @[5] {
	 arg_type=float_Matrix_ptr;
	 type="float_Matrix*";
	 name="bin_vec";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      MethodCall @[4] {
       name="MethodCall_weightshistFindM_altaBaseVTFLOAT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist->FindMakeCol(\"wt_val\", taBase::VT_FLOAT)";
       result_var=NULL;
       obj=.programs[11].objs_vars[0]$$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"wt_val\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_FLOAT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      MethodCall @[5] {
       name="MethodCall_weightshistFindM_nttaBaseVTFLOAT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist->FindMakeCol(\"count\", taBase::VT_FLOAT)";
       result_var=NULL;
       obj=$.programs[11].objs_vars[0]$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"count\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_FLOAT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      MethodCall @[6] {
       name="MethodCall_weightshistEnfor_wsshapehistvec0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist->EnforceRows(shape(hist_vec)[0])";
       result_var=NULL;
       obj=$.programs[11].objs_vars[0]$;
       method=DataTable::EnforceRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="shape(hist_vec)[0]";
	 };
	};
       };
       meth_sig="void EnforceRows(int n_rows)";
       meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
      };
      CssExpr @[7] {
       name="CssExpr_weightshistcounthistvec";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist[\"count\"][:] = hist_vec;";
       expr {
	expr="weights_hist[\"count\"][:] = hist_vec;";
       };
      };
      CssExpr @[8] {
       name="CssExpr_weightshistwtval_inExpandhistbin";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist[\"wt_val\"][:] = ((float_Matrix)[(min_wt/hist_bin):(1.0 + (max_wt/hist_bin))].Expand()) * hist_bin;";
       expr {
	expr="weights_hist[\"wt_val\"][:] = ((float_Matrix)[(min_wt/hist_bin):(1.0 + (max_wt/hist_bin))].Expand()) * hist_bin;";
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=0;
     code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    FunctionCall @[1] {
     name="FunctionCall_WeightDistribHistwtsprjn";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="WeightDistribHist(wts_prjn)";
     result_var=NULL;
     fun=.programs[11].functions[0]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=Projection;
       type="Projection*";
       name="prjn";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="wts_prjn";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
    html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
   };
  };
  Program @[12] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=$.programs[11].doc$: };
   };
   name="WeightDistributionHogs";
   short_nm="WghDst";
   tags="Analysis, Weights, Distribution, Histogram";
   desc="analyze the distribution of weights for a given projection -- histogram, etc";
   version {
    major=0;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=NO_STOP_STEP;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="WeightsHistHogs";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="wt_val";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="count";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[1] {
     name="WeightsTable";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="fm_v1";
       col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 40;40;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=40;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="fm_it";
       col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=10;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[2] {
     name="WeightsTableTmp";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="fm_v1";
       col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 40;40;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=40;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="fm_it";
       col_flags=PIN|SAVE_DATA|AUTO_WIDTH;
       is_matrix=1;
       cell_geom{ 10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [2] ;;       };
       width=10;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="weights_hist_hogs";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[12].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="weights_table";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[12].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="weights_table_tmp";
     var_type=T_Object;
     object_type=DataTable;
     completion_type=;
     object_val=.programs[12].objs[2]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="wts_prjn";
     var_type=T_Object;
     object_type=Projection;
     completion_type=;
     object_val=$.networks[0].layers[1].projections[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="min_wt";
     var_type=T_Real;
     real_val=0.05;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="max_wt";
     var_type=T_Real;
     real_val=1;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="hist_bin";
     var_type=T_Real;
     real_val=0.05;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="hog_thr";
     var_type=T_Real;
     real_val=0.3;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="prjn_no";
     var_type=T_Int;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="hog_hi_wt_avg_avg";
     var_type=T_Real;
     real_val=0.02809850302186202;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="hog_hi_wt_avg_max";
     var_type=T_Real;
     real_val=0.1081699281930923;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="hog_n";
     var_type=T_Real;
     real_val=143;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="non_hi_wt_avg_avg";
     var_type=T_Real;
     real_val=0.005971076663294308;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="non_hi_wt_avg_max";
     var_type=T_Real;
     real_val=0.08190985023975372;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="non_n";
     var_type=T_Real;
     real_val=1082;
     completion_type=;
     object_scope=NULL;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="WeightDistribHist";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="WeightDistribHist(Projection* prjn) returns: int";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="prjn";
       var_type=T_Object;
       object_type=Projection;
       completion_type=;
       object_val=NULL;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars8vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (8 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="hist_vec";
	 var_type=T_Object;
	 object_type=float_Matrix;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=NEW_OBJ|LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="wts_all";
	 var_type=T_Object;
	 object_type=float_Matrix;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="recv_lay";
	 var_type=T_Object;
	 object_type=Layer;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[3] {
	 name="i";
	 var_type=T_Int;
	 int_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[4] {
	 name="un";
	 var_type=T_Object;
	 object_type=LeabraUnit;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[5] {
	 name="mx";
	 var_type=T_Int;
	 int_val=0;
	 completion_type=;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[6] {
	 name="net_state";
	 var_type=T_Object;
	 object_type=NetworkState_cpp;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[7] {
	 name="rcg";
	 var_type=T_Object;
	 object_type=LeabraConState_cpp;
	 completion_type=;
	 object_val=NULL;
	 object_scope=NULL;
	 objs_ptr=0;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      MethodCall @[1] {
       name="MethodCall_weightstableReset";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_table->Reset()";
       result_var=NULL;
       obj=.programs[12].objs_vars[1]$$;
       method=DataTable::Reset;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
       };
       meth_sig="void Reset()";
       meth_desc=" remove all columns (and data) -- this cannot be undone!";
      };
      AssignExpr @[2] {
       name="AssignExpr_recvlayprjnlayer";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="recv_lay = prjn->layer";
       result_var=.programs[12].functions[0].fun_code[0].local_vars[2]$$;
       expr {
	expr="prjn->layer";
       };
      };
      AssignExpr @[3] {
       name="AssignExpr_netstaterecvlayownnetnetstate";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="net_state = recv_lay->own_net->net_state";
       result_var=.programs[12].functions[0].fun_code[0].local_vars[6]$$;
       expr {
	expr="recv_lay->own_net->net_state";
       };
      };
      AssignExpr @[4] {
       name="AssignExpr_mxrecvlaynunits";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="mx = recv_lay->n_units";
       result_var=.programs[12].functions[0].fun_code[0].local_vars[5]$$;
       expr {
	expr="recv_lay->n_units";
       };
      };
      AssignExpr @[5] {
       name="AssignExpr_hoghiwtavgavg0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hog_hi_wt_avg_avg = 0";
       result_var=.programs[12].vars[0]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[6] {
       name="AssignExpr_hoghiwtavgmax0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hog_hi_wt_avg_max = 0";
       result_var=.programs[12].vars[1]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[7] {
       name="AssignExpr_nonhiwtavgmax0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="non_hi_wt_avg_max = 0";
       result_var=.programs[12].vars[4]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[8] {
       name="AssignExpr_nonhiwtavgavg0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="non_hi_wt_avg_avg = 0";
       result_var=.programs[12].vars[3]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[9] {
       name="AssignExpr_hogn0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hog_n = 0";
       result_var=.programs[12].vars[2]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[10] {
       name="AssignExpr_nonn0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="non_n = 0";
       result_var=.programs[12].vars[5]$$;
       expr {
	expr="0";
       };
      };
      AssignExpr @[11] {
       name="AssignExpr_mx1";
       desc=;
       flags=OFF|CAN_REVERT_TO_CODE;
       code_string="mx = 1";
       result_var=$.programs[12].functions[0].fun_code[0].local_vars[5]$;
       expr {
	expr="1";
       };
      };
      ForLoop @[12] {
       name="ForLoop_fori0imxi";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="for (i=0; i< mx; i++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 name="MethodCall_unrecvlayGetUnitIdxi";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="un = recv_lay->GetUnitIdx(i)";
	 result_var=.programs[12].functions[0].fun_code[0].local_vars[4]$$;
	 obj=$.programs[12].functions[0].fun_code[0].local_vars[2]$;
	 method=Layer::GetUnitIdx;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=int;
	   type="int";
	   name="un_idx";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="i";
	   };
	  };
	 };
	 meth_sig="Unit_ptr GetUnitIdx(int un_idx)";
	 meth_desc=" get unit state at given unit index (0..n_units) -- preferred Program interface as no NetworkState arg is required";
	};
	MethodCall @[1] {
	 name="MethodCall_rcgunRecvConStatenetstateprjnno";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="rcg = un->RecvConState(net_state, prjn_no)";
	 result_var=.programs[12].functions[0].fun_code[0].local_vars[7]$$;
	 obj=$.programs[12].functions[0].fun_code[0].local_vars[4]$;
	 method=LeabraUnitState_cpp::RecvConState;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=NetworkState_cpp_ptr;
	   type="NetworkState_cpp*";
	   name="nnet";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="net_state";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="rcg_idx";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="prjn_no";
	   };
	  };
	 };
	 meth_sig="LeabraConState_cpp_ptr RecvConState(NetworkState_cpp* nnet, int rcg_idx)";
	 meth_desc=;
	};
	If @[2] {
	 name="If_ifunactavghogthr";
	 desc="hog";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (un->act_avg >= hog_thr)";
	 cond {
	  expr="un->act_avg >= hog_thr";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  MethodCall @[0] {
	   name="MethodCall_weightstabletmpReset";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="weights_table_tmp->Reset()";
	   result_var=NULL;
	   obj=.programs[12].objs_vars[2]$$;
	   method=DataTable::Reset;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	   };
	   meth_sig="void Reset()";
	   meth_desc=" remove all columns (and data) -- this cannot be undone!";
	  };
	  MethodCall @[1] {
	   name="MethodCall_unVarToTablerecv_ghtstabletmprwt";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="un->VarToTable(recv_lay->own_net, weights_table_tmp, \"r.wt\")";
	   result_var=NULL;
	   obj=$.programs[12].functions[0].fun_code[0].local_vars[4]$;
	   method=UnitState_cpp::VarToTable;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=Network_ptr;
	     type="Network*";
	     name="nnet";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="recv_lay->own_net";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=DataTable_ptr;
	     type="DataTable*";
	     name="dt";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="weights_table_tmp";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=const_taString_ref;
	     type="taString&";
	     name="variable";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="\"r.wt\"";
	     };
	    };
	   };
	   meth_sig="DataTable_ptr VarToTable(Network* nnet, DataTable* dt, taString& variable)";
	   meth_desc=" send given variable to data table -- number of columns depends on variable (for connection variables, specify r. or s. (e.g., r.wt)) -- this uses a NetMonitor internally, so see documentation there for more information";
	  };
	  PrintExpr @[2] {
	   name="PrintExpr_Printunlayunidxunposxunposy";
	   desc=;
	   flags=OFF|CAN_REVERT_TO_CODE;
	   code_string="Print un->lay_un_idx << \" \" << un->pos_x << \" \" << un->pos_y";
	   expr {
	    expr="un->lay_un_idx << \" \" << un->pos_x << \" \" << un->pos_y";
	   };
	   debug=0;
	  };
	  MemberAssign @[3] {
	   name="MemberAssign_weightstabletmp0namefmv1";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="weights_table_tmp[0].name = \"fm_v1\"";
	   obj=$.programs[12].objs_vars[2]$;
	   path="[0].name";
	   expr {
	    expr="\"fm_v1\"";
	   };
	   update_after=0;
	  };
	  MemberMethodCall @[4] {
	   name="MemberMethodCall_weightstabletmpd_CellGeomNs24040";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="weights_table_tmp.data[0].ChangeColCellGeomNs(2, 40, 40, , , , , )";
	   obj=$.programs[12].objs_vars[2]$;
	   path="data[0]";
	   result_var=NULL;
	   method=DataCol::ChangeColCellGeomNs;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="dims";
	     required=0;
	     def_val="1";
	     prev_expr=;
	     expr {
	      expr="2";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=int;
	     type="int";
	     name="d0";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr="40";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=int;
	     type="int";
	     name="d1";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr="40";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=int;
	     type="int";
	     name="d2";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	    ProgArg @[4] {
	     arg_type=int;
	     type="int";
	     name="d3";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	    ProgArg @[5] {
	     arg_type=int;
	     type="int";
	     name="d4";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	    ProgArg @[6] {
	     arg_type=int;
	     type="int";
	     name="d5";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	    ProgArg @[7] {
	     arg_type=int;
	     type="int";
	     name="d6";
	     required=0;
	     def_val="0";
	     prev_expr=;
	     expr {
	      expr=;
	     };
	    };
	   };
	   meth_sig="void ChangeColCellGeomNs(int dims = 1, int d0 = 0, int d1 = 0, int d2 = 0, int d3 = 0, int d4 = 0, int d5 = 0, int d6 = 0)";
	   meth_desc=" change the cell geom of a mat col, or change from scalar to mat, without loss of data -- separate numbers input instead of overall geom object";
	  };
	  MemberAssign @[5] {
	   name="MemberAssign_weightstabletmp1namefmit";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="weights_table_tmp[1].name = \"fm_it\"";
	   obj=$.programs[12].objs_vars[2]$;
	   path="[1].name";
	   expr {
	    expr="\"fm_it\"";
	   };
	   update_after=0;
	  };
	  MethodCall @[6] {
	   name="MethodCall_weightstableAppe_weightstabletmp";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="weights_table->AppendRowsCopyFirst(weights_table_tmp)";
	   result_var=NULL;
	   obj=$.programs[12].objs_vars[1]$;
	   method=DataTable::AppendRowsCopyFirst;
	   meth_args {
	    name="meth_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=DataTable_ptr;
	     type="DataTable*";
	     name="append_from";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="weights_table_tmp";
	     };
	    };
	   };
	   meth_sig="bool AppendRowsCopyFirst(DataTable* append_from)";
	   meth_desc=" append rows from another data table -- if this table has no data, then do a CopyFrom instead of append rows, which is a good general motif for aggregating data from another table whose columns may change over time, ensuring that the aggregator always has the same columns -- this is also available in the GUI as a drag-and-drop action (appends rows of dropped item onto dropped item)";
	  };
	  AssignExpr @[7] {
	   name="AssignExpr_hoghiwtavgmaxMAX_vghoghiwtavgmax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="hog_hi_wt_avg_max = MAX(rcg->hi_wt_avg, hog_hi_wt_avg_max)";
	   result_var=$.programs[12].vars[1]$;
	   expr {
	    expr="MAX(rcg->hi_wt_avg, hog_hi_wt_avg_max)";
	   };
	  };
	  VarIncr @[8] {
	   name="VarIncr_hoghiwtavgavgrcghiwtavg";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="hog_hi_wt_avg_avg += rcg->hi_wt_avg";
	   var=$.programs[12].vars[0]$;
	   expr {
	    expr="rcg->hi_wt_avg";
	   };
	  };
	  VarIncr @[9] {
	   name="VarIncr_hogn1";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="hog_n += 1";
	   var=$.programs[12].vars[2]$;
	   expr {
	    expr="1";
	   };
	  };
	 };
	};
	Else @[3] {
	 name="Else_If_ifunactavghogthr";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="else";
	 cond {
	  expr=;
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  AssignExpr @[0] {
	   name="AssignExpr_nonhiwtavgmaxMAX_vgnonhiwtavgmax";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="non_hi_wt_avg_max = MAX(rcg->hi_wt_avg, non_hi_wt_avg_max)";
	   result_var=$.programs[12].vars[4]$;
	   expr {
	    expr="MAX(rcg->hi_wt_avg, non_hi_wt_avg_max)";
	   };
	  };
	  VarIncr @[1] {
	   name="VarIncr_nonhiwtavgavgrcghiwtavg";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="non_hi_wt_avg_avg += rcg->hi_wt_avg";
	   var=$.programs[12].vars[3]$;
	   expr {
	    expr="rcg->hi_wt_avg";
	   };
	  };
	  VarIncr @[2] {
	   name="VarIncr_nonn1";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="non_n += 1";
	   var=$.programs[12].vars[5]$;
	   expr {
	    expr="1";
	   };
	  };
	 };
	};
       };
       init {
	expr="i=0";
       };
       test {
	expr="i< mx";
       };
       iter {
	expr="i++";
       };
      };
      AssignExpr @[13] {
       name="AssignExpr_wtsallweightstableprjnnoFlatten";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="wts_all = weights_table[prjn_no][:,:,:].Flatten()";
       result_var=.programs[12].functions[0].fun_code[0].local_vars[1]$$;
       expr {
	expr="weights_table[prjn_no][:,:,:].Flatten()";
       };
      };
      MathCall @[14] {
       name="MathCall_taMathfloatvechi_stbinminwtmaxwt";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMath_float::vec_histogram(hist_vec, wts_all, hist_bin, min_wt, max_wt, )";
       result_var=NULL;
       object_type=taMath_float;
       method=taMath_float::vec_histogram;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=float_Matrix_ptr;
	 type="float_Matrix*";
	 name="hist_vec";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="hist_vec";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_float_Matrix_ptr;
	 type="float_Matrix*";
	 name="src_vec";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="wts_all";
	 };
	};
	ProgArg @[2] {
	 arg_type=float;
	 type="float";
	 name="bin_size";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="hist_bin";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="min_val";
	 required=0;
	 def_val="0.0";
	 prev_expr=;
	 expr {
	  expr="min_wt";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="max_val";
	 required=0;
	 def_val="0.0";
	 prev_expr=;
	 expr {
	  expr="max_wt";
	 };
	};
	ProgArg @[5] {
	 arg_type=float_Matrix_ptr;
	 type="float_Matrix*";
	 name="bin_vec";
	 required=0;
	 def_val="__null";
	 prev_expr=;
	 expr {
	  expr=;
	 };
	};
       };
      };
      MethodCall @[15] {
       name="MethodCall_weightshisthogsF_altaBaseVTFLOAT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist_hogs->FindMakeCol(\"wt_val\", taBase::VT_FLOAT)";
       result_var=NULL;
       obj=.programs[12].objs_vars[0]$$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"wt_val\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_FLOAT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      MethodCall @[16] {
       name="MethodCall_weightshisthogsF_nttaBaseVTFLOAT";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist_hogs->FindMakeCol(\"count\", taBase::VT_FLOAT)";
       result_var=NULL;
       obj=$.programs[12].objs_vars[0]$;
       method=DataTable::FindMakeCol;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="col_nm";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="\"count\"";
	 };
	};
	ProgArg @[1] {
	 arg_type=taBase::ValType;
	 type="taBase::ValType";
	 name="val_type";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="taBase::VT_FLOAT";
	 };
	};
       };
       meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
       meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
      };
      MethodCall @[17] {
       name="MethodCall_weightshisthogsE_wsshapehistvec0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist_hogs->EnforceRows(shape(hist_vec)[0])";
       result_var=NULL;
       obj=$.programs[12].objs_vars[0]$;
       method=DataTable::EnforceRows;
       meth_args {
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="n_rows";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  expr="shape(hist_vec)[0]";
	 };
	};
       };
       meth_sig="void EnforceRows(int n_rows)";
       meth_desc=" ensure that there are exactly n_rows in the table, removing or adding as needed";
      };
      CssExpr @[18] {
       name="CssExpr_weightshisthogscounthistvec";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist_hogs[\"count\"][:] = hist_vec;";
       expr {
	expr="weights_hist_hogs[\"count\"][:] = hist_vec;";
       };
      };
      CssExpr @[19] {
       name="CssExpr_weightshisthogsw_inExpandhistbin";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="weights_hist_hogs[\"wt_val\"][:] = ((float_Matrix)[(min_wt/hist_bin):(1.0 + (max_wt/hist_bin))].Expand()) * hist_bin;";
       expr {
	expr="weights_hist_hogs[\"wt_val\"][:] = ((float_Matrix)[(min_wt/hist_bin):(1.0 + (max_wt/hist_bin))].Expand()) * hist_bin;";
       };
      };
      AssignExpr @[20] {
       name="AssignExpr_hoghiwtavgavghoghiwtavgavghogn";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="hog_hi_wt_avg_avg = hog_hi_wt_avg_avg / hog_n";
       result_var=$.programs[12].vars[0]$;
       expr {
	expr="hog_hi_wt_avg_avg / hog_n";
       };
      };
      AssignExpr @[21] {
       name="AssignExpr_nonhiwtavgavgnonhiwtavgavgnonn";
       desc=;
       flags=WARNING|CAN_REVERT_TO_CODE;
       code_string="non_hi_wt_avg_avg = non_hi_wt_avg_avg / non_n";
       result_var=$.programs[12].vars[3]$;
       expr {
	expr="non_hi_wt_avg_avg / non_n";
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars0vars";
     desc=;
     flags=0;
     code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    FunctionCall @[1] {
     name="FunctionCall_WeightDistribHistwtsprjn";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="WeightDistribHist(wts_prjn)";
     result_var=NULL;
     fun=.programs[12].functions[0]$$;
     fun_args {
      name="fun_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=Projection;
       type="Projection*";
       name="prjn";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="wts_prjn";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
    html_text="<html>
<head></head>
<body>
<h2> Enter Title Here </h2>
</body>
</html>
";
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="n_batches";
      var_type=T_Int;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitbatch";
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.programs.gp[0][0].args[0]$$;
      local_ctr_var=.programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="i";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      name="AssignExpr_batchbatchstart";
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.programs.gp[0][0].vars[0]$;
      expr {
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      name="MemberAssign_networkbatchbatch";
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.programs.gp[0][0].args[0]$;
      path="batch";
      expr {
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      name="ForLoop_fori0inbatchesi";
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrainnetworkinputdatatrue";
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrbatch";
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       expr="i=0";
      };
      test {
       expr="i<n_batches";
      };
      iter {
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @[0] {
      name="rnd_seeds";
      seeds {
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @[0] {
	name="RndSeed_1";
	rnd_seed=4240832526;
       };
       RndSeed @[1] {
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @[2] {
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @[3] {
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @[4] {
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @[5] {
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @[6] {
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @[7] {
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @[8] {
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @[9] {
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @[10] {
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @[11] {
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @[12] {
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @[13] {
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @[14] {
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @[15] {
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @[16] {
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @[17] {
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @[18] {
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @[19] {
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @[20] {
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @[21] {
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @[22] {
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @[23] {
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @[24] {
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @[1] {
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      completion_type=;
      object_val=.programs.gp[0][1].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      completion_type=;
      object_val=.programs.gp[0][1].objs[1]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @[2] {
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=50;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=50;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][1].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @[9] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].train_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="GetRandomSeed";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	name="Switch_switchrndinit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.programs.gp[0][1].vars[3]$$;
	cases {
	 name="cases";
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  name="CaseBlock_caseOLDSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedOldSeed";
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.programs.gp[0][1].objs_vars[1]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  name="CaseBlock_caseNEWSEED";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedNewSeed";
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.programs.gp[0][1].objs_vars[1]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  name="CaseBlock_caseBATCHSEEDS";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   name="prog_code";
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    name="MethodCall_rndseedsUseSeedn_dseedsseedssize";
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.programs.gp[0][1].objs_vars[0]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     name="meth_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_nopromptsfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkCheckConfigfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.programs.gp[0][1].vars[9]$$;
      expr {
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.programs.gp[0][1].vars[8]$$;
      expr {
       expr="0";
      };
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.programs.gp[0][1].functions[0]$$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      name="WtInitPrompt_ifguiDoyouwantto_eNetworkWeights";
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name="yes_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkBuild";
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Build;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_traintimernetworktraintime";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.programs.gp[0][1].vars[9]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_traintimerStartTimertrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[9]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      name="AssignExpr_nundercnt0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.programs.gp[0][1].vars[8]$;
      expr {
       expr="0";
      };
     };
     MemberAssign @[3] {
      name="MemberAssign_networktrainmodetrainmode";
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      name="FunctionCall_GetRandomSeed";
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.programs.gp[0][1].functions[0]$;
      fun_args {
       name="fun_args";
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      name="If_ifnoprompts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       expr="no_prompts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkInitWeights";
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	name="PrintExpr_Printnetworkname_ghtsInitialized";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      name="AssignExpr_epochnetworkepoch";
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.programs.gp[0][1].vars[1]$;
      expr {
       expr="network.epoch";
      };
     };
     CssExpr @[7] {
      name="CssExpr_taMiscdmemdebugtrue";
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="taMisc::dmem_debug = true;";
      expr {
       expr="taMisc::dmem_debug = true;";
      };
     };
     WhileLoop @[8] {
      name="WhileLoop_whileepochmaxepoch";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraEpochnetworkinputdata";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][2]$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	name="NetCounterIncr_NetCounterIncrepoch";
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.programs.gp[0][1].args[0]$;
	local_ctr_var=$.programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	name="If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  name="VarIncr_nundercnt1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  name="IfBreak_ifnundercntnunderthrbreak";
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	name="Else_If_ifnetworkcnterrerrstopcrit";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_nundercnt0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.programs.gp[0][1].vars[8]$;
	  expr {
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	name="If_ifsavewtsinterval1";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  name="If_ifepochsavewtsinterval0";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    name="ProgramCall_SaveWeightsnetwork";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     name="prog_args";
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       expr="network";
	      };
	     };
	    };
	    target=$.programs.gp[0][8]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     If @[9] {
      name="If_ifsavefinalwts";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       expr="save_final_wts";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_SaveWeightsnetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.programs.gp[0][8]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[10] {
      name="MethodCall_traintimerEndTimer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][1].vars[9]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.programs.gp[0][3]$$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRAIN";
	value=0;
	desc="just training objects with full transforms";
       };
       DynEnumItem @[1] {
	name="TRAIN_NOVEL";
	value=1;
	desc="training the novel testing objects: novel shown in restricted locations";
       };
       DynEnumItem @[2] {
	name="TEST_RANDOM";
	value=2;
	desc="test all objects in random transforms";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=99;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=.networks[0].epoch_time$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=100;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="input_type";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[0][2].types[0]$$;
       value=0;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[0][2].args[0]$$;
      local_ctr_var=.programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][2].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      name="ProgramCall_GenerateItemList_atainputtype100";
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="GenerateItemList(input_data, input_type, 100)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_type";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="n_items";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="100";
	};
       };
      };
      target=$.programs[0]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[0][2].args[0]$;
      local_ctr_var=$.programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][2].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitEpoch";
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Init_Epoch;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[5] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopPERMU_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.programs.gp[0][3]$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	name="If_ifsteponerrnetworksse00";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  name="StopStepPoint_StopStepPoint";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.programs.gp[0][2].args[1]$$;
      index_var=.programs.gp[0][2].vars[5]$$;
      order_var=.programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[0][2].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[9] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[10] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][7]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][3].doc$$: };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[0][3].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsImagenetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsImage(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr="input_data";
	};
       };
      };
      target=.programs[2]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarternetworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[0][4]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[0][6]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][3].args[0]$;
      update_var=.programs.gp[0][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][4].doc$$: };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=100;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][4].args[0]$$;
      local_ctr_var=.programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_ApplyInputsImagenetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputsImage(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs[2]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[0][4].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCyclenetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[0][4].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][4].args[0]$;
      update_var=.programs.gp[0][4].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][5].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][5].args[0]$;
      update_var=$.programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][6].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][6].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][6].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][6].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][6].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][6].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][7].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="wt_sync_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="pre_hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pre_hog_pct";
	var_label="pre_hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[29] {
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[30] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[31] {
	name="cos_diff_avg_lrn";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_diff_avg_lrn";
	var_label="cos_diff_avg_lrn";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[32] {
	name="avg_l_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.am_avg_l.avg";
	var_label="avg_l_avg";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[33] {
	name="avg_l_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.am_avg_l.max";
	var_label="avg_l_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[34] {
	name="avg_l_lrn_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.am_avg_l_lrn.avg";
	var_label="avg_l_lrn_avg";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[35] {
	name="avg_l_lrn_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.am_avg_l_lrn.max";
	var_label="avg_l_lrn_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[36] {
	name="mod_avg_l_lrn";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.mod_avg_l_lrn";
	var_label="mod_avg_l_lrn";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[37] {
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[38] {
	name="err_max_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.err_dwt_max_avg";
	var_label="err_max_avg";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[39] {
	name="bcm_max_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.bcm_dwt_max_avg";
	var_label="bcm_max_avg";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[40] {
	name="dwt_max_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.dwt_max_avg";
	var_label="dwt_max_avg";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[41] {
	name="wb_avg_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg.avg";
	var_label="wb_avg_avg";
	name_style=AUTO_NAME;
	max_name_len=84;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[42] {
	name="wb_avg_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg.max";
	var_label="wb_avg_max";
	name_style=AUTO_NAME;
	max_name_len=74;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[43] {
	name="wb_avg_hog_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg_hog.avg";
	var_label="wb_avg_hog_avg";
	name_style=AUTO_NAME;
	max_name_len=94;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[44] {
	name="wb_avg_hog_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg_hog.max";
	var_label="wb_avg_hog_max";
	name_style=AUTO_NAME;
	max_name_len=90;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[45] {
	name="wb_avg_pre_hog_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg_pre_hog.avg";
	var_label="wb_avg_pre_hog_avg";
	name_style=AUTO_NAME;
	max_name_len=114;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[46] {
	name="wb_avg_pre_hog_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_avg_pre_hog.max";
	var_label="wb_avg_pre_hog_max";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[47] {
	name="wb_fact_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact.avg";
	var_label="wb_fact_avg";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[48] {
	name="wb_fact_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact.max";
	var_label="wb_fact_max";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[49] {
	name="wb_fact_hog_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact_hog.avg";
	var_label="wb_fact_hog_avg";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[50] {
	name="wb_fact_hog_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact_hog.max";
	var_label="wb_fact_hog_max";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[51] {
	name="wb_fact_pre_hog_avg";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact_pre_hog.avg";
	var_label="wb_fact_pre_hog_avg";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[52] {
	name="wb_fact_pre_hog_max";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.wb_fact_pre_hog.max";
	var_label="wb_fact_pre_hog_max";
	name_style=AUTO_NAME;
	max_name_len=106;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[0][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][1]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[0][7].vars[1]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][7].objs_vars[0]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][7].objs_vars[0]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[0][7].vars[1]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataSetV_swtsynctimetot1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(network.wt_sync_time.used.GetTotSecs(), \"wt_sync_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.wt_sync_time.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"wt_sync_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[6] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][7].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[7] {
      name="Comment_NOTEifdoingaTest_atablecorrectly";
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[8] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][8].doc$$: };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val="_gui";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iftaMiscdmemproc0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (taMisc::dmem_proc > 0)";
      cond {
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	name="ReturnExpr_return";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="return ";
	expr {
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      name="MiscCall_batchstrtaMiscLe_osnetworkbatch2";
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.programs.gp[0][8].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      name="MiscCall_epochstrtaMiscLe_osnetworkepoch4";
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.programs.gp[0][8].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      name="AssignExpr_finaltagtagbatchstrepochstr";
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.programs.gp[0][8].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      name="MethodCall_fnamenetworkGetF_gwtssubdirfalse";
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.programs.gp[0][8].vars[2]$$;
      obj=.programs.gp[0][8].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      name="MethodCall_networkSaveWeigh_meNetworkNETFMT";
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.programs.gp[0][8].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="LeabraEpochTest";
    short_nm="pchTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name="enums";
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRAIN";
	value=0;
	desc="just training objects with full transforms";
       };
       DynEnumItem @[1] {
	name="TRAIN_NOVEL";
	value=1;
	desc="training the novel testing objects: novel shown in restricted locations";
       };
       DynEnumItem @[2] {
	name="TEST_RANDOM";
	value=2;
	desc="test all objects in random transforms";
       };
      };
      bits=0;
     };
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      completion_type=;
      object_scope=NULL;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=999;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=.data.gp[1][3]$$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=1000;
      completion_type=;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="input_type";
      var_type=T_DynEnum;
      completion_type=;
      object_scope=NULL;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.programs.gp[1][0].types[0]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="n_test_items";
      var_type=T_Int;
      int_val=1000;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     ProgramCall @[0] {
      name="ProgramCall_GenerateItemList_ttypentestitems";
      desc=;
      flags=NON_STD|CAN_REVERT_TO_CODE;
      code_string="GenerateItemList(input_data, input_type, n_test_items)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="input_type";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="n_items";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="n_test_items";
	};
       };
      };
      target=$.programs[0]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      name="NetCounterInit_NetCounterInittrial";
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.programs.gp[1][0].args[0]$;
      local_ctr_var=$.programs.gp[1][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      name="MemberAssign_networktrainmodeNetworkTEST";
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      name="MethodCall_epochtimerStartTimertrue";
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[5] {
      name="MethodCall_trialmondataResetData";
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[6] {
      name="NetDataLoop_NetDataLoopSEQUE_ardatalooporder";
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraTrialTestnetworkinputdata";
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.programs.gp[1][0].vars[0]$$;
      index_var=.programs.gp[1][0].vars[5]$$;
      order_var=.programs.gp[1][0].vars[1]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[7] {
      name="If_ifnetworkwtupdateNetworkBATCH";
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[8] {
      name="MethodCall_networkComputeEpochStats";
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=Network::Compute_EpochStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more";
     };
     MethodCall @[9] {
      name="MethodCall_epochtimerEndTimer";
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.programs.gp[1][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[10] {
      name="ProgramCall_LeabraEpochMonitornetwork";
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][5]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[11] {
      name="MemberAssign_networktrainmodeNetworkTRAIN";
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     ProgramCall @[12] {
      name="ProgramCall_ActBasedRFieldnetworktrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ActBasedRField(network, true)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      target=.programs.gp[1][7]$$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[13] {
      name="ProgramCall_TestErrorByObjecttrialmondata";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="TestErrorByObject(trial_mon_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="trial_mon_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
      target=.programs.gp[1][6]$$;
      targ_ld_init="*TestErrorByObject*";
     };
    };
    step_prog=$.programs.gp[1][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][1].doc$$: };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars1vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="qtr";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      name="If_ifnetworkCompute_stnetworktrial1";
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_networkComputeWeights";
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.programs.gp[1][1].args[0]$$;
	method=Network::Compute_Weights;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      name="MethodCall_networkTrialInit";
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      name="ProgramCall_ApplyInputsImagenetworkinputdata";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsImage(network, input_data)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.programs[2]$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      name="ForLoop_forqtr0qtr4qtr";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraQuarterTes_etworkinputdata";
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.programs.gp[1][2]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       expr="qtr = 0";
      };
      test {
       expr="qtr < 4";
      };
      iter {
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkTrialFinal";
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      name="ProgramCall_ActBasedRFieldnetworkfalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ActBasedRField(network, false)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      target=$.programs.gp[1][7]$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[9] {
      name="ProgramCall_LeabraTrialMonitornetwork";
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      target=.programs.gp[1][4]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[10] {
      name="NetUpdateView_NetUpdateView";
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][1].args[0]$;
      update_var=.programs.gp[1][1].vars[0]$$;
     };
    };
    step_prog=$.programs.gp[0][5]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][2].doc$$: };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[0][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=100;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[1][2].args[0]$$;
      local_ctr_var=.programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars2vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="cyc";
	var_type=T_Int;
	int_val=0;
	completion_type=;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      name="Comment_notecanapplyinpu_Quarterasneeded";
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      name="ProgramCall_programname";
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 expr="network";
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      name="MethodCall_cyclemaxnetworkCycleRunMax";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.programs.gp[1][2].prog_code[0].local_vars[0]$$;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      name="ForLoop_forcyc0cyccyclemaxcyc";
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	name="ProgramCall_LeabraCycleTestnetwork";
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	name="AssignExpr_cyclenetworkcycle";
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.programs.gp[1][2].vars[0]$;
	expr {
	 expr="network.cycle";
	};
       };
      };
      init {
       expr="cyc=0";
      };
      test {
       expr="cyc<cycle_max";
      };
      iter {
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      name="MethodCall_networkComputePhaseStats";
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][2].args[0]$;
      update_var=.programs.gp[1][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[3] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][3].doc$$: };
    };
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][3].args[0]$;
      update_var=.programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[4] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][4].doc$$: };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][3]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][4].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][4].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][4].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][4].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[1][4].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=$.programs.gp[1][4]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[5] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][5].doc$$: };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       ignore_sig=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[16] {
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[17] {
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name="agg_col";
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[18] {
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[19] {
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[20] {
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[21] {
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[22] {
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[23] {
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[24] {
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[25] {
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=8;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[26] {
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[27] {
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[28] {
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=.data.gp[1][4]$$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][4]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      completion_type=;
      object_val=.programs.gp[1][5].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      completion_type=;
      object_val=$.networks[0].epoch_time$;
      object_scope=NULL;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.programs.gp[1][5].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonSetDa_hmondatanetwork";
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      name="MethodCall_epochnetmonCheckConfigfalse";
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      name="MethodCall_epochnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_epochmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      name="MethodCall_epochnetmonGetMonVals";
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      name="AssignExpr_epochtimernetworkepochtime";
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.programs.gp[1][5].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      name="MethodCall_epochmondataSetV_csepochtimetot1";
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      name="MethodCall_epochmondataSetV_csepochtimeusr1";
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      name="MethodCall_epochmondataWriteClose";
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[1][5].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      name="Comment_NOTEifdoingaTest_atablecorrectly";
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=$.programs.gp[1][5]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[6] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][6].doc$$: };
    };
    name="TestErrorByObject";
    short_nm="TstByb";
    tags=;
    desc=;
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[1][3]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="err_output_data";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.data.gp[2][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_erroutputdataStructUpdatetrue";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="err_output_data->StructUpdate(true)";
      result_var=NULL;
      obj=.programs.gp[1][6].vars[0]$$;
      method=taBase::StructUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void StructUpdate(bool begin)";
      meth_desc=" bracket structural changes with (nestable) true/false calls;";
     };
     DataGroupProg @[1] {
      name="DataGroupProg_Groupfromsrctabl_leerroutputdata";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Group from:  src table = trial_mon_data dest table = err_output_data";
      src_table=;
      dest_table=;
      src_data_var=.programs.gp[1][6].args[0]$$;
      dest_data_var=$.programs.gp[1][6].vars[0]$;
      group_spec {
       name="group_spec";
       ops {
	name="ops";
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="trial_name";
	 name="trial_name_GROUP_0";
	 agg {name="Aggregate": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="sse";
	 name="sse_N_1";
	 agg {name="Aggregate": op=N: rel={name="rel": rel=GREATERTHAN: val=0: val_string="": use_var=0: var=NULL: }: };
	};
	DataGroupEl @[2] {
	 col_name="sse";
	 name="sse_COUNT_2";
	 agg {name="Aggregate": op=COUNT: rel={name="rel": rel=GREATERTHAN: val=0: val_string="": use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=1;
      };
     };
     MethodCall @[2] {
      name="MethodCall_erroutputdataFin_rrtaBaseVTFLOAT";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="err_output_data->FindMakeCol(\"pct_err\", taBase::VT_FLOAT)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::FindMakeCol;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="col_nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="\"pct_err\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val="taBase::VT_FLOAT";
	prev_expr=;
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
      };
      meth_sig="DataCol_ptr FindMakeCol(taString& col_nm, taBase::ValType val_type)";
      meth_desc=" insures that a scalar column of the given name and val type exists, and return that col.";
     };
     UserScript @[3] {
      name="UserScript_erroutputdatadat_UpdateAfterEdit";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="err_output_data.data.pct_err.SetColFlag(DataCol::CALC);
err_output_data.data.pct_err.calc_expr.SetExpr(\"(float)sse_count / (float)N\");
err_output_data.data.pct_err.UpdateAfterEdit();";
      script {
       expr="err_output_data.data.pct_err.SetColFlag(DataCol::CALC);
err_output_data.data.pct_err.calc_expr.SetExpr(\"(float)sse_count / (float)N\");
err_output_data.data.pct_err.UpdateAfterEdit();";
      };
     };
     MethodCall @[4] {
      name="MethodCall_erroutputdataCalcAllRows";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="err_output_data->CalcAllRows()";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=DataTable::CalcAllRows;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool CalcAllRows()";
      meth_desc=" perform calculations for all rows of data (updates after)";
     };
     MethodCall @[5] {
      name="MethodCall_erroutputdataStructUpdatefalse";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="err_output_data->StructUpdate(false)";
      result_var=NULL;
      obj=$.programs.gp[1][6].vars[0]$;
      method=taBase::StructUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="void StructUpdate(bool begin)";
      meth_desc=" bracket structural changes with (nestable) true/false calls;";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[7] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][7].doc$$: };
    };
    name="ActBasedRField";
    short_nm="cBsRFl";
    tags="Statistic, Receptive Field";
    desc="computes an activation based receptive field using ActBasedRF object type -- allows you to see how units in a selected target layer relate to activations of units throughout the network";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author=;
    email=;
    flags=NO_STOP_STEP|OBJS_UPDT_GUI;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=ActBasedRF;
     el_def=0;
     ActBasedRF @[0] {
      name="ActBasedRF_0";
      rf_data=$.programs.gp[1][7].objs[1]$;
      network=$.networks[0]$;
      trg_layer=.networks[0].layers[2]$$;
      exclude_lays=;
      norm_mode=NORM_TRG_UNIT_RF_LAY;
      var="act";
      threshold=0.1;
     };
     DataTable @[1] {
      name="ActRFData";
      desc="receptive field data -- could move this into AnalysisData if you want..";
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="V1";
	col_flags=AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 4;5;10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[4] ;;;;	};
	width=4;
	matrix_col_width=10;
       };
       float_Data @[1] {
	name="V4";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 7;7;5;5;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[4] ;;;;	};
	width=7;
	matrix_col_width=10;
       };
       float_Data @[2] {
	name="IT";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=10;
	matrix_col_width=10;
       };
       float_Data @[3] {
	name="Output";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 5;4;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=6;
	matrix_col_width=10;
       };
       float_Data @[4] {
	name="Image";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=1;
	cell_geom{ 40;40;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[2] ;;	};
	width=40;
	matrix_col_width=10;
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      completion_type=;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="final_rf";
      var_type=T_Bool;
      bool_val=1;
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="whether to compute the final receptive field or just increment the sums -- call with false to accumulate, and true at end to get final values";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="act_based_rf_0";
      var_type=T_Object;
      object_type=ActBasedRF;
      completion_type=;
      object_val=.programs.gp[1][7].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="act_rfdata";
      var_type=T_Object;
      object_type=DataTable;
      completion_type=;
      object_val=$.programs.gp[1][7].objs[1]$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record activation based receptive field information into";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trg_layer_name";
      var_type=T_String;
      string_val="V4";
      completion_type=;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trg_layer";
      var_type=T_Object;
      object_type=LeabraLayer;
      completion_type=;
      object_val=$.networks[0].layers[2]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="target layer to get receptive field data for";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trglayernetworkF_yertrglayername";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="trg_layer = network->FindLayer(trg_layer_name)";
      result_var=.programs.gp[1][7].vars[3]$$;
      obj=.programs.gp[1][7].args[0]$$;
      method=Network::FindLayer;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="taString&";
	name="nm";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trg_layer_name";
	};
       };
      };
      meth_sig="Layer_ptr FindLayer(taString& nm)";
      meth_desc=" find layer by name";
     };
     MethodCall @[1] {
      name="MethodCall_actbasedrf0InitA_networktrglayer";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="ActBasedRF_0->InitAll(ActRFData, network, trg_layer)";
      result_var=NULL;
      obj=.programs.gp[1][7].vars[0]$$;
      method=ActBasedRF::InitAll;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="act_rfdata";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[2] {
	arg_type=Layer_ptr;
	type="Layer*";
	name="tlay";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trg_layer";
	};
       };
      };
      meth_sig="void InitAll(DataTable* dt, Network* net, Layer* tlay)";
      meth_desc=" set the data table, network, trg_lay pointers and initialize everything -- convenience function for init_code of programs -- resets all data first and then calls InitData after setting";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      name="If_iffinalrf";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (final_rf)";
      cond {
       expr="final_rf";
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_actbasedrf0ComputeRF";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="ActBasedRF_0->ComputeRF()";
	result_var=NULL;
	obj=$.programs.gp[1][7].vars[0]$;
	method=ActBasedRF::ComputeRF;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="bool ComputeRF()";
	meth_desc=" compute the rf_data based on currently accumulated sum_data and wt_data from multiple previous calls to IncrementSums function";
       };
      };
     };
     Else @[1] {
      name="Else_If_iffinalrf";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="else";
      cond {
       expr=;
      };
      true_code {
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	name="MethodCall_actbasedrf0IncrementSums";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="ActBasedRF_0->IncrementSums()";
	result_var=NULL;
	obj=$.programs.gp[1][7].vars[0]$;
	method=ActBasedRF::IncrementSums;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="bool IncrementSums()";
	meth_desc=" update the receptive field data based on current network activations (computes sum_data and wt_data, does NOT compute rf_data based on those: see ComputeRF)";
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0.0343461: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.04095963: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=1: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.9859567: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABiQAAAy0AAAcQAQAAAAcBAAAAAQE=: val_type_fixed=0: };
   };
   name="DefaultProjectBrowser";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"objrec_expt\"] - objrec_expt.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_65";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="DefaultViewer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="ObjrecNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_ObjrecNet_root_view_children_0";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=1;
	  net_state_text {
	   name="net_state_text";
	   state_items {
	    name="state_items";
	    el_typ=NetViewStateItem;
	    el_def=0;
	    NetViewStateItem @[0] {name="batch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[1] {name="epoch": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[2] {name="group": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[3] {name="trial": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[4] {name="tick": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[5] {name="cycle": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[6] {name="time": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[7] {name="total_trials": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[8] {name="sse": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[9] {name="group_name": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[10] {name="trial_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[11] {name="output_name": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[12] {name="quarter": net_member=1: display=1: width=8: found=1: };
	    NetViewStateItem @[13] {name="phase": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[14] {name="tot_cycle": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[15] {name="rt_cycles": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[16] {name="ext_rew": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[17] {name="norm_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[18] {name="cos_err": net_member=1: display=0: width=8: found=1: };
	    NetViewStateItem @[19] {name="minus_output_name": net_member=1: display=0: width=8: found=1: };
	   };
	  };
	  show_iconified=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;bias_wt;bias_dwt;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;avg_ss;avg_s;act_nd;r.wb_inc;avg_l_lrn;	  };
	  unit_src_path=".layers[3][8]";
	  con_type=STD_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=58: y=59: z=1.5: };
	  max_size2d {x=94: y=100: z=1: };
	  eff_max_size {x=58: y=59: z=1.5: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.03: layer_min=0.01: layer_vals=0.03: prjn=0.005: unit=0.015: un_nm_len=12: un_val_prec=2: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_B: prjn_name=0: prjn_width=0.001: prjn_trans=0.5: lay_trans=0.5: unit_trans=0.6: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=0;
	  wt_line_thr=0.9;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=.networks[0].layers[0]$$;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="r.wt";
	    auto_scale=1;
	    min=-0.8444839;
	    max=0.8444839;
	   };
	   ScaleRange @[3] {
	    var_name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="s.wt";
	    auto_scale=1;
	    min=-0.8469265;
	    max=0.8469265;
	   };
	   ScaleRange @[6] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="gc.h";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[9] {
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0.004769471;
	    max=0.004769471;
	   };
	   ScaleRange @[10] {
	    var_name="gc.i";
	    auto_scale=0;
	    min=-1.724444;
	    max=1.724444;
	   };
	   ScaleRange @[11] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    var_name="gc.a";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    var_name="act_dif";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[14] {
	    var_name="da";
	    auto_scale=1;
	    min=-0.2958892;
	    max=0.2958892;
	   };
	   ScaleRange @[15] {
	    var_name="wt_prjn";
	    auto_scale=1;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[16] {
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[17] {
	    var_name="act_avg";
	    auto_scale=0;
	    min=-0.3133333;
	    max=0.3133333;
	   };
	   ScaleRange @[18] {
	    var_name="avg_l_nrm";
	    auto_scale=1;
	    min=-4.027796;
	    max=4.027796;
	   };
	   ScaleRange @[19] {
	    var_name="avg_l";
	    auto_scale=1;
	    min=-2.016498;
	    max=2.016498;
	   };
	   ScaleRange @[20] {
	    var_name="deep5b";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[21] {
	    var_name="thal";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[22] {
	    var_name="act_nd";
	    auto_scale=0;
	    min=-1.234444;
	    max=1.234444;
	   };
	   ScaleRange @[23] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[24] {
	    var_name="ti_ctxt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[25] {
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[26] {
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[27] {
	    var_name="d5b_net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[28] {
	    var_name="noise";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[29] {
	    var_name="avg_s";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[30] {
	    var_name="snap";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[31] {
	    var_name="thr_l_mix";
	    auto_scale=1;
	    min=-0.01191158;
	    max=0.01191158;
	   };
	   ScaleRange @[32] {
	    var_name="avg_l_lrn";
	    auto_scale=1;
	    min=-0.01;
	    max=0.01;
	   };
	   ScaleRange @[33] {
	    var_name="td_net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[34] {
	    var_name="deep_raw";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[35] {
	    var_name="deep_ctxt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[36] {
	    var_name="deep_norm";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[37] {
	    var_name="r.fwt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[38] {
	    var_name="r.scale";
	    auto_scale=1;
	    min=-1.8833;
	    max=1.8833;
	   };
	   ScaleRange @[39] {
	    var_name="avg_ss";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[40] {
	    var_name="avg_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[41] {
	    var_name="bias_dwt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[42] {
	    var_name="r.wt*act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[43] {
	    var_name="bias_wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[44] {
	    var_name="gc_kna_f";
	    auto_scale=1;
	    min=-0.04571009;
	    max=0.04571009;
	   };
	   ScaleRange @[45] {
	    var_name="gc_kna_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[46] {
	    var_name="gc_kna_s";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[47] {
	    var_name="r.wb_inc";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ V1=0;V4=0;IT=0;Output=0;Image=0;	  };
	  selected_unit_var=;
	 };
	 GridTableView @[1] {
	  name="V1FilterInputData_Grid";
	  m_data=$.programs[2].objs[1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=0.2444948: y=0.2444946: z=0.2444946: }: rotate={x=-1: y=-1.192092e-7: z=3.329529e-14: rot=0.2978167: }: translate={x=0.5791095: y=0.9697733: z=-0.03505769: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Output";
	    m_data=.programs[2].objs[1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Name";
	    m_data=.programs[2].objs[1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=1.725595e+25;
	    scale_max=1.85236e+28;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="V1_image_r";
	    m_data=.programs[2].objs[1].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.939304e+29;
	    scale_max=1.775139e+28;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="V1_v1s_r";
	    m_data=.programs[2].objs[1].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=1.725595e+25;
	    scale_max=1.85236e+28;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="V1_v1pi_r";
	    m_data=.programs[2].objs[1].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.939304e+29;
	    scale_max=1.775139e+28;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    name="V1_v1s_sg_r";
	    m_data=.programs[2].objs[1].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.823111e+23;
	    scale_max=2.7953e+20;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    name="V1_v1pi_sg_r";
	    m_data=.programs[2].objs[1].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.823111e+23;
	    scale_max=2.7953e+20;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    name="V1_v1c_r";
	    m_data=.programs[2].objs[1].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.823111e+23;
	    scale_max=2.7953e+20;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.2444948: y=0.2444946: z=0.2444946: }: rotate={x=-1: y=-1.192092e-7: z=3.329529e-14: rot=0.2978167: }: translate={x=0.5791095: y=0.9697733: z=-0.03505769: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=1;
	  display_on=1;
	  manip_ctrl_on=0;
	  view_cols=1;
	  page_cols=1;
	  col_range {min=2: max=2: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.4876113: y=1.299388: z=1.168482: };
	 orient {x=-1.000001: y=0: z=0: rot=0.5099996: };
	 focal_dist=1.740415;
	};
	T3SavedView @[1] {
	 name="Image";
	 view_saved=1;
	 pos {x=1.037612: y=1.112202: z=-0.3174799: };
	 orient {x=-1.000001: y=0: z=0: rot=0.5099996: };
	 focal_dist=0.0377838;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="StimGenData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_StimGenData_root_view_children_0";
	  m_data=$.programs[1].objs[1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Canvas";
	    m_data=.programs[1].objs[1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=256;
	    scale_on=1;
	    scale_min=2.823111e+23;
	    scale_max=2.7953e+20;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=0: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0";
	  m_data=$.data.gp[1][1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.data.gp[1][1].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.data.gp[1][1].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=3: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.data.gp[1][1].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.data.gp[1][1].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=98: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="pct_cor";
	    m_data=.data.gp[1][1].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.75: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="pct_err";
	    m_data=.data.gp[1][1].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.99: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="avg_norm_err";
	    m_data=.data.gp[1][1].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="avg_cos_err";
	    m_data=.data.gp[1][1].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.108927: fix_max=0: max=0.523861: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="avg_ext_rew";
	    m_data=.data.gp[1][1].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="avg_cycles";
	    m_data=.data.gp[1][1].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="epoch_time_tot";
	    m_data=.data.gp[1][1].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="epoch_time_usr";
	    m_data=.data.gp[1][1].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="wt_sync_time_tot";
	    m_data=.data.gp[1][1].data[12]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_lay_avg_sse";
	    m_data=.data.gp[1][1].data[13]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.616714: fix_max=0: max=1.03986: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Output_lay_cnt_err";
	    m_data=.data.gp[1][1].data[14]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=22: fix_max=0: max=99: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Output_lay_pct_cor";
	    m_data=.data.gp[1][1].data[15]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.00999999: fix_max=0: max=0.78: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_lay_pct_err";
	    m_data=.data.gp[1][1].data[16]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.22: fix_max=0: max=0.99: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Output_lay_avg_norm_err";
	    m_data=.data.gp[1][1].data[17]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.2: fix_max=0: max=0.56: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Output_lay_avg_cos_err";
	    m_data=.data.gp[1][1].data[18]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.142399: fix_max=0: max=0.805965: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="net_avg_cos_diff";
	    m_data=.data.gp[1][1].data[19]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    name="net_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[20]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    name="net_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[21]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    name="V1_avg_cos_diff";
	    m_data=.data.gp[1][1].data[22]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.99588: fix_max=0: max=0.996752: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    name="V4_avg_cos_diff";
	    m_data=.data.gp[1][1].data[23]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    name="IT_avg_cos_diff";
	    m_data=.data.gp[1][1].data[24]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    name="Output_avg_cos_diff";
	    m_data=.data.gp[1][1].data[25]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    name="Image_avg_cos_diff";
	    m_data=.data.gp[1][1].data[26]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    name="V1_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[27]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.168644: fix_max=0: max=0.226965: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    name="V4_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[28]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[29] {
	    name="IT_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[29]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[30] {
	    name="Output_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[30]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[31] {
	    name="Image_avg_trial_cos_diff";
	    m_data=.data.gp[1][1].data[31]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[32] {
	    name="V1_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[32]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-3.20231e-8: fix_max=0: max=9.50906e-9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[33] {
	    name="V4_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[33]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=-0.001: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[34] {
	    name="IT_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[34]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=-0.001: fix_max=1: max=0.001: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[35] {
	    name="Output_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[35]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[36] {
	    name="Image_avg_avg_act_diff";
	    m_data=.data.gp[1][1].data[36]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[37] {
	    name="V4_avg_net_sd";
	    m_data=.data.gp[1][1].data[37]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.78938: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[38] {
	    name="IT_avg_net_sd";
	    m_data=.data.gp[1][1].data[38]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.235614: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[39] {
	    name="Output_avg_net_sd";
	    m_data=.data.gp[1][1].data[39]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[40] {
	    name="V4_hog_pct";
	    m_data=.data.gp[1][1].data[40]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[41] {
	    name="IT_hog_pct";
	    m_data=.data.gp[1][1].data[41]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[42] {
	    name="Output_hog_pct";
	    m_data=.data.gp[1][1].data[42]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[43] {
	    name="V4_pre_hog_pct";
	    m_data=.data.gp[1][1].data[43]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[44] {
	    name="IT_pre_hog_pct";
	    m_data=.data.gp[1][1].data[44]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[45] {
	    name="Output_pre_hog_pct";
	    m_data=.data.gp[1][1].data[45]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[46] {
	    name="V4_dead_pct";
	    m_data=.data.gp[1][1].data[46]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[47] {
	    name="IT_dead_pct";
	    m_data=.data.gp[1][1].data[47]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[48] {
	    name="Output_dead_pct";
	    m_data=.data.gp[1][1].data[48]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[49] {
	    name="V4_netmax";
	    m_data=.data.gp[1][1].data[49]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[50] {
	    name="IT_netmax";
	    m_data=.data.gp[1][1].data[50]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[51] {
	    name="Output_netmax";
	    m_data=.data.gp[1][1].data[51]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[52] {
	    name="V1_avg_act";
	    m_data=.data.gp[1][1].data[52]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[53] {
	    name="V4_avg_act";
	    m_data=.data.gp[1][1].data[53]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0803364: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[54] {
	    name="IT_avg_act";
	    m_data=.data.gp[1][1].data[54]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.131095: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[55] {
	    name="Output_avg_act";
	    m_data=.data.gp[1][1].data[55]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[56] {
	    name="Image_avg_act";
	    m_data=.data.gp[1][1].data[56]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[57] {
	    name="V4_cos_diff_avg_lrn";
	    m_data=.data.gp[1][1].data[57]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0308509: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[58] {
	    name="IT_cos_diff_avg_lrn";
	    m_data=.data.gp[1][1].data[58]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.389301: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[59] {
	    name="V4_avg_l_avg";
	    m_data=.data.gp[1][1].data[59]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.423141: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[60] {
	    name="IT_avg_l_avg";
	    m_data=.data.gp[1][1].data[60]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.55465: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[61] {
	    name="V4_avg_l_max";
	    m_data=.data.gp[1][1].data[61]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=2.32191: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[62] {
	    name="IT_avg_l_max";
	    m_data=.data.gp[1][1].data[62]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1.6529: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[63] {
	    name="V4_avg_l_lrn_avg";
	    m_data=.data.gp[1][1].data[63]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0013203: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[64] {
	    name="IT_avg_l_lrn_avg";
	    m_data=.data.gp[1][1].data[64]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0099485: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[65] {
	    name="V4_avg_l_lrn_max";
	    m_data=.data.gp[1][1].data[65]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.01: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[66] {
	    name="IT_avg_l_lrn_max";
	    m_data=.data.gp[1][1].data[66]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.05: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[67] {
	    name="V4_mod_avg_l_lrn";
	    m_data=.data.gp[1][1].data[67]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.5: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[68] {
	    name="IT_mod_avg_l_lrn";
	    m_data=.data.gp[1][1].data[68]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.5: fix_max=0: max=0.885043: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[69] {
	    name="V4_Fm_V1_netrel";
	    m_data=.data.gp[1][1].data[69]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[70] {
	    name="V4_Fm_IT_netrel";
	    m_data=.data.gp[1][1].data[70]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[71] {
	    name="IT_Fm_V4_netrel";
	    m_data=.data.gp[1][1].data[71]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[72] {
	    name="IT_Fm_Output_netrel";
	    m_data=.data.gp[1][1].data[72]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[73] {
	    name="Output_Fm_IT_netrel";
	    m_data=.data.gp[1][1].data[73]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[74] {
	    name="V4_Fm_V1_wb_avg_avg";
	    m_data=.data.gp[1][1].data[74]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.585192: fix_max=0: max=0.589205: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[75] {
	    name="V4_Fm_IT_wb_avg_avg";
	    m_data=.data.gp[1][1].data[75]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.641239: fix_max=0: max=0.645606: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[76] {
	    name="IT_Fm_V4_wb_avg_avg";
	    m_data=.data.gp[1][1].data[76]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.618771: fix_max=0: max=0.639507: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[77] {
	    name="IT_Fm_Output_wb_avg_avg";
	    m_data=.data.gp[1][1].data[77]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.628106: fix_max=0: max=0.674068: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[78] {
	    name="Output_Fm_IT_wb_avg_avg";
	    m_data=.data.gp[1][1].data[78]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.305239: fix_max=0: max=0.307149: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[79] {
	    name="V4_Fm_V1_wb_avg_max";
	    m_data=.data.gp[1][1].data[79]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[80] {
	    name="V4_Fm_IT_wb_avg_max";
	    m_data=.data.gp[1][1].data[80]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[81] {
	    name="IT_Fm_V4_wb_avg_max";
	    m_data=.data.gp[1][1].data[81]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[82] {
	    name="IT_Fm_Output_wb_avg_max";
	    m_data=.data.gp[1][1].data[82]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[83] {
	    name="Output_Fm_IT_wb_avg_max";
	    m_data=.data.gp[1][1].data[83]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[84] {
	    name="V4_Fm_V1_wb_avg_hog_avg";
	    m_data=.data.gp[1][1].data[84]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[85] {
	    name="V4_Fm_IT_wb_avg_hog_avg";
	    m_data=.data.gp[1][1].data[85]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[86] {
	    name="IT_Fm_V4_wb_avg_hog_avg";
	    m_data=.data.gp[1][1].data[86]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[87] {
	    name="IT_Fm_Output_wb_avg_hog_avg";
	    m_data=.data.gp[1][1].data[87]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[88] {
	    name="Output_Fm_IT_wb_avg_hog_avg";
	    m_data=.data.gp[1][1].data[88]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[89] {
	    name="V4_Fm_V1_wb_avg_hog_max";
	    m_data=.data.gp[1][1].data[89]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.221847: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[90] {
	    name="V4_Fm_IT_wb_avg_hog_max";
	    m_data=.data.gp[1][1].data[90]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[91] {
	    name="IT_Fm_V4_wb_avg_hog_max";
	    m_data=.data.gp[1][1].data[91]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[92] {
	    name="IT_Fm_Output_wb_avg_hog_max";
	    m_data=.data.gp[1][1].data[92]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[93] {
	    name="Output_Fm_IT_wb_avg_hog_max";
	    m_data=.data.gp[1][1].data[93]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[94] {
	    name="V4_Fm_V1_wb_avg_pre_hog_avg";
	    m_data=.data.gp[1][1].data[94]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[95] {
	    name="V4_Fm_IT_wb_avg_pre_hog_avg";
	    m_data=.data.gp[1][1].data[95]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[96] {
	    name="IT_Fm_V4_wb_avg_pre_hog_avg";
	    m_data=.data.gp[1][1].data[96]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[97] {
	    name="IT_Fm_Output_wb_avg_pre_hog_avg";
	    m_data=.data.gp[1][1].data[97]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[98] {
	    name="Output_Fm_IT_wb_avg_pre_hog_avg";
	    m_data=.data.gp[1][1].data[98]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[99] {
	    name="V4_Fm_V1_wb_avg_pre_hog_max";
	    m_data=.data.gp[1][1].data[99]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.254808: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[100] {
	    name="V4_Fm_IT_wb_avg_pre_hog_max";
	    m_data=.data.gp[1][1].data[100]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[101] {
	    name="IT_Fm_V4_wb_avg_pre_hog_max";
	    m_data=.data.gp[1][1].data[101]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[102] {
	    name="IT_Fm_Output_wb_avg_pre_hog_max";
	    m_data=.data.gp[1][1].data[102]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[103] {
	    name="Output_Fm_IT_wb_avg_pre_hog_max";
	    m_data=.data.gp[1][1].data[103]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[104] {
	    name="V4_Fm_V1_wb_fact_avg";
	    m_data=.data.gp[1][1].data[104]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.0258218: fix_max=0: max=0.0742258: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[105] {
	    name="V4_Fm_IT_wb_fact_avg";
	    m_data=.data.gp[1][1].data[105]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.329514: fix_max=0: max=0.534885: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[106] {
	    name="IT_Fm_V4_wb_fact_avg";
	    m_data=.data.gp[1][1].data[106]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.0120109: fix_max=0: max=0.47353: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[107] {
	    name="IT_Fm_Output_wb_fact_avg";
	    m_data=.data.gp[1][1].data[107]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.228655: fix_max=0: max=0.375095: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[108] {
	    name="Output_Fm_IT_wb_fact_avg";
	    m_data=.data.gp[1][1].data[108]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[109] {
	    name="V4_Fm_V1_wb_fact_max";
	    m_data=.data.gp[1][1].data[109]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.197663: fix_max=0: max=0.358844: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[110] {
	    name="V4_Fm_IT_wb_fact_max";
	    m_data=.data.gp[1][1].data[110]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.72674: fix_max=0: max=0.77738: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[111] {
	    name="IT_Fm_V4_wb_fact_max";
	    m_data=.data.gp[1][1].data[111]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.0653348: fix_max=0: max=0.524836: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[112] {
	    name="IT_Fm_Output_wb_fact_max";
	    m_data=.data.gp[1][1].data[112]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.605582: fix_max=0: max=0.76349: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[113] {
	    name="Output_Fm_IT_wb_fact_max";
	    m_data=.data.gp[1][1].data[113]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[114] {
	    name="V4_Fm_V1_wb_fact_hog_avg";
	    m_data=.data.gp[1][1].data[114]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[115] {
	    name="V4_Fm_IT_wb_fact_hog_avg";
	    m_data=.data.gp[1][1].data[115]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[116] {
	    name="IT_Fm_V4_wb_fact_hog_avg";
	    m_data=.data.gp[1][1].data[116]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[117] {
	    name="IT_Fm_Output_wb_fact_hog_avg";
	    m_data=.data.gp[1][1].data[117]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[118] {
	    name="Output_Fm_IT_wb_fact_hog_avg";
	    m_data=.data.gp[1][1].data[118]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[119] {
	    name="V4_Fm_V1_wb_fact_hog_max";
	    m_data=.data.gp[1][1].data[119]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[120] {
	    name="V4_Fm_IT_wb_fact_hog_max";
	    m_data=.data.gp[1][1].data[120]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[121] {
	    name="IT_Fm_V4_wb_fact_hog_max";
	    m_data=.data.gp[1][1].data[121]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[122] {
	    name="IT_Fm_Output_wb_fact_hog_max";
	    m_data=.data.gp[1][1].data[122]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[123] {
	    name="Output_Fm_IT_wb_fact_hog_max";
	    m_data=.data.gp[1][1].data[123]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[124] {
	    name="V4_Fm_V1_wb_fact_pre_hog_avg";
	    m_data=.data.gp[1][1].data[124]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0697835: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[125] {
	    name="V4_Fm_IT_wb_fact_pre_hog_avg";
	    m_data=.data.gp[1][1].data[125]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[126] {
	    name="IT_Fm_V4_wb_fact_pre_hog_avg";
	    m_data=.data.gp[1][1].data[126]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[127] {
	    name="IT_Fm_Output_wb_fact_pre_hog_avg";
	    m_data=.data.gp[1][1].data[127]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[128] {
	    name="Output_Fm_IT_wb_fact_pre_hog_avg";
	    m_data=.data.gp[1][1].data[128]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[129] {
	    name="V4_Fm_V1_wb_fact_pre_hog_max";
	    m_data=.data.gp[1][1].data[129]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0697835: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[130] {
	    name="V4_Fm_IT_wb_fact_pre_hog_max";
	    m_data=.data.gp[1][1].data[130]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[131] {
	    name="IT_Fm_V4_wb_fact_pre_hog_max";
	    m_data=.data.gp[1][1].data[131]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[132] {
	    name="IT_Fm_Output_wb_fact_pre_hog_max";
	    m_data=.data.gp[1][1].data[132]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[133] {
	    name="Output_Fm_IT_wb_fact_pre_hog_max";
	    m_data=.data.gp[1][1].data[133]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=49: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=1;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.03;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=49: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   col_name_good="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=83;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="pct_err";
	    col_name_good="pct_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.99: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_cos_err";
	    col_name_good="avg_cos_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.2052118: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_cos_diff";
	    col_name_good="V4_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_cos_diff";
	    col_name_good="IT_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="V4_hog_pct";
	    col_name_good="V4_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="V4_dead_pct";
	    col_name_good="V4_dead_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_pre_hog_pct";
	    col_name_good="V4_pre_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="IT_hog_pct";
	    col_name_good="IT_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_pre_hog_pct";
	    col_name_good="IT_pre_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="IT_dead_pct";
	    col_name_good="IT_dead_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.05: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_netmax";
	    col_name_good="V4_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_netmax";
	    col_name_good="IT_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_dead_pct";
	    col_name_good="V4_dead_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_net_sd";
	    col_name_good="IT_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.235614: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_net_sd";
	    col_name_good="V4_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.78938: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V1_avg_act";
	    col_name_good="V1_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_17";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_act";
	    col_name_good="V4_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_act";
	    col_name_good="IT_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_19";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_netrel";
	    col_name_good="IT_Fm_V4_netrel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_20";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_avg_act_diff";
	    col_name_good="V4_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=-0.001: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_21";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_avg_act_diff";
	    col_name_good="IT_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=-0.001: fix_max=1: max=0.001: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V1_avg_cos_diff";
	    col_name_good="V1_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.99588: fix_max=0: max=0.996752: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V1_avg_trial_cos_diff";
	    col_name_good="V1_avg_trial_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.168644: fix_max=0: max=0.226965: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V1_avg_avg_act_diff";
	    col_name_good="V1_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-3.20231e-8: fix_max=0: max=9.50906e-9: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_avg_avg";
	    col_name_good="V4_Fm_V1_wb_avg_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.585192: fix_max=0: max=0.589205: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_avg_avg";
	    col_name_good="V4_Fm_IT_wb_avg_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.641239: fix_max=0: max=0.645606: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_wb_avg_avg";
	    col_name_good="IT_Fm_V4_wb_avg_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.618771: fix_max=0: max=0.639507: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_wb_avg_avg";
	    col_name_good="IT_Fm_Output_wb_avg_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.628106: fix_max=0: max=0.674068: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_avg_max";
	    col_name_good="V4_Fm_V1_wb_avg_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_avg_max";
	    col_name_good="V4_Fm_IT_wb_avg_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_wb_avg_max";
	    col_name_good="IT_Fm_V4_wb_avg_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_wb_avg_max";
	    col_name_good="IT_Fm_Output_wb_avg_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[32] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_33";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_avg_hog_avg";
	    col_name_good="V4_Fm_V1_wb_avg_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[33] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_34";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_avg_hog_avg";
	    col_name_good="V4_Fm_IT_wb_avg_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[34] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_35";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_avg_pre_hog_avg";
	    col_name_good="V4_Fm_V1_wb_avg_pre_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[35] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_36";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_avg_pre_hog_max";
	    col_name_good="V4_Fm_V1_wb_avg_pre_hog_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.254808: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[36] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_37";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_avg";
	    col_name_good="V4_Fm_V1_wb_fact_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.0258218: fix_max=0: max=0.0742258: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[37] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_38";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_fact_avg";
	    col_name_good="V4_Fm_IT_wb_fact_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.329514: fix_max=0: max=0.534885: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[38] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_39";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_wb_fact_avg";
	    col_name_good="IT_Fm_V4_wb_fact_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.0120109: fix_max=0: max=0.47353: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[39] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_40";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_wb_fact_avg";
	    col_name_good="IT_Fm_Output_wb_fact_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.228655: fix_max=0: max=0.375095: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[40] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_41";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_hog_avg";
	    col_name_good="V4_Fm_V1_wb_fact_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[41] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_42";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_fact_hog_avg";
	    col_name_good="V4_Fm_IT_wb_fact_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[42] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_43";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_hog_max";
	    col_name_good="V4_Fm_V1_wb_fact_hog_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[43] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_44";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_fact_hog_max";
	    col_name_good="V4_Fm_IT_wb_fact_hog_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[44] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_45";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_pre_hog_avg";
	    col_name_good="V4_Fm_V1_wb_fact_pre_hog_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0697835: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[45] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_46";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_pre_hog_max";
	    col_name_good="V4_Fm_V1_wb_fact_pre_hog_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.0697835: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[46] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_47";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_wb_fact_max";
	    col_name_good="V4_Fm_V1_wb_fact_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.197663: fix_max=0: max=0.358844: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[47] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_48";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_wb_fact_max";
	    col_name_good="V4_Fm_IT_wb_fact_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.72674: fix_max=0: max=0.77738: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[48] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_49";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_wb_fact_max";
	    col_name_good="IT_Fm_V4_wb_fact_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.0653348: fix_max=0: max=0.524836: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[49] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_50";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_wb_fact_max";
	    col_name_good="IT_Fm_Output_wb_fact_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.605582: fix_max=0: max=0.76349: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[50] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_51";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_err_max_avg";
	    col_name_good="V4_Fm_V1_err_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.121538: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[51] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_52";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_err_max_avg";
	    col_name_good="V4_Fm_IT_err_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.158655: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[52] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_53";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_err_max_avg";
	    col_name_good="IT_Fm_V4_err_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.175861: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[53] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_54";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_err_max_avg";
	    col_name_good="IT_Fm_Output_err_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0942419: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[54] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_55";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_Fm_IT_err_max_avg";
	    col_name_good="Output_Fm_IT_err_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0954202: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[55] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_56";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_bcm_max_avg";
	    col_name_good="V4_Fm_V1_bcm_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0796431: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[56] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_57";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_bcm_max_avg";
	    col_name_good="V4_Fm_IT_bcm_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0225621: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[57] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_58";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_bcm_max_avg";
	    col_name_good="IT_Fm_V4_bcm_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.068687: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[58] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_59";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_bcm_max_avg";
	    col_name_good="IT_Fm_Output_bcm_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0549271: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[59] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_60";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_Fm_IT_bcm_max_avg";
	    col_name_good="Output_Fm_IT_bcm_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[60] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_61";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_dwt_max_avg";
	    col_name_good="V4_Fm_V1_dwt_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.129046: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[61] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_62";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_dwt_max_avg";
	    col_name_good="V4_Fm_IT_dwt_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.176767: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[62] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_63";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_dwt_max_avg";
	    col_name_good="IT_Fm_Output_dwt_max_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0964248: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[63] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_64";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_l_avg";
	    col_name_good="V4_avg_l_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.423141: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[64] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_65";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_l_avg";
	    col_name_good="IT_avg_l_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.55465: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[65] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_66";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_l_max";
	    col_name_good="V4_avg_l_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=2.32191: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[66] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_67";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_l_max";
	    col_name_good="IT_avg_l_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1.6529: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[67] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_68";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_l_lrn_avg";
	    col_name_good="V4_avg_l_lrn_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0013203: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[68] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_69";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_l_lrn_avg";
	    col_name_good="IT_avg_l_lrn_avg";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0099485: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[69] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_70";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_l_lrn_max";
	    col_name_good="V4_avg_l_lrn_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.01: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[70] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_71";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_l_lrn_max";
	    col_name_good="IT_avg_l_lrn_max";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.05: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[71] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_72";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_cos_diff_avg_lrn";
	    col_name_good="V4_cos_diff_avg_lrn";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0308509: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[72] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_73";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_cos_diff_avg_lrn";
	    col_name_good="IT_cos_diff_avg_lrn";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.389301: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[73] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_74";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_act";
	    col_name_good="V4_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0803364: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[74] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_75";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_act";
	    col_name_good="IT_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.131095: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[75] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_76";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="V4_mod_avg_l_lrn";
	    col_name_good="V4_mod_avg_l_lrn";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.01: fix_max=0: max=0.02985889: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[76] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_77";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_mod_avg_l_lrn";
	    col_name_good="IT_mod_avg_l_lrn";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.5: fix_max=0: max=0.885043: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[77] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_78";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[78] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_79";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[79] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_80";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[80] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_81";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[81] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_82";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[82] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_plot_83";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_17";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_19";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_20";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_21";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[32] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_33";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[33] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_34";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[34] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_35";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[35] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_36";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[36] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_37";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[37] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_38";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[38] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_39";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[39] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_40";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[40] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_41";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[41] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_42";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[42] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_43";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[43] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_44";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[44] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_45";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[45] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_46";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[46] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_47";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[47] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_48";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[48] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_49";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[49] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_50";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[50] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_51";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[51] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_52";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[52] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_53";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[53] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_54";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[54] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_55";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[55] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_56";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[56] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_57";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[57] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_58";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[58] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_59";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[59] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_60";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[60] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_61";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[61] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_62";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[62] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_63";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[63] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_64";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[64] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_65";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[65] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_66";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[66] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_67";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[67] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_68";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[68] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_69";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[69] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_70";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[70] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_71";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[71] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_72";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[72] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_73";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[73] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_74";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[74] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_75";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[75] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_76";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[76] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_77";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[77] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_78";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[78] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_79";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[79] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_80";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[80] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_81";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[81] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_82";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[82] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_EpochOutputData_root_view_children_0_err_83";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.4815: y=0.6070001: z=1.893373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.905872;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[3] {
       name="TestErrorData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0";
	  m_data=$.data.gp[2][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="trial_name_group";
	    m_data=.data.gp[2][0].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="N";
	    m_data=.data.gp[2][0].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="sse_count";
	    m_data=.data.gp[2][0].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="pct_err";
	    m_data=.data.gp[2][0].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=19: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="sse_n";
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=-1: fix_max=1: max=20: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=17: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=1;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="pct_err";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="projects_LeabraProject_0_viewers_DefaultProjectBrowser_frames_DefaultViewer_frames_TestErrorData_root_view_children_0_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.427578: y=0.445: z=1.62471: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.63721;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[4] {
       name="ActRFData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GridTableView;
	 el_def=0;
	 GridTableView @[0] {
	  name="ActRFData_Grid";
	  m_data=$.programs.gp[1][7].objs[1]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="V1";
	    m_data=.programs.gp[1][7].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=2.823111e+23;
	    scale_max=2.7953e+20;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="V4";
	    m_data=.programs.gp[1][7].objs[1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=0;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="IT";
	    m_data=.programs.gp[1][7].objs[1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=9.183409e-41;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Output";
	    m_data=.programs.gp[1][7].objs[1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=9.183409e-41;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Image";
	    m_data=.programs.gp[1][7].objs[1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    scale_min=1.401298e-44;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=5;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5175: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[5] {
       name="V1_GridV1Stencils";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  name="V1_GridV1Stencils_Grid";
	  m_data=.data.gp[2][2]$$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.data.gp[2][2].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=24;
	    scale_on=1;
	    scale_min=1.401298e-45;
	    scale_max=1.184696e-38;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Stencil";
	    m_data=.data.gp[2][2].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    scale_min=9.183409e-41;
	    scale_max=0;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=4;
	  view_range {min=0: max=3: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=1: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  scale_per_column=0;
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=4;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       fix_name=0;
       bg_color {r=0.745: g=0.745: b=0.745: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.52625: y=0.4495: z=1.447053: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.444553;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[6] {
       name="AllData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="AllData_Graph";
	  m_data=$.programs[10].objs[1]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.programs[10].objs[1].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.programs[10].objs[1].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.programs[10].objs[1].data[2]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1.00867: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.programs[10].objs[1].data[3]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="pct_cor";
	    m_data=.programs[10].objs[1].data[4]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.05: fix_max=0: max=0.99: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="pct_err";
	    m_data=.programs[10].objs[1].data[5]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.01: fix_max=0: max=0.95: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="avg_norm_err";
	    m_data=.programs[10].objs[1].data[6]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.01: fix_max=0: max=0.535: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="avg_cos_err";
	    m_data=.programs[10].objs[1].data[7]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.152392: fix_max=0: max=0.99: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="avg_ext_rew";
	    m_data=.programs[10].objs[1].data[8]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="avg_cycles";
	    m_data=.programs[10].objs[1].data[9]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=15.12: fix_max=0: max=68.9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="epoch_time_tot";
	    m_data=.programs[10].objs[1].data[10]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=3.76: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="epoch_time_usr";
	    m_data=.programs[10].objs[1].data[11]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=11.49: fix_max=0: max=13.09: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="wt_sync_time_tot";
	    m_data=.programs[10].objs[1].data[12]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1.00191: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[13] {
	    name="Output_lay_avg_sse";
	    m_data=.programs[10].objs[1].data[13]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=95: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[14] {
	    name="Output_lay_cnt_err";
	    m_data=.programs[10].objs[1].data[14]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=98: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[15] {
	    name="Output_lay_pct_cor";
	    m_data=.programs[10].objs[1].data[15]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[16] {
	    name="Output_lay_pct_err";
	    m_data=.programs[10].objs[1].data[16]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[17] {
	    name="Output_lay_avg_norm_err";
	    m_data=.programs[10].objs[1].data[17]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[18] {
	    name="Output_lay_avg_cos_err";
	    m_data=.programs[10].objs[1].data[18]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[19] {
	    name="net_avg_cos_diff";
	    m_data=.programs[10].objs[1].data[19]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[20] {
	    name="net_avg_trial_cos_diff";
	    m_data=.programs[10].objs[1].data[20]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[21] {
	    name="net_avg_avg_act_diff";
	    m_data=.programs[10].objs[1].data[21]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-8.5099e-5: fix_max=0: max=0.00232143: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[22] {
	    name="V4_avg_cos_diff";
	    m_data=.programs[10].objs[1].data[22]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0.8: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[23] {
	    name="IT_avg_cos_diff";
	    m_data=.programs[10].objs[1].data[23]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0.8: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[24] {
	    name="Output_avg_cos_diff";
	    m_data=.programs[10].objs[1].data[24]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[25] {
	    name="V4_avg_trial_cos_diff";
	    m_data=.programs[10].objs[1].data[25]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[26] {
	    name="IT_avg_trial_cos_diff";
	    m_data=.programs[10].objs[1].data[26]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[27] {
	    name="Output_avg_trial_cos_diff";
	    m_data=.programs[10].objs[1].data[27]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[28] {
	    name="V4_avg_avg_act_diff";
	    m_data=.programs[10].objs[1].data[28]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[29] {
	    name="IT_avg_avg_act_diff";
	    m_data=.programs[10].objs[1].data[29]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[30] {
	    name="Output_avg_avg_act_diff";
	    m_data=.programs[10].objs[1].data[30]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[31] {
	    name="V4_avg_net_sd";
	    m_data=.programs[10].objs[1].data[31]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[32] {
	    name="IT_avg_net_sd";
	    m_data=.programs[10].objs[1].data[32]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[33] {
	    name="Output_avg_net_sd";
	    m_data=.programs[10].objs[1].data[33]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0236735: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[34] {
	    name="V4_hog_pct";
	    m_data=.programs[10].objs[1].data[34]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0204082: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[35] {
	    name="IT_hog_pct";
	    m_data=.programs[10].objs[1].data[35]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[36] {
	    name="Output_hog_pct";
	    m_data=.programs[10].objs[1].data[36]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.263673: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[37] {
	    name="V4_dead_pct";
	    m_data=.programs[10].objs[1].data[37]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.263673: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[38] {
	    name="IT_dead_pct";
	    m_data=.programs[10].objs[1].data[38]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[39] {
	    name="Output_dead_pct";
	    m_data=.programs[10].objs[1].data[39]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[40] {
	    name="V4_netmax";
	    m_data=.programs[10].objs[1].data[40]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[41] {
	    name="IT_netmax";
	    m_data=.programs[10].objs[1].data[41]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[42] {
	    name="Output_netmax";
	    m_data=.programs[10].objs[1].data[42]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[43] {
	    name="V1_avg_act";
	    m_data=.programs[10].objs[1].data[43]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[44] {
	    name="V4_avg_act";
	    m_data=.programs[10].objs[1].data[44]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[45] {
	    name="IT_avg_act";
	    m_data=.programs[10].objs[1].data[45]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[46] {
	    name="Output_avg_act";
	    m_data=.programs[10].objs[1].data[46]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[47] {
	    name="Image_avg_act";
	    m_data=.programs[10].objs[1].data[47]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[48] {
	    name="V4_Fm_V1_netrel";
	    m_data=.programs[10].objs[1].data[48]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[49] {
	    name="V4_Fm_IT_netrel";
	    m_data=.programs[10].objs[1].data[49]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[50] {
	    name="IT_Fm_V4_netrel";
	    m_data=.programs[10].objs[1].data[50]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[51] {
	    name="IT_Fm_Output_netrel";
	    m_data=.programs[10].objs[1].data[51]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[52] {
	    name="Output_Fm_IT_netrel";
	    m_data=.programs[10].objs[1].data[52]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[53] {
	    name="tag";
	    m_data=.programs[10].objs[1].data[53]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[54] {
	    name="tag_svn";
	    m_data=.programs[10].objs[1].data[54]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[55] {
	    name="tag_job";
	    m_data=.programs[10].objs[1].data[55]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[56] {
	    name="notes";
	    m_data=.programs[10].objs[1].data[56]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[57] {
	    name="label";
	    m_data=.programs[10].objs[1].data[57]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[58] {
	    name="label_notag";
	    m_data=.programs[10].objs[1].data[58]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[59] {
	    name="params";
	    m_data=.programs[10].objs[1].data[59]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[60] {
	    name="lrate";
	    m_data=.programs[10].objs[1].data[60]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[61] {
	    name="top_down_rel";
	    m_data=.programs[10].objs[1].data[61]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[62] {
	    name="top_down_learn";
	    m_data=.programs[10].objs[1].data[62]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[63] {
	    name="top_down_lrate";
	    m_data=.programs[10].objs[1].data[63]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[64] {
	    name="out_it_rel";
	    m_data=.programs[10].objs[1].data[64]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[65] {
	    name="it_v4_rel";
	    m_data=.programs[10].objs[1].data[65]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[66] {
	    name="lay_inhib_fb";
	    m_data=.programs[10].objs[1].data[66]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[67] {
	    name="lay_inhib_gi";
	    m_data=.programs[10].objs[1].data[67]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[68] {
	    name="output_lay_inhib_gi";
	    m_data=.programs[10].objs[1].data[68]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[69] {
	    name="output_lay_inhib_fb";
	    m_data=.programs[10].objs[1].data[69]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[70] {
	    name="g_bar_l";
	    m_data=.programs[10].objs[1].data[70]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[71] {
	    name="inhib_misc_self_fb";
	    m_data=.programs[10].objs[1].data[71]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[72] {
	    name="run";
	    m_data=.programs[10].objs[1].data[72]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=199: };
	  page_rows=243635648;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=1;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   col_name_good="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=49: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="epoch";
	   col_name_good="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=32;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="AllData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="avg_sse";
	    col_name_good="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1.00867: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="AllData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="cnt_err";
	    col_name_good="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="AllData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="epoch_time_tot";
	    col_name_good="epoch_time_tot";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=3.76: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="AllData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_lay_cnt_err";
	    col_name_good="Output_lay_cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=98: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="AllData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_lay_pct_err";
	    col_name_good="Output_lay_pct_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="AllData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_lay_avg_norm_err";
	    col_name_good="Output_lay_avg_norm_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="AllData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_lay_avg_cos_err";
	    col_name_good="Output_lay_avg_cos_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="AllData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="net_avg_cos_diff";
	    col_name_good="net_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="AllData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="net_avg_trial_cos_diff";
	    col_name_good="net_avg_trial_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="AllData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="net_avg_avg_act_diff";
	    col_name_good="net_avg_avg_act_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-8.5099e-5: fix_max=0: max=0.00232143: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="AllData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_cos_diff";
	    col_name_good="V4_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0.8: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="AllData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_cos_diff";
	    col_name_good="IT_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0.8: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="AllData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_avg_cos_diff";
	    col_name_good="Output_avg_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="AllData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_trial_cos_diff";
	    col_name_good="V4_avg_trial_cos_diff";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="AllData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_net_sd";
	    col_name_good="V4_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="AllData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_net_sd";
	    col_name_good="IT_avg_net_sd";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="AllData_Graph_plot_17";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_hog_pct";
	    col_name_good="V4_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.0204082: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="AllData_Graph_plot_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_hog_pct";
	    col_name_good="IT_hog_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="AllData_Graph_plot_19";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_dead_pct";
	    col_name_good="V4_dead_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.263673: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="AllData_Graph_plot_20";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_dead_pct";
	    col_name_good="IT_dead_pct";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="AllData_Graph_plot_21";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_netmax";
	    col_name_good="V4_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="AllData_Graph_plot_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_netmax";
	    col_name_good="IT_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="AllData_Graph_plot_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="Output_netmax";
	    col_name_good="Output_netmax";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1.1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="AllData_Graph_plot_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V1_avg_act";
	    col_name_good="V1_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="AllData_Graph_plot_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_avg_act";
	    col_name_good="V4_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="navy": r=0: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="AllData_Graph_plot_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_avg_act";
	    col_name_good="IT_avg_act";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="cyan": r=0: g=1: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="AllData_Graph_plot_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_V1_netrel";
	    col_name_good="V4_Fm_V1_netrel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="magenta": r=1: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="AllData_Graph_plot_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="V4_Fm_IT_netrel";
	    col_name_good="V4_Fm_IT_netrel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="tan": r=0.8235294: g=0.7058824: b=0.5490196: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="AllData_Graph_plot_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_V4_netrel";
	    col_name_good="IT_Fm_V4_netrel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="salmon": r=0.9803922: g=0.5019608: b=0.4470588: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="AllData_Graph_plot_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="IT_Fm_Output_netrel";
	    col_name_good="IT_Fm_Output_netrel";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="yellow4": r=0.5450981: g=0.5450981: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="AllData_Graph_plot_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="SkyBlue": r=0.5294118: g=0.8078431: b=0.9215686: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="AllData_Graph_plot_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="pink": r=1: g=0.7529412: b=0.7960784: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="AllData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="AllData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="AllData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="AllData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="AllData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="AllData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="AllData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="AllData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="AllData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="AllData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="AllData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="AllData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="AllData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="AllData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="AllData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="AllData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[16] {
	    name="AllData_Graph_err_17";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[17] {
	    name="AllData_Graph_err_18";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[18] {
	    name="AllData_Graph_err_19";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[19] {
	    name="AllData_Graph_err_20";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[20] {
	    name="AllData_Graph_err_21";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[21] {
	    name="AllData_Graph_err_22";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[22] {
	    name="AllData_Graph_err_23";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[23] {
	    name="AllData_Graph_err_24";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[24] {
	    name="AllData_Graph_err_25";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[25] {
	    name="AllData_Graph_err_26";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[26] {
	    name="AllData_Graph_err_27";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[27] {
	    name="AllData_Graph_err_28";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[28] {
	    name="AllData_Graph_err_29";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[29] {
	    name="AllData_Graph_err_30";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[30] {
	    name="AllData_Graph_err_31";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[31] {
	    name="AllData_Graph_err_32";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=BY_GROUP;
	  color_gp_use_y=1;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="notes";
	   col_name_good="notes";
	   is_string=1;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.425: y=0.4129609: z=2.168961: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.158961;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[7] {
       name="WeightsHist";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GraphTableView @[0] {
	  name="WeightsHist_Graph";
	  m_data=$.programs[11].objs[0]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="wt_val";
	    m_data=.programs[11].objs[0].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.05: fix_max=0: max=0.95: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="count";
	    m_data=.programs[11].objs[0].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=2503: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="wt_val";
	   col_name_good="wt_val";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="WeightsHist_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="count";
	    col_name_good="count";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="WeightsHist_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="WeightsHist_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="WeightsHist_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="WeightsHist_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="WeightsHist_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="WeightsHist_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="WeightsHist_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="WeightsHist_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="WeightsHist_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="WeightsHist_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="WeightsHist_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	 GraphTableView @[1] {
	  name="WeightsHistHogs_Graph";
	  m_data=$.programs[12].objs[0]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.001236126: y=1.347977: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="wt_val";
	    m_data=.programs[12].objs[0].data[0]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.05: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="count";
	    m_data=.programs[12].objs[0].data[1]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=33440: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.001236126: y=1.347977: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=20: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="wt_val";
	   col_name_good="wt_val";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0.05: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=6;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="WeightsHistHogs_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="count";
	    col_name_good="count";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=4345: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="WeightsHistHogs_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="WeightsHistHogs_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="WeightsHistHogs_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="ForestGreen": r=0.1333333: g=0.5450981: b=0.1333333: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="WeightsHistHogs_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.5019608: g=0: b=0.5019608: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="WeightsHistHogs_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="WeightsHistHogs_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="WeightsHistHogs_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="WeightsHistHogs_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="WeightsHistHogs_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="WeightsHistHogs_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="WeightsHistHogs_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=14;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=14;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       fix_name=0;
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.3398147: y=1.236: z=3.514032: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.504032;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.008191925: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.02708058: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.9391457: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=0: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="svn rev: 415544 current default params";
 tree_state{ .;.docs;.ctrl_panels;.active_params;.data;.data.gp[0];.data.gp[1];.data.gp[2];.data.gp[3];.programs;.programs.gp[0];.programs.gp[1];.networks;.networks[0];.networks[0].spec_tables;.networks[0].specs;.networks[0].specs[0];.networks[0].specs[1];.networks[0].specs[2];.networks[0].specs[2].children[0];.networks[0].specs[2].children[4];.networks[0].specs.gp[0];.networks[0].specs.gp[0][2];.networks[0].param_seqs;.networks[0].layers;.networks[0].weights; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   name="ObjrecNet";
   desc="object recognition network";
   flags=NETIN_PER_PRJN|BUILD_INIT_WTS;
   train_mode=TRAIN;
   wt_update=SMALL_BATCH;
   small_batch_n=8;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   n_units=4946;
   n_cons=641000;
   max_prjns=2;
   specs {
    name="specs";
    el_typ=LeabraUnitSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="StdUnitSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ opt_thresh;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
      LeabraUnitSpec @[0] {
       name="V1Units";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ bias_spec;da_mod;kna_misc;kna_adapt;act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[2].children[0].children[0]$$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=1: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=3: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.3333333: };
       act_avg {ss_tau=4: s_tau=2: m_tau=10: ru_lrn_m=0: su_lrn_m=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: ru_lrn_s=1: su_lrn_s=0.9: };
       avg_l {init=0.4: gain=4: min=0.2: tau=10: lay_act_thr=0.01: dt=0.1: min_lay_avg=0.0375: };
       avg_l_lrn {lrn_max=0.2: lrn_min=0.0001: avg_l_max=2: avg_l_min=0.2: lrn_fact=0.1110556: };
       avg_l_mod {mod=LAY_ERR_MOD: lay_mod_min=0.01: net_mod_min=0.5: net_err_start=0.5: net_err_end=1: };
       g_bar {e=1: l=0.1: i=1: k=0: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=1: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=0: invert_nd=0: max_gc=0.2: max_adapt=0: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.1: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0: da_pos_gain=0: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      };
      LeabraUnitSpec @[1] {
       name="V4Units";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ act_reg;act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[2].children[0]$$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=1: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=3: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.3333333: };
       act_avg {ss_tau=4: s_tau=2: m_tau=10: ru_lrn_m=0: su_lrn_m=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: ru_lrn_s=1: su_lrn_s=0.9: };
       avg_l {init=0.4: gain=4: min=0.2: tau=10: lay_act_thr=0.01: dt=0.1: min_lay_avg=0.0375: };
       avg_l_lrn {lrn_max=0.2: lrn_min=0.0001: avg_l_max=2: avg_l_min=0.2: lrn_fact=0.1110556: };
       avg_l_mod {mod=LAY_ERR_MOD: lay_mod_min=0.01: net_mod_min=0.5: net_err_start=0.5: net_err_end=1: };
       g_bar {e=1: l=0.1: i=1: k=0: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=1: invert_nd=0: max_gc=0.2: max_adapt=0: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.1: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0: da_pos_gain=0: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      };
      LeabraUnitSpec @[2] {
       name="ITUnits";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ act_reg;avg_l_lrn;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs[2].children[0]$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=1: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=3: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.3333333: };
       act_avg {ss_tau=4: s_tau=2: m_tau=10: ru_lrn_m=0: su_lrn_m=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: ru_lrn_s=1: su_lrn_s=0.9: };
       avg_l {init=0.4: gain=4: min=0.2: tau=10: lay_act_thr=0.01: dt=0.1: min_lay_avg=0.0375: };
       avg_l_lrn {lrn_max=0.05: lrn_min=0.0001: avg_l_max=2: avg_l_min=0.2: lrn_fact=0.02772222: };
       avg_l_mod {mod=LAY_ERR_MOD: lay_mod_min=0.01: net_mod_min=0.5: net_err_start=0.5: net_err_end=1: };
       g_bar {e=1: l=0.1: i=1: k=0: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=1: invert_nd=0: max_gc=0.2: max_adapt=0: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.1: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0: da_pos_gain=0: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      };
      LeabraUnitSpec @[3] {
       name="OutputUnits";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ bias_spec;       };
       saved{ g_bar={e=1: l=0.1: i=1: k=0: };kna_adapt={on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };kna_misc={clamp=0: invert_nd=0: max_gc=0.2: max_adapt=0.4: no_targ=1: };       };
       children {
	name="children";
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[2].children[0].children[1]$$: };
       act_range {min=0: max=1: range=1: scale=1: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
       act_misc {rec_nd=1: avg_nd=1: dif_avg=1: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
       spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
       spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
       opt_thresh {send=0.1: delta=0.005: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=2: range=2: scale=0.5: };
       init {v_m=0.4: act=0: netin=0: };
       dt {integ=1: vm_tau=3.3: net_tau=3: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.3333333: };
       act_avg {ss_tau=4: s_tau=2: m_tau=10: ru_lrn_m=0: su_lrn_m=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: ru_lrn_s=1: su_lrn_s=0.9: };
       avg_l {init=0.4: gain=4: min=0.2: tau=10: lay_act_thr=0.01: dt=0.1: min_lay_avg=0.0375: };
       avg_l_lrn {lrn_max=0.2: lrn_min=0.0001: avg_l_max=2: avg_l_min=0.2: lrn_fact=0.1110556: };
       avg_l_mod {mod=LAY_ERR_MOD: lay_mod_min=0.01: net_mod_min=0.5: net_err_start=0.5: net_err_end=1: };
       g_bar {e=1: l=0.1: i=1: k=0: };
       e_rev {e=1: l=0.3: i=0.25: k=0.1: };
       kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
       kna_misc {clamp=1: invert_nd=0: max_gc=0.2: max_adapt=0: no_targ=1: };
       stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.1: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
       syn_delay {on=0: delay=4: };
       deep_raw_qtr=Q4;
       deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
       trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
       da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0: da_pos_gain=0: };
       noise_type {type=NO_NOISE: trial_fixed=1: };
       noise {name="noise": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      };
     };
     bias_spec {type=LeabraBiasSpec: spec=$.networks[0].specs[2].children[0]$: };
     act_range {min=0: max=1: range=1: scale=1: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=100: nvar=0.005: avg_correct=1: vm_act_thr=0.01: sig_mult=0.33: sig_mult_pow=0.8: sig_gain=3: interp_range=0.01: gain_cor_range=10: gain_cor=0.1: sig_gain_nvar=600: sig_mult_eff=0.1895352: sig_val_at_0=0.09476762: interp_val=0.3843991: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=1: net_gain=1: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=9: window=3: act_max_hz=200: int_tau=5: int_dt=0.2: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=3: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=3: vm_cyc=1: fast_cyc=0: vm_dt=0.3030303: vm_dt_cyc=0.3030303: net_dt=0.3333333: };
     act_avg {ss_tau=4: s_tau=2: m_tau=10: ru_lrn_m=0: su_lrn_m=0.1: ss_dt=0.25: s_dt=0.5: m_dt=0.1: ru_lrn_s=1: su_lrn_s=0.9: };
     avg_l {init=0.4: gain=4: min=0.2: tau=10: lay_act_thr=0.01: dt=0.1: min_lay_avg=0.0375: };
     avg_l_lrn {lrn_max=0.2: lrn_min=0.0001: avg_l_max=2: avg_l_min=0.2: lrn_fact=0.1110556: };
     avg_l_mod {mod=LAY_ERR_MOD: lay_mod_min=0.01: net_mod_min=0.5: net_err_start=0.5: net_err_end=1: };
     g_bar {e=1: l=0.1: i=1: k=0: };
     e_rev {e=1: l=0.3: i=0.25: k=0.1: };
     kna_adapt {on=0: rate_rise=0.8: f_on=1: f_rise=0.05: f_max=0.1: f_tau=50: m_on=1: m_rise=0.02: m_max=0.1: m_tau=200: s_on=1: s_rise=0.001: s_max=1: s_tau=1000: f_dt=0.02: m_dt=0.005: s_dt=0.001: };
     kna_misc {clamp=1: invert_nd=0: max_gc=0.2: max_adapt=0: no_targ=1: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.1: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.2: raw_thr_abs=0.2: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: clamp_net=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: mod_gain=0: minus=0: plus=0.1: da_neg_gain=0: da_pos_gain=0: };
     noise_type {type=NO_NOISE: trial_fixed=1: };
     noise {name="noise": type=UNIFORM: mean=0.5: var=0.5: par=1: };
    };
    LeabraLayerSpec @[1] {
     name="LayerSpec";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="V1";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;gp_kwta;compute_i;i_kwta_pt;feat_inhib;feat_kwta;inhib_group;avg_act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[1] {
       name="V4";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;gp_kwta;inhib_group;abs_net_adapt;unit_gp_inhib;lay_inhib;lrate;avg_act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
       unit_gp_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.05: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[2] {
       name="IT";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;gp_kwta;inhib_group;abs_net_adapt;       };
       saved{ lay_lrate=0.5;       };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
      LeabraLayerSpec @[3] {
       name="Output";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ kwta;inhib_group;compute_i;i_kwta_pt;abs_net_adapt;lay_inhib;avg_act;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {on=1: gi=2.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
       unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {targ_init=0.05: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
       decay {trial=1: };
       del_inhib {on=0: prv_trl=0: prv_q=0: };
       margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
       lay_lrate=1;
       cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
       lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
      };
     };
     lay_inhib {on=1: gi=1.8: ff=1: fb=1: fb_tau=2.5: max_vs_avg=0: ff0=0.1: fb_dt=0.4: };
     unit_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     lay_gp_inhib {on=0: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.1: fixed=0: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=1: gain=0.5: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {pre_hog_thr=0.2: hog_thr=0.3: dead_thr=0.01: };
    };
    LeabraConSpec @[2] {
     name="MainConSpec";
     is_used=0;
     used_status=CHILD_USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
	LeabraBiasSpec @[0] {
	 name="FixedBias";
	 is_used=1;
	 used_status=USED;
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;lrate;	 };
	 saved{ 	 };
	 children {
	  name="children";
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	 inhib=0;
	 feedback=0;
	 wt_scale {abs=1: rel=1: no_plus_net=0: };
	 learn=0;
	 learn_qtr=Q4;
	 lrate=0;
	 cur_lrate=0;
	 lrs_mult=0.5;
	 use_unlearnable=1;
	 rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
	 xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
	 wt_sig {gain=6: off=1: soft_bound=1: };
	 dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
	 momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
	 wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
	 adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	 slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	 deep {on=0: bg_lrate=1: fg_lrate=0: };
	 margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	 dwt_share {on=0: neigh=8: p_share=0.05: };
	 use_lrate_sched=1;
	 lrate_sched {
	  name="lrate_sched";
	  el_typ=SchedItem;
	  el_def=0;
	  default_val=1;
	  interpolate=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=40;
	   step=-0.0125;
	  };
	  SchedItem @[1] {
	   start_ctr=40;
	   start_val=0.5;
	   duration=1;
	   step=1;
	  };
	 };
	 dwt_thresh=0.1;
	};
	LeabraBiasSpec @[1] {
	 name="OutputBias";
	 is_used=1;
	 used_status=USED;
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	 };
	 saved{ 	 };
	 children {
	  name="children";
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	 inhib=0;
	 feedback=0;
	 wt_scale {abs=1: rel=1: no_plus_net=0: };
	 learn=0;
	 learn_qtr=Q4;
	 lrate=0.02;
	 cur_lrate=0.01;
	 lrs_mult=0.5;
	 use_unlearnable=1;
	 rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
	 xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
	 wt_sig {gain=6: off=1: soft_bound=1: };
	 dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
	 momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
	 wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
	 adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	 slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	 deep {on=0: bg_lrate=1: fg_lrate=0: };
	 margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	 dwt_share {on=0: neigh=8: p_share=0.05: };
	 use_lrate_sched=1;
	 lrate_sched {
	  name="lrate_sched";
	  el_typ=SchedItem;
	  el_def=0;
	  default_val=1;
	  interpolate=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=40;
	   step=-0.0125;
	  };
	  SchedItem @[1] {
	   start_ctr=40;
	   start_val=0.5;
	   duration=1;
	   step=1;
	  };
	 };
	 dwt_thresh=0.1;
	};
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       feedback=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.02;
       lrs_mult=0.5;
       use_unlearnable=1;
       rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
       momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=40;
	 step=-0.0125;
	};
	SchedItem @[1] {
	 start_ctr=40;
	 start_val=0.5;
	 duration=1;
	 step=1;
	};
       };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="IT_Out";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ lrate;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       feedback=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.02;
       lrs_mult=0.5;
       use_unlearnable=1;
       rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
       momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=40;
	 step=-0.0125;
	};
	SchedItem @[1] {
	 start_ctr=40;
	 start_val=0.5;
	 duration=1;
	 step=1;
	};
       };
      };
      LeabraConSpec @[2] {
       name="V1toV4";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ wt_scale;       };
       saved{ lrate=0.04;       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       feedback=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.02;
       lrs_mult=0.5;
       use_unlearnable=1;
       rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
       momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=40;
	 step=-0.0125;
	};
	SchedItem @[1] {
	 start_ctr=40;
	 start_val=0.5;
	 duration=1;
	 step=1;
	};
       };
      };
      LeabraConSpec @[3] {
       name="V4toIT";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ wt_scale;       };
       saved{ lrate=0.04;       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       feedback=0;
       wt_scale {abs=1: rel=1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.02;
       lrs_mult=0.5;
       use_unlearnable=1;
       rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
       momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=40;
	 step=-0.0125;
	};
	SchedItem @[1] {
	 start_ctr=40;
	 start_val=0.5;
	 duration=1;
	 step=1;
	};
       };
      };
      LeabraConSpec @[4] {
       name="TopDown";
       is_used=0;
       used_status=CHILD_USED;
       desc=;
       unique{ wt_scale;dwt_noise;noise;dwt_noise_p0;dwt_share;feedback;       };
       saved{ xcal={m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_gain=1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };rule={rule=EXPT: errule=REV_DELTA: bcmrule=XCAL_CPL: cp_gain=0.8: };       };
       children {
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraConSpec @[0] {
	 name="Out_IT";
	 is_used=1;
	 used_status=USED;
	 desc=;
	 unique{ lrate;	 };
	 saved{ 	 };
	 children {
	  name="children";
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	 inhib=0;
	 feedback=1;
	 wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	 learn=1;
	 learn_qtr=Q4;
	 lrate=0.04;
	 cur_lrate=0.02;
	 lrs_mult=0.5;
	 use_unlearnable=1;
	 rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
	 xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
	 wt_sig {gain=6: off=1: soft_bound=1: };
	 dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
	 momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
	 wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
	 adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	 slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	 deep {on=0: bg_lrate=1: fg_lrate=0: };
	 margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	 dwt_share {on=0: neigh=8: p_share=0.05: };
	 use_lrate_sched=1;
	 lrate_sched {
	  name="lrate_sched";
	  el_typ=SchedItem;
	  el_def=0;
	  default_val=1;
	  interpolate=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=40;
	   step=-0.0125;
	  };
	  SchedItem @[1] {
	   start_ctr=40;
	   start_val=0.5;
	   duration=1;
	   step=1;
	  };
	 };
	};
	LeabraConSpec @[1] {
	 name="IT_V4";
	 is_used=1;
	 used_status=USED;
	 desc=;
	 unique{ 	 };
	 saved{ 	 };
	 children {
	  name="children";
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	 inhib=0;
	 feedback=1;
	 wt_scale {abs=1: rel=0.1: no_plus_net=0: };
	 learn=1;
	 learn_qtr=Q4;
	 lrate=0.04;
	 cur_lrate=0.02;
	 lrs_mult=0.5;
	 use_unlearnable=1;
	 rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
	 xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
	 wt_sig {gain=6: off=1: soft_bound=1: };
	 dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
	 momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
	 wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
	 adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	 slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	 deep {on=0: bg_lrate=1: fg_lrate=0: };
	 margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
	 dwt_share {on=0: neigh=8: p_share=0.05: };
	 use_lrate_sched=1;
	 lrate_sched {
	  name="lrate_sched";
	  el_typ=SchedItem;
	  el_def=0;
	  default_val=1;
	  interpolate=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=40;
	   step=-0.0125;
	  };
	  SchedItem @[1] {
	   start_ctr=40;
	   start_val=0.5;
	   duration=1;
	   step=1;
	  };
	 };
	};
       };
       rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       feedback=1;
       wt_scale {abs=1: rel=0.1: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       cur_lrate=0.04;
       lrs_mult=1;
       use_unlearnable=1;
       rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1: soft_bound=1: };
       dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
       momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
       wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_share {on=0: neigh=8: p_share=0.05: };
       use_lrate_sched=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=40;
	 step=-0.0125;
	};
	SchedItem @[1] {
	 start_ctr=40;
	 start_val=0.5;
	 duration=1;
	 step=1;
	};
       };
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     feedback=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     cur_lrate=0.04;
     lrs_mult=1;
     use_unlearnable=1;
     rule {rule=DELTA_FF_FB: errule=ERR_DELTA_FF_FB: bcmrule=SRS: cp_gain=0.8: };
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=0: d_rev=0.1: d_thr=0.0001: thr_p_min=0.001: lrn_thr=0.01: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1: soft_bound=1: };
     dwt_norm {on=1: level=SEND_CONS: err_only=0: decay_tau=1000: norm_min=0.001: lr_comp=0.15: stats=1: decay_dt=0.001: decay_dt_c=0.999: };
     momentum {on=1: m_tau=10: lr_comp=0.1: m_dt=0.1: m_dt_c=0.9: };
     wt_bal {on=1: avg_thr=0.25: hi_thr=0.4: hi_gain=4: lo_thr=0.4: lo_gain=6: act_thr=0.25: act_gain=0: no_targ=1: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=1: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
     dwt_share {on=0: neigh=8: p_share=0.05: };
     use_lrate_sched=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=40;
       step=-0.0125;
      };
      SchedItem @[1] {
       start_ctr=40;
       start_val=0.5;
       duration=1;
       step=1;
      };
     };
    };
    BaseSpec_Group @.gp[0] {
     name="LeabraPrjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjnSpec_0";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     };
     TiledGpRFPrjnSpec @[1] {
      name="Rf4x4skp2_V1V2";
      is_used=1;
      used_status=USED;
      desc=;
      unique{ reciprocal;      };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=1;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      send_gp_start {x=-1: y=-1: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {on=0: sigma=0.6: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0.4: max=0.6: range=0.2: scale=5: };
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TiledGpRFPrjnSpec @[2] {
      name="RF5x5skp0_V4IT";
      is_used=1;
      used_status=USED;
      desc=;
      unique{       };
      saved{       };
      children {
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
       TiledGpRFPrjnSpec @[0] {
	name="RF5x5skp0recip_V4IT";
	is_used=1;
	used_status=USED;
	desc=;
	unique{ reciprocal;	};
	saved{ 	};
	children {
	 name="children";
	 el_typ=TiledGpRFPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=1;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=1;
	renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
	send_gp_size {x=5: y=5: };
	send_gp_skip {x=0: y=0: };
	send_gp_start {x=0: y=0: };
	wrap=1;
	reciprocal=1;
	p_con=1;
	symmetric=1;
	share_cons=0;
	wts_type=GAUSSIAN;
	full_gauss {on=1: sigma=1.5: wrap_wts=1: ctr_mv=1: };
	gp_gauss {on=1: sigma=1.5: wrap_wts=1: ctr_mv=1: };
	full_send=BY_UNIT;
	full_recv=BY_UNIT;
	full_sig {on=1: gain=0.02: ctr_mv=0.5: };
	gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
	wt_range {min=0.4: max=0.6: range=0.2: scale=5: };
	trg_recv_geom {x=0: y=0: };
	trg_send_geom {x=0: y=0: };
       };
      };
      self_con=0;
      init_wts=1;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=1;
      renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=5: y=5: };
      send_gp_skip {x=0: y=0: };
      send_gp_start {x=0: y=0: };
      wrap=1;
      reciprocal=0;
      p_con=1;
      symmetric=1;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {on=1: sigma=1.5: wrap_wts=1: ctr_mv=1: };
      gp_gauss {on=1: sigma=1.5: wrap_wts=1: ctr_mv=1: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {min=0.4: max=0.6: range=0.2: scale=5: };
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   monitor {
    name="monitor";
    items {
     name="items";
     el_typ=NetMonItem;
     el_def=0;
     ignore_sig=0;
    };
    network=$.networks[0]$;
    data=.networks[0].mon_data$$;
    rmv_orphan_cols=1;
   };
   mon_data {
    name="mon_data";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=58: y=59: z=2: };
    max_disp_size2d {x=94: y=100: };
    LeabraLayer @[0] {
     name="V1";
     n_recv_prjns=0;
     n_send_prjns=1;
     un_geom_x=4;
     un_geom_y=5;
     un_geom_n=20;
     gp_geom_x=10;
     gp_geom_y=10;
     gp_geom_n=100;
     flat_geom_x=40;
     flat_geom_y=50;
     flat_geom_n=2000;
     gp_spc_x=1;
     gp_spc_y=1;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=4: y=5: n_not_xy=0: n=20: };
     unit_groups=1;
     gp_geom {x=10: y=10: n_not_xy=0: n=100: };
     gp_spc {x=1: y=1: };
     flat_geom {x=40: y=50: n_not_xy=0: n=2000: };
     disp_geom {x=49: y=59: n_not_xy=0: n=3000: };
     scaled_disp_geom {x=49: y=59: n_not_xy=0: n=2891: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0].children[0]$$: };
     dist {fm_input=0: fm_output=3: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[1].children[0]$$: };
     adapt_gi=1;
     mod_avg_l_lrn=0;
     acts_m_avg=0.07330187;
     acts_p_avg=0.07330187;
     acts_p_avg_eff=0.07330187;
    };
    LeabraLayer @[1] {
     name="V4";
     n_recv_prjns=2;
     n_send_prjns=1;
     un_geom_x=7;
     un_geom_y=7;
     un_geom_n=49;
     gp_geom_x=5;
     gp_geom_y=5;
     gp_geom_n=25;
     flat_geom_x=35;
     flat_geom_y=35;
     flat_geom_n=1225;
     gp_spc_x=1;
     gp_spc_y=1;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=61: };
     pos2d_abs {x=0: y=61: };
     disp_scale=1;
     un_geom {x=7: y=7: n_not_xy=0: n=49: };
     unit_groups=1;
     gp_geom {x=5: y=5: n_not_xy=0: n=25: };
     gp_spc {x=1: y=1: };
     flat_geom {x=35: y=35: n_not_xy=0: n=1225: };
     disp_geom {x=39: y=39: n_not_xy=0: n=1600: };
     scaled_disp_geom {x=39: y=39: n_not_xy=0: n=1521: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_V1";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[0]$;
       spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][1]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[2]$$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_IT";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[2]$;
       spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][2].children[0]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[4].children[1]$$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[2].projections[0];
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0].children[1]$$: };
     dist {fm_input=1: fm_output=2: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[1].children[1]$$: };
     adapt_gi=1;
     mod_avg_l_lrn=0.01;
     acts_m_avg=0.07728116;
     acts_p_avg=0.07730591;
     acts_p_avg_eff=0.07730591;
    };
    LeabraLayer @[2] {
     name="IT";
     n_recv_prjns=2;
     n_send_prjns=2;
     un_geom_x=10;
     un_geom_y=10;
     un_geom_n=100;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=10;
     flat_geom_y=10;
     flat_geom_n=100;
     gp_spc_x=1;
     gp_spc_y=1;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=41: y=0: z=1: };
     pos_abs {x=41: y=0: z=1: };
     pos2d {x=77: y=31: };
     pos2d_abs {x=77: y=31: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=10: y=10: n_not_xy=0: n=100: };
     disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_disp_geom {x=10: y=10: n_not_xy=0: n=100: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_V4";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[1]$$;
       spec {type=TiledGpRFPrjnSpec: spec=.networks[0].specs.gp[0][2]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[3]$$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[3]$$;
       spec {type=FullPrjnSpec: spec=.networks[0].specs.gp[0][0]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[4].children[0]$$: };
       dir_fixed=0;
       direction=FM_OUTPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[3].projections[0];
      Projection_List @. = [1] = LeabraPrjn .networks[0].layers[1].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0].children[2]$$: };
     dist {fm_input=2: fm_output=1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[1].children[2]$$: };
     adapt_gi=1;
     mod_avg_l_lrn=0.01199245;
     acts_m_avg=0.133047;
     acts_p_avg=0.1337943;
     acts_p_avg_eff=0.1337943;
    };
    LeabraLayer @[3] {
     name="Output";
     n_recv_prjns=1;
     n_send_prjns=1;
     un_geom_x=5;
     un_geom_y=4;
     un_geom_n=20;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=5;
     flat_geom_y=4;
     flat_geom_n=20;
     gp_spc_x=0;
     gp_spc_y=0;
     flags=SAVE_UNIT_NAMES|PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=TARGET;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=53: y=0: z=1: };
     pos_abs {x=53: y=0: z=1: };
     pos2d {x=89: y=31: };
     pos2d_abs {x=89: y=31: };
     disp_scale=1;
     un_geom {x=5: y=4: n_not_xy=0: n=20: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=5: y=4: n_not_xy=0: n=20: };
     disp_geom {x=5: y=4: n_not_xy=0: n=20: };
     scaled_disp_geom {x=5: y=4: n_not_xy=0: n=20: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_IT";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=$.networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.networks[0].specs.gp[0][0]$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[2].children[1]$$: };
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_List @. = [0] = LeabraPrjn .networks[0].layers[2].projections[1];
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0].children[3]$$: };
     dist {fm_input=3: fm_output=0: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     unit_names {
      name="unit_names";
     [5 4] "00";"01";"02";"03";"04";"05";"06";"07";"08";"09";
"10";"11";"12";"13";"14";"15";"16";"17";"18";"19";
     };
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[1].children[3]$$: };
     adapt_gi=1;
     mod_avg_l_lrn=0;
     acts_m_avg=0.04590644;
     acts_p_avg=0.04750019;
     acts_p_avg_eff=0.04750019;
    };
    LeabraLayer @[4] {
     name="Image";
     n_recv_prjns=0;
     n_send_prjns=0;
     un_geom_x=40;
     un_geom_y=40;
     un_geom_n=1600;
     gp_geom_x=1;
     gp_geom_y=1;
     gp_geom_n=1;
     flat_geom_x=40;
     flat_geom_y=40;
     flat_geom_n=1600;
     gp_spc_x=1;
     gp_spc_y=1;
     flags=0;
     layer_type=INPUT;
     desc=;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=41: y=25: z=1: };
     pos_abs {x=41: y=25: z=1: };
     pos2d {x=77: y=43: };
     pos2d_abs {x=77: y=43: };
     disp_scale=0.2;
     un_geom {x=40: y=40: n_not_xy=0: n=1600: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=40: y=40: n_not_xy=0: n=1600: };
     disp_geom {x=40: y=40: n_not_xy=0: n=1600: };
     scaled_disp_geom {x=8: y=8: n_not_xy=0: n=64: };
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     unit_spec {type=LeabraUnitSpec: spec=.networks[0].specs[0]$$: };
     dist {fm_input=0: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[1]$$: };
     adapt_gi=1;
     mod_avg_l_lrn=0;
     acts_m_avg=0.05394999;
     acts_p_avg=0.05394999;
     acts_p_avg_eff=0.05394999;
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   wt_save_fmt=TEXT;
   max_disp_size {x=58: y=59: z=2: };
   max_disp_size2d {x=94: y=100: };
   times {quarter=25: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=75: plus=25: total_cycles=100: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=1: };
   net_misc {spike=0: deep=0: bias_learn=0: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=1: recv_con_dwnorm=0: recv_unit_dwnorm=0: lay_gp_inhib=0: inhib_cons=0: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};
